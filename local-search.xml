<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Learning image aesthetic subjectivity from attribute-aware relational reasoning network</title>
    <link href="/2023/09/16/paper-Learning-image-aesthetic-subjectivity-from-attribute-aware-relational-reasoning-network/"/>
    <url>/2023/09/16/paper-Learning-image-aesthetic-subjectivity-from-attribute-aware-relational-reasoning-network/</url>
    
    <content type="html"><![CDATA[<p>该论文发表在（PRL）CCF C类</p><p>Pattern Recognition Letters 155 (2022) 84–91</p><p>Hancheng Zhu a,b, Yong Zhou a,b,∗, Rui Yao a,b, Guangcheng Wang c, Yuzhe Yang d </p><p>a：School of Computer Science and Technology, China University of Mining and Technology, Xuzhou 221116, China </p><p>b：Engineering Research Center of Mine Digitization, Ministry of Education of the People’s Republic of China, Xuzhou 221116, China </p><p>c ：School of Transportation and Civil Engineering, Nantong University, Nantong 226019, China d School of Electronics and Computer Science, University of Southampton, Southampton SO17 1BJ, United Kingdom</p><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1.Introduction"></a>1.Introduction</h2><p>​    现有的方法通常利用卷积神经网络( Convolutional Neural Networks，CNNs )将图像美学映射为两个典型的任务，即<strong>二分类[ 6 ]和分数回归[ 7 ]<strong>。</strong>然而，上述方法采用的单一标签并不能完整地描述不同人在图像中的主体性</strong>，</p><p>​    为了解决上述问题，一些工作试图<strong>利用可解释的美学属性</strong>来揭示影响人们对图像[ 13、14]的美学评分的线索。这些工作认为美学属性与图像美学密切相关，并直接利用美学属性来辅助图像美学评估任务[ 15 ]。然而，<strong>不同人对图像美学属性有各种各样的偏好</strong>，直接使用美学属性来学习不同人评分的图像美学分布可能存在问题。</p><p>例如，图1显示了来自AADB数据库的三幅图像和相应的十一个美学属性[ 13 ]。每张图片下方为5人对图片评分的美学分布和平均分,对图像进行美学评分(图1 ( a )、( b ) )。相反，图像中不明显的审美属性会导致人们的审美评价存在巨大差异(图1 ( c ) )。因此，图像中审美属性的多样性是导致人们对图像的审美感知具有不确定性的关键因素。为了充分利用美学属性对图像美学分布的影响机制，一个有效的解决方法是探索图像中多样化美学属性之间的隐含关系，以建模人们审美评分的主观性。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230916194353.png"></p><p>本文方法的主要贡献可归纳如下：</p><p>1.讨论了图像美学评价的主观性，分析了图像中美学属性之间的隐含关系对人们审美评价的影响。鉴于此，本文提出了一种基于属性感知关系推理网络的图像美学分布预测方法。</p><p>2.引入了一个有效的分布损失函数来优化所提出的模型，这可以增强模型对具有高不确定性的图像美学的学习效率，并提高我们预测图像美学分布的方法的性能。</p><p>3.提出了一个属性感知的关系推理网络来学习不同人评价的图像美学分布。在两个IAA数据库上的实验结果表明，我们的模型在学习图像美学主观性方面比最先进的模型具有更优越的性能。</p><h2 id="2-Related-Work"><a href="#2-Related-Work" class="headerlink" title="2.Related Work"></a>2.Related Work</h2><h3 id="Binary-classification"><a href="#Binary-classification" class="headerlink" title="Binary classification"></a>Binary classification</h3><p>摄影手工特征的提取：</p><p>早期的作品一般简单地将图像美学分为两类(高审美与低审美)。Datta等人[ 18 ]提取了一些与摄影规则相关的手工特征，如景深、颜色和构图，用于训练用于美学二分类的SVM模型。在[ 19 ]中，Tang等人将图像内容分为七类，并使用不同的策略来提取区域和全局手工特征，以评估图像美学。虽然这些方法可以利用基于摄影规则的手工特征来评估图像美学，但它们无法捕获能够全面表征图像美学的高级属性特征。</p><p>深度学习提取一些风格和语义属性：</p><p>随着深度学习[ 20 ]和大规模IAA数据库[ 21 ]的提出，例如，Lu等人[ 22 ]提出了一种美学分类方法，该方法可以利用CNN提取一些风格和语义属性，以进一步提高美学分类性能。Kao等人[ 23 ]提出了一种基于单任务网络的图像美学评价方法，利用语义属性识别来辅助图像美学分类任务。尽管美学二分类取得了重大进展，但这些方法不能定量地衡量人们对图像的美学评分。</p><h3 id="Score-regression"><a href="#Score-regression" class="headerlink" title="Score regression"></a>Score regression</h3><p>为了定量地评估人们对图像的美学评分，一些工作开始利用图像的平均评分作为目标进行回归建模。例如，Kong等人[ 13 ]引入了排序网络来联合学习自适应的图像属性和内容，用于图像美学分数回归。此外，Pan等人[ 14 ]提出了一种同时学习图像美学属性的多任务回归网络和美学评分，并引入判别器来加强所提出的多任务回归网络的学习能力。上述方法已经表明，审美属性的确对人们对图像的审美判断产生了巨大的影响。然而，由于视觉审美的主观性[ 12 ]，平均审美分数很难直观地反映人们对图像的审美评分。</p><h3 id="Distribution-prediction"><a href="#Distribution-prediction" class="headerlink" title="Distribution prediction"></a>Distribution prediction</h3><p>近年来，直接学习不同人评价的图像美学分布已成为IAA的研究热点。Talebi等人[ 8 ]使用预训练的深度网络将图像美学映射为评分分布，并使用EMD (推土机的距离)损失函数来优化所提出的深度模型。在[ 10 ]中，Li等人提出了一种多任务学习网络来构建美学分布模型，利用图像的个性属性来进一步提高模型的性能。She等人[ 11 ]使用图卷积网络提取布局感知特征来预测图像美学分布。</p><p>此外，Zeng等人[ 17 ]发现图像美学评估的三个任务具有内在联系，并提出了一个统一的概率公式来联合学习这三个IAA任务。这些方法主要利用提取的特征直接预测图像美学分布，但导致不同人对图像的美学评分存在不确定性的原因尚未被探索。此外，我们发现图像中的各种美学属性是影响人们对图像进行美学评价的关键因素。因此，利用图像审美属性之间的多样性关系来学习人们审美评价的主观性是可行的。</p><h2 id="3-Method"><a href="#3-Method" class="headerlink" title="3.Method"></a>3.Method</h2><p>为了利用美学属性的相关性来建模图像美学主观性，我们使用<strong>自注意力机制构建属性关系图来推断人们对图像的美学评分的不确定性</strong>。</p><p>具体来说，首先利用卷积神经网络( Convolutional Neural Network，CNN )通过学习图像的美学属性来生成属性感知特征图。然后，通过关系推理模块可以得到图像的属性关系图。最后，利用属性关系特征和全局特征共同学习不同人评价的图像美学分布。</p><p>Backbone</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230916200249.png"></p><h4 id="3-1-Generate-attribute-aware-feature-map"><a href="#3-1-Generate-attribute-aware-feature-map" class="headerlink" title="3.1. Generate attribute-aware feature map"></a>3.1. Generate attribute-aware feature map</h4><p>首先，使用在ImageNet [ 20 ]上预训练的CNN和一个1 × 1卷积来提取全局特征图Fg，其形式为Fg &#x3D; fθ ( x )</p><p>然后，通过以下1 × 1卷积生成11个通道的属性感知特征图Fa。这里为什么是11个通道是因为有11个美学属性。</p><p>此外，采用全局平均池化( GAP )和tanh激活函数将属性感知特征图Fa转换为图像的美学属性进行模型训练，定义为[da &#x3D; tanh ( GAP ( Fa ) )，其中，[da表示图像x的预测美学属性。</p><p>最后，我们使用Smooth l1损失来优化模型的属性预测分支,其形式为</p><p>La &#x3D; { 0.5 | ( ( da - da ))2，if | ( da | da | )</p><h4 id="3-2-Attribute-relational-reasoning"><a href="#3-2-Attribute-relational-reasoning" class="headerlink" title="3.2 Attribute relational reasoning"></a>3.2 Attribute relational reasoning</h4><p>探究审美属性对人们对图像不确定评分的影响因素，需要厘清不同审美属性之间的隐含关系。受自注意力机制[ 16 ]的启发，我们引入了关系推理模块来生成图像中各种美学属性的成对关系图。</p><p>假设D &#x3D;[ da1 , da2 , … , da11]∈R11 × L是由属性感知特征图重构而来，其中L等于W × H，W和H分别表示属性感知特征图Fa的宽度和高度。然后，我们计算每个属性感知特征da i ( i∈{ 1 , 2 , … , 11 })的成对关系，以捕获图像中不同美学属性之间的关系矩阵，可以表示为F ar &#x3D; DTD，( 4 )其中F ar∈R11 × 11表示11个美学属性的关系图。这样，通过提出的属性关系图Far可以揭示图像中审美属性的特定相关性</p><h4 id="3-3-Aesthetic-distribution-learning"><a href="#3-3-Aesthetic-distribution-learning" class="headerlink" title="3.3. Aesthetic distribution learning"></a>3.3. Aesthetic distribution learning</h4><p>我们首先利用全局平均池化(GAP)操作将全局特征图Fg转化为全局特征dg。令dar表示调整后的属性关系映射。</p><p>然后，得到映射美学分布的组合特征d, d &#x3D; [ dar , da , dg] ( 5 )</p><p>此外，使用全连接层和softmax激活函数来产生预测的美学分布( s )，定义为( s &#x3D; softmax ( Fc ( d ) )。( 6 )</p><p>假设s &#x3D; { s ( 1 )，s ( 2 )，..，s ( N ) }表示真实感美学分布，其中∑nN &#x3D; 1s ( n ) &#x3D; 1，N表示得分库的个数。对于AADB数据库[ 13 ]，N &#x3D; 5，对于AVA数据库[ 21 ]，N &#x3D; 10。类似于Talebi和Milanfar [ 8 ]，She et al [ 11 ]，我们使用EMD (推土机的距离)损失函数来优化我们的模型</p><p>LEMD &#x3D; ( 1N∑n &#x3D; 1 | CDFs ( n)-CDF ( s ( n ) | 2 ) 1 2，( 7 )</p><p>其中CDFs ( n ) &#x3D;∑nN &#x3D; 1 s ( n )表示累积分布函数.为了提高高不确定性样本的学习效率，我们进一步提出了一个融入了人们审美评分不确定性的分布损失函数，定义为Ls &#x3D; ( 1-N∑n &#x3D; 1s ( n)2 )※LEMD，( 8 )</p><p>其中1∑nN &#x3D; 1 s ( n ) 2表示图像审美分布的不确定性系数，其值越大，不确定性越高。在训练阶段，我们利用美学数据库中的训练样本，通过优化以下损失函数L &#x3D; Ls + La来训练所提出的模型。( 9 )</p><p>在测试阶段，训练好的模型可以直接预测人们对图像美学分布的评分d</p><h2 id="4-Experiment"><a href="#4-Experiment" class="headerlink" title="4.Experiment"></a>4.Experiment</h2><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230916213309.png"></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230916213324.png"></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230916213344.png"></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230916213433.png"></p><h2 id="5-Conclusion"><a href="#5-Conclusion" class="headerlink" title="5.Conclusion"></a>5.Conclusion</h2><p>在本文中，我们提出了一种基于属性感知关系推理网络的图像美学分布预测方法。为了学习人们对图像美学评分的不确定性，我们利用自注意力机制来捕获图像中美学属性之间的隐含关系。通过我们的方法得到的属性关系图已经被证明是影响人们对图像的美学评分的关键因素。<strong>通过加强对具有高度不确定性的图像美学的学习（同一张图五个人评分五个人的美学评分都不一样</strong>，我们的模型可以更准确地推断不同人感知的图像美学主观性。在两个典型的IAA数据库上的大量实验a结果和视觉分析表明，该方法在学习图像美感度方面是有效的</p><h2 id="6-个人感悟"><a href="#6-个人感悟" class="headerlink" title="6.个人感悟"></a>6.个人感悟</h2><ul><li>ResNet网络结构：</li></ul><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230916203359.png"></p><p><code>ResNet</code> 的各个变种，数据处理大致流程如下：</p><ul><li>输入的图片形状是 3×224×224。</li><li>图片经过 <code>conv1</code> 层，输出图片大小为 64×112×112。</li><li>图片经过 <code>max pool</code> 层，输出图片大小为 64×56×56。</li><li>图片经过 <code>conv2</code> 层，输出图片大小为 64×56×56。<strong>（注意，图片经过这个 <code>layer</code>, 大小是不变的）</strong></li><li>图片经过 <code>conv3</code> 层，输出图片大小为 128×28×28。</li><li>图片经过 <code>conv4</code> 层，输出图片大小为 256×14×14。</li><li>图片经过 <code>conv5</code> 层，输出图片大小为 512×7×7。</li><li>图片经过 <code>avg pool</code> 层，输出大小为 512×1×1。</li><li>图片经过 <code>fc</code> 层，输出维度为 num classes，表示每个分类的 <code>logits</code>。</li></ul><p>由于论文中ResNet-101输出是对ImageNet数据集进行1000分类，要对原网络进行微调：<strong>去掉原ResNet101后面的全局平均池化和全连接层，得到2048 x 1 x 1</strong></p><ul><li>1x1卷积和池化：</li></ul><p>1x1卷积和池化操作的本质是压缩feature mapping（输入层或者叫表示层），1x1卷积通过改变feature mapping（输入层或者叫表示层）的通道数量，具体操作是减少通道数量实现压缩；</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CV - image aesthetics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rethinking Image Aesthetics Assessment: Models, Datasets and Benchmarks</title>
    <link href="/2023/09/13/paper-Rethinking-Image-Aesthetics-Assessment-Models-Datasets-and-Benchmarks/"/>
    <url>/2023/09/13/paper-Rethinking-Image-Aesthetics-Assessment-Models-Datasets-and-Benchmarks/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><p>本文构建了一个名为”主题与美学数据集”的大规模数据集( TAD66K )，该数据集是专门为IAA设计的。</p><p>1 )它是一个面向主题的数据集，包含66K张图片，涵盖了47个流行主题。所有图片均根据主题手工精心挑选。</p><p>2 )除了共同的审美标准外，为47个主题提供了47个标准。每个主题的图像都是独立标注的，每个图像至少包含1200个有效标注(迄今为止最丰富的注释)。这些高质量的注释可以帮助我们更深入地了解模型的性能。</p><p>其次，提出了一个基线模型，称为主题和美学网络( TANet )，它可以保持对美学的恒定感知，以有效应对注意力分散问题。此外，TANet可以根据识别的主题自适应地学习预测美学的规则。</p><p>为了进一步提高对每个主题的感知，我们提出了一种RGB分布感知的注意力网络( RGBNet )，以帮助网络感知RGB空间中的颜色分布，并解决与标准注意力的高复杂度相关的问题。</p><p>此外，使用TAD66K和两个现有的数据集，即美学视觉分析( <strong>AVA</strong> ) [ Murray et al , 2012]和Flickr Images with Aesthetics Annotation Dataset (<strong>FLICKR-AES</strong> ) [任军等, 2017]，这两个数据集被广泛用于验证通用和个性化的美学模型，提供了17个最先进( SOTA )基准的严格评估，使这项工作成为迄今为止最完整的IAA基准。在上述所有基准上都取得了有希望的结果，清楚地表明了我们模型的有效性。</p><h2 id="2-Related-Work"><a href="#2-Related-Work" class="headerlink" title="2.Related Work"></a>2.Related Work</h2><h3 id="IAA-Datasets"><a href="#IAA-Datasets" class="headerlink" title="IAA Datasets"></a>IAA Datasets</h3><p>现有的几个数据集(表1 )，先前的研究直接从带有美学分数标注的图像中学习美学。然而，基于像素的元素不能包含任何抽象或主题信息。</p><p>​    人类潜意识给出的审美分数与主题相关，但现有的方法没有考虑或利用这一点。因此，现有的方法试图建立图像→美学映射，这违背了人类的视觉感知过程。</p><p>   这种映射方法在两个方面恶化了图像美学评价( IAA )：</p><p>1 )现有数据集的标注没有考虑不同主题具有不同的评分标准；此外，所有图像混合在一起，不加区分地进行评分，这给地面真值带来了相当大的噪声和误差。</p><p>2 )即使使用最先进的方法，直接从低级像素中学习，同时使用嘈杂的背景真值作为监督信息，使其难以有效地感知美学信息，并且这些方法对美学的理解不够强大，导致注意力分散。这些限制抑制了IAA的发育，目前尚不完全清楚。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230913231038.png"></p><h3 id="IAA-Model"><a href="#IAA-Model" class="headerlink" title="IAA Model"></a>IAA Model</h3><p>最近的证据表明，对美学分数的直接预测消除了人类观点[塔勒比和米兰法, 2018]的多样性(分布)。一些研究人员注意到了这一局限性，并提出使用地球移动距离( EMD )损失[塔勒比和米兰法, 2018]来训练分数分布任务，而另一些研究人员则尝试为个人偏好[任军等, 2017 ;吕越等, 2021]适配个性化美学模型。</p><p>然而，先前的工作忽略了主题信息的重要性，人类在评估美学时，显式或隐式地考虑了主题的影响；此外，仅依靠IAA数据集的弱监督信息并不足以理解美学(图2 )。在这项工作中，我们专注于寻找主题自适应的理解方法，并研究如何最好地使用它们来为IAA提供一个竞争性的模型。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230913232146.png"></p><h2 id="3-Method"><a href="#3-Method" class="headerlink" title="3. Method"></a>3. Method</h2><p>backbone</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230913234849.png"></p><h3 id="Theme-Understanding-Network"><a href="#Theme-Understanding-Network" class="headerlink" title="Theme Understanding Network"></a>Theme Understanding Network</h3><p>为了通过直接监督的方式提取主题特征，我们使用ResNet18作为主干网络，并在场景数据库[ Zhou et al . , 2017]上进行训练，取得了85.03 %的top - 5准确率。该场景库是一个1000万张标注了400 +个独特主题语义类别和环境的图像资源库，几乎涵盖了TAD66K数据集和日常生活中的主题。</p><p>为了防止在IAA模型训练过程中出现感知能力逐渐下降的情况</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230913232927.png"></p><p>我们将各个时刻的参数冻结。我们将S的输出定义为S ( x )，将其分为两个流进行处理。一个流被发送到参数生成器L1，自适应地生成θ主题(权重和偏差)：</p><p>θtheme &#x3D; L1(S(x), δ), 式中：δ表示L1的参数。</p><p>为了处理S ( x )中的噪声，另一个流被发送到特征预处理器L2，以减少潜在表示中的空间冗余。最后，我们使用一个线性层L3将两个流相乘得到最终的输出，整个过程可以表示为：</p><p>xtheme &#x3D; L3(L2(S(x)), θtheme).</p><p>因此，主题既包括基本的主题信息，也包括如何感知这些信息的规则。</p><h3 id="RGB-distribution-aware-Attention-Network"><a href="#RGB-distribution-aware-Attention-Network" class="headerlink" title="RGB-distribution-aware Attention Network"></a>RGB-distribution-aware Attention Network</h3><p>第二个模块：从RGB空间提取高层颜色特征，以提高对主题的理解，而<strong>标准的自注意力机制</strong>可以协调一个令牌和所有其他令牌的关系，故而可以借鉴用来捕捉颜色分布信息。颜色分布[ O ‘多诺万等, 2011]构成了美学的重要信息，与主题有着密切的关系。然而，对于IAA任务，颜色分布和相似性的原始信息存在于更接近原始图像的低级特征中，并且较大的特征图尺寸意味着有更多的标记；因此，全局计算复杂度为[ Liu et al , 2021]。</p><p>在我们的实现中，我们对标准的自注意力机制进行了两点改进。</p><p>我们首先将输入分割成互不重叠的块，其中每个块用一个中心点表示，并将其设置为原始像素RGB值的平均值。对于任意大小的图像，其块空间由k × k个中心点组成，这导致其对输入大小的计算复杂度为线性且较低。具体来说，我们设定k &#x3D; 12。</p><p>其次，我们只提取了块之间的关系，而没有将它们与输入相乘。设fab，fuv分别代表两个中心；那么，我们注意力的输出xrgb可以描述为：</p><p>xrgb &#x3D; ∥N l&#x3D;1  Softmax  L4( (Qlfab)T (Klfuv) √d ) </p><p>其中∥Nl &#x3D; 1是RGB通道的级联，Ql，Kl和d分别是查询，密钥和维度，由标准自注意力中的输入生成。在提取出这个关系后，我们不将其与值( V )相乘，而是将其发送到处理器L4之后的softmax层，以减少冗余信息，得到最终结果xrgb。因此，所提出的注意力机制赋予RGB空间对颜色相似性和分布的感知有意义的度量，如图6所示。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230913234505.png"></p><h3 id="Aesthetics-Perceiving-Network"><a href="#Aesthetics-Perceiving-Network" class="headerlink" title="Aesthetics Perceiving Network"></a>Aesthetics Perceiving Network</h3><p>第三个模块有两个功能。</p><p>首先，APNet直接从输入x中提取美学特征xaes；我们使用MobileNetV2作为主干网，输出结果由L5处理。</p><p>其次，融合三个特征预测一个美学分数，输出结果由L6处理。我们将整个过程描述为：p &#x3D; Faes( xtheme⊕xrgb⊕xaes , θ aes)，( 5 )其中，θ aes表示Faes的所有参数。</p><h2 id="4-Experiment"><a href="#4-Experiment" class="headerlink" title="4. Experiment"></a>4. Experiment</h2><p>消融实验，从APNet（Aesthetics Perceiving Network），也就是文章的第三个模块开始逐渐增加TUNet和RGBNet。</p><p>我们首先检验了TUNet的有效性(表5 )，其获得了+ 9.8 %的SRCC和+ 12.3 %的LCC，同时MSE损失降低了15.0 %。但TUNet需要提取主题特征，降低了模型的训练速度，为3.68 it &#x2F; s。</p><p>此外，加入RGBNet后，性能在SRCC和LCC上分别提升了+ 5.0 %和+ 4.6 %，MSE损失值降低了5.0 %。</p><p>此外，RGBNet模型中提出的注意力机制并没有显著降低网络的速度。我们还与标准的自注意力进行了对比测试，发现由于其过高的计算复杂度，不能以同样的方式正常工作，这表明提出的架构比传统的架构计算效率更高。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230913235521.png"></p><h2 id="5-Conclusion"><a href="#5-Conclusion" class="headerlink" title="5.Conclusion"></a>5.Conclusion</h2><p>本文讨论了IAA中主题变化的长期被忽视的影响。为了实现这一目标，我们创建了一个面向主题的TAD66K数据集(包含47个主题)，构建了一个完整的基准(包括排名前17位的SOTA模型)，并开发了一个名为TANet的基线模型。与现有的数据集相比，TAD66K更具有挑战性，注释更密集；此外，所提出的TANet引入自适应感知方法来提取主题特征，并在三个具有代表性的数据集上实现了SOTA性能。我们希望我们的贡献将激励社会各界重新思考IAA，并以更广阔的视角推动研究。</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CV - image aesthetics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lightweight Image Super-Resolution with Multi-Scale Feature Interaction Network</title>
    <link href="/2023/07/29/paper-Lightweight-Image-Super-Resolution-with-Multi-Scale-Feature-Interaction-Network/"/>
    <url>/2023/07/29/paper-Lightweight-Image-Super-Resolution-with-Multi-Scale-Feature-Interaction-Network/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1.Introduction"></a>1.Introduction</h2><p>发表在2021 IEEE（ICME）</p><p>据知乎说是毕业神会，两篇保博士毕业，CCF B</p><p>regular paper 的 正文 + 引用 &#x3D; 6页</p><p>2021 IEEE International Conference on Multimedia and Expo (ICME)</p><p>以往的卷积神经网络的方法需要消耗大量的算力，难以适用于一些存储和计算资源有限的移动设备。</p><p>本文提出一个轻量级的多尺度特征交互网络( MSFIN )，通过此网络可以实现不同尺度的低分辨率观测图像的信息特征的融合，另外本文设计了一个轻量级的循环残差通道注意力块( RRCAB )，使得网络在足够轻量级的同时，也能从通道注意力机制中获益。</p><p>在一些基准测试集上的大量实验已经证实，我们提出的MSFIN能够以更轻量级的模型实现与现有技术相当的性能。  </p><h2 id="2-Related-Work"><a href="#2-Related-Work" class="headerlink" title="2.Related Work"></a>2.Related Work</h2><h4 id="2-1-SISR任务中基于深度学习的方法："><a href="#2-1-SISR任务中基于深度学习的方法：" class="headerlink" title="2.1 SISR任务中基于深度学习的方法："></a>2.1 SISR任务中基于深度学习的方法：</h4><p>   Dong等[ 1 ]首次提出了一种三层卷积神经网络( SRCNN )用于端到端的图像超分辨率重建</p><p>   此后，许多深度超分辨率网络被提出，如VDSR [ 2 ]、MemNet [ 3 ]、LapSRN [ 4 ]、MSRN [ 5 ]等</p><p>SISR任务中注意力机制的方法：</p><h4 id="2-2-SISR任务中注意力机制："><a href="#2-2-SISR任务中注意力机制：" class="headerlink" title="2.2 SISR任务中注意力机制："></a>2.2 SISR任务中注意力机制：</h4><p>如今，注意力机制在计算机视觉任务中得到了广泛的应用。</p><p>Hu等人[ 6 ]提出了压缩激励网络( SENet )，利用通道之间的关系，在图像分类任务中取得了显著的性能提升。Zhang等[ 7 ]通过使用一些残差通道注意力块( RCAB )提出了所谓的残差通道注意力网络( RCAN )用于图像SR任务。 </p><h4 id="2-3-递归网络："><a href="#2-3-递归网络：" class="headerlink" title="2.3 递归网络："></a>2.3 递归网络：</h4><p>复杂而深入的SR模型可以提供显著的性能提升，但由于参数和计算量大，它们可能难以用于实际场景。特别是对于一些移动设备，其存储和计算资源有限。许多工作表明递归网络可以有效地减少参数的数量</p><p>例如，DRCN [ 8 ]和DRRN [ 9 ]采用递归机制进行参数共享。然而，简单地使用递归可以实现参数缩减，但会以性能下降为代价。</p><h3 id="2-4-注意力机制的残差多尺度模块："><a href="#2-4-注意力机制的残差多尺度模块：" class="headerlink" title="2.4 注意力机制的残差多尺度模块："></a>2.4 注意力机制的残差多尺度模块：</h3><p>为了解决在简单使用递归实现参数缩减时模型效果下降的问题，一个可选的解决方案是设计一些轻量级且有效的SR模型。Ahn等[ 10 ]提出了一种面向移动场景的级联残差网络( CARN-M )，以PSNR降低为代价来减少计算量。Hui等[ 11 ]设计了一种信息蒸馏网络( Information Distillation Network，IDN )，该网络使用通道拆分策略来聚合具有局部保留信息的当前信息。</p><p>随后，他们在IDN的基础上，进一步提出了高效的信息多蒸馏网络和自适应裁剪策略来进一步提升性能[ 12 ]。Lan等[ 13 ]提出了基于注意力机制的残差多尺度模块( MADNet )来加强模型的特征表示能力。</p><p>类似地，Li等[ 14 ]提出了一种轻量级的超分辨率网络( s-LWSR )来实现高效的SISR。</p><h2 id="3-Method"><a href="#3-Method" class="headerlink" title="3.Method"></a>3.Method</h2><p>以上方法会存在这样的问题：</p><p>1.残差通道注意力块( RCAB )会产生大量的参数，这些参数主要来自残差模块中的卷积层。</p><p>2.此外，在基于多尺度特征的方法中，信息特征从不同的尺度分别聚合生成最终的HR特征，它们之间的相互协作没有得到充分发挥。</p><p><strong>提出Multi-Scale Feature InteractionNetwork（ MSFIN）</strong></p><p>基于这些观察，为了利用图像特征并恢复更多的细节，我们提出了一种多尺度特征交互网络( MSFIN )，</p><p>它可以在性能和参数数量之间做出更好的权衡。</p><p><strong>backbone</strong>网络框架如下：</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230729200048.png"></p><p>RRCAB具体框架如下图：</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230729200139.png"></p><h2 id="4-Experiment"><a href="#4-Experiment" class="headerlink" title="4.Experiment"></a>4.Experiment</h2><p>与之前的工作[ 5、7、11、17]一样，本文使用DIV2K数据集[ 18 ]来训练模型，该数据集有800张高质量的RGB训练图像。通过双三次插值对高分辨率图像进行降采样，得到低分辨率图像。</p><p>为了增加训练数据集，随机旋转和翻转来自DIV2K的800张训练图像。本文设定小批量大小为16，从低分辨率图像中随机裁剪大小为48 × 48的低分辨率图像块作为输入。通过设置β 1 &#x3D; 0.9，β1 &#x3D; 0.999，ε &#x3D; 10 - 8使用ADAM优化器训练我们的模型。</p><p>学习率初始化为1 × 10-4，通过余弦退火将学习率降低到6.25 × 10 - 6。提出的SR网络是在PyTorch框架下实现的。 </p><p>为了测试，还使用了几个广泛使用的基准测试：Set5 [ 19 ]，Set14 [ 20 ]，BSDS100 [ 21 ]和Urban100 [ 22 ]。在现有工作的基础上，采用峰值信噪比( PSNR )和结构相似度( SSIM ) [ 23 ]两个指标来验证SR的性能，计算了YCBCR颜色空间的亮度通道上的性能指标 </p><p><strong>4.1 Comparisons of different feature interaction schemes</strong>不同交互方案的对比</p><p>在通道数为20，输入LR块大小为16 × 16的前提下，进行了以下实验，包括交互连接( IC ,如图1所示)、复杂交互连接( CIC ,在IC的基础上增加从3级到1级的交互连接)和无参交互连接（NS，交互连接中的反卷积不共享参数)。</p><p>从表1中，我们可以得到以下观察结果。首先，特征交互的使用可以通过仅添加少量参数来提高SR性能。其次，CIC操作导致参数数量增加，但性能提升不大。  </p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230729200734.png"></p><p><strong>4.2 Comparisons of different basic modules in RRCAB</strong></p><p>RRCAB中不同基础模块的比较</p><p>在这一部分，主要进行了一些实验来评估我们的基本RRCAB的有效性。</p><p>主要关注通道注意力( CA )、特征融合( FF , 1 × 1卷积后接第二组卷积,如图2所示)和通道混洗( CS )在分组卷积后的效果。</p><p>FF和CS主要用于对组卷积提取的特征进行融合和洗牌，以增强提取特征的表征能力。从表2可以看出，在参数增加不多的情况下，CA机制可以提高性能。FF机制只需要几个额外的参数就可以提高性能。这表明我们提出的RRCAB可以在一定程度上更好地平衡参数数量和性能。 </p><p><strong>4.3 Comparison with state-of-the-arts</strong></p><p>将这些方法按照参数个数小于600K和大于600K分为两组，主要在规模为4的SR任务上对这些方法进行评估。</p><p>如表3所示，本文模型在可接受的参数数量下实现了可比较的性能。</p><p>此外，图3给出了各SR模型在Set14和Urban100数据集上的可视化结果。这也证明了我们的SR模型的有效性。为了增强MSFIN的性能，参考RCAN，也采用了自集成增强机制，记为MSFIN - S +和MSFIN +。从表3可以看出，我们的MSFIN - S +和 MSFIN+在相同的参数范围内，MSFIN +几乎可以超过所有其他方法。 </p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230729200301.png"></p><h2 id="5-Conclusion"><a href="#5-Conclusion" class="headerlink" title="5.Conclusion"></a>5.Conclusion</h2><p>为了利用图像特征并恢复更多的细节，提出了一种多尺度特征交互网络( MSFIN )，它可以在性能和参数数量之间做出更好的权衡。</p><p>主要贡献可以总结如下：</p><p>( i )基于通道注意力机制，提出了一种轻量级的循环通道注意力块( RRCAB )用于轻量级图像超分辨率任务，可以在更小的内存消耗下提高重建图像的质量。</p><p>( ii )基于这些RRCAB，我们开发了多尺度特征交互模块，该模块可以充分利用来自不同尺度的信息特征和交互连接，以更好地恢复生成图像的细节。 </p><p>模型在DIV2K数据集[ 18 ]来训练模型，该数据集有800张高质量的RGB训练图像，并在Set5 [ 19 ]，Set14 [ 20 ]，BSDS100 [ 21 ]和Urban100 [ 22 ]做了基准测试，采用峰值信噪比( PSNR )和结构相似度( SSIM ) [ 23 ]两个指标来验证SR的性能。</p><h3 id="6-个人感悟"><a href="#6-个人感悟" class="headerlink" title="6. 个人感悟"></a>6. 个人感悟</h3>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CV</tag>
      
      <tag>Super-Resolution</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Designing a Practical Degradation Model for Deep Blind Image Super-Resolution</title>
    <link href="/2023/07/25/paper-Designing-a-Practical-Degradation-Model-for-Deep-Blind-Image-Super-Resolution/"/>
    <url>/2023/07/25/paper-Designing-a-Practical-Degradation-Model-for-Deep-Blind-Image-Super-Resolution/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><p>2021年发表在ICCV</p><p>代码：<a href="https://github.com/cszn/BSRGAN">https://github.com/cszn/BSRGAN</a></p><p>文章认为影响真实退化的主要因素有三个：模糊、降采样和噪声。</p><p>论文设计一个实用的退化模型，该模型使三个关键因素的退化空间尽可能大且符合实际，</p><p>来解决低分辨率的问题，</p><h2 id="2-Related-Work"><a href="#2-Related-Work" class="headerlink" title="2.Related Work"></a>2.Related Work</h2><p>bicubic and traditional degradation models 双三次和传统退化模型特点：</p><p>1.传统的退化模型通过采用模糊&#x2F;降采样&#x2F;加噪声来生成LR图像</p><p>2.传统退化模型的模糊核空间应该是跨尺度变化的，这使得在实际中很难确定非常大的尺度因子 </p><p>3.虽然双三次退化很少适用于真实的LR图像，但它可以用于数据增强，对于干净和尖锐的图像超分辨率确实是一个不错的选择</p><h2 id="3-Method"><a href="#3-Method" class="headerlink" title="3.Method"></a>3.Method</h2><p>退化模型：模糊、降采样、噪声和随机洗牌策略。 </p><h3 id="3-1-Blur"><a href="#3-1-Blur" class="headerlink" title="3.1 Blur"></a>3.1 Blur</h3><p>图像的模糊是一种常见的图像退化现象，对此本文提出从HR空间和LR空间对模糊进行建模。</p><p>扩展模糊的退化空间</p><p>对于高斯模糊核尺寸设置从{ 7 × 7，9 × 9，· · ·，21 × 21 }均匀采样，</p><p>各向同性高斯核分别从[ 0.1、2.4]和[ 0.1、2.8]均匀采样尺度因子2和4的核宽度，</p><p>各向异性高斯核分别从[ 0 , π]均匀采样旋转角度和从[ 0.5 , 6]和[ 0.5、8]均匀采样尺度因子2和4的各轴长度。</p><p>为了保证模糊输出的空间大小保持不变，采用反射填充。</p><p>由于宽度为0.1的各向同性高斯核对应于delta ( identity )核，因此我们始终可以应用这两种模糊操作。 </p><h3 id="3-2-Downsampling"><a href="#3-2-Downsampling" class="headerlink" title="3.2. Downsampling"></a>3.2. Downsampling</h3><p>通过二维线性网格插值法[ 28 ]将一个中心21 × 21的各向同性高斯核平移0.5 × ( s - 1)像素，并将其应用于最近邻降采样之前的卷积。高斯核宽度从[ 0.1、0.6 × s]中随机选取。我们将这样的降采样称为Dnsearest。此外，我们还采用了双三次和双线性降采样方法，分别用Ds双线性和Ds双三次表示。此外，还采用了先对图像进行尺度因子为s &#x2F; a的降采样，再进行尺度因子为a的升采样的从底向上采样方法Ds从底向上( &#x3D; Ds &#x2F; a down Duap)。这里插值方法从双线性和双三次插值中随机选取，a从[ 1 &#x2F; 2 , s]中采样。显然，上述4种降采样方法在HR空间存在模糊步长，而Ds从底向上在a小于1的情况下会在LR空间引入升尺度引起的模糊</p><h3 id="3-3-Noise"><a href="#3-3-Noise" class="headerlink" title="3.3 Noise"></a>3.3 Noise</h3><p>噪声在真实图像中普遍存在，因为它可以由不同的来源引起。</p><p>除了广泛使用的高斯噪声，本文的新退化模型还考虑了JPEG压缩噪声和相机传感器噪声。</p><p>1.高斯噪声NG。当没有关于噪声的信息时，高斯噪声假设是最保守的选择[ 40 ]。</p><p>为了合成高斯噪声，采用协方差矩阵为Σ的三维零均值高斯噪声模型N ( 0 ,∑) [ 39 ]。</p><p>这种噪声模型有两种特殊情况：当Σ &#x3D; σ2I，其中I为单位矩阵时，就变成了广泛使用的信道无关加性高斯白噪声( AWGN )模型；当Σ &#x3D; σ21，其中1是一个3 × 3矩阵，所有元素都等于1时，就变成了广泛使用的灰度AWGN模型。在我们的新退化模型中，我们总是加入高斯噪声进行数据合成。</p><p>特别地，将一般情形和两种特殊情形的概率分别设置为0.2、0.4、0.4。</p><p>对于σ，从{ 1 &#x2F; 255，2 &#x2F; 255，· · ·，25 &#x2F; 255 }中均匀采样。 </p><p>2.JPEG压缩噪声NJPEG。</p><p>JPEG是目前应用最广泛的用于降低带宽和存储的图像压缩标准。</p><p>然而，它引入了令人烦恼的8 × 8块效应&#x2F;噪声，特别是在高压缩的情况下。</p><p>压缩程度由品质因数决定，品质因数为[ 0、100]范围内的整数。</p><p>品质因数0表示低品质、高压缩，反之亦然。如果品质因数大于90，则不会引入明显的伪影。</p><p>在新的退化模型中，JPEG质量因子从[ 30,95]中统一选取。</p><p>由于JPEG是最流行的数字图像格式，因此我们采用了两个JPEG压缩步骤，概率分别为0.75和1。</p><p>特别地，后者被用作最终的退化步骤。 </p><p>3.处理后的相机传感器噪声NS</p><p>在现代数码相机中，输出图像是通过图像信号处理( Image Signal Processing，ISP )管道传递原始传感器数据得到的。</p><p>在实际应用中，如果ISP管道不执行去噪步骤，处理后的传感器噪声会通过引入非高斯噪声恶化输出图像[ 42 ]。</p><p>为了合成这种噪声，我们首先通过反向ISP管道从RGB图像中获得原始图像，然后在合成的原始图像中添加噪声后，通过正向管道重建含噪的RGB图像。原始图像噪声模型借鉴于文献[ 6 ]。</p><p>根据Adobe Digital Negative ( DNG )规范[ 1 ]，我们的正向ISP流水线包括去马赛克、曝光补偿、白平衡、相机到XYZ ( D50 )颜色空间转换、XYZ ( D50 )到线性RGB颜色空间转换、色调映射和伽马校正。 </p><h3 id="3-4-Random-Shuffle"><a href="#3-4-Random-Shuffle" class="headerlink" title="3.4 Random Shuffle"></a>3.4 Random Shuffle</h3><p>真实的低分辨率图像也可能是含噪、模糊、降采样和JPEG压缩的高分辨率图像，一幅低分辨率图像可以通过模糊、降采样和不同阶次的噪声进行退化，因此，本文提出了一种随机洗牌策略 </p><h2 id="4-Experiment"><a href="#4-Experiment" class="headerlink" title="4.Experiment"></a>4.Experiment</h2><p>LPIPS用于衡量感知质量，较低的LPIPS值意味着超分辨图像在感知上更接近于真实</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230725220959.png"></p><p>FSSR - JPEG、RealSR - DPED和RealSR - JPEG产生了一些高频伪影，但量化结果优于BSRNet。</p><p>这种不一致性表明这些无参考的IQA指标并不总是匹配感知视觉质量[ 30 ]，IQA指标可以通过新的SISR方法进行更新[ 15 ]。我们进一步认为，SISR的IQA度量也应该随着新的图像退化类型而更新，这将是我们留给未来的工作 </p><h2 id="5-Conclusion"><a href="#5-Conclusion" class="headerlink" title="5.Conclusion"></a>5.Conclusion</h2><p>通过使每个退化因素，即模糊、降采样和噪声，更加复杂和实用，并且通过引入随机洗牌策略，新的退化模型可以覆盖现实世界场景中发现的广泛的退化。</p><p>基于新退化模型生成的合成数据，训练了一个通用图像超分辨率的深度盲模型。</p><p>在合成和真实图像数据集上的实验表明，深度盲模型在受到不同程度退化的图像上表现良好。</p><p>我们相信，现有的深度超分辨率网络可以从我们的新退化模型中受益，以增强它们在实际中的有用性。</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CV</tag>
      
      <tag>Super-Resolution</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MAXIM Multi-Axis MLP for Image Processing</title>
    <link href="/2023/07/22/paper-MAXIM-Multi-Axis-MLP-for-Image-Processing/"/>
    <url>/2023/07/22/paper-MAXIM-Multi-Axis-MLP-for-Image-Processing/</url>
    
    <content type="html"><![CDATA[<h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h3><p>论文发表在2022CVPR</p><p>image processing tasks: including denoising, deblurring, deraining, dehazing, restoration,and enhancement </p><p>图像处理：降噪，去模糊，去雾，去雨，图像修复，图像增强。</p><p>中文视频讲解：（非常详细，有很多背景介绍，新手友好型）</p><p>youtu.be&#x2F;gpUrUJwZxRQ</p><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><ul><li>MLP</li></ul><p>全连接层和激活层来构造仿神经元的架构</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230722140522.png"></p><ul><li>Contribution<ol><li>A novel and generic architecture for image processing, named <strong>MAXIM</strong>.</li><li><strong>A multi-axis gated MLP</strong> module tailored for low-level vision tasks, which always enjoys a <strong>global receptive field with linear complexity</strong> relative to image size.</li><li><strong>A cross gating block</strong> that cross-conditions two separate features, which is also global fully convolutional.</li><li>Extensive experiments show that MAXIM achieves SOTA results on more than 10 datasets for 5 different restoration tasks.</li></ol></li></ul><h2 id="2-Related-Work"><a href="#2-Related-Work" class="headerlink" title="2.Related Work"></a>2.Related Work</h2><p>there remain challenges in adapting them for low-level vision. </p><p>ViT在high-level tasks表现很好，但是在low-level enhancement and restoration problems表现不是很好</p><p>low-level problems上前人的工作都基本引入了自注意力机制，它需要固定输入照片的大小，原始照片需要裁剪</p><p>Local-attention based Transformers基于局部注意力的变换器虽然改善了这一问题，但它们也被限制为感受野的大小有限，或者失去非局部性</p><h3 id="2-1-Why-MLP-Multi-Layer-Perceptron"><a href="#2-1-Why-MLP-Multi-Layer-Perceptron" class="headerlink" title="2.1 Why MLP(Multi-Layer Perceptron)?"></a>2.1 Why MLP(Multi-Layer Perceptron)?</h3><ul><li><p>MLP -&gt; Convolution(2012)</p><p>MLP把图像平坦化为一位向量，因为在图像块中是会有一定的关联性的，打成一维在此时就失去了位置信息，所以引入local 卷积核</p></li><li><p>Convolution-&gt; Transformer(2017)</p><p>图片要掌握全局信息，从local演化成global</p></li><li><p>Transformer-&gt; MLP?? (2021)</p><p>掌握全局信息计算复杂度太高</p></li></ul><h3 id="2-2-ViT"><a href="#2-2-ViT" class="headerlink" title="2.2 ViT"></a>2.2 ViT</h3><p>Vision transformer架构，纯self-attetion，不要卷积</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230722142255.png"></p><h3 id="2-3-MLP-Mixer"><a href="#2-3-MLP-Mixer" class="headerlink" title="2.3 MLP-Mixer"></a>2.3 MLP-Mixer</h3><p>减少计算量，不用self-attetion，用纯MLP来计算，效果稍逊ViT</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230722142428.png"></p><h3 id="2-4-gMLP"><a href="#2-4-gMLP" class="headerlink" title="2.4 gMLP"></a>2.4 gMLP</h3><p>在MLP-Mixer的基础上的改进，也是不用self-attetion</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230722142546.png"></p><h3 id="2-5-Computational-complexity-of-Transformer"><a href="#2-5-Computational-complexity-of-Transformer" class="headerlink" title="2.5 Computational complexity of Transformer"></a>2.5 Computational complexity of Transformer</h3><p>全局模型允许在输入的特征图上进行全局空间交互，即每个输出像素是由输入特征的每个点加权而来，需要 O(N) 次乘法（假设 N &#x3D; HW 为空间尺寸）。因此，输出整张大小为 N 的特征图需要 O(N^2) 次乘法操作，这即为注意力机制&#x2F;Transformer高计算复杂度的由来。但本质上来说，密集感受野的全局模型如 ViT, Mixer, gMLP 都具有平方计算复杂度。</p><p>这种没法Scaling up的平方算子是很难作为通用模块来广泛使用在各大视觉任务上的，例如需要在高分辨率上训练&#x2F;推理的目标检测，语义分割等，甚至对于几乎所有的底层视觉任务如去噪、去模糊、超分、去雨、去雾、去雪、去阴影、去摩尔、去反射、去水印、去马赛克等等等等。。。</p><p>虽然但是，不妨也直接用用！华为北大等联手打造的IPT模型第一次把ViT模型应用在多个底层视觉任务，刷新了各大榜单并发表在CVPR 2021[9][10]。</p><p>虽然性能很好，但IPT使用的全局注意力机制具有一些明显的局限性：</p><p>（1）需要大量数据预训练（如ImageNet）</p><p>（2）无法直接在高分辨率图片上进行推理。在实际推理时，往往需要对输入图像进行切块，分别对每个图像块进行推理，然后再进行拼接来还原大图。这种办法往往会导致输出图片中有一些明显的“块状效应”（如下图），同时推理速度也比较慢，限制了其实际落地和部署能力。</p><h3 id="2-6-HiT"><a href="#2-6-HiT" class="headerlink" title="2.6 HiT"></a>2.6 HiT</h3><p>一个block同时涵盖local和global信息，分成channel维度，一半的部分做global，一半的部分做local，</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230722143318.png"></p><h2 id="3-Method"><a href="#3-Method" class="headerlink" title="3. Method"></a>3. Method</h2><p>The main properties of MAXIM </p><ul><li>利用线性复杂度获得全局的感受野</li><li>解决input图像的大小是固定的</li><li>同时掌握global和local信息</li></ul><p>The backbone of MAXIM</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230722144808.png"></p><ul><li>Multi-Axis gated MLP block</li></ul><p>Complexity analysis</p><p>The computational complexity of our proposed Multi-Axis gMLP block (MAB) is: </p><p>Ω(MAB) &#x3D; d^2 HWC(Global gMLP) + b^2 HWC(Local gMLP) + 10HW C^2(Dense layers )</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230722145129.png"></p><ul><li>Cross-gating MLP Block</li></ul><h2 id="4-Experiment"><a href="#4-Experiment" class="headerlink" title="4. Experiment"></a>4. Experiment</h2><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230722145803.png"></p><h2 id="5-Conclusion"><a href="#5-Conclusion" class="headerlink" title="5.Conclusion"></a>5.Conclusion</h2><p> MAXIM, inspired by recently popular MLP-based global models</p><p>1.A novel and generic architecture for image processing, dubbed MAXIM, using a stack of encoder-decoder backbones, supervised by a multi-scale, multi-stage loss. </p><p>2.A multi-axis gated MLP module tailored for low-level vision tasks, which always enjoys a global receptive field, with <strong>linear complexity</strong> relative to image size. </p><p>3.A cross gating block that cross-conditions two separate features, which is also global and fully-convolutional. </p><p>4.Extensive experiments show that MAXIM achieves SOTA results on more than 10 datasets including denoising, deblurring, deraining, dehazing, and enhancement.</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A ConvNet for the 2020s</title>
    <link href="/2023/07/22/paper-A-ConvNet-for-the-2020s/"/>
    <url>/2023/07/22/paper-A-ConvNet-for-the-2020s/</url>
    
    <content type="html"><![CDATA[<p>论文发表在2022CVPR</p><p>代码：<a href="https://github.com/YUTING0907/SubscribePapers/blob/main/papers/cvpr/cvpr2022.md">https://github.com/YUTING0907/SubscribePapers/blob/main/papers/cvpr/cvpr2022.md</a></p><p>A ConvNet for the 2020s</p><p>ConvNeXts由传统的卷积层(ConvNets)组合成的模型，在ImageNet上得到了 top-1 accuracy，87.8% 超过了Transformers，在COCO detection and ADE20K segmentation任务上优于 Swin Transformers 。引发人们重新思考卷积在计算机视觉领域的重要性。</p><h2 id="1-ConvNeXt的进化路径"><a href="#1-ConvNeXt的进化路径" class="headerlink" title="1. ConvNeXt的进化路径"></a>1. ConvNeXt的进化路径</h2><p>图1概括了ConvNeXt的所有优化点，它从ResNet-50[4]或者ResNet-200出发，依次从宏观设计，深度可分离卷积（ResNeXt[5]），逆瓶颈层（MobileNet v2[6]），大卷积核，细节设计这五个角度依次借鉴Swin Transformer的思想，然后在ImageNet-1K上进行训练和评估，最终得到ConvNeXt的核心结构。</p><h3 id="1-1-训练方式"><a href="#1-1-训练方式" class="headerlink" title="1.1 训练方式"></a>1.1 训练方式</h3><p>在介绍ConvNeXt的结构优化之前，我们先简单介绍一下ConvNeXt的训练方法。我们知道ResNet-50在ImageNet-1k上最终的Top-1的准确率是76.1%，而图1中ResNet-50说的是78.8%，而这2.7%的准确率的提升正是依靠对训练策略的优化所达到的。</p><p>在ConvNeXt中，它的优化策略借鉴了Swin-Transformer。具体的优化策略包括：（1）将训练Epoch数从90增加到300；（2）优化器从SGD改为AdamW；（3）更复杂的数据扩充策略，包括Mixup，CutMix，RandAugment，Random Erasing等；（4）增加正则策略，例如随机深度[7]，标签平滑[8]，EMA[9]等。更具体的预训练和微调的超参数如图2。</p><h3 id="1-2-宏观设计"><a href="#1-2-宏观设计" class="headerlink" title="1.2 宏观设计"></a>1.2 宏观设计</h3><h3 id="1-2-1-每个阶段的计算占比（Stage-Ratio）"><a href="#1-2-1-每个阶段的计算占比（Stage-Ratio）" class="headerlink" title="1.2.1 每个阶段的计算占比（Stage Ratio）"></a>1.2.1 每个阶段的计算占比（Stage Ratio）</h3><p>VGG提出了把骨干网络分成若干个网络块的结构，每个网络块通过池化操作将Feature Map降采样到不同的尺寸。在VGG中，每个网络块的网络层的数量基本是相同，但在之后的很多工作中，他们指出当深层的网络块层数更多时，模型的表现更好。例如，ResNet-50中共有4个不同的网络块，每个网络块又有若干个不同的基础层，一般是由卷积，BN等操作组成，它的每个网络块的层数是 (3,4,6,3) 。</p><p>在Swin-Transformer中，每个骨干网络被分成了4个不同的Stage，每个Stage又是由若干个Block组成，在Swin-Transformer中，这个Block的比例是 1:1:3:1 ，而对于更大的模型来说，这个比例是 1:1:9:1 。ConvNeXt的改进是将ResNet-50的每个Stage的block的比例调整到 1:1:3:1 ，最终得到的block数是 (3,3,9,3) 。从图1中可以看出这个改进将ResNet-50的准确率从78.8%提升至79.4%。注意这里模型的GFLOPs从4.1增加至4.5，这0.6%的准确率的提升也有一部分功劳要归功于模型参数量的增加。此外ConvNeXt还提供了更大的block数为 (3,3,27,3) 的模型。</p><h3 id="1-2-2-Patchify-Stem"><a href="#1-2-2-Patchify-Stem" class="headerlink" title="1.2.2 Patchify Stem"></a>1.2.2 Patchify Stem</h3><p>对于ImageNet数据集，我们通常采用 224×224 的输入尺寸，这个尺寸对于ViT等基于Transformer的模型来说是非常大的，它们通常使用一个步长为4，大小也为4的卷积将其尺寸降采样到 56×56 。因为这个卷积的步长和大小是完全相同的，所以它又是一个无覆盖的卷积，或者叫Patchify（补丁化）的卷积。这一部分在Swin-Transformer中叫做stem层，它是位于输入之后的一个降采样层。</p><p>在ConvNeXt中，Stem层也是一个步长为4，大小也为4的卷积操作，这一操作将准确率从79.4%提升至79.5%，GFLOPs从4.5降到4.4%。也有人指出使用覆盖的卷积（例如步长为4，卷积核大小为7的卷积）能够获得更好的表现。</p><h3 id="1-2-3-分组卷积"><a href="#1-2-3-分组卷积" class="headerlink" title="1.2.3 分组卷积"></a>1.2.3 分组卷积</h3><p>在轻量级模型中，我们介绍了深度可分离卷积，它们将 3×3 卷积以通道为单位进行运算（深度卷积），然后再通过 1×1 卷积进行通道融合（点卷积）。而ResNeXt是一个更折中的方案，它通过分组卷积（将通道分组，然后以组为单位进行卷积）的方式来提升模型的计算速度。与之类似的是，Swin-Tranformer的Self-Attention也是以通道为单位的运算单元，不同的是可分离卷积是可学习的卷积核，Self-Attention是根据数据动态计算的权值。</p><p>在ConvNeXt中，也引入了分组卷积的思想。它将 3×3 卷积替换成了 3×3 的分组卷积，这个操作将GFLOPs从4.4降到了2.4，但是它也将准确率从79.5%降到了78.3%。为了弥补准确率的下降，它将ResNet-50的基础通道数从64增加至96。这个操作将GFLOPs增加到了5.3，但是准确率提升到了80.5%。</p><h3 id="1-2-3-逆瓶颈层"><a href="#1-2-3-逆瓶颈层" class="headerlink" title="1.2.3 逆瓶颈层"></a>1.2.3 逆瓶颈层</h3><p>瓶颈层是一个中间小，两头大的结构，最早在残差网络中被使用。而在MobileNet v2中则使用了一个中间大，两头小的结构，他们认为这个结构能够有效的避免信息流失。之后的 Transformer本质也是一个逆瓶颈层的架构，在Transformer中，Self-Attention的隐层节点数是512，而中间的全连接的隐层节点数是2048。这里的ConvNeXt也是使用了逆瓶颈层的结构，如图3.(a)和图3.(b)所示。这个策略将准确率提升至85.6%，GFLOPs降低至4.6。</p><p>在后续的工作中，作者尝试了使用更大的卷积核。为了适应更大的卷积核，作者将卷积的图3.(b)的深度卷积向上移动了一层，如图3.(c)。此操作将准确率降低到了79.9%，但是GFLOPS也下降到了4.1%。</p><p>1.3 更大卷积核</p><p>大卷积核是一个比较古老的卷积运算参数，上次看见这些大卷积核还是在AlexNet，VGG等这些上古网络中。当时使用小卷积核替代大卷积核，一个重要的原因是一个大卷积核（ 5×5 卷积）和两层的小卷积核（ 3×3 卷积）在拥有相同感受野的情况下，表现是比两层小卷积核略差的。在Swin-Transformer中，它们使用的是 7×7 自注意力窗口本质上也是一个大的计算窗口，因此这里作者也对大的卷积核重新进行了对照实验。</p><p>在ConvNeXt的实验中，它们尝试了 5×5 ， 7×7 ， 9×9 和 11×11 共4个不同尺寸的卷积操作。从图1的实验结果来看， 7×7 卷积操作的效果最好。它将模型的准确率提升至80.6%，GFLOPs些许增加至4.2。并且从这个实验结果中可以看出，大卷积核对模型速度的影响并不很大，这可能是得益于当前深度学习框架以及硬件对大卷积核的支持更友好。</p><h3 id="1-4-细节优化"><a href="#1-4-细节优化" class="headerlink" title="1.4 细节优化"></a>1.4 细节优化</h3><h3 id="1-4-1-ReLU替换为GELU"><a href="#1-4-1-ReLU替换为GELU" class="headerlink" title="1.4.1 ReLU替换为GELU"></a>1.4.1 ReLU替换为GELU</h3><p>ReLU是比较早期的激活函数，近年来更多的模型选择使用GELU[11]作为激活函数，例如ConvNeXt要对齐的Swin Transformer。在ConvNeXt的实验中，GELU并没有提升模型的准确率和效率。但是为了对齐其它指标，ConvNeXt还是选择了GELU作为激活函数。</p><h3 id="1-4-2-更少的激活函数"><a href="#1-4-2-更少的激活函数" class="headerlink" title="1.4.2 更少的激活函数"></a>1.4.2 更少的激活函数</h3><p>在以往的卷积网络中，我们倾向于为每一个卷积操作都添加一个激活函数，但Transformer使用了更少的激活函数，Transformer是由一个自注意力层和两个MLP组成，但它仅在一个MLP上使用了激活函数。</p><p>ConvNeXt也借鉴了Transformer的思想，它仅在两个 1×1 卷积之间添加了一个GELU激活函数。实验结果表明这个操作将准确率从80.6%提升至81.3%。</p><h3 id="1-4-3-更少的归一化层"><a href="#1-4-3-更少的归一化层" class="headerlink" title="1.4.3 更少的归一化层"></a>1.4.3 更少的归一化层</h3><p>Transformer也是一个归一化层使用的非常少的网络结构，因此在ConvNeXt中也使用了更少的归一化操作，它仅在第一个 1×1 卷积之前添加了一个BN，而更多的归一化操作对模型效果提升并没有帮助。通过这个操作将模型的准确率提升至81.4%。</p><h3 id="1-4-4-BN替换为LN"><a href="#1-4-4-BN替换为LN" class="headerlink" title="1.4.4 BN替换为LN"></a>1.4.4 BN替换为LN</h3><p>根据我们之前的经验，BN[12]经常被用在CNN中，而LN[13]通常是用来解决BN在样本量过少的时候归一化统计量偏差过大的问题的。也有实验结果表明，如果将残差网络中的BN直接替换为LN的话，模型的性能反而会下降。</p><p>但是在ConvNeXt中，因为之前作者做了若干个将卷积网络向Transformer的改进，因此这里也尝试了将ConvNeXt中的BN替换为LN，令人意外的是，LN在ConvNeXt中要比BN表现的好，它将模型的准确率提升至81.5%。</p><p>因为上述改进都是非常小的点的优化，对模型的速度影响并不大，因此ConvNeXt的GFLOPs维持在了4.2没变。上述的所有改进如下面代码片段所示。注意下面的代码中的 1×1 卷积使用的是线性层来实现的。</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度学习GPU和CUDA配置</title>
    <link href="/2023/07/11/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0GPU%E5%92%8CCUDA%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/07/11/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0GPU%E5%92%8CCUDA%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><h4 id="😊Anaconda"><a href="#😊Anaconda" class="headerlink" title="😊Anaconda"></a>😊Anaconda</h4><p>管理python环境，可以做到环境隔离，避免依赖冲突等问题</p><ol><li>创建一个虚拟环境（比如叫tuduipytorch)</li></ol><p>​        conda  create –n  虚拟环境名字  python&#x3D;版本</p><ol start="2"><li><p>添加镜像加速 </p><p>conda create –n 虚拟环境名字 python&#x3D;版本 –c 镜像地址</p></li><li><p>删除虚拟环境</p><p>conda  remove  –n 虚拟环境名字 –all</p></li></ol><table><thead><tr><th>镜像名</th><th>用于创建环境镜像地址</th></tr></thead><tbody><tr><td>清华镜像</td><td><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</a></td></tr><tr><td>北京外国语大学镜像</td><td><a href="https://mirrors.bfsu.edu.cn/anaconda/pkgs/main">https://mirrors.bfsu.edu.cn/anaconda/pkgs/main</a></td></tr><tr><td>阿里巴巴镜像</td><td><a href="http://mirrors.aliyun.com/anaconda/pkgs/main">http://mirrors.aliyun.com/anaconda/pkgs/main</a></td></tr></tbody></table><p>持久添加通道：</p><p>conda config –add channels 通道地址 </p><p>删除通道：conda config –remove channels 通道地址</p><p>如何查看配置文件中有哪些通道？</p><p>conda  config –get </p><p>conda  config –show</p><h4 id="😊显卡GPU，驱动"><a href="#😊显卡GPU，驱动" class="headerlink" title="😊显卡GPU，驱动"></a>😊显卡GPU，驱动</h4><ul><li><p>GPU (Graphics Processing Unit)</p></li><li><p>显卡，主要就是用于在屏幕上显示图像。用于与视频，图像处理相关的任务。</p></li><li><p>驱动：让计算机识别特定的硬件。</p></li></ul><h4 id="😊深度学习显卡，CUDA"><a href="#😊深度学习显卡，CUDA" class="headerlink" title="😊深度学习显卡，CUDA"></a>😊深度学习显卡，CUDA</h4><ul><li>深度学习显卡，英伟达品牌的显卡。NVIDIA</li><li>有了CUDA，我们就可以操作英伟达品牌的显卡</li></ul><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230712003441.png"></p><hr><h3 id="Windows下安装PyTorch-GPU版本-流程"><a href="#Windows下安装PyTorch-GPU版本-流程" class="headerlink" title="Windows下安装PyTorch(GPU版本)流程"></a>Windows下安装PyTorch(GPU版本)流程</h3><h4 id="1-确定自己的硬件信息–确定电脑有英伟达（NVIDIA）显卡"><a href="#1-确定自己的硬件信息–确定电脑有英伟达（NVIDIA）显卡" class="headerlink" title="1.确定自己的硬件信息–确定电脑有英伟达（NVIDIA）显卡"></a>1.确定自己的硬件信息–确定电脑有英伟达（NVIDIA）显卡</h4><ul><li>检查任务管理器–如果GPU中带有NVIDIA字眼，说明有NVIDIA GPU</li><li>你觉得你有，但任务管理器上没有–有可能是你没装驱动</li></ul><h4 id="2-下载安装Anaconda"><a href="#2-下载安装Anaconda" class="headerlink" title="2.下载安装Anaconda"></a>2.下载安装Anaconda</h4><p>   官网<a href="https://www.anaconda.com/">https://www.anaconda.com/</a></p><p>   选择Products -&gt; Anaconda Distribution</p><p>   点击Download，可以下载最新版本 </p><p>​    <a href="https://repo.anaconda.com/archive/">https://repo.anaconda.com/archive/</a> 可以下载到历史版本  </p><p>​    安装路径最好全英文</p><h4 id="3-利用conda或者pip安装PyTorch（坑最多的）"><a href="#3-利用conda或者pip安装PyTorch（坑最多的）" class="headerlink" title="3.利用conda或者pip安装PyTorch（坑最多的）"></a>3.利用conda或者pip安装PyTorch（坑最多的）</h4><ul><li><p>确定自己安装的CUDA版本与GPU关系</p><p> 首先， <strong>确定自己的显卡型号</strong>，确定自己显卡的算力，</p><p> 再，下载显卡驱动程序，确定<strong>CUDA Driver</strong>的版本 </p><p> 最后，确定自己的可选择<strong>CUDA Runtime Version</strong></p><p> PS：确保自己的<strong>CUDA Driver版本</strong>&gt;&#x3D; CUDA Runtime版本</p></li><li><p>安装GPU版本PyTorch</p></li></ul><p>简单操作</p><p>1.确定显卡型号 RTX 2060</p><p>   确定显卡算力7.5</p><p>   <a href="https://en.wikipedia.org/wiki/CUDA">https://en.wikipedia.org/wiki/CUDA</a></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230712000609.png"></p><p>  安装显卡驱动最新版本-<a href="https://www.nvidia.cn/Download/index.aspx?lang=cn">https://www.nvidia.cn/Download/index.aspx?lang=cn</a></p><p>2.打开命令窗口，输入nvidia-smi来确定cuda driver的版本（我的是12.0）</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230712005227.png"></p><p>3.确定CUDA Runtime版本</p><p>  以下图来自wikipedia，假设7.5的算力，则对应的最大的CUDA SDK version为10.0 - 10.2，也可以是11.0，11.1-11.4往上包含7.5的算力即可，确保CUDA Driver版本（nvidia-smi查看的12.0）&gt;&#x3D; CUDA Runtime版本，</p><p>最终我们确定适用CUDA 10.0，11.0，—12.0</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230712001505.png"></p><p>4.安装GPU版本PyTorch，去pytorch网站上找对应的包</p><p><a href="https://pytorch.org/get-started/previous-versions/">https://pytorch.org/get-started/previous-versions/</a></p><p>例如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># CUDA 11.3</span><br><span class="hljs-attribute">conda</span> install pytorch==<span class="hljs-number">1</span>.<span class="hljs-number">11</span>.<span class="hljs-number">0</span> torchvision==<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span> torchaudio==<span class="hljs-number">0</span>.<span class="hljs-number">11</span>.<span class="hljs-number">0</span> cudatoolkit=<span class="hljs-number">11</span>.<span class="hljs-number">3</span> -c pytorch<br></code></pre></td></tr></table></figure><h4 id="4-下载安装-x2F-配置PyCharm"><a href="#4-下载安装-x2F-配置PyCharm" class="headerlink" title="4.下载安装&#x2F;配置PyCharm"></a>4.下载安装&#x2F;配置PyCharm</h4><p>略</p><hr><h4 id="验证pytorch是否成功"><a href="#验证pytorch是否成功" class="headerlink" title="验证pytorch是否成功"></a>验证pytorch是否成功</h4><p>1.激活对应的虚拟环境（你安装Pytorch的虚拟环境）conda activate虚拟环境名</p><p>2.输入condalist，看有没有pytorch或者torch</p><p>3.输入python</p><p>4.输入import torch</p><p>5.输入torch.cuda.is_available()</p><p>6.如果显示True，就说明我们这个PyTorch安装成功了</p><p>参考：b站 小土堆</p>]]></content>
    
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>postman传入复杂参数</title>
    <link href="/2023/06/25/postman%E4%BC%A0%E5%85%A5%E5%A4%8D%E6%9D%82%E5%8F%82%E6%95%B0/"/>
    <url>/2023/06/25/postman%E4%BC%A0%E5%85%A5%E5%A4%8D%E6%9D%82%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="一、五种类型参数传递"><a href="#一、五种类型参数传递" class="headerlink" title="一、五种类型参数传递"></a>一、五种类型参数传递</h3><p>1.普通参数</p><p>2.POJO类型参数</p><p>3.嵌套POJO类型参数</p><p>4.数组类型参数</p><h4 id="1-1普通参数"><a href="#1-1普通参数" class="headerlink" title="1.1普通参数"></a>1.1普通参数</h4><p>普通参数:url地址传参，地址参数名与形参变量名相同，定义形参即可接收参数。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230625203409.png"></p><p>如果形参与地址参数名不一致该如何解决?</p><p>发送请求与参数:</p><p><code>http://localhost/commonParamDifferentName?name=张三&amp;age=18</code></p><p>后台接收参数:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/commonParamDifferentName&quot;</span>)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String commonParamDifferentName(String userName , int age)&#123;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;普通参数传递 userName ==&gt; &quot;</span>+userName);<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;普通参数传递 age ==&gt; &quot;</span>+age);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;common param different name&#x27;&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>解决方案:使用@RequestParam注解</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/commonParamDifferentName&quot;</span>)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String commonParamDifferentName(<span class="hljs-meta">@RequestParam(<span class="hljs-string">&quot;name&quot;</span>)</span> String userName , int age)&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;普通参数传递 userName ==&gt; &quot;</span>+userName);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;普通参数传递 age ==&gt; &quot;</span>+age);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;common param different name&#x27;&#125;&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-POJO类型参数"><a href="#1-2-POJO类型参数" class="headerlink" title="1.2 POJO类型参数"></a>1.2 POJO类型参数</h3><p>简单数据类型一般处理的是参数个数比较少的请求，如果参数比较多，那么后台接收参数的时候就比较复杂，这个时候我们可以考虑使用POJO数据类型。</p><ul><li><p>POJO参数：请求参数名与形参对象属性名相同，定义POJO类型形参即可接收参数</p></li><li><p>此时需要使用前面准备好的POJO类，先来看下User</p><p>public class User {<br>private String name;<br>private int age;<br>&#x2F;&#x2F;setter…getter…略<br>}</p></li></ul><p><strong>发送请求和参数:</strong></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230625203725.png"></p><p><strong>后台接收参数:</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//POJO参数：请求参数与形参对象中的属性对应即可完成参数传递</span><br><span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/pojoParam&quot;</span>)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String pojoParam(User user)&#123;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;pojo参数传递 user ==&gt; &quot;</span>+user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;pojo param&#x27;&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意:</strong></p><p>POJO参数接收，前端GET和POST发送请求数据的方式不变。</p><p>请求参数key的名称要和POJO中属性的名称一致，否则无法封装。</p><h3 id="2-3-嵌套POJO类型参数"><a href="#2-3-嵌套POJO类型参数" class="headerlink" title="2.3 嵌套POJO类型参数"></a>2.3 嵌套POJO类型参数</h3><p>如果POJO对象中嵌套了其他的POJO类，如</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs smali">--CDCSyncTableDto<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span> class CDCSyncTableDto  &#123;  <span class="hljs-keyword"></span><br><span class="hljs-keyword">private</span> String taskType;   <span class="hljs-keyword"></span><br><span class="hljs-keyword">private</span> CDCSyncTableDetail cdcSyncTable;   <span class="hljs-keyword"></span><br><span class="hljs-keyword">private</span> CDCSyncTableHistoryDetail cdcSyncHisTable; <span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span> CDCSyncTableDto()&#123;&#125;   <br><br>&#125;<br><br>--CDCSyncTableDetail<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span> class CDCSyncTableDetail implements Serializable &#123;<br> <span class="hljs-keyword"> private</span><span class="hljs-built_in"> int </span>id;<br><span class="hljs-keyword">private</span> String sourceDb;<br><span class="hljs-keyword">private</span> String sourceTableName;<br> <span class="hljs-keyword"> private</span> String sinkDb;<br> <span class="hljs-keyword"> private</span> String sinkTableName;<br><span class="hljs-keyword">  .</span>..<br> <span class="hljs-keyword"> public</span> CDCSyncTableDetail() &#123;     &#125;<br><br>&#125;<br><br>--CDCSyncTableHistoryDetail<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span> class CDCSyncTableHistoryDetail &#123;  <br> <span class="hljs-keyword"> private</span><span class="hljs-built_in"> int </span>id;<br> <span class="hljs-keyword"> private</span> String sourceDb;  <br> <span class="hljs-keyword"> private</span> String sourceTableName;<br> <span class="hljs-keyword"> private</span> String sinkDb; <br> <span class="hljs-keyword"> private</span> String sinkTableName;    <br> <span class="hljs-keyword"> private</span> String addColumns;    <br> <span class="hljs-keyword"> private</span> String secretColumns;    <br> <span class="hljs-keyword"> private</span><span class="hljs-built_in"> int </span>checkInterval;   <br> <span class="hljs-keyword"> private</span><span class="hljs-built_in"> int </span>maxRetries;    <br> <span class="hljs-keyword"> private</span><span class="hljs-built_in"> int </span>bufferSize;    <br> <span class="hljs-keyword"> private</span><span class="hljs-built_in"> int </span>bufferCount;    <br> <span class="hljs-keyword"> private</span><span class="hljs-built_in"> int </span>sysStatus;    <br> <span class="hljs-keyword"> private</span> String jobName;    <br> <span class="hljs-keyword"> private</span> String createTime;    <br> <span class="hljs-keyword"> private</span> String updateTime;<br>&#125;<br></code></pre></td></tr></table></figure><p>嵌套POJO参数：请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套POJO属性参数</p><p>发送请求和参数:</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230625183325.png"></p><p><strong>后台接收参数:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value = &quot;updateSyncTable&quot;, notes = &quot;UPDATE_SYNC_TABLE_NOTES&quot;)</span><br><span class="hljs-meta">@PostMapping(value = &quot;/update&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@ResponseStatus(HttpStatus.OK)</span><br><span class="hljs-meta">@ApiException(FLINK_UPDATE_SYNC_TABLE_ERROR)</span><br><span class="hljs-meta">@AccessLogAnnotation(ignoreRequestArgs = &quot;loginUser&quot;)</span><br><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">updateTable</span><span class="hljs-params">(<span class="hljs-meta">@ApiIgnore</span> <span class="hljs-meta">@RequestAttribute(value = Constants.SESSION_USER)</span> User loginUser,                              </span><br><span class="hljs-params">CDCSyncTableDto cDCSyncTableDto )</span> &#123;    <br>Map&lt;String, Object&gt; result = <span class="hljs-literal">null</span>;  <br><span class="hljs-keyword">if</span>(cDCSyncTableDto.getTaskType().equals(<span class="hljs-string">&quot;all&quot;</span>) || cDCSyncTableDto.getTaskType().equals(<span class="hljs-string">&quot;inc&quot;</span>))&#123;  <br>result = cDCSyncTableDetailService.updateTable(loginUser,cDCSyncTableDto); <br>&#125;  <br><span class="hljs-keyword">return</span> returnDataList(result);<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>注意:</strong></p><p>请求参数key的名称要和POJO中属性的名称一致，否则无法封装</p><h4 id="2-4-传入pojo对象，其中嵌套List-lt-对象-gt-，这种可以采用postman的body的-raw-JSON传参："><a href="#2-4-传入pojo对象，其中嵌套List-lt-对象-gt-，这种可以采用postman的body的-raw-JSON传参：" class="headerlink" title="2.4 传入pojo对象，其中嵌套List&lt;对象&gt;，这种可以采用postman的body的 raw- JSON传参："></a>2.4 传入pojo对象，其中嵌套List&lt;对象&gt;，这种可以采用postman的body的 raw- JSON传参：</h4><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230625182110.png"></p><p>后端接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value = &quot;createTable&quot;, notes = &quot;CREATE_SYNCTABLE_NOTES&quot;)</span><br><span class="hljs-meta">@PostMapping(value =&quot;/create&quot;)</span><br><span class="hljs-meta">@ResponseStatus(HttpStatus.CREATED)</span><br><span class="hljs-meta">@ApiException(FLINK_CREATE_SYNC_TABLE_ERROR)</span><br><span class="hljs-meta">@AccessLogAnnotation(ignoreRequestArgs = &#123;&quot;loginUser&quot;, &quot;userPassword&quot;&#125;)</span><br><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">createTable</span><span class="hljs-params">(<span class="hljs-meta">@ApiIgnore</span> <span class="hljs-meta">@RequestAttribute(value = Constants.SESSION_USER)</span> User loginUser                     </span><br><span class="hljs-params">                          ,<span class="hljs-meta">@RequestBody</span> CDCSyncBatchTableDto cDCSyncBatchTableDto)</span> <span class="hljs-keyword">throws</span> Exception &#123; <br>  Map&lt;String, Object&gt; result = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">if</span>(cDCSyncBatchTableDto.getTaskType().equals(<span class="hljs-string">&quot;all&quot;</span>) || cDCSyncBatchTableDto.getTaskType().equals(<span class="hljs-string">&quot;inc&quot;</span>))&#123;    <br>    result = cDCSyncTableDetailService.createTable(loginUser,cDCSyncBatchTableDto); <br>  &#125;   <br>  <span class="hljs-keyword">return</span> returnDataList(result);<br>&#125;<br></code></pre></td></tr></table></figure><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CDCSyncBatchTableDto</span> &#123;   <br><span class="hljs-keyword">private</span> String taskType;  <br><span class="hljs-keyword">private</span> List&lt;CDCSyncTableDetail&gt; cdcSyncTable;  <br><span class="hljs-keyword">private</span> List&lt;CDCSyncTableHistoryDetail&gt; cdcSyncHisTable;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="二、json传输参数"><a href="#二、json传输参数" class="headerlink" title="二、json传输参数"></a>二、json传输参数</h3><p>SpringMVC接收JSON数据的实现步骤为:</p><p>(1)导入jackson包</p><p>(2)使用PostMan发送JSON数据</p><p>(3)开启SpringMVC注解驱动，在配置类上添加@EnableWebMvc注解</p><p>(4)Controller方法的参数前添加@RequestBody注解</p><p>知识点1：@EnableWebMvc</p><table><thead><tr><th>名称</th><th>@EnableWebMvc</th></tr></thead><tbody><tr><td>类型</td><td>配置类注解</td></tr><tr><td>位置</td><td>SpringMVC配置类定义上方</td></tr><tr><td>作用</td><td>开启SpringMVC多项辅助功能</td></tr></tbody></table><p>知识点2：@RequestBody</p><table><thead><tr><th>名称</th><th>@RequestBody</th></tr></thead><tbody><tr><td>类型</td><td>形参注解</td></tr><tr><td>位置</td><td>SpringMVC控制器方法形参定义前面</td></tr><tr><td>作用</td><td>将请求中请求体所包含的数据传递给请求参数，此注解一个处理器方法只能使用一次</td></tr></tbody></table><p>知识点3: @RequestBody与@RequestParam区别</p><p>区别</p><p>@RequestParam用于接收url地址传参，表单传参【application&#x2F;x-www-form-urlencoded】</p><p>@RequestBody用于接收json数据【application&#x2F;json】</p><p>应用</p><p>后期开发中，发送json格式数据为主，@RequestBody应用较广</p><p>如果发送非json格式数据，选用@RequestParam接收请求参数</p><p>参考链接：</p><p><a href="https://blog.csdn.net/m0_73257876/article/details/126403756">https://blog.csdn.net/m0_73257876/article/details/126403756</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flink程序从checkpoint点启动-广播流修改问题</title>
    <link href="/2023/04/14/Flink%E7%A8%8B%E5%BA%8F%E4%BB%8Echeckpoint%E7%82%B9%E5%90%AF%E5%8A%A8-%E5%B9%BF%E6%92%AD%E6%B5%81%E4%BF%AE%E6%94%B9%E9%97%AE%E9%A2%98/"/>
    <url>/2023/04/14/Flink%E7%A8%8B%E5%BA%8F%E4%BB%8Echeckpoint%E7%82%B9%E5%90%AF%E5%8A%A8-%E5%B9%BF%E6%92%AD%E6%B5%81%E4%BF%AE%E6%94%B9%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>原本的processBroadcastElement函数逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processBroadcastElement</span><span class="hljs-params">(Tuple2&lt;String, String&gt; value, Context ctx, Collector&lt;Tuple2&lt;String, String&gt;&gt; out)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>  <br><span class="hljs-type">String</span> <span class="hljs-variable">tableInfo</span> <span class="hljs-operator">=</span> JSON.parseObject(value.f1).getString(<span class="hljs-string">&quot;data&quot;</span>);<br><span class="hljs-type">FlinkCdcTableInfoBean</span> <span class="hljs-variable">flinkCdcTableInfoBean</span> <span class="hljs-operator">=</span> JSON.parseObject(tableInfo, FlinkCdcTableInfoBean.class);<br> <br><span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> flinkCdcTableInfoBean.getSourceDb() + <span class="hljs-string">&quot;_&quot;</span> + flinkCdcTableInfoBean.getSourceTableName() + <span class="hljs-string">&quot;_&quot;</span> + flinkCdcTableInfoBean.getId();         <br><br>BroadcastState&lt;String, FlinkCdcTableInfoBean&gt; broadcastState=ctx.getBroadcastState(mapStateDescriptor);<br><br>broadcastState.put(key, flinkCdcTableInfoBean);<br>&#125;<br>&#125;).name(<span class="hljs-string">&quot;MySQL data sync stream&quot;</span>);<br><br></code></pre></td></tr></table></figure><p>从checkpoint重启，processBroadcastElement函数被修改掉，等于是广播的状态broadcastState被修改掉了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processBroadcastElement</span><span class="hljs-params">(Tuple2&lt;String, String&gt; value, Context ctx, Collector&lt;Tuple2&lt;String, String&gt;&gt; out)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>  <br><span class="hljs-type">String</span> <span class="hljs-variable">tableInfo</span> <span class="hljs-operator">=</span> JSON.parseObject(value.f1).getString(<span class="hljs-string">&quot;data&quot;</span>);<br>  <br><span class="hljs-type">FlinkCdcTableInfoBean</span> <span class="hljs-variable">flinkCdcTableInfoBean</span> <span class="hljs-operator">=</span> JSON.parseObject(tableInfo, FlinkCdcTableInfoBean.class);<br>  <br><span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(flinkCdcTableInfoBean.getSecretColumns())) &#123;<br>List&lt;FlinkCdcTableInfoBean.SecretColumnDTO&gt; secretColumns = JSONValidator.from(flinkCdcTableInfoBean.getSecretColumns()).validate() ?<br>JSON.parseArray(flinkCdcTableInfoBean.getSecretColumns(), FlinkCdcTableInfoBean.SecretColumnDTO.class) : <span class="hljs-literal">null</span>;<br>flinkCdcTableInfoBean.setSecretColumnDTO(secretColumns);<br>&#125;<br><span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(flinkCdcTableInfoBean.getAddColumns())) &#123;<br>List&lt;FlinkCdcTableInfoBean.AddColumnDTO&gt; addColumnDTO = JSONValidator.from(flinkCdcTableInfoBean.getAddColumns()).validate() ?<br>JSON.parseArray(flinkCdcTableInfoBean.getAddColumns(), FlinkCdcTableInfoBean.AddColumnDTO.class) : <span class="hljs-literal">null</span>;<br>flinkCdcTableInfoBean.setAddColumnsDTO(addColumnDTO);<br>&#125;<br>  <br><span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> flinkCdcTableInfoBean.getSourceDb() + <span class="hljs-string">&quot;_&quot;</span> + flinkCdcTableInfoBean.getSourceTableName() + <span class="hljs-string">&quot;_&quot;</span> + flinkCdcTableInfoBean.getId();         BroadcastState&lt;String, FlinkCdcTableInfoBean&gt; broadcastState = ctx.getBroadcastState(mapStateDescriptor);<br>broadcastState.put(key, flinkCdcTableInfoBean);<br>&#125;<br>&#125;).name(<span class="hljs-string">&quot;MySQL data sync stream&quot;</span>);<br><br></code></pre></td></tr></table></figure><p><strong>修改办法：</strong></p><p>在使用 BroadcastState 时，需要注意广播状态数据的一致性。如果广播状态中的数据在 checkpoint 之前发生了修改，那么在从 checkpoint 恢复状态时，可能会导致状态不一致。</p><p>为了保证广播状态数据的一致性，在使用 BroadcastState 时，可以考虑使用以下两种方法：</p><p>对广播状态的修改进行同步：在对广播状态进行修改时，需要确保只有一个线程进行修改，避免并发修改导致数据不一致。可以使用锁或者线程安全的数据结构来实现。</p><p>使用版本号控制状态的变更：在广播状态中加入版本号，每次更新状态时，都更新版本号。在从 checkpoint 恢复状态时，通过比较版本号来判断状态是否一致。如果版本号不一致，说明状态已经被修改，需要重新更新状态。可以使用 ValueState 来存储版本号。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Flink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flinkcdc同步mysql数据到Doris-streamload出错跳过数据问题</title>
    <link href="/2023/04/14/Flinkcdc%E5%90%8C%E6%AD%A5mysql%E6%95%B0%E6%8D%AE%E5%88%B0Doris-streamload%E5%87%BA%E9%94%99%E8%B7%B3%E8%BF%87%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/"/>
    <url>/2023/04/14/Flinkcdc%E5%90%8C%E6%AD%A5mysql%E6%95%B0%E6%8D%AE%E5%88%B0Doris-streamload%E5%87%BA%E9%94%99%E8%B7%B3%E8%BF%87%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>Flinkcdc实时同步mysql数据到doris，原始修改表结构需要停任务，自己手工同步修改更新表结构，再重启任务，比较麻烦，基于此自定义Dorissink，刚开始没implements CheckpointedFunction类，会出现，这个checkpoint失败的时候，直接跳过这个checkpoint的数据，这样就会导致漏数据。</p><p>引起checkpoint失败的原因举例：Doris表字段设置了not null，会导致streamload失败，正常来说这一批streamload的数据需要等在那儿，不被丢失。但实际测试情况是如果没有implements CheckpointedFunction类，这批数据就会丢了</p><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p>DorisSink 是 Flink 的一个 Sink Function，其在实现从最近的检查点重启的过程中，主要依赖于 Flink 的 Checkpointing 机制和 Flink 的状态恢复功能。</p><p>具体来说，DorisSink 首先需要在实现中启用 Flink 的 Checkpointing 机制，以便在任务失败时，能够将所有状态数据写入到检查点中。这可以通过在 Flink 的执行环境中设置相关参数来实现，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">env.enableCheckpointing(<span class="hljs-number">60000</span>);<br>env.getCheckpointConfig().setCheckpointingMode(CheckpointingMode.EXACTLY_ONCE);<br>env.getCheckpointConfig().setMinPauseBetweenCheckpoints(<span class="hljs-number">5000</span>);<br>env.getCheckpointConfig().setCheckpointTimeout(<span class="hljs-number">60000</span>);<br>env.getCheckpointConfig().setMaxConcurrentCheckpoints(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>这里设置了 Checkpointing 的间隔为 60 秒，模式为精确一次，最短间隔为 5 秒，超时时间为 60 秒，同时最多同时进行一个检查点。</p><p>接下来，在任务失败后，DorisSink 会在重启时使用 Flink 的状态恢复功能，从最近的检查点中恢复所有状态数据。这可以通过在 DorisSink 的实现中实现 restoreState() 方法来实现，例如：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">restoreState</span><span class="hljs-params">(FinalizedState finalizedState)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-comment">// 从最近的检查点中恢复状态数据</span><br>    state.restore(finalizedState.getMetadata());<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在 Apache Flink 中，实现 CheckpointedFunction 接口可以让函数自动支持检查点和恢复。DorisSink 实现了 CheckpointedFunction 接口中的 snapshotState() 和 initializeState() 方法来支持检查点。</p><p>snapshotState() 方法用于将函数的状态保存到状态后端，即将所有正在处理的数据的状态（如正在缓存的数据、已完成但未提交的数据）写入到状态后端。在发生故障时，Flink 将使用这个检查点来恢复状态。在 DorisSink 中，snapshotState() 方法的实现会将所有 DorisDynamicOutputFormatForJson 实例中已缓存但未提交的数据写入到 Doris 中。</p><p>initializeState() 方法用于将状态从状态后端中恢复。在 DorisSink 中，initializeState() 方法的实现是空的，因为 DorisDynamicOutputFormatForJson 已经自带了状态的恢复逻辑，不需要再手动实现。</p><p>综上，DorisSink 中的 snapshotState() 和 initializeState() 方法是用于支持检查点和状态的恢复。snapshotState() 方法将数据缓存到状态后端，而 initializeState() 方法则在任务启动时从状态后端恢复数据。</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>代码如下：</p><p>值得注意的是需要继承implements CheckpointedFunction类，并且重写一下两个方法</p><p>@Override<br>    public void snapshotState(FunctionSnapshotContext functionSnapshotContext) throws Exception {<br>        for (DorisDynamicOutputFormatForJson<String> outputFormat : outputFormatList.values()) {<br>            outputFormat.flush();<br>        }<br>    }</p><p>@Override<br>public void initializeState(FunctionInitializationContext functionInitializationContext) throws Exception {</p><p>}</p><p>完整的Doris sink.java代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itiaoling.sink;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.itiaoling.bean.FlinkCdcTableInfoBean;<br><span class="hljs-keyword">import</span> com.itiaoling.bean.FlinkConfTableInfoBean;<br><span class="hljs-keyword">import</span> com.itiaoling.bean.FlinkHostInfoBean;<br><span class="hljs-keyword">import</span> com.itiaoling.function.DorisDynamicOutputFormatForJson;<br><span class="hljs-keyword">import</span> com.itiaoling.utils.JdbcUtils;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.apache.doris.flink.cfg.DorisExecutionOptions;<br><span class="hljs-keyword">import</span> org.apache.doris.flink.cfg.DorisOptions;<br><span class="hljs-keyword">import</span> org.apache.doris.flink.cfg.DorisReadOptions;<br><span class="hljs-keyword">import</span> org.apache.flink.api.common.functions.RuntimeContext;<br><span class="hljs-keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;<br><span class="hljs-keyword">import</span> org.apache.flink.configuration.Configuration;<br><span class="hljs-keyword">import</span> org.apache.flink.runtime.state.FunctionInitializationContext;<br><span class="hljs-keyword">import</span> org.apache.flink.runtime.state.FunctionSnapshotContext;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.checkpoint.CheckpointedFunction;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.functions.sink.RichSinkFunction;<br><span class="hljs-keyword">import</span> org.apache.flink.table.types.logical.LogicalType;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.itiaoling.sink.DorisSink.Builder.getProperties;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DorisSink</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RichSinkFunction</span>&lt;Tuple2&lt;String, String&gt;&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CheckpointedFunction</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, DorisDynamicOutputFormatForJson&lt;String&gt;&gt; outputFormatList;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DorisSink</span><span class="hljs-params">(</span><br><span class="hljs-params">            Map&lt;String, DorisDynamicOutputFormatForJson&lt;String&gt;&gt; outputFormatList)</span> &#123;<br>        <span class="hljs-built_in">this</span>.outputFormatList = outputFormatList;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">(Configuration parameters)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-built_in">super</span>.open(parameters);<br>        <span class="hljs-type">RuntimeContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> getRuntimeContext();<br>        <span class="hljs-keyword">for</span> (DorisDynamicOutputFormatForJson&lt;String&gt; outputFormat : outputFormatList.values()) &#123;<br>            outputFormat.setRuntimeContext(ctx);<br>            outputFormat.open(ctx.getIndexOfThisSubtask(), ctx.getNumberOfParallelSubtasks());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(Tuple2&lt;String, String&gt; value, Context context)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">rowJson</span> <span class="hljs-operator">=</span> JSON.parseObject(value.f1);<br>        <span class="hljs-type">FlinkHostInfoBean</span> <span class="hljs-variable">flinkHostInfo</span> <span class="hljs-operator">=</span> JSON.parseObject(rowJson.getString(<span class="hljs-string">&quot;flinkHostInfo&quot;</span>), FlinkHostInfoBean.class);<br>        <span class="hljs-type">FlinkConfTableInfoBean</span> <span class="hljs-variable">flinkConfTableInfo</span> <span class="hljs-operator">=</span> JSON.parseObject(rowJson.getString(<span class="hljs-string">&quot;flinkConfTableInfo&quot;</span>), FlinkConfTableInfoBean.class);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> flinkHostInfo.getId();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sinkFe</span> <span class="hljs-operator">=</span> flinkHostInfo.getSinkHostPort();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sinkUsername</span> <span class="hljs-operator">=</span> flinkHostInfo.getSinkUserName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sinkPassword</span> <span class="hljs-operator">=</span> flinkHostInfo.getSinkPassword();<br>        <span class="hljs-keyword">if</span> (rowJson.containsKey(<span class="hljs-string">&quot;isNewAdd&quot;</span>)) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">isNewAdd</span> <span class="hljs-operator">=</span> rowJson.getString(<span class="hljs-string">&quot;isNewAdd&quot;</span>);<br>            <span class="hljs-type">FlinkCdcTableInfoBean</span> <span class="hljs-variable">flinkCdcTableInfo</span> <span class="hljs-operator">=</span> JSON.parseObject(rowJson.getString(<span class="hljs-string">&quot;data&quot;</span>), FlinkCdcTableInfoBean.class);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">dorisTable</span> <span class="hljs-operator">=</span> flinkHostInfo.getSinkDb() + <span class="hljs-string">&quot;.&quot;</span> + flinkCdcTableInfo.getSinkTableName();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">dbName</span> <span class="hljs-operator">=</span> flinkCdcTableInfo.getSourceDb();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">mysqlTable</span> <span class="hljs-operator">=</span> flinkCdcTableInfo.getSourceTableName();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;1&quot;</span>.equals(isNewAdd)) &#123;<br>                log.info(<span class="hljs-string">&quot;have no sink for new table,to create a sink&quot;</span>);<br>                LogicalType[] types = &#123;&#125;;<br>                String[] field = &#123;&#125;;<br>                <span class="hljs-type">Properties</span> <span class="hljs-variable">sinkPro</span> <span class="hljs-operator">=</span> getProperties();<br>                <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(flinkCdcTableInfo.getStrictMode())&amp;&amp;flinkCdcTableInfo.getStrictMode().equals(<span class="hljs-string">&quot;false&quot;</span>))&#123;<br>                    sinkPro.setProperty(<span class="hljs-string">&quot;strict_mode&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>);<br>                    sinkPro.setProperty(<span class="hljs-string">&quot;max_filter_ratio&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>                &#125;<br>                DorisOptions.<span class="hljs-type">Builder</span> <span class="hljs-variable">option</span> <span class="hljs-operator">=</span> Builder.getBuilder(sinkFe, sinkUsername, sinkPassword);<br>                DorisExecutionOptions.<span class="hljs-type">Builder</span> <span class="hljs-variable">execution</span> <span class="hljs-operator">=</span> Builder.getBuilder();<br>                <span class="hljs-type">Boolean</span> <span class="hljs-variable">exists</span> <span class="hljs-operator">=</span> JdbcUtils.checkDorisExists(dorisTable, flinkHostInfo);<br>                <span class="hljs-keyword">if</span> (exists) &#123;<br>                    DorisDynamicOutputFormatForJson&lt;String&gt; newFormat =<br>                            <span class="hljs-keyword">new</span> <span class="hljs-title class_">DorisDynamicOutputFormatForJson</span>&lt;&gt;(<br>                                    option.setTableIdentifier(dorisTable).build(),<br>                                    DorisReadOptions.defaults(),<br>                                    execution.setStreamLoadProp(sinkPro).build(),<br>                                    types,<br>                                    field);<br>                    <span class="hljs-keyword">if</span> (outputFormatList.containsKey(dbName + <span class="hljs-string">&quot;.&quot;</span> + mysqlTable)) &#123;<br>                        outputFormatList.get(dbName + <span class="hljs-string">&quot;.&quot;</span> + mysqlTable).close();<br>                    &#125;<br>                    outputFormatList.put(dbName + <span class="hljs-string">&quot;.&quot;</span> + mysqlTable, newFormat);<br>                    <span class="hljs-type">RuntimeContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> getRuntimeContext();<br>                    newFormat.setRuntimeContext(ctx);<br>                    newFormat.open(ctx.getIndexOfThisSubtask(), ctx.getNumberOfParallelSubtasks());<br>                    log.info(<span class="hljs-string">&quot;create new sink format successfully&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    log.error(<span class="hljs-string">&quot;not found doris table:&quot;</span> + dorisTable);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//动态关闭StreamLoad</span><br>                <span class="hljs-keyword">if</span> (outputFormatList.containsKey(dbName + <span class="hljs-string">&quot;.&quot;</span> + mysqlTable)) &#123;<br>                    outputFormatList.get(dbName + <span class="hljs-string">&quot;.&quot;</span> + mysqlTable).close();<br>                &#125;<br>                outputFormatList.remove(dbName + <span class="hljs-string">&quot;.&quot;</span> + mysqlTable);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rowJson.containsKey(<span class="hljs-string">&quot;data&quot;</span>) &amp;&amp; !rowJson.containsKey(<span class="hljs-string">&quot;isNewAdd&quot;</span>)) &#123;<br>            <span class="hljs-type">JSONObject</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> (JSONObject) JSON.parseObject(value.f1).get(<span class="hljs-string">&quot;data&quot;</span>);<br>            <span class="hljs-keyword">if</span> (outputFormatList.get(value.f0) != <span class="hljs-literal">null</span>) &#123;<br>                outputFormatList.get(value.f0).writeRecord(data.toJSONString());<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">queryDb</span> <span class="hljs-operator">=</span> value.f0.split(<span class="hljs-string">&quot;\\.&quot;</span>)[<span class="hljs-number">0</span>];<br>                <span class="hljs-type">String</span> <span class="hljs-variable">queryTable</span> <span class="hljs-operator">=</span> value.f0.split(<span class="hljs-string">&quot;\\.&quot;</span>)[<span class="hljs-number">1</span>];<br>                <span class="hljs-type">Connection</span> <span class="hljs-variable">jdbcConn</span> <span class="hljs-operator">=</span> JdbcUtils.createJdbcConn(flinkConfTableInfo.getHostname(), flinkConfTableInfo.getPort(), flinkConfTableInfo.getUsername()<br>                        , flinkConfTableInfo.getPassword(), flinkConfTableInfo.getMysqlDb());<br>                <span class="hljs-type">String</span> <span class="hljs-variable">cdcTable</span> <span class="hljs-operator">=</span> flinkConfTableInfo.getMysqlDb() + <span class="hljs-string">&quot;.&quot;</span> + flinkConfTableInfo.getTableInfoTableName();<br>                <span class="hljs-type">FlinkCdcTableInfoBean</span> <span class="hljs-variable">flinkCDCTable</span> <span class="hljs-operator">=</span> JdbcUtils.queryTableByTableName(jdbcConn, cdcTable, id, queryDb, queryTable);<br>                <span class="hljs-keyword">if</span> (flinkCDCTable == <span class="hljs-literal">null</span>) &#123;<br>                    log.error(<span class="hljs-string">&quot;no found table in config cdc table:&quot;</span> + flinkConfTableInfo.getHostname() + <span class="hljs-string">&quot; &quot;</span> + cdcTable);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    log.info(<span class="hljs-string">&quot;this table found in cdc table , renew sink format!&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">dorisTableName</span> <span class="hljs-operator">=</span> flinkHostInfo.getSinkDb() + <span class="hljs-string">&quot;.&quot;</span> + flinkCDCTable.getSinkTableName();<br>                    LogicalType[] types = &#123;&#125;;<br>                    String[] field = &#123;&#125;;<br>                    <span class="hljs-type">Properties</span> <span class="hljs-variable">sinkPro</span> <span class="hljs-operator">=</span> getProperties();<br>                    <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(flinkCDCTable.getStrictMode())&amp;&amp;flinkCDCTable.getStrictMode().equals(<span class="hljs-string">&quot;false&quot;</span>))&#123;<br>                        sinkPro.setProperty(<span class="hljs-string">&quot;strict_mode&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>);<br>                        sinkPro.setProperty(<span class="hljs-string">&quot;max_filter_ratio&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>                    &#125;<br>                    DorisOptions.<span class="hljs-type">Builder</span> <span class="hljs-variable">option</span> <span class="hljs-operator">=</span> Builder.getBuilder(sinkFe, sinkUsername, sinkPassword);<br>                    DorisExecutionOptions.<span class="hljs-type">Builder</span> <span class="hljs-variable">execution</span> <span class="hljs-operator">=</span> Builder.getBuilder();<br>                    <span class="hljs-type">Boolean</span> <span class="hljs-variable">exists</span> <span class="hljs-operator">=</span> JdbcUtils.checkDorisExists(dorisTableName, flinkHostInfo);<br>                    <span class="hljs-keyword">if</span> (exists) &#123;<br>                        DorisDynamicOutputFormatForJson&lt;String&gt; newFormat =<br>                                <span class="hljs-keyword">new</span> <span class="hljs-title class_">DorisDynamicOutputFormatForJson</span>&lt;&gt;(<br>                                        option.setTableIdentifier(dorisTableName).build(),<br>                                        DorisReadOptions.defaults(),<br>                                        execution.setStreamLoadProp(sinkPro).build(),<br>                                        types,<br>                                        field);<br>                        outputFormatList.put(queryDb + <span class="hljs-string">&quot;.&quot;</span> + queryTable, newFormat);<br>                        <span class="hljs-type">RuntimeContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> getRuntimeContext();<br><br>                        newFormat.setRuntimeContext(ctx);<br>                        newFormat.open(ctx.getIndexOfThisSubtask(), ctx.getNumberOfParallelSubtasks());<br>                        log.info(<span class="hljs-string">&quot;create after renew sink format successfully&quot;</span>);<br>                        outputFormatList.get(value.f0).writeRecord(data.toJSONString());<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        log.error(<span class="hljs-string">&quot;not found doris table:&quot;</span> + dorisTableName);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            outputFormatList.get(value.f0).writeRecord(value.f1);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-built_in">super</span>.close();<br>        <span class="hljs-keyword">for</span> (DorisDynamicOutputFormatForJson&lt;String&gt; outputFormat : outputFormatList.values()) &#123;<br>            outputFormat.close();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">snapshotState</span><span class="hljs-params">(FunctionSnapshotContext functionSnapshotContext)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">for</span> (DorisDynamicOutputFormatForJson&lt;String&gt; outputFormat : outputFormatList.values()) &#123;<br>            outputFormat.flush();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initializeState</span><span class="hljs-params">(FunctionInitializationContext functionInitializationContext)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-title function_">Builder</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;DorisSink Builder class&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DorisSink <span class="hljs-title function_">build</span><span class="hljs-params">( FlinkHostInfoBean flinkHostInfoBean, List&lt;FlinkCdcTableInfoBean&gt; listCDCTables)</span> &#123;<br>            <span class="hljs-comment">// 配置</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sinkFe</span> <span class="hljs-operator">=</span> flinkHostInfoBean.getSinkHostPort();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sinkUsername</span> <span class="hljs-operator">=</span> flinkHostInfoBean.getSinkUserName();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sinkPassword</span> <span class="hljs-operator">=</span> flinkHostInfoBean.getSinkPassword();<br><br>            <span class="hljs-comment">// 统一的配置</span><br>            <span class="hljs-type">Properties</span> <span class="hljs-variable">sinkPro</span> <span class="hljs-operator">=</span> getProperties();<br><br>            DorisOptions.<span class="hljs-type">Builder</span> <span class="hljs-variable">option</span> <span class="hljs-operator">=</span> getBuilder(sinkFe, sinkUsername, sinkPassword);<br>            DorisExecutionOptions.<span class="hljs-type">Builder</span> <span class="hljs-variable">execution</span> <span class="hljs-operator">=</span> getBuilder();<br>            LogicalType[] types = &#123;&#125;;<br>            String[] field = &#123;&#125;;<br><br>            HashMap&lt;String, DorisDynamicOutputFormatForJson&lt;String&gt;&gt; outputMaps =<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>            <span class="hljs-keyword">for</span> (FlinkCdcTableInfoBean listCDCTable : listCDCTables) &#123;<br>                String dorisTable= listCDCTable.getSinkTableName();<br>                <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(listCDCTable.getStrictMode())&amp;&amp;listCDCTable.getStrictMode().equals(<span class="hljs-string">&quot;false&quot;</span>))&#123;<br>                    sinkPro.setProperty(<span class="hljs-string">&quot;strict_mode&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>);<br>                    sinkPro.setProperty(<span class="hljs-string">&quot;max_filter_ratio&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>                &#125;<br>                <span class="hljs-type">Boolean</span> <span class="hljs-variable">exists</span> <span class="hljs-operator">=</span> JdbcUtils.checkDorisExists(flinkHostInfoBean.getSinkDb() + <span class="hljs-string">&quot;.&quot;</span> + dorisTable, flinkHostInfoBean);<br>                <span class="hljs-keyword">if</span> (exists) &#123;<br>                    outputMaps.put(<br>                            listCDCTable.getSourceDb() + <span class="hljs-string">&quot;.&quot;</span> + listCDCTable.getSourceTableName(),<br>                            <span class="hljs-keyword">new</span> <span class="hljs-title class_">DorisDynamicOutputFormatForJson</span>&lt;&gt;(<br>                                    option.setTableIdentifier(flinkHostInfoBean.getSinkDb() + <span class="hljs-string">&quot;.&quot;</span> + dorisTable).build(),<br>                                    DorisReadOptions.defaults(),<br>                                    execution.setStreamLoadProp(sinkPro).build(),<br>                                    types,<br>                                    field));<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    log.error(<span class="hljs-string">&quot;not found doris table:&quot;</span> + flinkHostInfoBean.getSinkDb() + <span class="hljs-string">&quot;.&quot;</span> + dorisTable);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DorisSink</span>(outputMaps);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DorisExecutionOptions.Builder <span class="hljs-title function_">getBuilder</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> DorisExecutionOptions.builder().setMaxRetries(<span class="hljs-number">5</span>).setBatchSize(<span class="hljs-number">50000</span>).setBatchIntervalMs(<span class="hljs-number">20000L</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DorisOptions.Builder <span class="hljs-title function_">getBuilder</span><span class="hljs-params">(</span><br><span class="hljs-params">                String sinkFe, String sinkUsername, String sinkPassword)</span> &#123;<br>            <span class="hljs-keyword">return</span> DorisOptions.builder()<br>                    .setFenodes(sinkFe)<br>                    .setUsername(sinkUsername)<br>                    .setPassword(sinkPassword);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Properties <span class="hljs-title function_">getProperties</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">Properties</span> <span class="hljs-variable">sinkPro</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>            sinkPro.setProperty(<span class="hljs-string">&quot;format&quot;</span>, <span class="hljs-string">&quot;json&quot;</span>);<br>            sinkPro.setProperty(<span class="hljs-string">&quot;strip_outer_array&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br>            sinkPro.setProperty(<span class="hljs-string">&quot;function_column.sequence_col&quot;</span>, <span class="hljs-string">&quot;seq_col&quot;</span>);<br><br>            <span class="hljs-keyword">return</span> sinkPro;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Flink</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建大数据知识网络</title>
    <link href="/2023/04/02/%E6%9E%84%E5%BB%BA%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9F%A5%E8%AF%86%E7%BD%91%E7%BB%9C/"/>
    <url>/2023/04/02/%E6%9E%84%E5%BB%BA%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9F%A5%E8%AF%86%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="01-学习方法：建立你的大数据知识网络"><a href="#01-学习方法：建立你的大数据知识网络" class="headerlink" title="01|学习方法：建立你的大数据知识网络"></a>01|学习方法：建立你的大数据知识网络</h1><p>在了解了大数据论文之间的脉络后，接下来，我们就要进入精读论文的学习当中了。不过，在具体解读一篇篇的论文之前，我想先带你来一起看一看，这些大数据论文到底涵盖了哪些知识点，这些知识点又是来自于大数据系统中的哪一个组件。通过梳理这些组件涵盖了什么知识点，你就能更好地理解和掌握大数据领域相关的知识全貌。</p><p>毕竟，相比于某一门计算机课程、某一门编程语言或者某一个开源框架，“大数据”涉及到的知识点多而繁杂。所以这里，我就整理了一份知识地图，好让涉及到的知识点有迹可循。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230402224203.png"></p><p>从这张图可以看出，要想了解和学习“大数据”领域的相关知识，我们可以从三个维度来切入。</p><h2 id="1分布式系统"><a href="#1分布式系统" class="headerlink" title="1分布式系统"></a>1分布式系统</h2><p>所有的大数据系统都是分布式系统。我们需要大数据系统，就是因为普通的单机已经无法满足我们期望的性能了。那么作为一个分布式的数据系统，它就需要满足三个特性，也就是可靠性、可扩展性和可维护性。</p><p>第一个，作为一个数据系统，我们需要可靠性。如果只记录一份数据，那么当硬件故障的时候就会遇到丢数据的问题，所以我们需要对数据做复制。而数据复制之后，以哪一份数据为准，又给我们带来了主从架构、多主架构以及无主架构的选择。</p><p>然后，在最常见的主从架构里，我们根据复制过程，可以有同步复制和异步复制之分。同步复制的节点可以作为高可用切换的 Backup Master，而异步复制的节点只适合作为只读的 Shadow Master。</p><p>第二个重要的特性是可扩展性。在“大数据”的场景下，单个节点存不下所有数据，于是就有了数据分区。常见的分区方式有两种，第一种是通过区间进行分片，典型的代表就是 Bigtable，第二种是通过哈希进行分区，在大型分布式系统中常用的是一致性 Hash，典型的代表是 Cassandra。</p><p>最后一点就是整个系统的可维护性。我们需要考虑容错，在硬件出现故障的时候系统仍然能够运作。我们还需要考虑恢复，也就是当系统出现故障的时候，仍能快速恢复到可以使用的状态。而为了确保我们不会因为部分网络的中断导致作出错误的判断，我们就需要利用共识算法，来确保系统中能够对哪个节点正在正常服务作出判断。这也就引出了 CAP 这个所谓的“不可能三角”。</p><p>而分布式系统的核心问题就是 CAP 这个不可能三角，我们需要在一致性、可用性和分区容错性之间做权衡和选择。因此，我们选择的主从架构、复制策略、分片策略，以及容错和恢复方案，都是根据我们实际的应用场景下对于 CAP 进行的权衡和选择。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230402224655.png"></p><h2 id="2单节点的存储引擎"><a href="#2单节点的存储引擎" class="headerlink" title="2单节点的存储引擎"></a>2单节点的存储引擎</h2><p>然而，即使是上万台的分布式集群，最终还是要落到每一台单个服务器上完成数据的读写。那么在存储引擎上，关键的技术点主要包括三个部分。</p><p>第一个是事务。在写入数据的时候，我们需要保障写入的数据是原子的、完整的。在传统的数据库领域，我们有 ACID 这样的事务特性，也就是原子性（Atomic）、一致性（Consistency）、隔离性（Isolation）以及持久性（Durability）。而在大数据领域，很多时候因为分布式的存在，我们常常会退化到一个叫做 BASE 的模型。BASE 代表着基本可用（Basically Available）、软状态（Soft State）以及最终一致性（Eventually Consistent）</p><p>不过无论是 ACID 还是 BASE，在单机上，我们都会使用预写日志（WAL）、快照（Snapshot）和检查点（Checkpoints）以及写时复制（Copy-on-Write）这些技术，来保障数据在单个节点的写入是原子的。而只要写入的数据记录是在单个分片上，我们就可以保障数据写入的事务性，所以我们很容易可以做到单行事务，或者是进一步的实体组（Entity Group）层面的事务。</p><p>第二个是底层的数据是如何写入和存储的。这个既要考虑到计算机硬件的特性，比如数据的顺序读写比随机读写快，在内存上读写比硬盘上快；也要考虑到我们在算法和数据结构中的时空复杂度，比如 Hash 表的时间复杂度是 O(1)，B+ 树的时间复杂度是 O(logN)。</p><p>这样，通过结合硬件性能、数据结构和算法特性，我们会看到分布式数据库最常使用的，其实是基于 LSM 树（Log-Structured Merge Tree）的 MemTable+SSTable 的解决方案。</p><p>第三个则是数据的序列化问题。出于存储空间和兼容性的考虑，我们会选用 Thrift 这样的二进制序列化方案。而为了在分析数据的时候尽量减少硬盘吞吐量，我们则要研究 Parquet 或者 ORCFile 这样的列存储格式。然后，为了在 CPU、网络和硬盘的使用上取得平衡，我们又会选择 Snappy 或者 LZO 这样的快速压缩算法。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230402224814.png"></p><h2 id="3计算引擎"><a href="#3计算引擎" class="headerlink" title="3计算引擎"></a>3计算引擎</h2><p>这个维度实际上也是大数据领域本身进化和迭代最快的一部分。为什么会这么说呢？让我们来一起捋一下大数据处理引擎的进化过程：</p><ul><li>我们先有了最原始粗糙的 MapReduce 来进行批数据处理，然后围绕它不断迭代出了让数据处理更快的 Spark 和让数据处理更容易的各种 DSL（比如 Sawzall&#x2F;Pig 和 Hive）。</li><li>然后我们围绕着实时数据处理，有了“最少一次”的 S4&#x2F;Storm，并把它和批处理综合到一起，产生了著名的 Lambda 架构。</li><li>紧接着有了“以批为流”，通过 Mini-Batch 来进行实时数据处理的 Spark Streaming，以及“流批一体”，能够做到“正好一次”的 Kafka 和 Kappa 结构</li><li>最后，还是 Google 一锤定音，给出了统一的 Dataflow 模型，并伴随着有了 Apache Flink 和 Apache Beam 这两个开源项目。</li></ul><p>分布式问题，往往脱胎于少量经典论文的算法证明；单节点的存储引擎，也是一个自计算机诞生起就被反复研究的问题，这两者其实往往是经典论文的再现。但是在上千个服务器上的计算引擎应该怎么做，则是一个巨大的工程实践问题，我们没有太多可以借鉴的经验。这也是为什么计算引擎的迭代和变化是最大的。</p><p>不过随着 Dataflow 论文的发表，我们可以看到整个大数据的处理引擎，逐渐收敛成了一个统一的模型，大数据领域发展也算有了一个里程碑。</p><h2 id="4调度系统和综合应用"><a href="#4调度系统和综合应用" class="headerlink" title="4调度系统和综合应用"></a>4调度系统和综合应用</h2><p>总结来说，分布式系统、存储引擎和计算引擎就共同构成了大数据的核心技术。更进一步，随着多种分布式系统的混排，又产生了 Kubernetes 这样的资源管理和调度系统。而所有的这些技术之间，都不是各自独立，而是相互关联的。</p><p>大数据技术其实是计算机科学中很多科目的综合应用。在上面的知识地图里，我们可以看到在单节点上的存储引擎，就是要综合考虑组成原理、算法和数据结构以及数据库原理相关的知识。而序列化和压缩，前者是组成原理里的二进制编码问题，后者则脱胎于算法和数据结构中的赫夫曼树和赫夫曼编码。</p><p>另外，最终选择什么算法做压缩，又要回到组成原理中，对于 CPU、网络以及硬盘的硬件性能进行平衡和考量。而针对分布式事务，我们一方面需要理解单机下的数据库事务，另一方面需要理解分布式环境下的 CAP 不可能三角。只有这样，我们才能对于 Paxos 以及 Raft 这些共识算法有深入的理解。</p><p>而当我们要优化海量数据的分析效率，需要修改的反而是单节点存储引擎，因为只有通过列式存储，我们才能优化海量数据分析中的瓶颈：读取硬盘数据的 IO</p><p>因此，从我的认知来看，大数据系统的知识点不是一棵树，而是一张网。当你学明白了整个大数据系统的知识点和原理之后，自然就有了深厚的计算机科学和工程的功底。它能给你一种，“天下虽大，何处去不得”的信心。</p><h2 id="精读论文学知识，诀窍在哪里？"><a href="#精读论文学知识，诀窍在哪里？" class="headerlink" title="精读论文学知识，诀窍在哪里？"></a>精读论文学知识，诀窍在哪里？</h2><p>不过，即使有了这张大数据知识地图之后，你或许还会遇到一些难题，比如说，面对这些相对分散和全面的知识点，是学习大数据论文的第一层挑战。而论文本身往往也很精炼，则是学习过程中的第二层挑战。</p><p><strong>首先，是从第一性原理出发，尝试自己去设计系统和解决问题。</strong></p><p>一篇篇的大数据论文，并不是教科书里的一个章节或者一个知识点，而是对于一个重要的系统问题的解决方案。在读论文之前，先尝试自己去思考和解决对应的问题，有助于你更深刻地理解问题和解决方案的重点。</p><p>比如，在学习 Megastore 的论文之前，你可以问一问自己下面这两个问题：</p><ul><li>如果要在 Bigtable 上为数据表加上 Schema，我该怎么做？</li><li>如果我希望能够在 Bigtable 上，支持跨行事务，可以从哪里起步？</li></ul><p>无论你自己的思考和答案是否正确，带着你对问题的思考和方案去读论文，你的收获一定比囫囵吞枣地读一遍要多得多。</p><p><strong>其次，是多做交叉阅读和扩展阅读。</strong></p><p>论文本身往往只有 10 来页，非常精炼，对于很多知识点，往往就只有一个小片段，甚至只有一两句话，所以交叉阅读和扩展阅读少不了。根据你需要深入了解的知识点，你可能要回顾之前已经解读过的论文，也可能需要去阅读一些开源项目的代码，或者是一些计算机经典书籍中相关的章节，帮你彻底理解对应的问题。</p><p>比如，学习 Bigtable 论文的时候，论文里只告诉你底层的数据存储是 SSTable。而通过学习 LSM 树，或者是去读一下 LevelDB 的源码，你不仅可以理解 SSTable 的底层实现。还能帮助你深入理解针对硬件性能去设计数据结构，乃至系统中特定的组件。当然，我在课程的讲解中，也会给你推荐一系列的扩展阅读资料，帮助你找到更多的学习线索。</p><p><strong>最后，是给自己制定一个明确的学习目标，然后围绕学习目标，进行泛读和精读、理论和实践的结合。</strong></p><p>如果你的工作就是开发和维护大数据系统中的某个项目，比如 HBase、Flink，那么你就精读对应的论文，泛读其他的相关论文，并对于你所关心的项目源码进行深入挖掘。搞清楚每一个设计背后选择的根本原因，搞清楚它为什么这么设计。</p><p>如果你原先是做后端应用开发，想要学习大数据知识，转向大数据领域的开发。那么，搞清楚每篇论文和每个系统的应用场景，尝试通过 Google Cloud 或者其他的云系统，多尝试用一用这些大数据系统，会更有帮助。</p><p>如果你就是想要提升自己的理论知识和架构能力，那么我建议你放慢节奏。搞清楚论文里每一个关键设计点的原理，尽量多阅读我给到的推荐阅读材料。甚至你不妨可以动手试一试，去实现其中的一些算法和组件，这是最有效的办法。</p><h1 id="02-｜什么是大数据：从GFS到Dataflow，12年大数据生态演化图"><a href="#02-｜什么是大数据：从GFS到Dataflow，12年大数据生态演化图" class="headerlink" title="02 ｜什么是大数据：从GFS到Dataflow，12年大数据生态演化图"></a>02 ｜什么是大数据：从GFS到Dataflow，12年大数据生态演化图</h1><p>论文的前后之间的脉络联系</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230402225547.png"></p><p>论文索引</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230402225725.png"></p><p>还有许许多多值得一读的论文，比如针对 Bigtable，你就可以还去读一下 Cassandra 和 Dynamo，这样思路略有不同的分布式数据的论文；针对 Borg 和 Kubernetes，你可以去看看 Mesos 这个调度系统的论文又是什么样的。网上更有“开源大数据架构的 100 篇论文”这样的文章，如果你想深耕大数据领域，也可以有选择地多读一些其中的论文。</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hive编写UDF函数</title>
    <link href="/2023/03/06/Hive%E7%BC%96%E5%86%99UDF%E5%87%BD%E6%95%B0/"/>
    <url>/2023/03/06/Hive%E7%BC%96%E5%86%99UDF%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>Hive的内置函数无法满足业务需求时，就可以考虑使用用户自定义函数（UDF：user-defined function）</p><p>根据用户自定义的函数类别可以分为以下三种：</p><p><strong>1.UDF(User-Defined-Function) 一进一出</strong></p><p>UDF操作作用于单个数据行，并且产生一个数据行作为输出。大多数函数都属于这一类（比如数学函数和字符串函数）。</p><p><strong>2.UDAF（User-Defined Aggregation Function） 聚集函数，多进一出 类似于:count&#x2F;max&#x2F;min</strong></p><p>UDAF 接受多个输入数据行，并产生一个输出数据行。像COUNT和MAX这样的函数就是聚集函数。</p><p><strong>3.UDTF（User-Defined Table-Generating Functions） 一进多出</strong></p><p>UDTF 操作作用于单个数据行，并且产生多个数据行——-一个表作为输出。lateral view explore()</p><p>简单来说：</p><p>UDF:返回对应值，一对一</p><p>UDAF：返回聚类值，多对一</p><p>UDTF：返回拆分值，一对多</p><h3 id="UDF"><a href="#UDF" class="headerlink" title="UDF"></a>UDF</h3><p>1、UDF函数可以直接应用于select语句，对查询结构做格式化处理后，再输出内容。</p><p>2、编写UDF函数的时候需要注意一下几点：</p><p>　　a）自定义UDF需要继承org.apache.hadoop.hive.ql.UDF。</p><p>　　b）需要实现evaluate函数，evaluate函数支持重载。</p><p>　　例：写一个返回字符串长度的Demo:</p><pre><code class="hljs">  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.hadoop.hive.ql.exec.UDF;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetLength</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UDF</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">evaluate</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">return</span> str.length();<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre><p>3、步骤</p><p>a）把程序打包放到目标机器上去；</p><p>将打包好的jar包拖到hive安装目录下的lib目录当中</p><p>b）进入hive客户端，添加jar包：</p><p><code>hive&gt; add jar /root/hive_udf.jar</code></p><p>c）创建临时函数：</p><p><code>hive&gt; create temporary function getLen as &#39;com.raphael.len.GetLength&#39;;</code></p><p>d）查询HQL语句：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive&gt; <span class="hljs-keyword">select</span> getLen(<span class="hljs-keyword">info</span>) <span class="hljs-keyword">from</span> apachelog;<br>OK<br><span class="hljs-number">60</span><br><span class="hljs-number">29</span><br><span class="hljs-number">87</span><br><span class="hljs-number">102</span><br><span class="hljs-number">69</span><br><span class="hljs-number">60</span><br><span class="hljs-number">67</span><br><span class="hljs-number">79</span><br><span class="hljs-number">66</span><br><span class="hljs-type">Time</span> taken: <span class="hljs-number">0.072</span> seconds, Fetched: <span class="hljs-number">9</span> <span class="hljs-keyword">row</span>(s)<br></code></pre></td></tr></table></figure><p>e）销毁临时函数：</p><p><code>hive&gt; DROP TEMPORARY FUNCTION getLen;</code></p><h3 id="UDAF"><a href="#UDAF" class="headerlink" title="UDAF"></a>UDAF</h3><p>多行进一行出，如sum()、min()，用在group by时</p><p>1.必须继承</p><p>org.apache.hadoop.hive.ql.exec.UDAF(函数类继承)</p><p>org.apache.hadoop.hive.ql.exec.UDAFEvaluator(内部类Evaluator实现UDAFEvaluator接口)</p><p>2.Evaluator需要实现 init、iterate、terminatePartial、merge、terminate这几个函数</p><p>　　init():类似于构造函数，用于UDAF的初始化,实现接口UDAFEvaluator的init函数</p><p>　　iterate():接收传入的参数，并进行内部的轮转，返回boolean</p><p>　　terminatePartial():无参数，其为iterate函数轮转结束后，返回轮转数据，类似于hadoop的Combiner</p><p>　　merge():接收terminatePartial的返回结果，进行数据merge操作，其返回类型为boolean</p><p>　　terminate():返回最终的聚集函数结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hive.udaf;<br><span class="hljs-keyword">import</span> org.apache.hadoop.hive.ql.exec.UDAF;<br><span class="hljs-keyword">import</span> org.apache.hadoop.hive.ql.exec.UDAFEvaluator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Avg</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UDAF</span> &#123;<br>         <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AvgState</span> &#123;<br>         <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> mCount;<br>         <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> mSum;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AvgEvaluator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UDAFEvaluator</span> &#123;<br>         AvgState state;<br>         <span class="hljs-keyword">public</span> <span class="hljs-title function_">AvgEvaluator</span><span class="hljs-params">()</span> &#123;<br>                   <span class="hljs-built_in">super</span>();<br>                   state = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AvgState</span>();<br>                   init();<br>&#125;<br><span class="hljs-comment">/** * init函数类似于构造函数，用于UDAF的初始化 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>         state.mSum = <span class="hljs-number">0</span>;<br>         state.mCount = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/** * iterate接收传入的参数，并进行内部的轮转。其返回类型为boolean * * <span class="hljs-doctag">@param</span> o * <span class="hljs-doctag">@return</span> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">iterate</span><span class="hljs-params">(Double o)</span> &#123;<br>         <span class="hljs-keyword">if</span> (o != <span class="hljs-literal">null</span>) &#123;<br>                   state.mSum += o;<br>                   state.mCount++;<br>         &#125; <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">/** * terminatePartial无参数，其为iterate函数轮转结束后，返回轮转数据， * terminatePartial类似于hadoop的Combiner * * <span class="hljs-doctag">@return</span> */</span><br><span class="hljs-keyword">public</span> AvgState <span class="hljs-title function_">terminatePartial</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-comment">// combiner</span><br>         <span class="hljs-keyword">return</span> state.mCount == <span class="hljs-number">0</span> ? <span class="hljs-literal">null</span> : state;<br><br>&#125;<br><br><span class="hljs-comment">/** * merge接收terminatePartial的返回结果，进行数据merge操作，其返回类型为boolean * * <span class="hljs-doctag">@param</span> o * <span class="hljs-doctag">@return</span> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">terminatePartial</span><span class="hljs-params">(Double o)</span> &#123;                <br>         <span class="hljs-keyword">if</span> (o != <span class="hljs-literal">null</span>) &#123;<br>                   state.mCount += o.mCount;<br>                   state.mSum += o.mSum;<br>         &#125;<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">/** * terminate返回最终的聚集函数结果 * * <span class="hljs-doctag">@return</span> */</span><br><span class="hljs-keyword">public</span> Double <span class="hljs-title function_">terminate</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-keyword">return</span> state.mCount == <span class="hljs-number">0</span> ? <span class="hljs-literal">null</span> : Double.valueOf(state.mSum / state.mCount);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.执行求平均数函数的步骤</p><p>a）将java文件编译成Avg_test.jar。</p><p>b）进入hive客户端添加jar包：</p><p><code>hive&gt;add jar /run/jar/Avg_test.jar</code></p><p>c）创建临时函数：</p><p><code>hive&gt;create temporary function avg_test &#39;hive.udaf.Avg&#39;;</code></p><p>d）查询语句：</p><p><code>hive&gt;select avg_test(scores.math) from scores;</code></p><p>e）销毁临时函数：</p><p><code>hive&gt;drop temporary function avg_test;</code></p><p>4.总结</p><p>1、重载evaluate函数。<br>2、UDF函数中参数类型可以为Writable，也可为java中的基本数据对象。<br>3、UDF支持变长的参数。<br>4、Hive支持隐式类型转换。<br>5、客户端退出时，创建的临时函数自动销毁。<br>6、evaluate函数必须要返回类型值，空的话返回null，不能为void类型。<br>7、UDF是基于单条记录的列进行的计算操作，而UDFA则是用户自定义的聚类函数，是基于表的所有记录进行的计算操作。<br>8、UDF和UDAF都可以重载。<br>9、查看函数<br>SHOW FUNCTIONS;</p><h3 id="UDTF"><a href="#UDTF" class="headerlink" title="UDTF"></a>UDTF</h3><p>UDTF(User-Defined Table-Generating Functions) 用来解决 输入一行输出多行(On-to-many maping) 的需求</p><p>1.继承org.apache.hadoop.hive.ql.udf.generic.GenericUDTF,实现initialize, process, close三个方法。</p><p>UDTF首先会调用initialize方法，此方法返回UDTF的返回行的信息（返回个数，类型）。</p><p>初始化完成后，会调用process方法,真正的处理过程在process函数中，在process中，每一次forward()调用产生一行；如果产生多列可以将多个列的值放在一个数组中，然后将该数组传入到forward()函数。</p><p>最后close()方法调用，对需要清理的方法进行清理。</p><p>2.下面是一个用来切分”key:value;key:value;”这种字符串，返回结果为key, value两个字段。供参考：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br> <span class="hljs-keyword">import</span> org.apache.hadoop.hive.ql.udf.generic.GenericUDTF;<br> <span class="hljs-keyword">import</span> org.apache.hadoop.hive.ql.exec.UDFArgumentException;<br> <span class="hljs-keyword">import</span> org.apache.hadoop.hive.ql.exec.UDFArgumentLengthException;<br> <span class="hljs-keyword">import</span> org.apache.hadoop.hive.ql.metadata.HiveException;<br> <span class="hljs-keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;<br> <span class="hljs-keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;<br> <span class="hljs-keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.StructObjectInspector;<br> <span class="hljs-keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExplodeMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GenericUDTF</span>&#123;<br><br>     <span class="hljs-meta">@Override</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> HiveException &#123;<br>         <span class="hljs-comment">// TODO Auto-generated method stub    </span><br>     &#125;<br><br>     <span class="hljs-meta">@Override</span><br>     <span class="hljs-keyword">public</span> StructObjectInspector <span class="hljs-title function_">initialize</span><span class="hljs-params">(ObjectInspector[] args)</span><br>             <span class="hljs-keyword">throws</span> UDFArgumentException &#123;<br>         <span class="hljs-keyword">if</span> (args.length != <span class="hljs-number">1</span>) &#123;<br>             <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UDFArgumentLengthException</span>(<span class="hljs-string">&quot;ExplodeMap takes only one argument&quot;</span>);<br>         &#125;<br>         <span class="hljs-keyword">if</span> (args[<span class="hljs-number">0</span>].getCategory() != ObjectInspector.Category.PRIMITIVE) &#123;<br>             <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UDFArgumentException</span>(<span class="hljs-string">&quot;ExplodeMap takes string as a parameter&quot;</span>);<br>         &#125;<br><br>         ArrayList&lt;String&gt; fieldNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>         ArrayList&lt;ObjectInspector&gt; fieldOIs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ObjectInspector&gt;();<br>         fieldNames.add(<span class="hljs-string">&quot;col1&quot;</span>);<br>         fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);<br>         fieldNames.add(<span class="hljs-string">&quot;col2&quot;</span>);<br>         fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);<br><br>         <span class="hljs-keyword">return</span> ObjectInspectorFactory.getStandardStructObjectInspector(fieldNames,fieldOIs);<br>     &#125;<br><br>     <span class="hljs-meta">@Override</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(Object[] args)</span> <span class="hljs-keyword">throws</span> HiveException &#123;<br>         <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> args[<span class="hljs-number">0</span>].toString();<br>         String[] test = input.split(<span class="hljs-string">&quot;;&quot;</span>);<br>         <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;test.length; i++) &#123;<br>             <span class="hljs-keyword">try</span> &#123;<br>                 String[] result = test[i].split(<span class="hljs-string">&quot;:&quot;</span>);<br>                 forward(result);<br>             &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                 <span class="hljs-keyword">continue</span>;<br>             &#125;<br>         &#125;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>3.使用方法</p><p>UDTF有两种使用方法，一种直接放到select后面，一种和lateral view一起使用。</p><p>(1)直接select中使用</p><p><code>select explode_map(properties) as (col1,col2) from src;</code></p><p>不可以添加其他字段使用</p><p><code>select a, explode_map(properties) as (col1,col2) from src</code></p><p>不可以嵌套调用</p><p><code>select explode_map(explode_map(properties)) from src</code></p><p>不可以和group by&#x2F;cluster by&#x2F;distribute by&#x2F;sort by一起使用</p><p><code>select explode_map(properties) as (col1,col2) from src group by col1, col2</code></p><p>(2)和lateral view一起使用</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> src.id, mytable.col1, mytable.col2 <span class="hljs-keyword">from</span> src <span class="hljs-keyword">lateral</span> <span class="hljs-keyword">view</span> explode_map(properties) mytable <span class="hljs-keyword">as</span> col1, col2;<br></code></pre></td></tr></table></figure><p>此方法更为方便日常使用。执行过程相当于单独执行了两次抽取，然后union到一个表里。</p><p>参考：</p><p><a href="https://blog.csdn.net/weixin_43586713/article/details/120830699">https://blog.csdn.net/weixin_43586713/article/details/120830699</a></p><p><a href="https://cxymm.net/article/hzp666/117901418">https://cxymm.net/article/hzp666/117901418</a></p>]]></content>
    
    
    <categories>
      
      <category>Hive</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Doris的数据血缘设计方案和实现</title>
    <link href="/2023/03/03/%E5%9F%BA%E4%BA%8EDoris%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A1%80%E7%BC%98%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88%E5%92%8C%E5%AE%9E%E7%8E%B0/"/>
    <url>/2023/03/03/%E5%9F%BA%E4%BA%8EDoris%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A1%80%E7%BC%98%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88%E5%92%8C%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0d8d5fcd28c8701678a7cf4a5d4f0b67cf87bb43fdac1a689c691b7899d8c469"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数据血缘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Doris</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dolphinscheduler</title>
    <link href="/2023/03/01/dolphinscheduler/"/>
    <url>/2023/03/01/dolphinscheduler/</url>
    
    <content type="html"><![CDATA[<p>dolphinscheduler的内部可分为四个模块：</p><p>MasterServer、WorkerServer、AlertServer、ApiServer</p><h3 id="1-架构说明"><a href="#1-架构说明" class="headerlink" title="1.架构说明"></a>1.架构说明</h3><h4 id="MasterServer"><a href="#MasterServer" class="headerlink" title="MasterServer"></a><strong>MasterServer</strong></h4><p>MasterServer采用分布式无中心设计理念，MasterServer主要负责 DAG 任务切分、任务提交监控，并同时监听其它MasterServer和WorkerServer的健康状态。</p><p>MasterServer服务启动时向Zookeeper注册临时节点，通过监听Zookeeper临时节点变化来进行容错处理。 MasterServer基于netty提供监听服务。</p><h5 id="该服务内主要包含"><a href="#该服务内主要包含" class="headerlink" title="该服务内主要包含:"></a>该服务内主要包含:</h5><ul><li><strong>DistributedQuartz</strong>分布式调度组件，主要负责定时任务的启停操作，当quartz调起任务后，Master内部会有线程池具体负责处理任务的后续操作；</li><li><strong>MasterSchedulerService</strong>是一个扫描线程，定时扫描数据库中的<code>t_ds_command</code>表，根据不同的命令类型进行不同的业务操作；()</li><li><strong>WorkflowExecuteRunnable</strong>主要是负责DAG任务切分、任务提交监控、各种不同事件类型的逻辑处理；</li><li><strong>TaskExecuteRunnable</strong>主要负责任务的处理和持久化，并生成任务事件提交到工作流的事件队列；</li><li><strong>EventExecuteService</strong>主要负责工作流实例的事件队列的轮询；</li><li><strong>StateWheelExecuteThread</strong>主要负责工作流和任务超时、任务重试、任务依赖的轮询，并生成对应的工作流或任务事件提交到工作流的事件队列；</li><li><strong>FailoverExecuteThread</strong>主要负责Master容错和Worker容错的相关逻辑；</li></ul><h5 id="启动步骤"><a href="#启动步骤" class="headerlink" title="启动步骤:"></a>启动步骤:</h5><p>1.启动RPC服务（启动Netty 服务端服务）</p><p>2.导入Plugin</p><p>3.注册到Zookeeper</p><p>4.启动scheduler定时任务</p><p>5.启动Event处理器</p><p>6.启动StateWheel处理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml">1.对应路径里面存放了MasterServer.java的类，里面有对应的main方法<br>https://github.com/apache/dolphinscheduler/blob/dev/dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java<br><br>public static void main(String[] args) &#123;<br>        Thread.currentThread().setName(Constants.THREAD_NAME_MASTER_SERVER);<br>        SpringApplication.run(MasterServer.class);<br>    &#125;<br><br>2.执行完构造函数后，会启动run方法及其各个组件<br>    /**<br>     * run master server<br>     * 通常我们会是在Spring框架中使用到@PostConstruct注解 <br>     * 该注解的方法在整个Bean初始化中的执行顺序：<br>     * Constructor(构造方法) -&gt; @Autowired(依赖注入) -&gt; @PostConstruct(注释的方法)<br>     */<br>    @PostConstruct<br>    public void run() throws SchedulerException &#123;<br>        // 1.init rpc server<br>        this.masterRPCServer.start();<br><br>        // 2.install task plugin<br>        this.taskPluginManager.loadPlugin();<br><br>        // 2.self tolerant<br>        this.masterRegistryClient.start();<br>        this.masterRegistryClient.setRegistryStoppable(this);<br>        <br>        // 4.MasterSchedulerService启动scheduler定时任务<br>        this.masterSchedulerBootstrap.init();<br>        this.masterSchedulerBootstrap.start();<br>        <br>        // 5.启动Event处理器<br>        this.eventExecuteService.start();<br>        this.failoverExecuteThread.start();<br><br>        // CRUD操作<br>        this.schedulerApi.start();<br><br>        Runtime.getRuntime().addShutdownHook(new Thread(() -&gt; &#123;<br>            if (!ServerLifeCycleManager.isStopped()) &#123;<br>                close(&quot;MasterServer shutdownHook&quot;);<br>            &#125;<br>        &#125;));<br>    &#125;<br><br>3.注册元数据信息到Zookeeper上面，值得一提的是这里采用的是临时路径，比如说在过程中服务断开了或者session过期，临时路径过一段时间会自己去Delete掉。<br></code></pre></td></tr></table></figure><h4 id="WorkerServer"><a href="#WorkerServer" class="headerlink" title="WorkerServer"></a><strong>WorkerServer</strong></h4><p>WorkerServer也采用分布式无中心设计理念，WorkerServer主要负责任务的执行和提供日志服务。 WorkerServer服务启动时向Zookeeper注册临时节点，并维持心跳。 WorkerServer基于netty提供监听服务。</p><h5 id="该服务包含："><a href="#该服务包含：" class="headerlink" title="该服务包含："></a>该服务包含：</h5><ul><li><strong>WorkerManagerThread</strong>主要负责任务队列的提交，不断从任务队列中领取任务，提交到线程池处理；</li><li><strong>TaskExecuteThread</strong>主要负责任务执行的流程，根据不同的任务类型进行任务的实际处理；</li><li><strong>RetryReportTaskStatusThread</strong>主要负责定时轮询向Master汇报任务的状态，直到Master回复状态的ack，避免任务状态丢失；</li></ul><h5 id="启动步骤-1"><a href="#启动步骤-1" class="headerlink" title="启动步骤:"></a>启动步骤:</h5><p>1.启动RPC服务（启动Netty 服务端服务）</p><p>2.注册到Zookeeper</p><p>3.维护workserver节点状态</p><p>4.启动TaskExecuteThread</p><p>5.启动RetryReportTaskStatusThread</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> void run() &#123;<br>        <span class="hljs-comment">//启动Netty服务，过程中也会提供一些端口，以便和其他进程交互</span><br>        <span class="hljs-keyword">this</span>.workerRpcServer.start();<br>        <span class="hljs-keyword">this</span>.workerRpcClient.start();<br>        <span class="hljs-keyword">this</span>.taskPluginManager.loadPlugin();<br><br>        <span class="hljs-comment">//向Zookeeper注册信息，其中WorkerregistryClient调用了Zookeeper的代码</span><br>        <span class="hljs-keyword">this</span>.workerRegistryClient.setRegistryStoppable(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">this</span>.workerRegistryClient.start();<br><br>        <span class="hljs-comment">//启动组件，WorkerManagerThread主要是管理Master发过来的任务</span><br>        <span class="hljs-keyword">this</span>.workerManagerThread.start();<br>        <br>        <span class="hljs-comment">// 启动组件，messageRetryRunner主要是给Master反馈信息</span><br>        <span class="hljs-keyword">this</span>.messageRetryRunner.start();<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * registry hooks, which are called before the process exits</span><br><span class="hljs-comment">         */</span><br>        Runtime.getRuntime().addShutdownHook(new Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (!ServerLifeCycleManager.isStopped()) &#123;<br>                close(<span class="hljs-string">&quot;WorkerServer shutdown hook&quot;</span>);<br>            &#125;<br>        &#125;));<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a><strong>ZooKeeper</strong></h4><p>ZooKeeper服务，系统中的MasterServer和WorkerServer节点都通过ZooKeeper来进行集群管理和容错。另外系统还基于ZooKeeper进行事件监听和分布式锁。 我们也曾经基于Redis实现过队列，不过我们希望DolphinScheduler依赖到的组件尽量地少，所以最后还是去掉了Redis实现。</p><h4 id="AlertServer"><a href="#AlertServer" class="headerlink" title="AlertServer"></a><strong>AlertServer</strong></h4><p>提供告警服务，通过告警插件的方式实现丰富的告警手段。</p><h4 id="ApiServer"><a href="#ApiServer" class="headerlink" title="ApiServer"></a><strong>ApiServer</strong></h4><p>API接口层，主要负责处理前端UI层的请求。该服务统一提供RESTful api向外部提供请求服务。</p><h4 id="UI"><a href="#UI" class="headerlink" title="UI"></a><strong>UI</strong></h4><p>系统的前端页面，提供系统的各种可视化操作界面。</p><hr><h3 id="2-任务执行流程"><a href="#2-任务执行流程" class="headerlink" title="2.任务执行流程"></a>2.任务执行流程</h3><p>首先我们可以从UI界面具体分析一些工作流是如何运行的？</p><p>1.<strong>通过一系列的执行，最终会解析一些参数，解析完之后会生成一条记录（Create Command）</strong></p><p>在UI界面工作流界面点击某个工作流运行后会执行以下代码：</p><p>DolphinScheduler-api : ExecutorController.java → startProcessInstance(execService.execProcessInstance()) → createCommand() →写入表 t_ds_command</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs java">--------------DolphinScheduler-API模块下/controller/ExecutorController.java------------------<br>--------------------------------------------------------------------------------------------<br>---ExecutorController.java的startProcessInstance()方法中-------------------------------------<br>--------------------------------------------调用execService.execProcessInstance()的方法------<br><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">startProcessInstance</span><span class="hljs-params">(<span class="hljs-meta">@Parameter(hidden = true)</span> <span class="hljs-meta">@RequestAttribute(value = Constants.SESSION_USER)</span> User loginUser,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@Parameter(name = &quot;projectCode&quot;, description = &quot;PROJECT_CODE&quot;, required = true)</span> <span class="hljs-meta">@PathVariable</span> <span class="hljs-type">long</span> projectCode,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@RequestParam(value = &quot;processDefinitionCode&quot;)</span> <span class="hljs-type">long</span> processDefinitionCode,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@RequestParam(value = &quot;scheduleTime&quot;)</span> String scheduleTime,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@RequestParam(value = &quot;failureStrategy&quot;)</span> FailureStrategy failureStrategy,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@RequestParam(value = &quot;startNodeList&quot;, required = false)</span> String startNodeList,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@RequestParam(value = &quot;taskDependType&quot;, required = false)</span> TaskDependType taskDependType,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@RequestParam(value = &quot;execType&quot;, required = false)</span> CommandType execType,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@RequestParam(value = &quot;warningType&quot;)</span> WarningType warningType,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@RequestParam(value = &quot;warningGroupId&quot;, required = false)</span> Integer warningGroupId,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@RequestParam(value = &quot;runMode&quot;, required = false)</span> RunMode runMode,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@RequestParam(value = &quot;processInstancePriority&quot;, required = false)</span> Priority processInstancePriority,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@RequestParam(value = &quot;workerGroup&quot;, required = false, defaultValue = &quot;default&quot;)</span> String workerGroup,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@RequestParam(value = &quot;environmentCode&quot;, required = false, defaultValue = &quot;-1&quot;)</span> Long environmentCode,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@RequestParam(value = &quot;timeout&quot;, required = false)</span> Integer timeout,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@RequestParam(value = &quot;startParams&quot;, required = false)</span> String startParams,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@RequestParam(value = &quot;expectedParallelismNumber&quot;, required = false)</span> Integer expectedParallelismNumber,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@RequestParam(value = &quot;dryRun&quot;, defaultValue = &quot;0&quot;, required = false)</span> <span class="hljs-type">int</span> dryRun,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@RequestParam(value = &quot;testFlag&quot;, defaultValue = &quot;0&quot;)</span> <span class="hljs-type">int</span> testFlag,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@RequestParam(value = &quot;complementDependentMode&quot;, required = false)</span> ComplementDependentMode complementDependentMode,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@RequestParam(value = &quot;version&quot;, required = false)</span> Integer version)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (timeout == <span class="hljs-literal">null</span>) &#123;<br>            timeout = Constants.MAX_TASK_TIMEOUT;<br>        &#125;<br>        Map&lt;String, String&gt; startParamMap = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (startParams != <span class="hljs-literal">null</span>) &#123;<br>            startParamMap = JSONUtils.toMap(startParams);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (complementDependentMode == <span class="hljs-literal">null</span>) &#123;<br>            complementDependentMode = ComplementDependentMode.OFF_MODE;<br>        &#125;<br><br>        Map&lt;String, Object&gt; result = execService.execProcessInstance(loginUser, projectCode, processDefinitionCode,<br>                scheduleTime, execType, failureStrategy,<br>                startNodeList, taskDependType, warningType, warningGroupId, runMode, processInstancePriority,<br>                workerGroup, environmentCode, timeout, startParamMap, expectedParallelismNumber, dryRun, testFlag,<br>                complementDependentMode, version);<br>        <span class="hljs-keyword">return</span> returnDataList(result);<br>    &#125;<br><br><br>--------------------------------------------------------------------------------------------<br>-----------ExecutorServiceImpl.java的execProcessInstance()方法中调用createCommand()的方法------<br>--------------------------------------------------------------------------------------------<br><span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">execProcessInstance</span><span class="hljs-params">(User loginUser, <span class="hljs-type">long</span> projectCode, <span class="hljs-type">long</span> processDefinitionCode,</span><br><span class="hljs-params">                                                   String cronTime, CommandType commandType,</span><br><span class="hljs-params">                                                   FailureStrategy failureStrategy, String startNodeList,</span><br><span class="hljs-params">                                                   TaskDependType taskDependType, WarningType warningType,</span><br><span class="hljs-params">                                                   Integer warningGroupId, RunMode runMode,</span><br><span class="hljs-params">                                                   Priority processInstancePriority, String workerGroup,</span><br><span class="hljs-params">                                                   Long environmentCode, Integer timeout,</span><br><span class="hljs-params">                                                   Map&lt;String, String&gt; startParams, Integer expectedParallelismNumber,</span><br><span class="hljs-params">                                                   <span class="hljs-type">int</span> dryRun, <span class="hljs-type">int</span> testFlag,</span><br><span class="hljs-params">                                                   ComplementDependentMode complementDependentMode, Integer version)</span> &#123;<br>        <span class="hljs-type">Project</span> <span class="hljs-variable">project</span> <span class="hljs-operator">=</span> projectMapper.queryByCode(projectCode);<br>        <span class="hljs-comment">// check user access for project</span><br>        Map&lt;String, Object&gt; result =<br>                projectService.checkProjectAndAuth(loginUser, project, projectCode, WORKFLOW_START);<br>        <span class="hljs-keyword">if</span> (result.get(Constants.STATUS) != Status.SUCCESS) &#123;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        <span class="hljs-comment">// timeout is invalid</span><br>        <span class="hljs-keyword">if</span> (timeout &lt;= <span class="hljs-number">0</span> || timeout &gt; MAX_TASK_TIMEOUT) &#123;<br>            log.warn(<span class="hljs-string">&quot;Parameter timeout is invalid, timeout:&#123;&#125;.&quot;</span>, timeout);<br>            putMsg(result, Status.TASK_TIMEOUT_PARAMS_ERROR);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        ProcessDefinition processDefinition;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != version) &#123;<br>            processDefinition = processService.findProcessDefinition(processDefinitionCode, version);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            processDefinition = processDefinitionMapper.queryByCode(processDefinitionCode);<br>        &#125;<br>        <span class="hljs-comment">// check process define release state</span><br>        <span class="hljs-built_in">this</span>.checkProcessDefinitionValid(projectCode, processDefinition, processDefinitionCode,<br>                processDefinition.getVersion());<br>        <span class="hljs-comment">// check current version whether include startNodeList</span><br>        checkStartNodeList(startNodeList, processDefinitionCode, processDefinition.getVersion());<br>        <span class="hljs-keyword">if</span> (!checkTenantSuitable(processDefinition)) &#123;<br>            log.error(<br>                    <span class="hljs-string">&quot;There is not any valid tenant for the process definition, processDefinitionCode:&#123;&#125;, processDefinitionName:&#123;&#125;.&quot;</span>,<br>                    processDefinition.getCode(), processDefinition.getName());<br>            putMsg(result, Status.TENANT_NOT_SUITABLE);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br><br>        checkScheduleTimeNumExceed(commandType, cronTime);<br>        checkMasterExists();<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">triggerCode</span> <span class="hljs-operator">=</span> CodeGenerateUtils.getInstance().genCode();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * create command</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">create</span> <span class="hljs-operator">=</span><br>                <span class="hljs-built_in">this</span>.createCommand(triggerCode, commandType, processDefinition.getCode(), taskDependType,<br>                        failureStrategy,<br>                        startNodeList,<br>                        cronTime, warningType, loginUser.getId(), warningGroupId, runMode, processInstancePriority,<br>                        workerGroup,<br>                        environmentCode, startParams, expectedParallelismNumber, dryRun, testFlag,<br>                        complementDependentMode);<br></code></pre></td></tr></table></figure><p>2.<strong>定时任务轮询获取</strong></p><p>MasterServer会不定时扫描表里面的记录，然后拉取出来，最后构建流程的实例</p><p>Master scheduler thread, this thread will consume the commands from database and trigger processInstance executed.</p><p>Dolphinscheduler-server: MasterSchedulerBootstrap.java → scheduleProcess() → findCommands() → command2ProcessInstance()→ 创建ProcessInstance（processService.handleCommand(）</p><p><strong>构建DAG并分发到worker</strong></p><p>this.masterSchedulerBootstrap.start(),Master启动完之后会不停拉取命令，然后解析完之后分发给Worker</p><p>可以看一下它的run方法,Scheduleprocess方法去找一条命令→Findonecommand，找到之后对它进行解析，创建工作流实例,交给WorkflowExecuteThread线程执行,</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MasterSchedulerBootstrap</span>.</span></span>java类<br><br>public void init<span class="hljs-literal">()</span> &#123;<br>        this.masterPrepareExecService = (ThreadPoolExecutor) ThreadUtils<br>                .<span class="hljs-keyword">new</span><span class="hljs-constructor">DaemonFixedThreadExecutor(<span class="hljs-string">&quot;MasterPreExecThread&quot;</span>, <span class="hljs-params">masterConfig</span>.<span class="hljs-params">getPreExecThreads</span>()</span>);<br>        this.masterAddress = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NetUtils</span>.</span></span>get<span class="hljs-constructor">Addr(<span class="hljs-params">masterConfig</span>.<span class="hljs-params">getListenPort</span>()</span>);<br>    &#125;<br><br>    @Override<br>    public synchronized void start<span class="hljs-literal">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;Master schedule bootstrap starting..&quot;</span>);<br>        super.start<span class="hljs-literal">()</span>;<br>        workflowEventLooper.start<span class="hljs-literal">()</span>;<br>        log.info(<span class="hljs-string">&quot;Master schedule bootstrap started...&quot;</span>);<br>    &#125;<br>    <br>    @Override<br>    public void run<span class="hljs-literal">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (!<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ServerLifeCycleManager</span>.</span></span>is<span class="hljs-constructor">Stopped()</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ServerLifeCycleManager</span>.</span></span>is<span class="hljs-constructor">Running()</span>) &#123;<br>                    <span class="hljs-comment">// the current server is not at running status, cannot consume command.</span><br>                    log.warn(<span class="hljs-string">&quot;The current server &#123;&#125; is not at running status, cannot consumes commands.&quot;</span>,<br>                            this.masterAddress);<br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(Constants.SLEEP_TIME_MILLIS);<br>                &#125;<br>                <span class="hljs-comment">// todo: if the workflow event queue is much, we need to handle the back pressure</span><br>                boolean isOverload =<br>                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">OSUtils</span>.</span></span>is<span class="hljs-constructor">Overload(<span class="hljs-params">masterConfig</span>.<span class="hljs-params">getMaxCpuLoadAvg</span>()</span>, masterConfig.get<span class="hljs-constructor">ReservedMemory()</span>);<br>                <span class="hljs-keyword">if</span> (isOverload) &#123;<br>                    log.warn(<span class="hljs-string">&quot;The current server &#123;&#125; is overload, cannot consumes commands.&quot;</span>, this.masterAddress);<br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MasterServerMetrics</span>.</span></span>inc<span class="hljs-constructor">MasterOverload()</span>;<br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(Constants.SLEEP_TIME_MILLIS);<br>                    continue;<br>                &#125;<br>                List&lt;Command&gt; commands = find<span class="hljs-constructor">Commands()</span>;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CollectionUtils</span>.</span></span>is<span class="hljs-constructor">Empty(<span class="hljs-params">commands</span>)</span>) &#123;<br>                    <span class="hljs-comment">// indicate that no command ,sleep for 1s</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(Constants.SLEEP_TIME_MILLIS);<br>                    continue;<br>                &#125;<br><br>                List&lt;ProcessInstance&gt; processInstances = command2<span class="hljs-constructor">ProcessInstance(<span class="hljs-params">commands</span>)</span>;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CollectionUtils</span>.</span></span>is<span class="hljs-constructor">Empty(<span class="hljs-params">processInstances</span>)</span>) &#123;<br>                    <span class="hljs-comment">// indicate that the command transform to processInstance error, sleep for 1s</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(Constants.SLEEP_TIME_MILLIS);<br>                    continue;<br>                &#125;<br><br></code></pre></td></tr></table></figure><p>WorkflowExecuteThread run方法启动之后提交一个节点</p><p>放到优先级队列里面，构造处理的一些参数，通过Netty分发</p><ul><li>WorkflowExecuteThread.java → startProcess() → buildFlowDag() → submitPostNode() → submitStandByTask() → submitTaskExec()</li><li>TaskProcessor.java → dispatchTask() → 放入TaskPriorityQueue</li><li>TaskPriorityQueueConsumer.java: → dispatch()</li><li>ExecutorDispatcher.java → dispatch()</li><li>NettyExecutorManager.java → execute() →build command → doExecute() → ettyRemotingClient.send()</li></ul><h3 id="3-调度问题排查"><a href="#3-调度问题排查" class="headerlink" title="3.调度问题排查"></a>3.调度问题排查</h3><p>1.问题描述：工作流实例显示运行，任务实例没有任务</p><p>解决方法：</p><p>检查日志</p><p>查看master日志<br>tail -f &#x2F;opt&#x2F;dolphinscheduler&#x2F;logs&#x2F;dolphinscheduler-master.log</p><p>查看worker 日志<br>tail -f &#x2F;opt&#x2F;dolphinscheduler&#x2F;logs&#x2F;dolphinscheduler-worker.log</p><p>查看api 日志</p><p>tail -f &#x2F;opt&#x2F;dolphinscheduler&#x2F;logs&#x2F;dolphinscheduler-api-server.log</p><p>查看告警alert日志</p><p>tail -f &#x2F;opt&#x2F;dolphinscheduler&#x2F;logs&#x2F;dolphinscheduler-alert.log</p><p>确认服务启动情况：</p><p>确认服务启动情况：</p><p> ps -aux |grep</p><p># master服务</p><p>ps -aux |grep MasterServer </p><p> # worker服务</p><p>ps -aux |grep WorkerServer</p><p># logger服务<br>ps -aux |grep LoggerServer </p><p> # alert服务<br>ps -aux |grep AlertServer</p><p>重启服务：</p><p>重启集群所有服务</p><p>&#x2F;opt&#x2F;dolphinscheduler&#x2F;bin&#x2F;stop-all.sh</p><p>&#x2F;opt&#x2F;dolphinscheduler&#x2F;bin&#x2F;start-all.sh</p><p>单独启动workerServer服务</p><p>&#x2F;opt&#x2F;dolphinscheduler&#x2F;bin&#x2F;dolphinscheduler-daemon.sh stop worker-server</p><p>&#x2F;opt&#x2F;dolphinscheduler&#x2F;bin&#x2F;dolphinscheduler-daemon.sh start worker-server</p><p>2.工作流实例准备停止，导致工作流无法删除</p><p>进入dolph数据库</p><p>– 工作流<br>SELECT * FROM t_ds_process_definition<br>where name &#x3D;’ads_spk_t_customer_analyze_recharge’ ;</p><p>– 工作流实例（工作流执行list）<br>– 查看准备停止的list 流程实例状态：0提交成功1运行2准备暂停3暂停4准备停止5停止6失败7成功8需要容错9杀死10等待线程11等待依赖关系完成</p><p>SELECT t.* FROM t_ds_process_instance t<br>LEFT JOIN t_ds_process_definition t1<br>ON t1.code &#x3D;t.process_definition_code<br>where <a href="http://t1.name/">t1.name</a> &#x3D;’ads_spk_t_customer_analyze_recharge’<br>AND t.state &#x3D;’4’;</p><p>– 删除准备停止的实例<br>delete from t_ds_process_instance<br>where state &#x3D;’4’<br>AND name like ‘ads_spk_t_customer_analyze_recharge%’ ;</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>github：<a href="https://github.com/apache/dolphinscheduler/blob/dev/docs/docs/zh/architecture/design.md">https://github.com/apache/dolphinscheduler/blob/dev/docs/docs/zh/architecture/design.md</a></p><p><a href="https://zhuanlan.zhihu.com/p/512387735">https://zhuanlan.zhihu.com/p/512387735</a></p>]]></content>
    
    
    <categories>
      
      <category>调度</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dolphinscheduler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flink MULTI JDBC CONNECTOR</title>
    <link href="/2023/01/16/Flink-MULTI-JDBC-CONNECTOR/"/>
    <url>/2023/01/16/Flink-MULTI-JDBC-CONNECTOR/</url>
    
    <content type="html"><![CDATA[<p>提供分库分表的jdbc链接方法，目前只提供批模式。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th>参数名称</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>connector</td><td>是</td><td>填写multi-jdbc</td></tr><tr><td>url</td><td>是</td><td>jdbc的链接串，用分号分割。jdbc:mysql:&#x2F;&#x2F;${connection1};jdbc:mysql:&#x2F;&#x2F;${connection2}</td></tr><tr><td>table-name</td><td>是</td><td>可用正则匹配</td></tr><tr><td>schema-name</td><td>是</td><td>可用正则匹配</td></tr><tr><td>username</td><td>否</td><td>用户名</td></tr><tr><td>password</td><td>否</td><td>密码</td></tr><tr><td>driver</td><td>否</td><td></td></tr><tr><td>scan.partition.column</td><td>是</td><td>分片的字段，最好是自增id主键</td></tr><tr><td>scan.batch.size</td><td>否</td><td>scan.batch.size 和 scan.partition.num必填写一个。每个batch的大小，每个表会多一个select count（1）的查询去获取表的数据量进行计算</td></tr><tr><td>scan.partition.num</td><td>否</td><td>scan.batch.size 和 scan.partition.num必填写一个。每张表分多少个片。</td></tr></tbody></table><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>基于flip-27设计的flink接口，实现的分库分表jdbc的链接器。 enumerator(在jobmanager内)负责</p><ol><li>把符合条件的库名找出来。</li><li>把符合表名称的表明拿出来。</li><li>取这张表的最大值以及最小值。</li><li>获取一个批次的步长。<ol><li>若填写了batch size。则通过select count 获取表行数计算，在使用 批次大小&#x2F;总行数 * （max id - min id）计算出步长。</li><li>拖填写了partition num。 则使用 （max id - min id） &#x2F; 分片数量 计算出步长。</li></ol></li><li>根据步长来生成对应的sql（select * from xxxx where column between xxxx and xxxx）</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itiaoling.app.ods;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.itiaoling.bean.batch.GoodsEbayCompatibilityModel;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.doris.flink.cfg.DorisExecutionOptions;<br><span class="hljs-keyword">import</span> org.apache.doris.flink.cfg.DorisOptions;<br><span class="hljs-keyword">import</span> org.apache.doris.flink.cfg.DorisReadOptions;<br><span class="hljs-keyword">import</span> org.apache.doris.flink.cfg.DorisSink;<br><span class="hljs-keyword">import</span> org.apache.flink.api.common.functions.MapFunction;<br><span class="hljs-keyword">import</span> org.apache.flink.configuration.Configuration;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<br><span class="hljs-keyword">import</span> org.apache.flink.table.api.EnvironmentSettings;<br><span class="hljs-keyword">import</span> org.apache.flink.table.api.SqlDialect;<br><span class="hljs-keyword">import</span> org.apache.flink.table.api.Table;<br><span class="hljs-keyword">import</span> org.apache.flink.table.api.bridge.java.StreamTableEnvironment;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EscMysql2DorisBatch</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        conf.setString(<span class="hljs-string">&quot;execution.checkpointing.interval&quot;</span>, <span class="hljs-string">&quot;10000&quot;</span>);<br>        conf.setString(<span class="hljs-string">&quot;execution.checkpointing.mode&quot;</span>, <span class="hljs-string">&quot;EXACTLY_ONCE&quot;</span>);<br>        conf.setString(<span class="hljs-string">&quot;state.checkpoints.num-retained&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>        conf.setString(<span class="hljs-string">&quot;state.checkpoints.dir&quot;</span>, <span class="hljs-string">&quot;hdfs:/ns/flink/checkpoints/esc_buyer1_batch&quot;</span>);<br>        <span class="hljs-type">StreamExecutionEnvironment</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment(conf);<br>        env.setParallelism(<span class="hljs-number">10</span>);<br>        <span class="hljs-type">EnvironmentSettings</span> <span class="hljs-variable">Settings</span> <span class="hljs-operator">=</span> EnvironmentSettings.newInstance().inStreamingMode().build();<br><br>        <span class="hljs-type">StreamTableEnvironment</span> <span class="hljs-variable">tEnv</span> <span class="hljs-operator">=</span> StreamTableEnvironment.create(env, Settings);<br>        tEnv.getConfig().setSqlDialect(SqlDialect.DEFAULT);<br><br>        tEnv.executeSql(<br>                <span class="hljs-string">&quot;CREATE TABLE `goods_ebay_compatibility_model` (\n&quot;</span> +<br>                        <span class="hljs-string">&quot;  `id` Integer,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;  `site` STRING,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;  `category_id` STRING,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;  `esc_category_id` STRING,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;  `model_id` STRING,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;  `version` STRING,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;  `update_type` Integer,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;  `create_time` Timestamp,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;  `update_time` Timestamp,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;  `deleted` Integer\n&quot;</span> +<br>                        <span class="hljs-string">&quot;)&quot;</span> +<br>                        <span class="hljs-string">&quot;WITH (\n&quot;</span> +<br>                        <span class="hljs-string">&quot;\t&#x27;connector&#x27; = &#x27;multi-jdbc&#x27;,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;\t&#x27;table-name&#x27; = &#x27;XXXXX&#x27;,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;\t&#x27;schema-name&#x27; = &#x27;isc_buyer&#x27;,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;\t&#x27;username&#x27; = &#x27;XXXXX&#x27;,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;\t&#x27;password&#x27; = &#x27;XXXXX&#x27;,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;\t&#x27;scan.partition.column&#x27; = &#x27;id&#x27;,\n&quot;</span> +<br><span class="hljs-comment">//                        &quot;\t&#x27;scan.batch.size&#x27; = &#x27;5000&#x27;,\n&quot; +</span><br>                        <span class="hljs-string">&quot;\t&#x27;scan.partition.num&#x27; = &#x27;10000&#x27;,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;\t&#x27;url&#x27; = &#x27;jdbc:mysql://XXX:3306?useSSL=false&#x27;\n&quot;</span> +<br>                        <span class="hljs-string">&quot;)&quot;</span>);<br><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> tEnv.sqlQuery(<span class="hljs-string">&quot;select t.id,&quot;</span> +<br>                                              <span class="hljs-string">&quot;t.site,&quot;</span> +<br>                                              <span class="hljs-string">&quot;t.category_id,&quot;</span> +<br>                                              <span class="hljs-string">&quot;t.esc_category_id,&quot;</span> +<br>                                              <span class="hljs-string">&quot;t.model_id,&quot;</span> +<br>                                              <span class="hljs-string">&quot;t.version,&quot;</span> +<br>                                              <span class="hljs-string">&quot;t.update_type,&quot;</span> +<br>                                              <span class="hljs-string">&quot;DATE_FORMAT(t.create_time, &#x27;yyyy-MM-dd HH:mm:ss&#x27;) as create_time,&quot;</span> +<br>                                              <span class="hljs-string">&quot;DATE_FORMAT(t.update_time, &#x27;yyyy-MM-dd HH:mm:ss&#x27;) as update_time,&quot;</span> +<br>                                              <span class="hljs-string">&quot;t.deleted,&quot;</span> +<br>                                              <span class="hljs-string">&quot;0 as is_deleted_flg, &quot;</span> +<br>                                              <span class="hljs-string">&quot;1673853468700 as ts_ms &quot;</span> +<br>                                              <span class="hljs-string">&quot;from XXXX t &quot;</span><br><span class="hljs-comment">//                                              &quot;where t.version = &#x27;202211-0002&#x27;&quot;</span><br>                                    );<br><br><span class="hljs-comment">//        table.printSchema();</span><br><br>        DataStream&lt;GoodsEbayCompatibilityModel&gt; ordersDataStream = tEnv.toDataStream(table, GoodsEbayCompatibilityModel.class);<br>        SingleOutputStreamOperator&lt;Object&gt; map = ordersDataStream.map(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MapFunction</span>&lt;GoodsEbayCompatibilityModel, Object&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">map</span><span class="hljs-params">(GoodsEbayCompatibilityModel goodsEbayCompatibilityModel)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                <span class="hljs-keyword">return</span> JSONObject.toJSON(goodsEbayCompatibilityModel).toString();<br>            &#125;<br>        &#125;);<br><br><span class="hljs-comment">//        map.print();</span><br><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">sinkPproperties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        sinkPproperties.setProperty(<span class="hljs-string">&quot;format&quot;</span>, <span class="hljs-string">&quot;json&quot;</span>);<br>        sinkPproperties.setProperty(<span class="hljs-string">&quot;strip_outer_array&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br><br>        map.addSink(<br>                DorisSink.sink(<br>                        DorisReadOptions.builder().build(),<br>                        DorisExecutionOptions.builder()<br>                                .setBatchSize(<span class="hljs-number">100000</span>)<br>                                .setBatchIntervalMs(<span class="hljs-number">20000l</span>)<br>                                .setMaxRetries(<span class="hljs-number">3</span>)<br>                                .setStreamLoadProp(sinkPproperties).build(),<br>                        DorisOptions.builder()<br>                                .setFenodes(<span class="hljs-string">&quot;XXX:8030,XXX:8030,XXX:8030&quot;</span>)<br>                                .setTableIdentifier(<span class="hljs-string">&quot;ods.ods_bak&quot;</span>)<br>                                .setUsername(<span class="hljs-string">&quot;XXX&quot;</span>)<br>                                .setPassword(<span class="hljs-string">&quot;XXXX&quot;</span>)<br>                                .build()<br>                ));<br><br>        env.execute(<span class="hljs-string">&quot;mysql-sink-doris-batch&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>参考：<a href="https://github.com/peng128/flink-connector-multi-jdbc">https://github.com/peng128/flink-connector-multi-jdbc</a></p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>1.pom文件引入依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;<br>    &lt;artifactId&gt;FlinkMultiJdbcConnector&lt;/artifactId&gt;<br>    &lt;version&gt;1.0&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>2.将<a href="https://github.com/peng128/flink-connector-multi-jdbc%E6%89%93%E6%88%90jar%E5%8C%85">https://github.com/peng128/flink-connector-multi-jdbc打成jar包</a></p><p>3.mvn install手动引入FlinkMultiJdbcConnector的jar包</p><p>4.编写EscMysql2DorisBatch类和GoodsEbayCompatibilityModel类</p><p>​    GoodsEbayCompatibilityModel：同步的mysql表字段的映射bean类</p><p>​    EscMysql2DorisBatch：批量同步类</p><p>5.启动代码</p><p>flink run -m yarn-cluster -ys 5 -ynm esc-multi-lang-test -yD taskmanager.memory.managed.fraction&#x3D;0.2 -yjm 2048 -ytm 4096 -c com.itiaoling.app.ods.EscMultiLangMysql2DorisBatch -z mysql2doris_multi-lang-test -d &#x2F;home&#x2F;appman&#x2F;realtime_warehouse&#x2F;jar&#x2F;esc_batch&#x2F;PrdGoodsMultiLang.jar</p><h3 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h3><p>1.需要自增主健同步才快</p><p>2.暂时不支持datatime格式作为分割的列，指定的分割字段</p><p>会根据分割字段转换成select where xxx between 0 and 1000 的查询sql，如果xxx为string类型，会存在隐式转换的问题</p><p>3.原理是使用JDBC的方式select查询数据库，可以对比和datax的同步方式，本质是一样的</p><p>   datax的切分策略，参考网页：<a href="https://cloud.tencent.com/developer/article/1694188">https://cloud.tencent.com/developer/article/1694188</a></p><p>   1）计算并发量（即 needChannelNumber 大小）</p><p>   DataX有流控模式，其中，可以设置 bps 限速，tps 限速：</p><ul><li><p>bps 限速：needChannelNumber &#x3D; 总 byteLimit &#x2F; 单个 Channel byteLimit</p></li><li><p>tps 限速：needChannelNumber &#x3D; 总 recordLimit &#x2F; 单个 Channel recordLimit</p><p>如果以上都没有设置，则会根据用户在 <code>job.setting.speed.channel</code> 配置的并发数量设置     needChannelNumber。</p></li></ul><p>​    2）根据 needChannelNumber 将 Job 切分成多个 Task</p><p>这个步骤的具体切分逻辑交由相关插件去完成，例如 Rdb 对数据的拆分主要分成两类：</p><ul><li><p>如果用户配置了具体的 Table 数量，那么就按照 Table 为最小单元进行拆分（即一个 Table 对应一个 Task），并生成对应的 querySql；</p></li><li><p>如果用户还配置了 splitPk，则会根据 splitPk 进行切分，具体逻辑是根据 splitPk 区间对 Table 进行拆分，并生成对应的 querySql。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Flink</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FlinkCDC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo d部署网站时出现错误Error: Spawn failed(生成失败)</title>
    <link href="/2023/01/16/hexo-d%E9%83%A8%E7%BD%B2%E7%BD%91%E7%AB%99%E6%97%B6%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AFError-Spawn-failed-%E7%94%9F%E6%88%90%E5%A4%B1%E8%B4%A5/"/>
    <url>/2023/01/16/hexo-d%E9%83%A8%E7%BD%B2%E7%BD%91%E7%AB%99%E6%97%B6%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AFError-Spawn-failed-%E7%94%9F%E6%88%90%E5%A4%B1%E8%B4%A5/</url>
    
    <content type="html"><![CDATA[<p>关于博客使用过程中，进行远端部署时使用hexo d指令后可能会遇到的错误有很多，其中最常见的就是类似于下面Error: Spawn failed的错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">ssh: connect to host github.com port <span class="hljs-number">22</span>: Connection refused<br>fatal: Could not read from remote repository.<br><br>Please make sure you have the correct access rights<br>and the repository exists.<br>FATAL &#123;<br>  err: Error: Spawn failed<br>      at ChildProcess.&lt;anonymous&gt; (/Users/tingyu/blog/node_modules/hexo-util/lib/spawn.js:<span class="hljs-number">51</span>:<span class="hljs-number">21</span>)<br>      at ChildProcess.emit (node:events:<span class="hljs-number">527</span>:<span class="hljs-number">28</span>)<br>      at ChildProcess._handle.onexit (node:internal/child_process:<span class="hljs-number">291</span>:<span class="hljs-number">12</span>) &#123;<br>    code: <span class="hljs-number">128</span><br>  &#125;<br>&#125; Something<span class="hljs-string">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></code></pre></td></tr></table></figure><h2 id="解决方案-一"><a href="#解决方案-一" class="headerlink" title="解决方案(一)"></a>解决方案(一)</h2><p>1.在博客文件夹下删除 <strong>.deploy_git</strong> 文件</p><p><code>rm -rf .deploy_git/</code></p><p>2.<code>git config --global core.autocrlf false</code> 把git加入系统环境变量</p><p>3.重新执行<code>hexo c</code> <code>hexo g</code> <code>hexo d</code></p><h2 id="解决方案-二"><a href="#解决方案-二" class="headerlink" title="解决方案(二)"></a>解决方案(二)</h2><p>更换网络，用稳定的网络，避免因网络不流畅而导致部署超时。</p><p>这里我是连接了ECNU的VPN然后再提交就好了（hexo提交不需要连接VPN提交的，这次不知道怎么报错了）</p><p><code>hexo c</code> <code>hexo g</code> <code>hexo d</code></p><h2 id="解决方案-三"><a href="#解决方案-三" class="headerlink" title="解决方案(三)"></a>解决方案(三)</h2><p>有可能是你的git repo配置地址不正确,可以将http方式变更为ssh方式</p><p>如果之前hexo d部署都没问题，就不是git repo配置的地址不对了，去解决方案（二）看看</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">##进入站点根目录</span><br>cd <span class="hljs-regexp">/Users/</span>tingyu<span class="hljs-regexp">/blog/</span><br><br><span class="hljs-comment">##删除git提交内容文件夹</span><br>vim _config.yml<br><br><span class="hljs-comment">##修改</span><br>deploy:<br><br>type: git<br><br>repo: https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/yourname/y</span>ourname.github.io.git -&gt; git@github.com:a956551943/weixiaohui.github.io.git<br><br>branch: master<br><br><span class="hljs-comment">##最后</span><br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac系统安装vue教程</title>
    <link href="/2022/12/19/Mac%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85vue%E6%95%99%E7%A8%8B/"/>
    <url>/2022/12/19/Mac%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85vue%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="准备工作：安装node，npm"><a href="#准备工作：安装node，npm" class="headerlink" title="准备工作：安装node，npm"></a>准备工作：安装node，npm</h3><p>Vue依托nodejs，在安装Vue之前，先保证有装node,npm。通过如下命令检查是否有安装</p><p><code>node -v</code></p><p><code>npm -v</code></p><p>若没有安装，可选择手动安装or自动安装</p><p><strong>手动安装</strong>需要自己去官网下载安装包，下载之后，直接点击运行，一路默认就行，直到安装完成。</p><p>node下载地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a> （选择mac os） </p><p><strong>自动安装</strong>终端执行<code>brew install nodejs</code></p><h3 id="安装Vue"><a href="#安装Vue" class="headerlink" title="安装Vue"></a>安装Vue</h3><ul><li>终端输入安装vue</li></ul><p><code>npm i -g vue</code></p><ul><li>安装vue-cli</li></ul><p><code>npm install -g vue-cli</code></p><ul><li><p>安装webpack</p><p>(可检查自己电脑有没，我是安装的时候发现已经有webpack，通过执行 <code>vue list</code> 查看可以用的模板，如果有webpack，可自行跳过)</p></li></ul><p><code>npm install -g webpack </code></p><ul><li>检查vue是否安装</li></ul><p><code>vue -V</code></p><h3 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h3><p><code>vue init webpack myvue</code> 该命令会在执行命令目录处创建myvue的文件夹</p><p>然后输入命令<code>cd myvue</code></p><p>输入命令<code>sudo npm install</code></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221219121541.png"></p><p>发现如下爆错</p><p>网上search了一些解决方案，</p><ul><li>尝试将镜像设置成淘宝的，在执行发现同样的报错</li></ul><p><code>npm config set registry http://registry.npm.taobao.org/</code></p><ul><li><p>尝试删除<code>node_modules </code>，再执行 <code>npm install</code>也还是不行</p></li><li><p>尝试安装cnpm，<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p></li></ul><p>​        cnpm install也还是报错</p><ul><li><p>最后搜到是mac m1的问题</p><p>首先将node_modules文件夹删掉</p><p><code>sudo cnpm i chromedriver --chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver</code></p></li></ul><p>​       <img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221219123036.png"></p><p>​        最后sudo cnpm i </p><p>​         <img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221219122909.png"></p><p>​     运行vue，<code>npm run dev</code>  <img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221219123128.png"></p><h3 id="安装axios组件"><a href="#安装axios组件" class="headerlink" title="安装axios组件"></a>安装axios组件</h3><p><code>npm install axios</code></p><p>安装axios组件报以下错误</p><p>npm ERR! Cannot read properties of null (reading ‘isDescendantOf’)</p><p>改用cnpm下载成功</p><p><code>sudo cnpm install axios</code></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221220143432.png"></p><p>参考：</p><p><a href="http://t.zoukankan.com/amujoe-p-8586178.html">http://t.zoukankan.com/amujoe-p-8586178.html</a></p><p><a href="https://segmentfault.com/q/1010000011773453">https://segmentfault.com/q/1010000011773453</a></p><p><a href="https://toscode.gitee.com/wkeyuan/dwsurvey-vue/issues/I4YJWP">mac m1 初始化vue项目失败</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>chrome浏览器安装elasticsearch的head可视化插件</title>
    <link href="/2022/12/18/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E8%A3%85elasticsearch%E7%9A%84head%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8F%92%E4%BB%B6/"/>
    <url>/2022/12/18/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E8%A3%85elasticsearch%E7%9A%84head%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="head插件简介"><a href="#head插件简介" class="headerlink" title="head插件简介"></a>head插件简介</h2><p>elasticsearch-head被称为是弹性搜索集群的web前端，head插件主要是用来和elastic Cluster交互的Web前端<img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221218150033.png"></p><h2 id="chrome浏览器下的head插件安装"><a href="#chrome浏览器下的head插件安装" class="headerlink" title="chrome浏览器下的head插件安装"></a>chrome浏览器下的head插件安装</h2><p>用chrome浏览器集成head插件,操作比较简单, 可再不用单独运行服务, 简化了head插件的安装.</p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>1.下载es-head.crx文件<br>插件下载地址: <a href="https://github.com/mikewuhao/es-head">https://github.com/mikewuhao/es-head</a></p><p>2.把下载好的es-head.crx文件扩展名改为.zip的压缩包文件, 如:es-head.zip</p><p>3.解压缩es-head.zip文件到es-head文件夹</p><p>4.到chrome的扩展程序里–打开开发者模式—加载已解压的扩展程序–上传刚才的es-head文件夹, 打开浏览器看右上角的es-head图标插件, 即安装成功</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221218150430.png"></p><p>打开head插件连接好es路径即可</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221218150033.png"></p><p>基本可以在浏览器中使用的API：</p><p>1.查询健康状态：<br><code>http://192.168.23.10:9201/_cat/health?v</code><br>2.查询所有节点<br><code>http://192.168.23.10:9201/_cat/nodes?v</code><br>3.查询所有索引<br><code>http://192.168.23.10:9201/_cat/indices?v</code><br>4.查询单个索引的 mapping 和 设置详情<br><code>http://192.168.23.10:9201/索引名称/</code><br>5.根据数据的ID查询数据详情<br><code>http://192.168.23.10:9201/索引名称/类型/id号</code><br>6.查询索引的所有数据</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">23.10</span>:<span class="hljs-number">9201</span><span class="hljs-regexp">/索引名称/</span>_search<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">23.10</span>:<span class="hljs-number">9201</span><span class="hljs-regexp">/索引名称/</span>_search?from=<span class="hljs-number">1</span>&amp;size=<span class="hljs-number">10</span><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">23.10</span>:<span class="hljs-number">9201</span><span class="hljs-regexp">/索引名称/</span>_search?from=<span class="hljs-number">1</span>&amp;size=<span class="hljs-number">10</span>&amp;_source=mobile,user_id<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">23.10</span>:<span class="hljs-number">9201</span><span class="hljs-regexp">/索引名称/</span>_search?q=city:%E6%B7%B1<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>elasticsearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis与Mysql字段映射的三种方式</title>
    <link href="/2022/12/18/MyBatis%E4%B8%8EMysql%E5%AD%97%E6%AE%B5%E6%98%A0%E5%B0%84%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <url>/2022/12/18/MyBatis%E4%B8%8EMysql%E5%AD%97%E6%AE%B5%E6%98%A0%E5%B0%84%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>Java中属性命名一般使用驼峰命名法，mysql中的字段一般使用“_”来连接两个单词。这样就需要中间有一层转换，使两边能够对应起来。下面是三种不同的实现方式，根据情况做出合理的选择。</p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>数据库中表结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `t_user` (<br>  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,<br>  `user_name` varchar(20) DEFAULT NULL,<br>  `user_age` tinyint(3) unsigned DEFAULT NULL,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8<br><br></code></pre></td></tr></table></figure><p>项目中的Model，使用了lombok，省去了属性的get、set：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: ZhOu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2017/2/14</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> userAge;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a><strong>解决方式</strong></h3><p>1、方式一：设置resultMap，使返回列和Model中的属性匹配</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.mapper.UserMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.model.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_name&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userAge&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_age&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getOne&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Integer&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userMap&quot;</span>&gt;</span><br>        select id,user_name,user_age from t_user where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、方式二：设置别名，返回列的别名和Model中的属性一致，所以可以映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTwo&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Integer&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>     select id,user_name userName,user_age userAge from t_user where id=#&#123;id&#125;<br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、方式三：设置MybatisProperties ——&gt;Configuration——&gt;mapUnderscoreToCamelCase的属性值，这个属性的含义就是自动转换mysql中的字段，去掉下划线并转换成驼峰命名字段。源码中默认设置为false，所以想要MyBatis自动转换就需要配置一下，只需要在mybatis配置文件中加上如下代码即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>mapUnderscoreToCamelCase字面意思是转换下划线为驼峰命名，实际上真的如此吗？实验得出的结论是，被忽悠了。假如Model在的属性名不便，把mysql中的user_name改为use_rname、use_r_name，把user_age改为userag_e、uSerAge，实验的结果得出依然自动映射了。所以mapUnderscoreToCamelCase实际的操作是去掉了下划线，并把大写字母转换成小写字母。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FlinkCDC-2.0-原理与实践</title>
    <link href="/2022/12/06/FlinkCDC-2-0-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    <url>/2022/12/06/FlinkCDC-2-0-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="Flinkcdc原理"><a href="#Flinkcdc原理" class="headerlink" title="Flinkcdc原理"></a>Flinkcdc原理</h1><h2 id="一、CDC-概述"><a href="#一、CDC-概述" class="headerlink" title="一、CDC 概述"></a>一、CDC 概述</h2><p>CDC 的全称是 Change Data Capture ，在广义的概念上，只要是能捕获数据变更的技术，我们都可以称之为 CDC 。目前通常描述的 CDC 技术主要面向数据库的变更，是一种用于捕获数据库中数据变更的技术。CDC 技术的应用场景非常广泛：</p><ul><li><strong>数据同步：</strong>用于备份，容灾；</li><li><strong>数据分发：</strong>一个数据源分发给多个下游系统；</li><li><strong>数据采集：</strong>面向数据仓库 &#x2F; 数据湖的 ETL 数据集成，是非常重要的数据源。</li></ul><p>CDC 的技术方案非常多，目前业界主流的实现机制可以分为两种：</p><ul><li><strong>基于查询的 CDC：</strong><ul><li>离线调度查询作业，批处理。把一张表同步到其他系统，每次通过查询去获取表中最新的数据；</li><li>无法保障数据一致性，查的过程中有可能数据已经发生了多次变更；</li><li>不保障实时性，基于离线调度存在天然的延迟。</li></ul></li><li><strong>基于日志的 CDC：</strong><ul><li>实时消费日志，流处理，例如 MySQL 的 binlog 日志完整记录了数据库中的变更，可以把 binlog 文件当作流的数据源；</li><li>保障数据一致性，因为 binlog 文件包含了所有历史变更明细；</li><li>保障实时性，因为类似 binlog 的日志文件是可以流式消费的，提供的是实时数据。</li></ul></li></ul><p>对比常见的开源 CDC 方案，我们可以发现：</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221206155512.png"></p><ul><li>对比增量同步能力，<ul><li>基于日志的方式，可以很好的做到增量同步；</li><li>而基于查询的方式是很难做到增量同步的。</li></ul></li><li>对比全量同步能力，基于查询或者日志的 CDC 方案基本都支持，除了 Canal。</li><li>而对比全量 + 增量同步的能力，只有 Flink CDC、Debezium、Oracle Goldengate 支持较好。</li><li>从架构角度去看，该表将架构分为单机和分布式，这里的分布式架构不单纯体现在数据读取能力的水平扩展上，更重要的是在大数据场景下分布式系统接入能力。例如 Flink CDC 的数据入湖或者入仓的时候，下游通常是分布式的系统，如 Hive、HDFS、Iceberg、Hudi 等，那么从对接入分布式系统能力上看，Flink CDC 的架构能够很好地接入此类系统。</li><li>在数据转换 &#x2F; 数据清洗能力上，当数据进入到 CDC 工具的时候是否能较方便的对数据做一些过滤或者清洗，甚至聚合？<ul><li>在 Flink CDC 上操作相当简单，可以通过 Flink SQL 去操作这些数据；</li><li>但是像 DataX、Debezium 等则需要通过脚本或者模板去做，所以用户的使用门槛会比较高。</li></ul></li><li>另外，在生态方面，这里指的是下游的一些数据库或者数据源的支持。Flink CDC 下游有丰富的 Connector，例如写入到 TiDB、MySQL、Pg、HBase、Kafka、ClickHouse 等常见的一些系统，也支持各种自定义 connector。</li></ul><h2 id="二、Flink-CDC-项目"><a href="#二、Flink-CDC-项目" class="headerlink" title="二、Flink CDC 项目"></a>二、Flink CDC 项目</h2><h3 id="Dynamic-Table-amp-ChangeLog-Stream"><a href="#Dynamic-Table-amp-ChangeLog-Stream" class="headerlink" title="Dynamic Table &amp; ChangeLog Stream"></a>Dynamic Table &amp; ChangeLog Stream</h3><ul><li>Dynamic Table 就是 Flink SQL 定义的动态表，动态表和流的概念是对等的。参照上图，流可以转换成动态表，动态表也可以转换成流。</li><li>在 Flink SQL中，数据在从一个算子流向另外一个算子时都是以 Changelog Stream 的形式，任意时刻的 Changelog Stream 可以翻译为一个表，也可以翻译为一个流。</li></ul><p>联想下 MySQL 中的表和 binlog 日志，就会发现：MySQL 数据库的一张表所有的变更都记录在 binlog 日志中，如果一直对表进行更新，binlog 日志流也一直会追加，数据库中的表就相当于 binlog 日志流在某个时刻点物化的结果；</p><p>日志流就是将表的变更数据持续捕获的结果。这说明 Flink SQL 的 Dynamic Table 是可以非常自然地表示一张不断变化的 MySQL 数据库表。</p><h2 id="三、Flink-CDC-2-0-详解"><a href="#三、Flink-CDC-2-0-详解" class="headerlink" title="三、Flink CDC 2.0 详解"></a>三、Flink CDC 2.0 详解</h2><p>Flink CDC 1.x 可以不加锁，能够满足大部分场景，但牺牲了一定的数据准确性。Flink CDC 1.x 默认加全局锁，虽然能保证数据一致性，但存在上述 hang 住数据的风险。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221206160007.png"></p><p>通过上面的分析，可以知道 2.0 的设计方案，核心要解决上述的三个问题，即支持无锁、水平扩展、checkpoint。</p><h3 id="单个chunk无锁一致性读"><a href="#单个chunk无锁一致性读" class="headerlink" title="单个chunk无锁一致性读"></a>单个chunk无锁一致性读</h3><p>Flinkcdc2.0借鉴了DBlog 这篇论文里描述的无锁算法，利用Chunk 的切分算法可以实现数据同步任务多并发执行，和很多数据库的分库分表原理类似，Chunk切分算法通过表的主键对表中的数据进行分片。假设每个 Chunk 的步长为 10，按照这个规则进行切分，只需要把这些 Chunk 的区间做成左开右闭或者左闭右开的区间，保证衔接后的区间能够等于表的主键区间即可。</p><p>对于每个 Chunk 的无锁读算法，该算法的核心思想是在划分了 Chunk 后，对于每个 Chunk 的全量读取和增量读取，在不用锁的条件下完成一致性的合并。Chunk 的切分如下图所示：</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221206160435.png"></p><p>因为每个 chunk 只负责自己主键范围内的数据，不难推导，只要能够保证每个 Chunk 读取的一致性，就能保证整张表读取的一致性，这便是无锁算法的基本原理。</p><p>Netflix 的 DBLog 论文中 Chunk 读取算法是通过在 DB 维护一张信号表，再通过信号表在 binlog 文件中打点，记录每个 chunk 读取前的 Low Position (低位点) 和读取结束之后 High Position (高位点) ，首先在低位点去查询该 Chunk 的全量数据。在读取出这一部分 Chunk 的数据之后，再将这 2 个位点之间的 binlog 增量数据合并到 chunk 所属的全量数据，从而得到高位点时刻chunk 对应的全量数据。</p><p>Flink CDC 结合自身的情况，在 Chunk 读取算法上做了去信号表的改进，不需要额外维护信号表，通过直接读取 binlog 位点替代在 binlog 中做标记的功能，整体的 chunk 读算法描述如下图所示：</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221206160722.png"></p><p>比如正在读取 Chunk-1，Chunk 的区间是 [K1, K10]，首先直接将该区间内的数据 select 出来并把它存在 buffer 中，在**select 之前记录 binlog 的一个位点 (低位点)<strong>，</strong>select 完成后记录 binlog 的一个位点 (高位点)**。然后开始增量部分，消费从低位点到高位点的 binlog。</p><ul><li>图中的 - ( k2,100 ) + ( k2,108 ) 记录表示这条数据的值从 100 更新到 108；</li><li>第二条记录是删除 k3；</li><li>第三条记录是更新 k2 为 119；</li><li>第四条记录是 k5 的数据由原来的 77 变更为 100。</li></ul><p>观察图片中右下角最终的输出，会发现在消费该 chunk 的 binlog 时，出现的 key 是k2、k3、k5，我们前往 buffer 将这些 key 做标记。</p><ul><li>对于 k1、k4、k6、k7 来说，在高位点读取完毕之后，这些记录没有变化过，所以这些数据是可以直接输出的；</li><li>对于改变过的数据，则需要将增量的数据合并到全量的数据中，只保留合并后的最终数据。例如，k2 最终的结果是 119 ，那么只需要输出 +(k2,119)，而不需要中间发生过改变的数据。</li></ul><p>通过这种方式，Chunk 最终的输出就是在高位点是 chunk 中最新的数据。</p><h3 id="多个Chunk一致性读"><a href="#多个Chunk一致性读" class="headerlink" title="多个Chunk一致性读"></a>多个Chunk一致性读</h3><p>上图描述的是单个 Chunk 的一致性读，但是如果有多个表分了很多不同的 Chunk，且这些 Chunk 分发到了不同的 task 中，那么如何分发 Chunk 并保证全局一致性读呢？</p><p>这个就是基于 FLIP-27 来优雅地实现的，通过下图可以看到有 SourceEnumerator 的组件，这个组件主要用于 Chunk 的划分，划分好的 Chunk 会提供给下游的 SourceReader 去读取，通过把 chunk 分发给不同的 SourceReader 便实现了并发读取 Snapshot Chunk 的过程，同时基于 FLIP-27 我们能较为方便地做到 chunk 粒度的 checkpoint。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221206161620.png"></p><p>当 Snapshot Chunk 读取完成之后，需要有一个汇报的流程，如下图中橘色的汇报信息，将 Snapshot Chunk 完成信息汇报给 SourceEnumerator。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221206161646.png"></p><p>汇报的主要目的是为了后续分发 binlog chunk (如下图)。因为 Flink CDC 支持全量 + 增量同步，所以当所有 Snapshot Chunk 读取完成之后，还需要消费增量的 binlog，这是通过下发一个 binlog chunk 给任意一个 Source Reader 进行单并发读取实现的。</p><h1 id="Flinkcdc实践"><a href="#Flinkcdc实践" class="headerlink" title="Flinkcdc实践"></a>Flinkcdc实践</h1><p>Flink 版本是 1.14，customer 表的数据量是 6500 万条，Source 并发为 8，全量读取阶段: MySQL CDC 2.0 用时 <strong>13</strong> 分钟；1亿数据量的表，Source并发为1，全量读取阶段MySQL CDC 2.0 用时<strong>2小时</strong>。</p><p>flinkcdc多库多表同步代码：(Mysql-&gt;Kafka-&gt;Doris)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><code class="hljs scala">## <span class="hljs-type">Mysql2Kafka</span><br><span class="hljs-keyword">package</span> com.itiaoling.app.ods<br><br><span class="hljs-keyword">import</span> com.itiaoling.bean.config.&#123;<span class="hljs-type">KafkaSinkConf</span>, <span class="hljs-type">MySqlSourceConf</span>, <span class="hljs-type">MySqlToKafkaConf</span>&#125;<br><span class="hljs-keyword">import</span> com.itiaoling.source.<span class="hljs-type">MySqlSourceFunction</span><br><span class="hljs-keyword">import</span> com.itiaoling.util.<span class="hljs-type">ExecutionEnvUtil</span><br><span class="hljs-keyword">import</span> com.ververica.cdc.connectors.mysql.source.<span class="hljs-type">MySqlSource</span><br><span class="hljs-keyword">import</span> org.apache.flink.api.common.eventtime.<span class="hljs-type">WatermarkStrategy</span><br><span class="hljs-keyword">import</span> org.apache.flink.api.common.serialization.<span class="hljs-type">SimpleStringSchema</span><br><span class="hljs-keyword">import</span> org.apache.flink.api.java.utils.<span class="hljs-type">ParameterTool</span><br><span class="hljs-keyword">import</span> org.apache.flink.configuration.<span class="hljs-type">Configuration</span><br><span class="hljs-keyword">import</span> org.apache.flink.connector.kafka.sink.&#123;<span class="hljs-type">KafkaRecordSerializationSchema</span>, <span class="hljs-type">KafkaSink</span>&#125;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.<span class="hljs-type">StreamExecutionEnvironment</span><br><span class="hljs-keyword">import</span> java.util<br><span class="hljs-keyword">import</span> java.util.<span class="hljs-type">Map</span><br><br><span class="hljs-keyword">import</span> com.itiaoling.sink.<span class="hljs-type">KafkaSinkFunction</span><br><br><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">MySqlToKafka</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> = &#123;<br>    <span class="hljs-keyword">val</span> parameterTool = <span class="hljs-type">ParameterTool</span>.fromArgs(args)<br>    <span class="hljs-keyword">val</span> active = parameterTool.get(<span class="hljs-string">&quot;spring.profiles.active&quot;</span>)<br>    <span class="hljs-keyword">val</span> sourceSinkType = <span class="hljs-type">Integer</span>.valueOf(parameterTool.get(<span class="hljs-string">&quot;sourceSinkType&quot;</span>))<br>    <span class="hljs-keyword">val</span> businessType = <span class="hljs-type">Integer</span>.valueOf(parameterTool.get(<span class="hljs-string">&quot;businessType&quot;</span>))<br>    <span class="hljs-keyword">val</span> tableName = parameterTool.get(<span class="hljs-string">&quot;tableName&quot;</span>)<br>    <span class="hljs-comment">//mysql2kafka配置信息</span><br>    <span class="hljs-keyword">val</span> mySqlToKafkaConf: <span class="hljs-type">MySqlToKafkaConf</span> = <span class="hljs-type">ExecutionEnvUtil</span>.getSourceSink(active, sourceSinkType, businessType, tableName).asInstanceOf[<span class="hljs-type">MySqlToKafkaConf</span>]<br><br>    <span class="hljs-keyword">val</span> flinkEnv: util.<span class="hljs-type">Map</span>[<span class="hljs-type">String</span>, <span class="hljs-type">String</span>] = mySqlToKafkaConf.flinkEnv<br>    <span class="hljs-keyword">val</span> mysqlConf: <span class="hljs-type">MySqlSourceConf</span> = mySqlToKafkaConf.mysqlSourceConf<br>    <span class="hljs-keyword">val</span> sinkConfig: <span class="hljs-type">KafkaSinkConf</span> = mySqlToKafkaConf.kafkaSinkConf<br><br><br>    <span class="hljs-keyword">val</span> conf = <span class="hljs-keyword">new</span> <span class="hljs-type">Configuration</span><br>    <span class="hljs-keyword">val</span> it: util.<span class="hljs-type">Iterator</span>[<span class="hljs-type">Map</span>.<span class="hljs-type">Entry</span>[<span class="hljs-type">String</span>, <span class="hljs-type">String</span>]] = flinkEnv.entrySet().iterator()<br>    <span class="hljs-keyword">while</span> (it.hasNext) &#123;<br>      <span class="hljs-keyword">val</span> kv: <span class="hljs-type">Map</span>.<span class="hljs-type">Entry</span>[<span class="hljs-type">String</span>, <span class="hljs-type">String</span>] = it.next()<br>      conf.setString(kv.getKey, kv.getValue)<br>    &#125;<br><br>    <span class="hljs-keyword">val</span> env: <span class="hljs-type">StreamExecutionEnvironment</span> = <span class="hljs-type">StreamExecutionEnvironment</span>.getExecutionEnvironment(conf)<br><br>    <span class="hljs-keyword">val</span> mySqlSource: <span class="hljs-type">MySqlSource</span>[<span class="hljs-type">String</span>] = <span class="hljs-type">MySqlSourceFunction</span>.createSourceFunction(mysqlConf)<br><span class="hljs-comment">//    val prefix = sinkConfig.getKafkaTopicPrefix</span><br><span class="hljs-comment">//    val suffix = sinkConfig.getKafkaTopicSuffix</span><br><span class="hljs-comment">//    val topic: String = prefix + &quot;_&quot; + tableName + &quot;_&quot; + suffix</span><br><span class="hljs-comment">//    val sink: KafkaSink[String] = KafkaSink.builder[String].setBootstrapServers(sinkConfig.getBootstrapServers)</span><br><span class="hljs-comment">//      .setRecordSerializer(KafkaRecordSerializationSchema.builder().setTopic(topic).setValueSerializationSchema(new SimpleStringSchema()).build)</span><br><span class="hljs-comment">//      .build</span><br>    <span class="hljs-comment">//使用此方法，可以将配置文件中同步所有表分别同步到不同的kafka的topic中</span><br>    env.fromSource(mySqlSource,<span class="hljs-type">WatermarkStrategy</span>.noWatermarks[<span class="hljs-type">String</span>],<span class="hljs-string">&quot;MySQL Source&quot;</span>)<br>        .addSink(<span class="hljs-type">KafkaSinkFunction</span>.createSinkFunction2(sinkConfig)).name(tableName)<br><br><span class="hljs-comment">//    env.fromSource(mySqlSource, WatermarkStrategy.noWatermarks[String], &quot;MySQL Source&quot;).sinkTo(sink).setParallelism(2)</span><br><br>    env.execute(mySqlToKafkaConf.getAppName)<br><br>  &#125;<br><br>&#125;<br><br><br><br><span class="hljs-keyword">package</span> com.itiaoling.source<br><br><span class="hljs-keyword">import</span> com.itiaoling.bean.config.<span class="hljs-type">MySqlSourceConf</span><br><span class="hljs-keyword">import</span> java.util<br><span class="hljs-keyword">import</span> java.util.&#123;<span class="hljs-type">Map</span>, <span class="hljs-type">Properties</span>&#125;<br><br><span class="hljs-keyword">import</span> com.itiaoling.app.function.<span class="hljs-type">JsonDebeziumDeserializeSchema</span><br><span class="hljs-keyword">import</span> com.ververica.cdc.connectors.mysql.source.<span class="hljs-type">MySqlSource</span><br><br><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">MySqlSourceFunction</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createSourceFunction</span></span>(mysqlConf: <span class="hljs-type">MySqlSourceConf</span>) = &#123;<br>    validateParameter(mysqlConf)<br>    <span class="hljs-keyword">val</span> debeziumProperties = <span class="hljs-keyword">new</span> <span class="hljs-type">Properties</span>()<br><br>    <span class="hljs-keyword">val</span> it: util.<span class="hljs-type">Iterator</span>[<span class="hljs-type">Map</span>.<span class="hljs-type">Entry</span>[<span class="hljs-type">String</span>, <span class="hljs-type">String</span>]] = mysqlConf.debeziumProperties.entrySet().iterator()<br>    <span class="hljs-keyword">while</span> (it.hasNext) &#123;<br>      <span class="hljs-keyword">val</span> kv: <span class="hljs-type">Map</span>.<span class="hljs-type">Entry</span>[<span class="hljs-type">String</span>, <span class="hljs-type">String</span>] = it.next()<br>      debeziumProperties.setProperty(kv.getKey, kv.getValue)<br>    &#125;<br>    <span class="hljs-type">MySqlSource</span>.builder()<br>      .hostname(mysqlConf.hostname)<br>      .port(mysqlConf.port)<br>      .scanNewlyAddedTableEnabled(<span class="hljs-literal">true</span>)<br>      .databaseList(mysqlConf.mysqlDb)<br>      .username(mysqlConf.username)<br>      .password(mysqlConf.password)<br>      .tableList(mysqlConf.tableName)<br>      .serverTimeZone(debeziumProperties.getOrDefault(<span class="hljs-string">&quot;server-time-zone&quot;</span>, <span class="hljs-string">&quot;UTC&quot;</span>).toString)<br>      .deserializer(<span class="hljs-keyword">new</span> <span class="hljs-type">JsonDebeziumDeserializeSchema</span>(debeziumProperties.getOrDefault(<span class="hljs-string">&quot;server-time-zone&quot;</span>, <span class="hljs-string">&quot;UTC&quot;</span>).toString, mysqlConf.addColumns))<br>      .debeziumProperties(debeziumProperties)<br>      .build()<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">validateParameter</span></span>(mysqlConf: <span class="hljs-type">MySqlSourceConf</span>) = &#123;<br>    <span class="hljs-comment">//    Validater.NullValidate(&quot;hostname&quot;,mysqlConf.hostname)</span><br>  &#125;<br><br>&#125;<br><br><br><span class="hljs-keyword">package</span> com.itiaoling.app.function<br><br><span class="hljs-keyword">import</span> java.time.<span class="hljs-type">ZoneId</span><br><span class="hljs-keyword">import</span> java.util.<span class="hljs-type">Map</span><br><span class="hljs-keyword">import</span> java.&#123;sql, util&#125;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.<span class="hljs-type">JSONObject</span><br><span class="hljs-keyword">import</span> com.itiaoling.util.<span class="hljs-type">DateUtils</span><br><span class="hljs-keyword">import</span> com.ververica.cdc.debezium.<span class="hljs-type">DebeziumDeserializationSchema</span><br><span class="hljs-keyword">import</span> com.ververica.cdc.debezium.utils.<span class="hljs-type">TemporalConversions</span><br><span class="hljs-keyword">import</span> io.debezium.data.<span class="hljs-type">Envelope</span><br><span class="hljs-keyword">import</span> io.debezium.data.<span class="hljs-type">Envelope</span>.<span class="hljs-type">Operation</span><br><span class="hljs-keyword">import</span> io.debezium.time._<br><span class="hljs-keyword">import</span> org.apache.flink.api.common.typeinfo.&#123;<span class="hljs-type">BasicTypeInfo</span>, <span class="hljs-type">TypeInformation</span>&#125;<br><span class="hljs-keyword">import</span> org.apache.flink.types.<span class="hljs-type">RowKind</span><br><span class="hljs-keyword">import</span> org.apache.flink.util.<span class="hljs-type">Collector</span><br><span class="hljs-keyword">import</span> org.apache.kafka.connect.data.&#123;<span class="hljs-type">Field</span>, <span class="hljs-type">SchemaBuilder</span>, <span class="hljs-type">Struct</span>&#125;<br><span class="hljs-keyword">import</span> org.apache.kafka.connect.source.<span class="hljs-type">SourceRecord</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonDebeziumDeserializeSchema</span>(<span class="hljs-params">serverTimeZone: <span class="hljs-type">String</span>, addColumns: java.util.<span class="hljs-type">Map</span>[<span class="hljs-type">String</span>, <span class="hljs-type">String</span>]</span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">DebeziumDeserializationSchema</span>[<span class="hljs-type">String</span>] </span>&#123;<br><br>  <span class="hljs-keyword">var</span> ts_ms: <span class="hljs-type">AnyRef</span> = _<br><br>  <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deserialize</span></span>(sourceRecord: <span class="hljs-type">SourceRecord</span>, collector: <span class="hljs-type">Collector</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> = &#123;<br>    <span class="hljs-keyword">val</span> operation: <span class="hljs-type">Envelope</span>.<span class="hljs-type">Operation</span> = <span class="hljs-type">Envelope</span>.operationFor(sourceRecord)<br>    <span class="hljs-keyword">val</span> value: <span class="hljs-type">Struct</span> = sourceRecord.value().asInstanceOf[<span class="hljs-type">Struct</span>]<br>    <span class="hljs-keyword">val</span> sourceStruct: <span class="hljs-type">Struct</span> = value.getStruct(<span class="hljs-string">&quot;source&quot;</span>)<br>    <span class="hljs-keyword">val</span> db: <span class="hljs-type">String</span> = sourceStruct.get(<span class="hljs-string">&quot;db&quot;</span>).asInstanceOf[<span class="hljs-type">String</span>]<br>    <span class="hljs-keyword">val</span> table: <span class="hljs-type">String</span> = sourceStruct.get(<span class="hljs-string">&quot;table&quot;</span>).asInstanceOf[<span class="hljs-type">String</span>]<br>    <span class="hljs-keyword">val</span> source: <span class="hljs-type">String</span> = db.replaceAll(<span class="hljs-string">&quot;^*\\d$&quot;</span>, <span class="hljs-string">&quot;&quot;</span>) + <span class="hljs-string">&quot;.&quot;</span> +<br>      table.replaceAll(<span class="hljs-string">&quot;^*_\\d$&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br>    ts_ms = value.get(<span class="hljs-string">&quot;ts_ms&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> (operation != <span class="hljs-type">Operation</span>.<span class="hljs-type">CREATE</span> &amp;&amp; operation != <span class="hljs-type">Operation</span>.<span class="hljs-type">READ</span>) &#123;<br>      <span class="hljs-keyword">if</span> (operation == <span class="hljs-type">Operation</span>.<span class="hljs-type">DELETE</span>) &#123;<br>        <span class="hljs-keyword">val</span> data: <span class="hljs-type">JSONObject</span> = extractData(value, <span class="hljs-string">&quot;before&quot;</span>)<br>        data.put(<span class="hljs-string">&quot;is_deleted_flg&quot;</span>,<span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">val</span> record: <span class="hljs-type">String</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">JSONObject</span>()<br>          .fluentPut(<span class="hljs-string">&quot;op&quot;</span>, <span class="hljs-type">RowKind</span>.<span class="hljs-type">DELETE</span>.shortString())<br>          .fluentPut(<span class="hljs-string">&quot;data&quot;</span>, addColumns(data))<br>          .fluentPut(<span class="hljs-string">&quot;source&quot;</span>, source)<br>          .toJSONString<br>        collector.collect(record)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">val</span> beforeData: <span class="hljs-type">JSONObject</span> = extractData(value, <span class="hljs-string">&quot;before&quot;</span>)<br>        <span class="hljs-keyword">val</span> afterData: <span class="hljs-type">JSONObject</span> = extractData(value, <span class="hljs-string">&quot;after&quot;</span>)<br>        afterData.put(<span class="hljs-string">&quot;is_deleted_flg&quot;</span>,<span class="hljs-number">0</span>)<br><br>        <span class="hljs-keyword">val</span> map: util.<span class="hljs-type">Map</span>[<span class="hljs-type">String</span>, <span class="hljs-type">AnyRef</span>] = beforeData.getInnerMap<br>        <span class="hljs-keyword">val</span> map1 = afterData.getInnerMap<br><br>        map.putAll(map1)<br><br>        <span class="hljs-keyword">val</span> afterRecord: <span class="hljs-type">String</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">JSONObject</span>()<br>          .fluentPut(<span class="hljs-string">&quot;source&quot;</span>, source)<br>          .fluentPut(<span class="hljs-string">&quot;op&quot;</span>, <span class="hljs-type">RowKind</span>.<span class="hljs-type">UPDATE_AFTER</span>.shortString())<br>          .fluentPut(<span class="hljs-string">&quot;data&quot;</span>, addColumns(<span class="hljs-keyword">new</span> <span class="hljs-type">JSONObject</span>(map)))<br>          .toJSONString<br>        collector.collect(afterRecord)<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">val</span> data: <span class="hljs-type">JSONObject</span> = extractData(value, <span class="hljs-string">&quot;after&quot;</span>)<br>      data.put(<span class="hljs-string">&quot;is_deleted_flg&quot;</span>,<span class="hljs-number">0</span>)<br>      <span class="hljs-keyword">val</span> record: <span class="hljs-type">String</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">JSONObject</span>()<br>        .fluentPut(<span class="hljs-string">&quot;source&quot;</span>, source)<br>        .fluentPut(<span class="hljs-string">&quot;data&quot;</span>, addColumns(data))<br>        .fluentPut(<span class="hljs-string">&quot;op&quot;</span>, <span class="hljs-type">RowKind</span>.<span class="hljs-type">INSERT</span>.shortString())<br>        .toJSONString<br>      collector.collect(record)<br>    &#125;<br><br>  &#125;<br><br>  <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getProducedType</span></span>: <span class="hljs-type">TypeInformation</span>[<span class="hljs-type">String</span>] = <span class="hljs-type">BasicTypeInfo</span>.<span class="hljs-type">STRING_TYPE_INFO</span><br><br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">extractData</span></span>(struct: <span class="hljs-type">Struct</span>, structType: <span class="hljs-type">String</span>): <span class="hljs-type">JSONObject</span> = &#123;<br>    <span class="hljs-keyword">import</span> scala.collection.<span class="hljs-type">JavaConversions</span>._<br>    <span class="hljs-keyword">val</span> valueStruct: <span class="hljs-type">Struct</span> = struct.getStruct(structType)<br>    <span class="hljs-keyword">val</span> data = <span class="hljs-keyword">new</span> <span class="hljs-type">JSONObject</span>()<br><br>    <span class="hljs-keyword">val</span> fields: util.<span class="hljs-type">List</span>[<span class="hljs-type">Field</span>] = valueStruct.schema().fields()<br>    <span class="hljs-keyword">val</span> timestamp_schema = <span class="hljs-type">SchemaBuilder</span>.int64().name(<span class="hljs-string">&quot;org.apache.kafka.connect.data.Timestamp&quot;</span>)<br>    fields.foreach(field =&gt; &#123;<br>      <span class="hljs-keyword">val</span> v: <span class="hljs-type">AnyRef</span> = valueStruct.get(field)<br>      <span class="hljs-keyword">val</span> typ: <span class="hljs-type">String</span> = field.schema().name()<br>      <span class="hljs-keyword">val</span> value: <span class="hljs-type">AnyRef</span> = typ <span class="hljs-keyword">match</span> &#123;<br>          <span class="hljs-comment">//转成当地时区，本项目中的当地时间就是中国时间，所以直接写死</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-type">Timestamp</span>.<span class="hljs-type">SCHEMA_NAME</span> =&gt; <span class="hljs-keyword">if</span> (v == <span class="hljs-literal">null</span>) <span class="hljs-literal">null</span> <span class="hljs-keyword">else</span>  <span class="hljs-type">DateUtils</span>.format(v.toString.toLong,<span class="hljs-type">ZoneId</span>.of(<span class="hljs-string">&quot;UTC&quot;</span>))<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-type">ZonedTimestamp</span>.<span class="hljs-type">SCHEMA_NAME</span> =&gt; <span class="hljs-keyword">if</span> (v == <span class="hljs-literal">null</span>) <span class="hljs-literal">null</span> <span class="hljs-keyword">else</span> sql.<span class="hljs-type">Timestamp</span>.valueOf(<span class="hljs-type">TemporalConversions</span>.toLocalDateTime(v, <span class="hljs-type">ZoneId</span>.of(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>))).toString<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-type">Date</span>.<span class="hljs-type">SCHEMA_NAME</span> =&gt;<span class="hljs-keyword">if</span> (v == <span class="hljs-literal">null</span>) <span class="hljs-literal">null</span> <span class="hljs-keyword">else</span> <span class="hljs-type">DateUtils</span>.format2(v.toString.toLong * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> *<span class="hljs-number">1000</span>L)<br>        <span class="hljs-keyword">case</span> _ =&gt; v<br>      &#125;<br>      data.put(field.name(), value)<br>    &#125;)<br><br>    data<br>  &#125;<br><br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">addColumns</span></span>(data: <span class="hljs-type">JSONObject</span>): <span class="hljs-type">JSONObject</span> = &#123;<br>    <span class="hljs-keyword">val</span> it: util.<span class="hljs-type">Iterator</span>[<span class="hljs-type">Map</span>.<span class="hljs-type">Entry</span>[<span class="hljs-type">String</span>, <span class="hljs-type">String</span>]] = addColumns.entrySet().iterator()<br>    <span class="hljs-keyword">while</span> (it.hasNext) &#123;<br>      <span class="hljs-keyword">val</span> kv: <span class="hljs-type">Map</span>.<span class="hljs-type">Entry</span>[<span class="hljs-type">String</span>, <span class="hljs-type">String</span>] = it.next()<br>      data.put(kv.getKey, kv.getValue)<br>    &#125;<br>    data.put(<span class="hljs-string">&quot;ts_ms&quot;</span>,ts_ms)<br>    data<br>  &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>kafka2doris</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itiaoling.app.ods;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.itiaoling.bean.Kafka2DorisConf;<br><span class="hljs-keyword">import</span> com.itiaoling.bean.config.DorisSinkConf;<br><span class="hljs-keyword">import</span> com.itiaoling.bean.config.KafkaSourceConf;<br><span class="hljs-keyword">import</span> com.itiaoling.bean.config.Synchronization;<br><span class="hljs-keyword">import</span> com.itiaoling.common.OffsetStrategyEnum;<br><span class="hljs-keyword">import</span> com.itiaoling.util.ExecutionEnvUtil;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.doris.flink.cfg.DorisExecutionOptions;<br><span class="hljs-keyword">import</span> org.apache.doris.flink.cfg.DorisOptions;<br><span class="hljs-keyword">import</span> org.apache.doris.flink.cfg.DorisReadOptions;<br><span class="hljs-keyword">import</span> org.apache.doris.flink.cfg.DorisSink;<br><span class="hljs-keyword">import</span> org.apache.flink.api.common.eventtime.WatermarkStrategy;<br><span class="hljs-keyword">import</span> org.apache.flink.api.common.functions.FilterFunction;<br><span class="hljs-keyword">import</span> org.apache.flink.api.common.functions.FlatMapFunction;<br><span class="hljs-keyword">import</span> org.apache.flink.api.common.serialization.SimpleStringSchema;<br><span class="hljs-keyword">import</span> org.apache.flink.api.java.utils.ParameterTool;<br><span class="hljs-keyword">import</span> org.apache.flink.configuration.Configuration;<br><span class="hljs-keyword">import</span> org.apache.flink.connector.kafka.source.KafkaSource;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStreamSource;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<br><span class="hljs-keyword">import</span> org.apache.flink.util.Collector;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Description: Kafka Sink Doris程序</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: liu chao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022-03-04 17:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Kafka2Doris</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ParameterTool</span> <span class="hljs-variable">parameterTool</span> <span class="hljs-operator">=</span> ParameterTool.fromArgs(args);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">active</span> <span class="hljs-operator">=</span> parameterTool.get(<span class="hljs-string">&quot;spring.profiles.active&quot;</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">sourceSinkType</span> <span class="hljs-operator">=</span> Integer.valueOf(parameterTool.get(<span class="hljs-string">&quot;sourceSinkType&quot;</span>));<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">businessType</span> <span class="hljs-operator">=</span> Integer.valueOf(parameterTool.get(<span class="hljs-string">&quot;businessType&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">tableName</span> <span class="hljs-operator">=</span> parameterTool.get(<span class="hljs-string">&quot;tableName&quot;</span>);<br>        <span class="hljs-comment">//kafka2doris配置信息</span><br>        <span class="hljs-type">Kafka2DorisConf</span> <span class="hljs-variable">kafka2DorisConf</span> <span class="hljs-operator">=</span> (Kafka2DorisConf) ExecutionEnvUtil.getYamlSourceSink(active, sourceSinkType, businessType, tableName);<br>        <span class="hljs-comment">//Flink环境配置信息</span><br>        Map&lt;String, String&gt; flinkEnv = kafka2DorisConf.getFlinkEnv();<br>        <span class="hljs-comment">//kafka配置信息</span><br>        <span class="hljs-type">KafkaSourceConf</span> <span class="hljs-variable">kafkaSourceConf</span> <span class="hljs-operator">=</span> kafka2DorisConf.getKafkaSourceConf();<br>        <span class="hljs-comment">//Doris Sink信息</span><br>        <span class="hljs-type">DorisSinkConf</span> <span class="hljs-variable">dorisSinkConf</span> <span class="hljs-operator">=</span> kafka2DorisConf.getDorisSinkConf();<br>        <span class="hljs-comment">//同步配置信息</span><br>        List&lt;Synchronization&gt; synchronizations = kafka2DorisConf.getSynchronizations();<br><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">kafkaProp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        kafkaProp.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaSourceConf.getBootstrapServers());<br>        kafkaProp.setProperty(ConsumerConfig.GROUP_ID_CONFIG, kafkaSourceConf.getGroupId());<br>        kafkaProp.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, kafkaSourceConf.getOffsetConfig());<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">dorisUrlWithPort</span> <span class="hljs-operator">=</span> dorisSinkConf.getDorisUrlWithPort();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dorisUser</span> <span class="hljs-operator">=</span> dorisSinkConf.getDorisUser();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dorisPassword</span> <span class="hljs-operator">=</span> dorisSinkConf.getDorisPassword();<br><br><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = flinkEnv.entrySet().iterator();<br>        <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>            Map.Entry&lt;String, String&gt; kv = it.next();<br>            conf.setString(kv.getKey(), kv.getValue());<br>        &#125;<br>        <span class="hljs-type">StreamExecutionEnvironment</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment(conf);<br>        <span class="hljs-keyword">for</span> (Synchronization synchronization : synchronizations) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sequenceCol</span> <span class="hljs-operator">=</span> synchronization.getSequenceCol();<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">kafkaTopic</span> <span class="hljs-operator">=</span> synchronization.getKafkaTopic();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">dorisDb</span> <span class="hljs-operator">=</span> synchronization.getDorisDb();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">dorisTable</span> <span class="hljs-operator">=</span> synchronization.getDorisTable();<br>            log.info(<span class="hljs-string">&quot;kafkaTopic: &quot;</span> + kafkaTopic + <span class="hljs-string">&quot;\n&quot;</span> + <span class="hljs-string">&quot;dorisDb:&quot;</span> + dorisDb + <span class="hljs-string">&quot;\n&quot;</span> + <span class="hljs-string">&quot;dorisTable:&quot;</span> + dorisTable+<span class="hljs-string">&quot;\n&quot;</span>);<br><br>            <span class="hljs-type">Properties</span> <span class="hljs-variable">dorisProp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>            dorisProp.setProperty(<span class="hljs-string">&quot;format&quot;</span>, <span class="hljs-string">&quot;json&quot;</span>);<br>            dorisProp.setProperty(<span class="hljs-string">&quot;strip_outer_array&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br>            dorisProp.setProperty(<span class="hljs-string">&quot;function_column.sequence_col&quot;</span>, sequenceCol);<br><br>            KafkaSource&lt;String&gt; source = KafkaSource.&lt;String&gt;builder()<br>                    .setBootstrapServers(kafkaSourceConf.getBootstrapServers())<br>                    .setTopics(kafkaTopic)<br>                    .setGroupId(kafkaSourceConf.getGroupId())<br>                    .setStartingOffsets(OffsetStrategyEnum.getStrategyByConfig(kafkaSourceConf.getOffsetConfig()))<br>                    .setValueOnlyDeserializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleStringSchema</span>())<br>                    .build();<br>            DataStreamSource&lt;String&gt; json = env.fromSource(source, WatermarkStrategy.noWatermarks(), kafkaTopic);<br><br>            <span class="hljs-comment">//将非正常的json数据剔除</span><br>            SingleOutputStreamOperator&lt;String&gt; filter = json.filter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterFunction</span>&lt;String&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">filter</span><span class="hljs-params">(String value)</span> &#123;<br>                    <span class="hljs-type">Boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> (JSONObject) JSONObject.parse(value);<br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> jsonObject.get(<span class="hljs-string">&quot;data&quot;</span>);<br>                        <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;null&quot;</span>.equals(data))&#123;<br>                            result = <span class="hljs-literal">false</span>;<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        result = <span class="hljs-literal">false</span>;<br>                        log.error(<span class="hljs-string">&quot;json 格式化异常: &quot;</span> + value, e);<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> result;<br>                &#125;<br>            &#125;);<br><br>            SingleOutputStreamOperator&lt;String&gt; rowData = filter.flatMap(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FlatMapFunction</span>&lt;String, String&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flatMap</span><span class="hljs-params">(String value, Collector&lt;String&gt; out)</span> &#123;<br>                    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> (JSONObject) JSONObject.parse(value);<br>                    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> (JSONObject) jsonObject.get(<span class="hljs-string">&quot;data&quot;</span>);<br><br>                    <span class="hljs-keyword">if</span> (data.get(<span class="hljs-string">&quot;create_time&quot;</span>) == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;null&quot;</span>.equals(data.get(<span class="hljs-string">&quot;create_time&quot;</span>))) &#123;<br>                        data.put(<span class="hljs-string">&quot;create_time&quot;</span>, <span class="hljs-string">&quot;2020-01-01 00:00:00&quot;</span>);<br>                    &#125;<br><br>                    out.collect(data.toJSONString());<br><br>                &#125;<br>            &#125;);<br><br>            rowData.addSink(DorisSink.sink(<br>                    DorisReadOptions.builder().build(),<br>                    DorisExecutionOptions.builder()<br>                            .setBatchSize(synchronization.getDorisBatchSize())<br>                            .setBatchIntervalMs(synchronization.getDorisBatchIntervalMs())<br>                            .setMaxRetries(synchronization.getMaxRetries())<br>                            .setStreamLoadProp(dorisProp).build(),<br>                    DorisOptions.builder()<br>                            .setFenodes(dorisUrlWithPort)<br>                            .setTableIdentifier(dorisDb + <span class="hljs-string">&quot;.&quot;</span> + dorisTable)<br>                            .setUsername(dorisUser)<br>                            .setPassword(dorisPassword).build()<br>            )).name(dorisDb + <span class="hljs-string">&quot;.&quot;</span> + dorisTable);<br><br>        &#125;<br><br>        env.execute(kafka2DorisConf.getAppName());<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>1.当yarn per job模式下一个flinkcdc作业同步多库多表数据时候, 如果该作业同步的表中有一个数据量比较大的表，建议将该表单独拎出来作为一个作业同步，内存调大。不然会影响同批次别的表的同步。</p>]]></content>
    
    
    <categories>
      
      <category>Flink</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FlinkCDC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据治理实践</title>
    <link href="/2022/12/05/%E6%95%B0%E6%8D%AE%E6%B2%BB%E7%90%86%E5%AE%9E%E8%B7%B5/"/>
    <url>/2022/12/05/%E6%95%B0%E6%8D%AE%E6%B2%BB%E7%90%86%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<p>数据质量治理</p><p>数据质量是数据治理的核心，也是基础工作。数据质量通常会从及时性、真实性、唯一性、完整性、有效性、一致性等六个维度来衡量。</p><p>对于数据质量的监控，主要包括三个环节：</p><p>第一，结合数据质量衡量的六个维度以及日常工作中发现的数据质量问题，配置相关规则。</p><p>第二，在数据加工的各个环节设置检查点，比如从ODS到DW，从DW到DM等环节。如在ODS检查点设置中，可能会包括数据源抽取记录的检查；在基础层会有空值、编码值、一致性、重复性等问题的检查</p><p>第三，输出异常结果，进行告警处理。</p>]]></content>
    
    
    <categories>
      
      <category>数据治理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据治理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flink上线异常日记</title>
    <link href="/2022/12/05/flink%E4%B8%8A%E7%BA%BF%E5%BC%82%E5%B8%B8%E6%97%A5%E8%AE%B0/"/>
    <url>/2022/12/05/flink%E4%B8%8A%E7%BA%BF%E5%BC%82%E5%B8%B8%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="问题1-Exceeded-checkpoint-tolerable-failure-threshold"><a href="#问题1-Exceeded-checkpoint-tolerable-failure-threshold" class="headerlink" title="问题1:Exceeded checkpoint tolerable failure threshold"></a>问题1:Exceeded checkpoint tolerable failure threshold</h3><p>Flink任务失败，检查点失效：Exceeded checkpoint tolerable failure threshold.</p><p>最近实时平台flink任务频繁失败，报检查点方面的错误，初步排查是因为flinkcdc在同步mysql数据的时候，mysql表存有大json的数据，并且数据量达到2千万，所以导致flink作业在checkpoint的时候会变得异常缓慢。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">2022</span>-<span class="hljs-number">12</span>-<span class="hljs-number">04</span> <span class="hljs-number">16</span>:<span class="hljs-number">26</span>:<span class="hljs-number">46</span>,<span class="hljs-number">566</span> INFO  org.apache.flink.runtime.checkpoint.CheckpointCoordinator    [] - Checkpoint <span class="hljs-number">670223</span> of job 61103d713243c4a71befb436fa3f32ee expired before completing.<br><span class="hljs-number">2022</span>-<span class="hljs-number">07</span>-<span class="hljs-number">16</span> <span class="hljs-number">06</span>:<span class="hljs-number">26</span>:<span class="hljs-number">46</span>,<span class="hljs-number">571</span> INFO  org.apache.flink.runtime.jobmaster.JobMaster                 [] - Trying to recover from a global failure.<br>org.apache.flink.util.FlinkRuntimeException: Exceeded checkpoint tolerable failure threshold.<br>at org.apache.flink.runtime.checkpoint.CheckpointFailureManager.handleCheckpointException(CheckpointFailureManager.java:<span class="hljs-number">98</span>) ~[flink-dist_2<span class="hljs-number">.11</span>-<span class="hljs-number">1.13</span><span class="hljs-number">.1</span>.jar:<span class="hljs-number">1.13</span><span class="hljs-number">.1</span>]<br>at org.apache.flink.runtime.checkpoint.CheckpointFailureManager.handleJobLevelCheckpointException(CheckpointFailureManager.java:<span class="hljs-number">67</span>) ~[flink-dist_2<span class="hljs-number">.11</span>-<span class="hljs-number">1.13</span><span class="hljs-number">.1</span>.jar:<span class="hljs-number">1.13</span><span class="hljs-number">.1</span>]<br>at org.apache.flink.runtime.checkpoint.CheckpointCoordinator.abortPendingCheckpoint(CheckpointCoordinator.java:<span class="hljs-number">1934</span>) ~[flink-dist_2<span class="hljs-number">.11</span>-<span class="hljs-number">1.13</span><span class="hljs-number">.1</span>.jar:<span class="hljs-number">1.13</span><span class="hljs-number">.1</span>]<br>at org.apache.flink.runtime.checkpoint.CheckpointCoordinator.abortPendingCheckpoint(CheckpointCoordinator.java:<span class="hljs-number">1906</span>) ~[flink-dist_2<span class="hljs-number">.11</span>-<span class="hljs-number">1.13</span><span class="hljs-number">.1</span>.jar:<span class="hljs-number">1.13</span><span class="hljs-number">.1</span>]<br>at org.apache.flink.runtime.checkpoint.CheckpointCoordinator.access$<span class="hljs-number">600</span>(CheckpointCoordinator.java:<span class="hljs-number">96</span>) ~[flink-dist_2<span class="hljs-number">.11</span>-<span class="hljs-number">1.13</span><span class="hljs-number">.1</span>.jar:<span class="hljs-number">1.13</span><span class="hljs-number">.1</span>]<br>at org.apache.flink.runtime.checkpoint.CheckpointCoordinator$CheckpointCanceller.run(CheckpointCoordinator.java:<span class="hljs-number">1990</span>) ~[flink-dist_2<span class="hljs-number">.11</span>-<span class="hljs-number">1.13</span><span class="hljs-number">.1</span>.jar:<span class="hljs-number">1.13</span><span class="hljs-number">.1</span>]<br>at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:<span class="hljs-number">511</span>) ~[?:<span class="hljs-number">1.8</span><span class="hljs-number">.0_201</span>]<br>at java.util.concurrent.FutureTask.run(FutureTask.java:<span class="hljs-number">266</span>) ~[?:<span class="hljs-number">1.8</span><span class="hljs-number">.0_201</span>]<br>at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$<span class="hljs-number">201</span>(ScheduledThreadPoolExecutor.java:<span class="hljs-number">180</span>) ~[?:<span class="hljs-number">1.8</span><span class="hljs-number">.0_201</span>]<br>at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:<span class="hljs-number">293</span>) ~[?:<span class="hljs-number">1.8</span><span class="hljs-number">.0_201</span>]<br>at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="hljs-number">1149</span>) ~[?:<span class="hljs-number">1.8</span><span class="hljs-number">.0_201</span>]<br>at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="hljs-number">624</span>) ~[?:<span class="hljs-number">1.8</span><span class="hljs-number">.0_201</span>]<br>at java.lang.Thread.run(Thread.java:<span class="hljs-number">748</span>) ~[?:<span class="hljs-number">1.8</span><span class="hljs-number">.0_201</span>]<br><br></code></pre></td></tr></table></figure><p>在报<code>Exceeded checkpoint tolerable failure threshold.</code>错误的之前，是先报的是<code>Checkpoint expired before completing.</code>大概意思是检查点在完成前过期了。</p><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p>checkpointTimeout 设置的checkpoint超时时间内未完成任务 导致的超时异常</p><h3 id="解决方案I："><a href="#解决方案I：" class="headerlink" title="解决方案I："></a>解决方案I：</h3><p>1.增加超时时间</p><p>2.增加机器性能</p><p>3.较少数据处理量：source并行度和窗口数据量减少，sink并行度增加</p><p>4.优化耗时的算子（数据倾斜）</p><p>5.设置可容忍检查点失败次数配置</p><p>execution.checkpointing.tolerable-failed-checkpoints 默认是(none)</p><p>最后翻看flink官网，通过设置execution.checkpointing.tolerable-failed-checkpoints允许容忍检查点失败个数，解决问题。例如将execution.checkpointing.tolerable-failed-checkpoints设置为3，连续失败3次，continuousFailureCounter会累计到3，作业就会尝试重启。如果中间有一个checkpoint成功了，continuousFailureCounter就会重置为0.</p><p>通常是该flink程序运行10min钟后就会报超时异常的错误，导致数据同步不成功。10min钟后查看flink任务web界面，任务正常，但检查点确实失败过一次，也同样是任务启动后10min钟失败的，失败原因和之前一样<code>Checkpoint expired before completing.</code></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221205172744.png"></p><h3 id="解决方案II："><a href="#解决方案II：" class="headerlink" title="解决方案II："></a>解决方案II：</h3><p>flinkcdc2.2版本，读mysql数据到doris报错</p><p>设置execution.checkpointing.tolerable-failed-checkpoints &#x3D; 3没用，flinkcdc程序在第一个checkpoint点位会一直in-progress，此时可以尝试增大jobmanager内存（-Djobmanager.memory.process.size&#x3D;1024mb），在增大jobmanager内存后，checkpoint正常，但发现数据还是没有同步到对应的表。</p><p>后来同事在cdc的github上找到类似的issue，mysql表会突然insert上亿的数据，flinkcdc同步不进去。</p><p><a href="https://github.com/ververica/flink-cdc-connectors/issues/460">https://github.com/ververica/flink-cdc-connectors/issues/460</a></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20230116201558.png"></p><p>后来通过离线batch的方式解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itiaoling.app.ods;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.itiaoling.bean.batch.GoodsEbayCompatibilityModel;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.doris.flink.cfg.DorisExecutionOptions;<br><span class="hljs-keyword">import</span> org.apache.doris.flink.cfg.DorisOptions;<br><span class="hljs-keyword">import</span> org.apache.doris.flink.cfg.DorisReadOptions;<br><span class="hljs-keyword">import</span> org.apache.doris.flink.cfg.DorisSink;<br><span class="hljs-keyword">import</span> org.apache.flink.api.common.functions.MapFunction;<br><span class="hljs-keyword">import</span> org.apache.flink.configuration.Configuration;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<br><span class="hljs-keyword">import</span> org.apache.flink.table.api.EnvironmentSettings;<br><span class="hljs-keyword">import</span> org.apache.flink.table.api.SqlDialect;<br><span class="hljs-keyword">import</span> org.apache.flink.table.api.Table;<br><span class="hljs-keyword">import</span> org.apache.flink.table.api.bridge.java.StreamTableEnvironment;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EscMysql2DorisBatch</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        conf.setString(<span class="hljs-string">&quot;execution.checkpointing.interval&quot;</span>, <span class="hljs-string">&quot;10000&quot;</span>);<br>        conf.setString(<span class="hljs-string">&quot;execution.checkpointing.mode&quot;</span>, <span class="hljs-string">&quot;EXACTLY_ONCE&quot;</span>);<br>        conf.setString(<span class="hljs-string">&quot;state.checkpoints.num-retained&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>        conf.setString(<span class="hljs-string">&quot;state.checkpoints.dir&quot;</span>, <span class="hljs-string">&quot;hdfs:/ns/flink/checkpoints/esc_buyer1_batch&quot;</span>);<br>        <span class="hljs-type">StreamExecutionEnvironment</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment(conf);<br><br>StreamExecutionEnvironment.createLocalEnvironmentWithWebUI(conf);<br><br>        env.setParallelism(<span class="hljs-number">10</span>);<br><br>        <span class="hljs-type">EnvironmentSettings</span> <span class="hljs-variable">Settings</span> <span class="hljs-operator">=</span> EnvironmentSettings.newInstance().inStreamingMode().build();<br><br>        <span class="hljs-type">StreamTableEnvironment</span> <span class="hljs-variable">tEnv</span> <span class="hljs-operator">=</span> StreamTableEnvironment.create(env, Settings);<br>        tEnv.getConfig().setSqlDialect(SqlDialect.DEFAULT);<br><br>        tEnv.executeSql(                   <br>                        <span class="hljs-string">&quot;CREATE TABLE test_multi_jdbc(</span><br><span class="hljs-string">                        `id` BIGINT COMMENT &#x27;&#x27;,</span><br><span class="hljs-string">                        `dbctime` TIMESTAMP(3) COMMENT &#x27;&#x27;,</span><br><span class="hljs-string">                        `dbutime` TIMESTAMP(3) COMMENT &#x27;&#x27;,</span><br><span class="hljs-string">                        `extension` STRING COMMENT &#x27;&#x27;) COMMENT &#x27;null&#x27;</span><br><span class="hljs-string">                        WITH (</span><br><span class="hljs-string">                          &#x27;connector&#x27; = &#x27;multi-jdbc&#x27;,</span><br><span class="hljs-string">                          &#x27;table-name&#x27; = &#x27;test_table.*&#x27;,</span><br><span class="hljs-string">                          &#x27;schema-name&#x27; = &#x27;test_database.*&#x27;,</span><br><span class="hljs-string">                          &#x27;username&#x27; = &#x27;$&#123;username&#125;&#x27;,</span><br><span class="hljs-string">                          &#x27;password&#x27; = &#x27;$&#123;password&#125;&#x27;,</span><br><span class="hljs-string">                          &#x27;scan.partition.column&#x27; = &#x27;id&#x27;,</span><br><span class="hljs-string">                          &#x27;scan.batch.size&#x27; = &#x27;100000&#x27;,</span><br><span class="hljs-string">                          &#x27;url&#x27; = &#x27;jdbc:mysql://$&#123;connection1&#125;;jdbc:mysql://$&#123;connection2&#125;&#x27;</span><br><span class="hljs-string">                        )</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Table table = tEnv.sqlQuery(&quot;</span>select t.id,<span class="hljs-string">&quot; +</span><br><span class="hljs-string">                                              &quot;</span>t.site,<span class="hljs-string">&quot; +</span><br><span class="hljs-string">                                              &quot;</span>t.category_id,<span class="hljs-string">&quot; +</span><br><span class="hljs-string">                                              &quot;</span>t.esc_category_id,<span class="hljs-string">&quot; +</span><br><span class="hljs-string">                                              &quot;</span>t.model_id,<span class="hljs-string">&quot; +</span><br><span class="hljs-string">                                              &quot;</span>t.version,<span class="hljs-string">&quot; +</span><br><span class="hljs-string">                                              &quot;</span>t.update_type,<span class="hljs-string">&quot; +</span><br><span class="hljs-string">                                              &quot;</span>DATE_FORMAT(t.create_time, <span class="hljs-string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>) as create_time,<span class="hljs-string">&quot; +</span><br><span class="hljs-string">                                              &quot;</span>DATE_FORMAT(t.update_time, <span class="hljs-string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>) as update_time,<span class="hljs-string">&quot; +</span><br><span class="hljs-string">                                              &quot;</span>t.deleted,<span class="hljs-string">&quot; +</span><br><span class="hljs-string">                                              &quot;</span><span class="hljs-number">0</span> as is_deleted_flg, <span class="hljs-string">&quot; +</span><br><span class="hljs-string">                                              &quot;</span><span class="hljs-number">1673853468700</span> as ts_ms <span class="hljs-string">&quot; +</span><br><span class="hljs-string">                                              &quot;</span>from goods_ebay_compatibility_model t <span class="hljs-string">&quot;</span><br><span class="hljs-string">                                    );</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">        DataStream&lt;GoodsEbayCompatibilityModel&gt; ordersDataStream = tEnv.toDataStream(table, GoodsEbayCompatibilityModel.class);</span><br><span class="hljs-string">        SingleOutputStreamOperator&lt;Object&gt; map = ordersDataStream.map(new MapFunction&lt;GoodsEbayCompatibilityModel, Object&gt;() &#123;</span><br><span class="hljs-string">            @Override</span><br><span class="hljs-string">            public Object map(GoodsEbayCompatibilityModel goodsEbayCompatibilityModel) throws Exception &#123;</span><br><span class="hljs-string">                return JSONObject.toJSON(goodsEbayCompatibilityModel).toString();</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;);</span><br><span class="hljs-string"></span><br><span class="hljs-string">//        map.print();</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Properties sinkPproperties = new Properties();</span><br><span class="hljs-string">        sinkPproperties.setProperty(&quot;</span>format<span class="hljs-string">&quot;, &quot;</span>json<span class="hljs-string">&quot;);</span><br><span class="hljs-string">        sinkPproperties.setProperty(&quot;</span>strip_outer_array<span class="hljs-string">&quot;, &quot;</span><span class="hljs-literal">true</span><span class="hljs-string">&quot;);</span><br><span class="hljs-string"></span><br><span class="hljs-string">        map.addSink(</span><br><span class="hljs-string">                DorisSink.sink(</span><br><span class="hljs-string">                        DorisReadOptions.builder().build(),</span><br><span class="hljs-string">                        DorisExecutionOptions.builder()</span><br><span class="hljs-string">                                .setBatchSize(100000)</span><br><span class="hljs-string">                                .setBatchIntervalMs(20000l)</span><br><span class="hljs-string">                                .setMaxRetries(3)</span><br><span class="hljs-string">                                .setStreamLoadProp(sinkPproperties).build(),</span><br><span class="hljs-string">                        DorisOptions.builder()</span><br><span class="hljs-string">                                .setFenodes(&quot;</span>XXX:<span class="hljs-number">8030</span>,XXX:<span class="hljs-number">8030</span>,XXX:<span class="hljs-number">8030</span><span class="hljs-string">&quot;)</span><br><span class="hljs-string">                                .setTableIdentifier(&quot;</span>ods.ods_esc_buyer_goods_ebay_compatibility_model_bak<span class="hljs-string">&quot;)</span><br><span class="hljs-string">                                .setUsername(&quot;</span>XXX<span class="hljs-string">&quot;)</span><br><span class="hljs-string">                                .setPassword(&quot;</span>XXX<span class="hljs-string">&quot;)</span><br><span class="hljs-string">                                .build()</span><br><span class="hljs-string">                ));</span><br><span class="hljs-string"></span><br><span class="hljs-string">        env.execute(&quot;</span>mysql-sink-doris-batch<span class="hljs-string">&quot;);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h3 id="问题2-同步的上游表有DDL变更会导致flinkcdc作业同步任务出问题"><a href="#问题2-同步的上游表有DDL变更会导致flinkcdc作业同步任务出问题" class="headerlink" title="问题2: 同步的上游表有DDL变更会导致flinkcdc作业同步任务出问题"></a>问题2: 同步的上游表有DDL变更会导致flinkcdc作业同步任务出问题</h3><p>flinkcdc在同步mysql表时是通过读取binlog日志来同步数据，在mysql表的ddl变更后，flinkcdc读取不到binlog的点位导致数据同步出问题。</p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>同步修改ods表结构，重启flink同步任务</p><h3 id="问题3-The-heartbeat…timed-out"><a href="#问题3-The-heartbeat…timed-out" class="headerlink" title="问题3: The heartbeat…timed out"></a>问题3: The heartbeat…timed out</h3><p>flink程序报错如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Caused by: java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.TimeoutException</span>: The heartbeat of TaskManager with id container_e06_1627962873638_5732_01_000003  timed out.<br> at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.flink</span><span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.resourcemanager</span>.ResourceManager<span class="hljs-variable">$TaskManagerHeartbeatListener</span><span class="hljs-selector-class">.notifyHeartbeatTimeout</span>(ResourceManager<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1125</span>)<br> at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.flink</span><span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.heartbeat</span><span class="hljs-selector-class">.HeartbeatMonitorImpl</span><span class="hljs-selector-class">.run</span>(HeartbeatMonitorImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">109</span>)<br> at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span>.Executors<span class="hljs-variable">$RunnableAdapter</span><span class="hljs-selector-class">.call</span>(Executors<span class="hljs-selector-class">.java</span>:<span class="hljs-number">511</span>)<br> at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.FutureTask</span><span class="hljs-selector-class">.run</span>(FutureTask<span class="hljs-selector-class">.java</span>:<span class="hljs-number">266</span>)<br> at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.flink</span><span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.akka</span><span class="hljs-selector-class">.AkkaRpcActor</span><span class="hljs-selector-class">.handleRunAsync</span>(AkkaRpcActor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">397</span>)<br> at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.flink</span><span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.akka</span><span class="hljs-selector-class">.AkkaRpcActor</span><span class="hljs-selector-class">.handleRpcMessage</span>(AkkaRpcActor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">190</span>)<br> ... <span class="hljs-number">20</span> more<br></code></pre></td></tr></table></figure><p>原因：此错误是container心跳超时，出现此种错误一般有两种可能：</p><p>1、分布式物理机网络失联，这种原因一般情况下failover后作业能正常恢复，如果出现的不频繁可以不用关注；</p><p>2、failover的节点对应TM的内存设置太小，GC严重导致心跳超时，建议调大对应节点的内存值</p><h3 id="解决方案：-1"><a href="#解决方案：-1" class="headerlink" title="解决方案："></a>解决方案：</h3><p>加大flink程序的运行内存</p>]]></content>
    
    
    <categories>
      
      <category>Flink</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python代码-linux系统读取excel模版转化成图片</title>
    <link href="/2022/12/02/linux%E7%B3%BB%E7%BB%9F%E8%AF%BB%E5%8F%96excel%E6%A8%A1%E7%89%88%E8%BD%AC%E5%8C%96%E6%88%90%E5%9B%BE%E7%89%87/"/>
    <url>/2022/12/02/linux%E7%B3%BB%E7%BB%9F%E8%AF%BB%E5%8F%96excel%E6%A8%A1%E7%89%88%E8%BD%AC%E5%8C%96%E6%88%90%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h3 id="windows系统excel转换成图片"><a href="#windows系统excel转换成图片" class="headerlink" title="windows系统excel转换成图片"></a>windows系统excel转换成图片</h3><p>用python仅仅限于windows平台的包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> win32com.client<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> ImageGrab<br><span class="hljs-keyword">import</span> logging<br><br>logging.basicConfig(level=logging.DEBUG,<span class="hljs-built_in">format</span>=LOG_FORMAT,datefmt=DATE_FORMAT,filename=<span class="hljs-string">&#x27;/py_pj/esc_hour.log&#x27;</span>,filemode=<span class="hljs-string">&#x27;a&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_pic</span>(<span class="hljs-params">excel_file,sheet_name,pic_file,excel_rg</span>):<br>    w = win32com.client.Dispatch(<span class="hljs-string">&#x27;Excel.Application&#x27;</span>)<br>    wb = w.Workbooks.Open(excel_file)<br>    ws = wb.Worksheets(sheet_name)<br>    ws.Range(excel_rg).CopyPicture(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>    im = ImageGrab.grabclipboard()<br>    im.save(pic_file,<span class="hljs-string">&quot;png&quot;</span>)<br>    wb.Save()<br>    wb.Close()<br>    logging.info(<span class="hljs-string">&quot;====图片保存成功&quot;</span>)    <br></code></pre></td></tr></table></figure><p>后面需要在linux服务器上调度，继而需要找等替代win32com的包</p><p>win32com, xlwings,xlsxwriter,DataNitro,pandas,openpyxl,xlutils都只能在windows或者Mac系统</p><h3 id="linux上实现excel转换成图片"><a href="#linux上实现excel转换成图片" class="headerlink" title="linux上实现excel转换成图片"></a>linux上实现excel转换成图片</h3><p>后来发现aspose的产品，不依赖操作系统能够在linux上运行且不需要安装Excel程序就能够将excel转换成图片，它不仅能够将excel转换成图片，各种文件类型之间都能够想换转换，官方文档链接如下：</p><p><a href="https://reference.aspose.com/">https://reference.aspose.com/</a></p><p>如下为linux下读取excel模版转换成图片的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> pymysql<br><span class="hljs-keyword">import</span> openpyxl<br><span class="hljs-keyword">from</span> openpyxl.utils.dataframe <span class="hljs-keyword">import</span> dataframe_to_rows<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> jpype<br><span class="hljs-keyword">import</span> asposecells<br>jpype.startJVM()<br><span class="hljs-keyword">from</span> asposecells.api <span class="hljs-keyword">import</span> LoadOptions,IndividualFontConfigs,Workbook,ImageOrPrintOptions,SheetRender,ImageType<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> come.util <span class="hljs-keyword">import</span> DBUtilN, SendMessageInWetchat, FileDeal<br><br><br>LOG_FORMAT = <span class="hljs-string">&quot;%(asctime)s - %(levelname)s - %(message)s&quot;</span><br>DATE_FORMAT = <span class="hljs-string">&quot;%Y-%m-%d %A %H:%M:%S&quot;</span><br><br><span class="hljs-comment"># logging.basicConfig(level=logging.DEBUG,format=LOG_FORMAT,datefmt=DATE_FORMAT)</span><br><br><span class="hljs-comment"># logging.basicConfig(level=logging.DEBUG,format=LOG_FORMAT,datefmt=DATE_FORMAT,filename= r&#x27;D:\auto_file\EF\EF-DAILY\moban\efdaily.log&#x27;, filemode = &#x27;a&#x27;)</span><br><br>logging.basicConfig(level=logging.DEBUG,<span class="hljs-built_in">format</span>=LOG_FORMAT,datefmt=DATE_FORMAT,filename= <span class="hljs-string">r&#x27;./py_pj/USED_SYS_MAIL/log/esc_hour.log&#x27;</span>, filemode = <span class="hljs-string">&#x27;a&#x27;</span>)<br><br>day_date = (datetime.datetime.now()).strftime(<span class="hljs-string">&#x27;%Y%m%d&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">daily_report</span>():<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,con</span>):<br>                self.con=con<br>                <span class="hljs-comment">#ef应用配置</span><br><br><br>                self.Secret = <span class="hljs-string">&#x27;XXXXXX&#x27;</span><br>                self.agentid = XXXXX  <span class="hljs-comment"># esc 应用ID</span><br>                self.toparty = <span class="hljs-string">&quot;1&quot;</span>  <span class="hljs-comment"># esc 信息接收用户组  9</span><br><br>                self.path_moban = <span class="hljs-string">r&#x27;./auto_file/eSC/eSC-DAILY-DAY/moban&#x27;</span> <span class="hljs-comment">#模板模块路径</span><br>                self.path_l = <span class="hljs-string">r&#x27;./auto_file/eSC/eSC-DAILY-DAY/use&#x27;</span>   <span class="hljs-comment">#应用操作模块</span><br>                self.path_bak = <span class="hljs-string">r&#x27;./auto_file/eSC/eSC-DAILY-DAY/bak&#x27;</span> <span class="hljs-comment">#备份模块</span><br>                self.excel_name=<span class="hljs-string">&quot;daily_report_esc_byday&quot;</span>        <span class="hljs-comment">#生成excel文件名称</span><br>                self.exel_moban=self.path_moban +<span class="hljs-string">&quot;/&quot;</span>+self.excel_name + <span class="hljs-string">&quot;.xlsx&quot;</span>  <span class="hljs-comment">#模板文件名称</span><br>                self.filename_today = self.path_l +<span class="hljs-string">&quot;/&quot;</span>+ self.excel_name + <span class="hljs-string">&quot;_&quot;</span> + day_date + <span class="hljs-string">&quot;.xlsx&quot;</span>   <span class="hljs-comment">#应用文件</span><br>                <span class="hljs-comment">#pic1</span><br>                <span class="hljs-comment"># self.picname = self.path_l + &quot;\\&quot; + &#x27;order.png&#x27;  # 保存图片名称</span><br>                self.picname = self.path_l + <span class="hljs-string">&quot;/&quot;</span> + <span class="hljs-string">&#x27;pic1.jpeg&#x27;</span>  <span class="hljs-comment"># 保存图片名称</span><br>                self.sheet_name = <span class="hljs-string">&#x27;Summary&#x27;</span>  <span class="hljs-comment"># 截图Excel sheet名称 数据页sheet</span><br>                <span class="hljs-comment"># self.range_excel_tab = &#x27;F1:O46&#x27;  # 定位截图位置</span><br>                self.range_excel_tab = <span class="hljs-string">&#x27;F1:L47&#x27;</span>  <span class="hljs-comment"># 定位截图位置</span><br><br>                self.sheet_detail = <span class="hljs-string">&#x27;eSC_RawDATA&#x27;</span>  <span class="hljs-comment"># 截图Excel sheet名称 明细页sheet名称</span><br><br>                <span class="hljs-comment">#pic2</span><br>                <span class="hljs-comment"># self.picname1 = self.path_l + &quot;\\&quot; + &#x27;pic2.png&#x27;  # 保存图片名称</span><br>                <span class="hljs-comment"># self.sheet_name1 = &#x27;outbound_seller&#x27;  # 截图Excel sheet名称 数据页sheet</span><br>                <span class="hljs-comment"># self.range_excel_tab1 = &#x27;D1:Z59&#x27;  # 定位截图位置</span><br>                <span class="hljs-comment"># self.sheet_detail1 = &#x27;data2&#x27;  # 截图Excel sheet名称 明细页sheet名称</span><br><br>                <span class="hljs-comment"># self.sql_str=&quot;select time_solt,warehouse_code,cnt,flag,etl_time  from  t_outbound_wecom&quot;  # 查询sql</span><br>                <span class="hljs-comment"># self.pd_sql = &quot;&quot;&quot;select count(1) num  from t_outbound_wecom where etl_time&gt;=date_format(now(),&#x27;%Y-%m-%d %H:00:00&#x27;);&quot;&quot;&quot;  #判断底层etl 是否延迟sql</span><br><br>                self.sql_str = <span class="hljs-string">&quot;SELECT `platform_code`,`on_offshore`,`type`,`country`,`hour`,`so_date`,`so_qty`,`total_cost`,`etl_time` FROM ads.ads_esc_t_push_so_tracking_revenue&quot;</span>  <span class="hljs-comment"># 查询sql</span><br>                <span class="hljs-comment"># self.pd_sql = &quot;&quot;&quot;select count(1) num  from datamart.t_isc_push_OneSales_order&quot;&quot;&quot;  # 判断底层etl 是否延迟sql</span><br>                self.pd_sql = <span class="hljs-string">&quot;&quot;&quot;select count(1) num  from ads.ads_esc_t_push_so_tracking_revenue where etl_time&gt;=date_format(now(),&#x27;%Y-%m-%d %H:00:00&#x27;);&quot;&quot;&quot;</span>  <span class="hljs-comment"># 判断底层etl 是否延迟sql</span><br>                self.times=<span class="hljs-number">1</span>  <span class="hljs-comment">#重复扫描15次 预估15分钟</span><br><br>                <span class="hljs-comment">#pic2</span><br>                <span class="hljs-comment"># self.sql_str1 = &quot;select time_solt,warehouse_code,seller_ocid,cnt,flag,etl_time from t_outbound_wecom_vip&quot;  # 查询sql</span><br><br>        <span class="hljs-comment">#复制模板  从原始位置到新位置</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">copyfile</span>(<span class="hljs-params">self</span>):<br>                <span class="hljs-comment"># logging.info(&quot;copyfile&quot;+&quot;  &quot;+self.excel_moban+&quot;  &quot;+self.filename_today)</span><br>                shutil.copyfile(self.exel_moban, self.filename_today)<br>                logging.info(<span class="hljs-string">&quot;===模板备份完成===&quot;</span>)<br><br>        <span class="hljs-comment"># 将文件移到其他文件夹</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">move_file</span>(<span class="hljs-params">self</span>):<br>                FileDeal.fileDeal(self.path_l).remove_file(self.path_bak)<br>                logging.info(<span class="hljs-string">&quot;====文件移动成功====&quot;</span>)<br><br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_token</span>(<span class="hljs-params">self,Secret,CorpID=<span class="hljs-string">&#x27;XXXXX&#x27;</span></span>):<br>                tagurl = <span class="hljs-string">&#x27;https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=&#x27;</span> + CorpID + <span class="hljs-string">&#x27;&amp;corpsecret=&#x27;</span> + Secret<br>                f = requests.get(tagurl)<br>                resultJson = json.loads(f.text)  <span class="hljs-comment"># 加载口令json</span><br>                token = resultJson[<span class="hljs-string">&#x27;access_token&#x27;</span>]  <span class="hljs-comment"># 获取口令</span><br>                <span class="hljs-keyword">return</span> token<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">send_message</span>(<span class="hljs-params">self,token,data</span>):<br>                send_url = <span class="hljs-string">&quot;https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=&quot;</span> + token<br>                requests.post(url=send_url, data=json.dumps(data))  <span class="hljs-comment"># 提交请求</span><br>                logging.info(<span class="hljs-string">&quot;====信息推送成功====&quot;</span>)<br>                <span class="hljs-comment"># data = &#123;&quot;toparty&quot;: &quot;5&quot;, &quot;msgtype&quot;: &quot;image&quot;, &quot;agentid&quot;: 1000003, &quot;image&quot;: &#123;&quot;media_id&quot;: mediaid&#125;, &quot;safe&quot;: 0&#125;</span><br><br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_pic_media</span>(<span class="hljs-params">self,token,file_name,file_type=<span class="hljs-string">&#x27;image&#x27;</span></span>):<br>                upload_url = <span class="hljs-string">&#x27;https://qyapi.weixin.qq.com/cgi-bin/media/upload?access_token=&#x27;</span> + token + <span class="hljs-string">&#x27;&amp;type=&#x27;</span> + file_type +<span class="hljs-string">&#x27;&amp;debug=1&#x27;</span><br>                <span class="hljs-built_in">print</span>(upload_url)<br>                data = &#123;<span class="hljs-string">&quot;media&quot;</span>: <span class="hljs-built_in">open</span>(file_name, <span class="hljs-string">&#x27;rb&#x27;</span>)&#125;<br>                <span class="hljs-built_in">print</span>(file_name)<br>                <span class="hljs-built_in">print</span>(data)<br>                r = requests.post(url=upload_url, files=data)<br>                <span class="hljs-built_in">print</span>(r.text)<br>                resp = json.loads(r.text)  <span class="hljs-comment"># 加载json</span><br>                <span class="hljs-keyword">return</span> resp[<span class="hljs-string">&#x27;media_id&#x27;</span>]<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">excel_to_pic</span>(<span class="hljs-params">self,excel_file,pic_file,excel_rg</span>):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;excel_file:&#x27;</span>+excel_file+<span class="hljs-string">&#x27;\n&#x27;</span>+<span class="hljs-string">&#x27;pic_file:&#x27;</span>+pic_file+<span class="hljs-string">&#x27;\n&#x27;</span>+<span class="hljs-string">&#x27;excel_rg:&#x27;</span>+excel_rg+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>                loadOptions = LoadOptions()<br>                configs = IndividualFontConfigs()<br>                configs.setFontFolder(<span class="hljs-string">&quot;/data/fonts/chinese&quot;</span>, <span class="hljs-literal">True</span>)<br>                loadOptions.setFontConfigs(configs)<br>                workbook = Workbook(excel_file, loadOptions)<br>                workbook.calculateFormula()<br>                imgOptions = ImageOrPrintOptions()<br>                <span class="hljs-comment"># imgOptions.setDesiredSize(desiredWidth, desiredHeight)</span><br>                imgOptions.setImageType(ImageType.JPEG)<br>                worksheet = workbook.getWorksheets().get(<span class="hljs-number">0</span>)<br>                worksheet.getPageSetup().setPrintArea(excel_rg)<br>                worksheet.getPageSetup().setLeftMargin(<span class="hljs-number">0</span>)<br>                worksheet.getPageSetup().setRightMargin(<span class="hljs-number">0</span>)<br>                worksheet.getPageSetup().setTopMargin(<span class="hljs-number">1</span>)<br>                worksheet.getPageSetup().setBottomMargin(<span class="hljs-number">0</span>)<br>                <span class="hljs-built_in">print</span>(worksheet)<br>                sheetRender = SheetRender(worksheet, imgOptions)<br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(pic_file, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> w:<br>                        content = sheetRender.toImageBytes(<span class="hljs-number">0</span>)<br>                        w.write(content)<br>                jpype.shutdownJVM()<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">edit_pic</span>(<span class="hljs-params">self,pic_file</span>):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;图片保存路径为&gt;&gt;&gt;&#x27;</span>+pic_file)<br>                img = Image.<span class="hljs-built_in">open</span>(pic_file)<br>                width, height = img.size<br>                <span class="hljs-built_in">print</span>(width, height)<br>                box = (<span class="hljs-number">0</span>, <span class="hljs-number">28</span>, <span class="hljs-number">800</span>, <span class="hljs-number">980</span>)<br>                region = img.crop(box)<br>                region.save(pic_file)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;图片处理成功&#x27;</span>)<br><br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">push_data</span>(<span class="hljs-params">self,ws, df, r_x, c_x</span>):<br>                rows = dataframe_to_rows(df, index=<span class="hljs-literal">False</span>)<br>                <span class="hljs-keyword">for</span> r_idx, row <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(rows, <span class="hljs-number">1</span>):<br>                        <span class="hljs-keyword">for</span> c_idx, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(row, <span class="hljs-number">1</span>):<br>                                ws.cell(row=r_idx + r_x, column=c_idx + c_x, value=value)<br><br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">insert_date_excel</span>(<span class="hljs-params">self,sql,sheet_name,startx=<span class="hljs-number">0</span>,starty=<span class="hljs-number">0</span></span>):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;insert_date_excel&gt;&gt;&gt;&#x27;</span>+sql+<span class="hljs-string">&#x27;\n&#x27;</span>+<span class="hljs-string">&#x27;sheet_name&gt;&gt;&gt;&#x27;</span>+sheet_name)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;filename_today&gt;&gt;&gt;&#x27;</span>+self.filename_today)<br>                df = pd.read_sql(sql, self.con)<br>                <span class="hljs-built_in">print</span>(df)<br>                wb = openpyxl.load_workbook(self.filename_today)<br>                ws2 = wb[sheet_name]<br>                self.push_data(ws2, df, startx, starty)<br>                wb.save(self.filename_today)<br><br>        <span class="hljs-comment">#重复刷新考虑etl是否运行完成</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_sub_condition</span>(<span class="hljs-params">self</span>):<br>                res=<span class="hljs-number">0</span><br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.times):<br>                        ss = DBUtilN.exeSelectSql(self.pd_sql, self.con)<br>                        <span class="hljs-comment"># print(ss)</span><br>                        <span class="hljs-keyword">if</span> ss[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] !=<span class="hljs-number">0</span>:<br>                                res=<span class="hljs-number">1</span><br>                                <span class="hljs-keyword">break</span><br>                        <span class="hljs-keyword">else</span>:<br>                                time.sleep(<span class="hljs-number">1</span>)<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;====等待===&quot;</span>)<br>                <span class="hljs-keyword">return</span> res<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">cal_process</span>(<span class="hljs-params">self</span>):<br>                <span class="hljs-comment">#判断底层etl是否处理完成</span><br>                res=self.get_sub_condition()<br>                <span class="hljs-comment"># print(&quot;res=&#123;&#125;&quot;.format(res))  0-1</span><br>                <span class="hljs-keyword">if</span> res==<span class="hljs-number">1</span>:<br>                        <span class="hljs-comment"># 移动文件到备份文件夹</span><br>                        self.move_file()<br>                        <span class="hljs-comment"># 删除备份文件夹之前文件及文件夹</span><br>                        FileDeal.fileDeal(self.path_bak).deletefile()<br>                        <span class="hljs-comment"># step0 复制Excel模板</span><br>                        self.copyfile()<br>                        self.tuisong(self.sql_str,self.sheet_detail,self.sheet_name,self.picname,self.range_excel_tab)<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;最终推送图片路径为&gt;&gt;&gt;&#x27;</span>+self.picname)<br>                        logging.info(<span class="hljs-string">&quot;===按esc数据发送完成===&quot;</span>)<br>                        <span class="hljs-comment"># self.tuisong(self.sql_str1, self.sheet_detail1, self.sheet_name1, self.picname1, self.range_excel_tab1)</span><br>                        <span class="hljs-comment"># logging.info(&quot;===按seller分析数据发送完成===&quot;)</span><br><br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===推送完成===&quot;</span>)<br><br>                <span class="hljs-keyword">else</span>:<br>                        logging.info(<span class="hljs-string">&quot;===day数据，底层etl 同步数据延迟，未推送===&quot;</span>)<br>                        self.errorts(<span class="hljs-string">&quot;测试消息：==day数据，esc底层etl同步延迟，请上线查看&quot;</span>)<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">errorts</span>(<span class="hljs-params">self,msg</span>):<br>                <span class="hljs-comment"># 报警应用</span><br>                SendMessageInWetchat.send_txt_msg(msg,toparty=self.toparty1,agentid=self.agentid1,Secret=self.Secret1)<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">tuisong</span>(<span class="hljs-params">self,sql,sheet_detail,sheet_name,picname,range_excel_tab</span>):<br>                <span class="hljs-comment"># step1 将数据插入Excel</span><br>                self.insert_date_excel(sql, sheet_detail)<br><br>                <span class="hljs-comment"># sep2 将Excel数据保存为图片</span><br>                self.excel_to_pic(self.filename_today, picname, range_excel_tab)<br><br>                <span class="hljs-comment"># sep3 保存图片并裁剪</span><br>                self.edit_pic(self.picname)<br><br>                <span class="hljs-comment"># 获取token</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始获取token&#x27;</span>)<br>                token = self.get_token(self.Secret)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;获取token成功&#x27;</span>)<br>                <span class="hljs-comment"># 获取mediaid</span><br>                mediaid = self.get_pic_media(token, picname)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;获取mediaid成功&#x27;</span>)<br>                <span class="hljs-comment"># 组装data</span><br>                data = &#123;<span class="hljs-string">&quot;toparty&quot;</span>: self.toparty, <span class="hljs-string">&quot;msgtype&quot;</span>: <span class="hljs-string">&quot;image&quot;</span>, <span class="hljs-string">&quot;agentid&quot;</span>: self.agentid, <span class="hljs-string">&quot;image&quot;</span>: &#123;<span class="hljs-string">&quot;media_id&quot;</span>: mediaid&#125;,<span class="hljs-string">&quot;safe&quot;</span>: <span class="hljs-number">0</span>&#125;<br>                <span class="hljs-comment"># step3 发送内容</span><br>                self.send_message(token, data)<br>                 <span class="hljs-comment"># 移动文���到备份文件夹</span><br>                 <span class="hljs-comment"># self.move_file()</span><br>                 <span class="hljs-comment"># logging.info(&quot;===单次推送完成===&quot;)</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br><br>        mysqlCon =  pymysql.connect(database=<span class="hljs-string">&#x27;XXX&#x27;</span>,<br>                        host=<span class="hljs-string">&#x27;XXXX&#x27;</span>,<br>                        user=<span class="hljs-string">&#x27;XXX&#x27;</span>,<br>                        password=<span class="hljs-string">&#x27;XXXX&#x27;</span>,<br>                        port=<span class="hljs-number">9030</span>,<br>                        charset=<span class="hljs-string">&#x27;utf8mb4&#x27;</span>,<br>                        connect_timeout=<span class="hljs-number">120</span>)<br>        tt = daily_report(mysqlCon)<br>        <span class="hljs-keyword">try</span>:<br>                tt.cal_process()<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                error = <span class="hljs-built_in">str</span>(e)<br>                tt.errorts(<span class="hljs-string">&quot;测试消息：esc每日数据异常，请上线查看:&quot;</span> + error)<br>                logging.info(<span class="hljs-string">&quot;esc每日数据异常：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(e))<br><br>        mysqlCon.close()<br></code></pre></td></tr></table></figure><h3 id="Aspose-Cells-Excel模板转换PDF-x2F-图片Linux中文乱码解决"><a href="#Aspose-Cells-Excel模板转换PDF-x2F-图片Linux中文乱码解决" class="headerlink" title="Aspose Cells Excel模板转换PDF&#x2F;图片Linux中文乱码解决"></a>Aspose Cells Excel模板转换PDF&#x2F;图片Linux中文乱码解决</h3><p> 第一步：把 C:\Windows\Fonts目录下字体拷贝到Linux( &#x2F;usr&#x2F;share&#x2F;fonts&#x2F;chinese)目录下，Linux目录可随意指定</p><p>第二步：在Aspose加载WorkBook时配置字体路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">##Java <br><span class="hljs-type">IndividualFontConfigs</span> <span class="hljs-variable">configs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndividualFontConfigs</span>();<br>     configs.setFontFolder(<span class="hljs-string">&quot;/usr/share/fonts/chinese&quot;</span>, <span class="hljs-literal">true</span>);<br>     <span class="hljs-type">LoadOptions</span> <span class="hljs-variable">loadOptions</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadOptions</span>();<br>     loadOptions.setFontConfigs(configs);<br> <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D://MOBAN.xlsx&quot;</span>);<br> <span class="hljs-type">Workbook</span> <span class="hljs-variable">wb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Workbook</span>(fi, loadOptions);<br><br>##<span class="hljs-type">Python</span><br><span class="hljs-variable">loadOptions</span> <span class="hljs-operator">=</span> LoadOptions()<br>             configs = IndividualFontConfigs()<br>             configs.setFontFolder(<span class="hljs-string">&quot;/data/fonts/chinese&quot;</span>, True)<br>             loadOptions.setFontConfigs(configs)<br>             workbook = Workbook(excel_file, loadOptions)<br><br></code></pre></td></tr></table></figure><h3 id="Aspose-Cells-读取不到Excel模板包含公式的数据"><a href="#Aspose-Cells-读取不到Excel模板包含公式的数据" class="headerlink" title="Aspose Cells 读取不到Excel模板包含公式的数据"></a>Aspose Cells 读取不到Excel模板包含公式的数据</h3><p>workbook.calculateFormula()</p><p>增加这一行代码即可</p><h3 id="Aspose-Cells-设置PDF或图片边框大小"><a href="#Aspose-Cells-设置PDF或图片边框大小" class="headerlink" title="Aspose Cells 设置PDF或图片边框大小"></a>Aspose Cells 设置PDF或图片边框大小</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">worksheet = workbook.get<span class="hljs-constructor">Worksheets()</span>.get(<span class="hljs-number">0</span>)<br>worksheet.get<span class="hljs-constructor">PageSetup()</span>.set<span class="hljs-constructor">PrintArea(<span class="hljs-params">excel_rg</span>)</span><br>worksheet.get<span class="hljs-constructor">PageSetup()</span>.set<span class="hljs-constructor">LeftMargin(0)</span><br>worksheet.get<span class="hljs-constructor">PageSetup()</span>.set<span class="hljs-constructor">RightMargin(0)</span><br>worksheet.get<span class="hljs-constructor">PageSetup()</span>.set<span class="hljs-constructor">TopMargin(1)</span><br>worksheet.get<span class="hljs-constructor">PageSetup()</span>.set<span class="hljs-constructor">BottomMargin(0)</span><br></code></pre></td></tr></table></figure><h3 id="Aspose-Cells-读取指定excel位置的数据"><a href="#Aspose-Cells-读取指定excel位置的数据" class="headerlink" title="Aspose Cells 读取指定excel位置的数据"></a>Aspose Cells 读取指定excel位置的数据</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">worksheet.get<span class="hljs-constructor">PageSetup()</span>.set<span class="hljs-constructor">PrintArea(<span class="hljs-params">excel_rg</span>)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机视觉-kalmanFilter</title>
    <link href="/2022/10/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89-kalmanFilter/"/>
    <url>/2022/10/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89-kalmanFilter/</url>
    
    <content type="html"><![CDATA[<h2 id="1-卡尔曼滤波入门"><a href="#1-卡尔曼滤波入门" class="headerlink" title="1.卡尔曼滤波入门"></a>1.卡尔曼滤波入门</h2><p><strong>卡尔曼滤波的引入：</strong></p><p>滤波就是将测量得到的波形中的的噪声过滤掉，使得到的数据更趋于真实情况，也更加平滑，方便使用。</p><p><strong>卡尔曼滤波适用的系统：</strong></p><p>卡尔曼滤波适用<strong>线性高斯系统</strong></p><p><strong>1.线性系统</strong>：满足<strong>叠加性</strong>和<strong>齐次性</strong></p><p>叠加性：</p><p>齐次性： </p><p><strong>2.高斯系统</strong></p><p>高斯：噪声满足正态分布</p><h2 id="2-卡尔曼滤波"><a href="#2-卡尔曼滤波" class="headerlink" title="2.卡尔曼滤波"></a>2.卡尔曼滤波</h2><h4 id="2-1-卡尔曼公式理解"><a href="#2-1-卡尔曼公式理解" class="headerlink" title="2.1.卡尔曼公式理解"></a>2.1.卡尔曼公式理解</h4><p><strong>实现过程：</strong>使用上一时刻的最优结果预测这一时刻的预测值，同时使用这一时刻观测值（传感器测得的数据）修正这一时刻预测值，得到这一时刻的最优结果</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221030224221.png"></p><p><strong>预测：</strong></p><p><strong>1.上一时刻的最优估计值，推出这一时刻的预测值：</strong></p><p>$x^-<em>t &#x3D; Fx</em>{t-1} + BU_{t-1}$ </p><p><strong>2.上一时刻最优估计值方差&#x2F;协方差和超参数Q推出这一时刻预测值方差&#x2F;协方差</strong></p><p>$P^-<em>t &#x3D; FP</em>{t-1}F^T + Q$</p><p>深入理解，Q其实对应的是过程噪声的方差</p><p><strong>更新：</strong></p><p><strong>1.这一时刻预测值方差&#x2F;协方差和超参数R推出卡尔曼增益</strong></p><p>$K_t &#x3D; P^-_tH^T{(HP^-_tH^T+R)}^{-1}$</p><p>$K_t$为卡尔曼增益</p><p>因为$P_t$是和Q有关的，所以将$P_t^-$的公式带入可以推出卡尔曼增益$K_t$是和Q和R都有关的</p><p>深入理解，R其实对应的是观测噪声的方差</p><p><strong>2.这一时刻预测值、这一时刻观测值、卡尔曼增益推出这一时刻最优估计值</strong></p><p>$x_t &#x3D; x^-_t + K_t(Z_t - Hx_t^-)$</p><p>$Z_t$为这一时刻观测值</p><p><strong>3.这一时刻预测值方差&#x2F;协方差、卡尔曼增益推出这一时刻最优估计值方差&#x2F;协方差</strong></p><p>$P_t &#x3D; (1-K_tH)P^-_t$</p><p><strong>预测更新循环往复，就能得到每一时刻的最优估计值</strong></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221030225844.png"></p><h4 id="2-2-举例："><a href="#2-2-举例：" class="headerlink" title="2.2 举例："></a>2.2 <strong>举例：</strong></h4><p>小车有两个状态值，p代表位置，v代表速度。小车处于匀加速直线运动</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221030230131.png"></p><p><strong>预测模型：</strong></p><p><strong>1.上一时刻的最优估计值，推出这一时刻的预测值：</strong></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221030230453.png"></p><p><strong>2.上一时刻最优估计值方差&#x2F;协方差和超参数Q推出这一时刻预测值方差&#x2F;协方差</strong></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221030230531.png"></p><p><strong>推导：因为</strong></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221030230558.png"></p><p>所以</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221030230617.png"></p><p>其实第一步中这一时刻预测值后面应该还有一个过程噪声Wt要加上（前面省略了），如下图所示，这里面Q是前面省略的过程噪声Wt的方差</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221030230713.png"></p><p><strong>测量模型：</strong></p><p>GPS测量只能测量小车的位置，不能测量小车的速度，所以</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221030230804.png"></p><p>Zp是小车此时的真实位置</p><p>Zv是小车此时的真实速度</p><p>Pt是测量得到的小车此时的位置</p><p>$\Delta$Pt是GPS测量位置的误差</p><p><strong>更新模型：</strong></p><p><strong>1.这一时刻预测值方差&#x2F;协方差和超参数R推出卡尔曼增益</strong>$K_t$</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221030230904.png"></p><p>前面测量模型中，因为无法测速度，测量相当于是一维的，一维时H看作为1</p><p><strong>2.这一时刻预测值、这一时刻观测值、卡尔曼增益推出这一时刻最优估计值</strong></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221030230937.png"></p><p><strong>3.这一时刻预测值方差&#x2F;协方差、卡尔曼增益推出这一时刻最优估计值方差&#x2F;协方差</strong></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221030230957.png"></p><p><strong>预测更新循环往复，就能得到每一时刻的最优估计值</strong></p><h4 id="2-3调节超参数"><a href="#2-3调节超参数" class="headerlink" title="2.3调节超参数"></a>2.3调节超参数</h4><p>Q和R的取值</p><p>当F&#x3D;1且一维的情况H&#x3D;1，可以得出：</p><p>当我们更信任观测值时，那么应该让卡尔曼增益K增大；从K的公式中可以看出，R越小K越大，Q越大K越大</p><p>当我们更信任模型估计值时，那么应该让卡尔曼增益K减小；从K的公式中可以看出，R越大K越小，Q越小K越小</p><p><strong>结论：</strong></p><p>当我们更信任模型估计值时（模型估计基本没有误差），那么应该让K小一点，我们应该将R取大一点，Q取小点</p><p>当我们更信任观测值时（模型估计误差较大），那么应该让K大一点，我们应该将R取小一点，Q取大一点</p><h2 id="3-卡尔曼滤波的代码解读"><a href="#3-卡尔曼滤波的代码解读" class="headerlink" title="3.卡尔曼滤波的代码解读"></a>3.卡尔曼滤波的代码解读</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">KalmanFilter</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, F = <span class="hljs-literal">None</span>, B = <span class="hljs-literal">None</span>, H = <span class="hljs-literal">None</span>, Q = <span class="hljs-literal">None</span>, R = <span class="hljs-literal">None</span>, P = <span class="hljs-literal">None</span>, x0 = <span class="hljs-literal">None</span></span>):<br>      <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">      卡尔曼滤波可以认为是中庸算法，将measurements和线性预测值进行综合考虑</span><br><span class="hljs-string">      怎么综合考虑呢？卡尔曼滤波算法要动态的调这个比例</span><br><span class="hljs-string">      &#x27;&#x27;&#x27;</span><br><span class="hljs-string">      设状态量有xn个</span><br><span class="hljs-string">      - X0为前一时刻状态量，shape=(xn,1)</span><br><span class="hljs-string">      - P0为初始状态不确定度， shape=(xn,xn)</span><br><span class="hljs-string">      - A为状态转移矩阵，shape=(xn,xn)</span><br><span class="hljs-string">      - Q为递推噪声协方差矩阵，shape=(xn,xn)</span><br><span class="hljs-string">      - B是外部输入部分</span><br><span class="hljs-string">      返回的结果为</span><br><span class="hljs-string">      &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span>(F <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> H <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>):<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Set proper system dynamics.&quot;</span>)<br><br>        self.n = F.shape[<span class="hljs-number">1</span>] <span class="hljs-comment"># self.n = 3</span><br>        self.m = H.shape[<span class="hljs-number">1</span>] <span class="hljs-comment"># self.m = 1</span><br><br>        self.F = F<br>        self.H = H<br>        self.B = <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> B <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> B<br>        self.Q = np.eye(self.n) <span class="hljs-keyword">if</span> Q <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> Q<br>        self.R = np.eye(self.n) <span class="hljs-keyword">if</span> R <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> R<br>        self.P = np.eye(self.n) <span class="hljs-keyword">if</span> P <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> P<br>        self.x = np.zeros((self.n, <span class="hljs-number">1</span>)) <span class="hljs-keyword">if</span> x0 <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> x0<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">self, u = <span class="hljs-number">0</span></span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        使用上一时刻的最优结果预测这一时刻的预测值</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-comment">#上一时刻的最优估计值，推出这一时刻的预测值：</span><br>        <span class="hljs-comment">#   状态方程x = F * x(t-1) + B*U(t-1)</span><br>        <span class="hljs-comment">#   F：状态转移矩阵，代表当前状态上一时刻的值乘上A这种关系，作用在该系统</span><br>        <span class="hljs-comment">#   x(t-1)：上一个时刻该状态的值；</span><br>        <span class="hljs-comment">#   B：控制矩阵，输入乘上B这种关系，作用在该系统</span><br>        <span class="hljs-comment">#   U:输入，即给到x_&#123;k&#125;的一个输入；</span><br>        self.x = np.dot(self.F, self.x) + np.dot(self.B, u)<br>        <br>        <span class="hljs-comment"># P就是协方差矩阵</span><br>        <span class="hljs-comment"># 深入理解，Q其实对应的是过程噪声的方差</span><br>        <span class="hljs-comment"># P = F * P(t-1) * F^T + Q</span><br>        self.P = np.dot(np.dot(self.F, self.P), self.F.T) + self.Q<br>        <span class="hljs-keyword">return</span> self.x<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, z</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        使用这一时刻观测值measurement（传感器测得的数据）修正这一时刻预测值，得到这一时刻的最优结果</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-comment"># y = z - H * x 先验估计值</span><br>        y = z - np.dot(self.H, self.x)<br>        <span class="hljs-comment"># S = H * P * H^T + R</span><br>        S = self.R + np.dot(self.H, np.dot(self.P, self.H.T))<br>        <br>        <span class="hljs-comment"># 1.这一时刻预测值方差或者协方差和超参数R推出卡尔曼增益K_&#123;t&#125;</span><br>        <span class="hljs-comment"># K = P * H^T * S^(-1)</span><br>        K = np.dot(np.dot(self.P, self.H.T), np.linalg.inv(S))<br>        <br>        <span class="hljs-comment"># 2.这一时刻预测值、这一时刻观测值、卡尔曼增益推出这一时刻最优估计值</span><br>        <span class="hljs-comment"># x(t) = x + K(t) * y ：预测估计+卡尔曼增益*(观测值-先验估计值y)</span><br>        self.x = self.x + np.dot(K, y)<br>        <br>        <span class="hljs-comment"># 3.这一时刻预测值方差/协方差、卡尔曼增益推出这一时刻最优估计值方差/协方差</span><br>        <span class="hljs-comment"># P(t) = (I-K*H)*P * (I - K * H^T) + K * R * K^T</span><br>        I = np.eye(self.n)<br>        self.P = np.dot(np.dot(I - np.dot(K, self.H), self.P), <br>        (I - np.dot(K, self.H)).T) + np.dot(np.dot(K, self.R), K.T)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">example</span>():<br>dt = <span class="hljs-number">1.0</span>/<span class="hljs-number">60</span><br>  <span class="hljs-comment"># F为3 x 3 的矩阵</span><br>F = np.array([[<span class="hljs-number">1</span>, dt, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, dt], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]])<br>  <span class="hljs-comment"># H为1 x 3 的矩阵 [1,0,0]</span><br>H = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]).reshape(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)<br>  <span class="hljs-comment"># Q为3 x 3 的矩阵</span><br>Q = np.array([[<span class="hljs-number">0.05</span>, <span class="hljs-number">0.05</span>, <span class="hljs-number">0.0</span>], [<span class="hljs-number">0.05</span>, <span class="hljs-number">0.05</span>, <span class="hljs-number">0.0</span>], [<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>]])<br>  <span class="hljs-comment"># R为1 x 1 的矩阵</span><br>R = np.array([<span class="hljs-number">0.5</span>]).reshape(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>  <br>  <span class="hljs-comment"># 随机生成-10-10之间的100个随机数字</span><br>x = np.linspace(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>)<br>  <span class="hljs-comment"># 观测的值</span><br>  <span class="hljs-comment"># -(x平方 + 2*x - 2) + 创建一个均值为0，方差为2的高斯噪声，共有100个samples</span><br>measurements = - (x**<span class="hljs-number">2</span> + <span class="hljs-number">2</span>*x - <span class="hljs-number">2</span>)  + np.random.normal(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">100</span>)<br><br>kf = KalmanFilter(F = F, H = H, Q = Q, R = R)<br>predictions = []<br><br><span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> measurements:<br>predictions.append(np.dot(H,  kf.predict())[<span class="hljs-number">0</span>])<br>kf.update(z)<br><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(measurements)), measurements, label = <span class="hljs-string">&#x27;Measurements&#x27;</span>)<br>plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(predictions)), np.array(predictions), label = <span class="hljs-string">&#x27;Kalman Filter Prediction&#x27;</span>)<br>plt.legend()<br>plt.show()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    example()<br><br></code></pre></td></tr></table></figure><p>Reference:</p><p><a href="https://www.bilibili.com/video/BV1Rh41117MT?p=4&vd_source=8d15835c175037a4297a46dc4a23d4f9">卡尔曼滤波从理论到实践~</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>CV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cloud狂神说</title>
    <link href="/2022/10/18/Spring-Cloud%E7%8B%82%E7%A5%9E%E8%AF%B4/"/>
    <url>/2022/10/18/Spring-Cloud%E7%8B%82%E7%A5%9E%E8%AF%B4/</url>
    
    <content type="html"><![CDATA[<h2 id="🥦-1-学习前言"><a href="#🥦-1-学习前言" class="headerlink" title="🥦 1.学习前言"></a>🥦 1.学习前言</h2><h3 id="🍑-1-1-学习前提"><a href="#🍑-1-1-学习前提" class="headerlink" title="🍑 1.1 学习前提"></a>🍑 <strong>1.1 学习前提</strong></h3><ul><li>熟练使用SpringBoot 微服务快速开发框架</li><li>了解过Dubbo + Zookeeper 分布式基础</li></ul><h3 id="🍑-1-2-文章大纲"><a href="#🍑-1-2-文章大纲" class="headerlink" title="🍑 1.2 文章大纲"></a>🍑 <strong>1.2 文章大纲</strong></h3><p>|  Spring Cloud 五大组件</p><ul><li>服务注册与发现——<strong>Netflix Eureka</strong></li><li>负载均衡：</li></ul><p>​       客户端负载均衡——<strong>Netflix Ribbon</strong></p><p>​        服务端负载均衡：——<strong>Feign</strong>(其也是依赖于Ribbon，只是将调用方式RestTemplete 更改成Service 接口)</p><ul><li>断路器——<strong>Netflix Hystrix</strong></li><li>服务网关——<strong>Netflix Zuul</strong></li><li>分布式配置——<strong>Spring Cloud Config</strong></li></ul><h3 id="🍑-1-3常见面试题"><a href="#🍑-1-3常见面试题" class="headerlink" title="🍑 1.3常见面试题"></a>🍑 <strong>1.3常见面试题</strong></h3><p>1.1 什么是微服务？</p><p>1.2 微服务之间是如何独立通讯的？</p><p>1.3 SpringCloud 和 Dubbo有那些区别？</p><p>1.4 SpringBoot 和 SpringCloud，请谈谈你对他们的理解</p><p>1.5 什么是服务熔断？什么是服务降级？</p><p>1.6 微服务的优缺点分别是什么？说下你在项目开发中遇到的坑</p><p>1.7 你所知道的微服务技术栈有哪些？列举一二</p><p>1.8 Eureka和Zookeeper都可以提供服务注册与发现的功能，请说说两者的区别</p><p>…..</p><h2 id="🥦-2-微服务概述"><a href="#🥦-2-微服务概述" class="headerlink" title="🥦 2.微服务概述"></a>🥦 2.微服务概述</h2><h3 id="🍑-2-1-什么是微服务？"><a href="#🍑-2-1-什么是微服务？" class="headerlink" title="🍑 2.1 什么是微服务？"></a>🍑 <strong>2.1 什么是微服务？</strong></h3><h3 id="🍑-2-2-微服务与微服务架构"><a href="#🍑-2-2-微服务与微服务架构" class="headerlink" title="🍑 2.2 微服务与微服务架构"></a>🍑 <strong>2.2 微服务与微服务架构</strong></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">微服务<br></code></pre></td></tr></table></figure><p>强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题&#x2F;提供落地对应服务的一个服务应用，狭义的看，可以看作是IDEA中的一个个微服务工程，或者Moudel。IDEA 工具里面使用Maven开发的一个个独立的小Moudel，它具体是使用SpringBoot开发的一个小模块，专业的事情交给专业的模块来做，一个模块就做着一件事情。强调的是一个个的个体，每个个体完成一个具体的任务或者功能。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">微服务架构<br></code></pre></td></tr></table></figure><p>一种新的架构形式，Martin Fowler 于2014年提出。</p><p>微服务架构是一种架构模式，它体长将单一应用程序划分成一组小的服务，服务之间相互协调，互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务之间采用轻量级的通信机制**(如HTTP)<strong>互相协作，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具</strong>(如Maven)**对其进行构建。</p><h3 id="🍑-2-3-微服务优缺点"><a href="#🍑-2-3-微服务优缺点" class="headerlink" title="🍑 2.3 微服务优缺点"></a>🍑 <strong>2.3 微服务优缺点</strong></h3><p><code>优点</code></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs abnf">单一职责原则；<br>每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或业务需求；<br>开发简单，开发效率高，一个服务可能就是专一的只干一件事；<br>微服务能够被小团队单独开发，这个团队只需<span class="hljs-number">2</span>-<span class="hljs-number">5</span>个开发人员组成；<br>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的；<br>微服务能使用不同的语言开发；<br>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如jenkins，Hudson，bamboo；<br>微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果，无需通过合作才能体现价值；<br>微服务允许利用和融合最新技术；<br>微服务只是业务逻辑的代码，不会和HTML，CSS，或其他的界面混合<span class="hljs-comment">;</span><br>每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一的数据库；<br></code></pre></td></tr></table></figure><p><code>缺点</code></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>开发人员要处理分布式系统的复杂性；<br><span class="hljs-bullet">- </span>多服务运维难度，随着服务的增加，运维的压力也在增大；<br><span class="hljs-bullet">- </span>系统部署依赖问题；<br><span class="hljs-bullet">- </span>服务间通信成本问题；<br><span class="hljs-bullet">- </span>数据一致性问题；<br><span class="hljs-bullet">- </span>系统集成测试问题；<br><span class="hljs-bullet">- </span>性能和监控问题；<br></code></pre></td></tr></table></figure><h3 id="🍑-2-4-微服务技术栈有那些？"><a href="#🍑-2-4-微服务技术栈有那些？" class="headerlink" title="🍑 2.4 微服务技术栈有那些？"></a>🍑 <strong>2.4 微服务技术栈有那些？</strong></h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> **微服务技术条目**          </span>|<span class="hljs-string"> 落地技术                                             </span>|<br>|<span class="hljs-string"> -------------------- </span>|<span class="hljs-string"> ------------------------------------------------ </span>|<br>|<span class="hljs-string"> 服务开发                 </span>|<span class="hljs-string"> SpringBoot、Spring、SpringMVC等                     </span>|<br>|<span class="hljs-string"> 服务配置与管理              </span>|<span class="hljs-string"> Netfix公司的Archaius、阿里的Diamond等                    </span>|<br>|<span class="hljs-string"> 服务注册与发现              </span>|<span class="hljs-string"> Eureka、Consul、Zookeeper等                         </span>|<br>|<span class="hljs-string"> 服务调用                 </span>|<span class="hljs-string"> Rest、PRC、gRPC                                    </span>|<br>|<span class="hljs-string"> 服务熔断器                </span>|<span class="hljs-string"> Hystrix、Envoy等                                   </span>|<br>|<span class="hljs-string"> 负载均衡                 </span>|<span class="hljs-string"> Ribbon、Nginx等                                    </span>|<br>|<span class="hljs-string"> 服务接口调用(客户端调用服务的简化工具) </span>|<span class="hljs-string"> Fegin等                                           </span>|<br>|<span class="hljs-string"> 消息队列                 </span>|<span class="hljs-string"> Kafka、RabbitMQ、ActiveMQ等                         </span>|<br>|<span class="hljs-string"> 服务配置中心管理             </span>|<span class="hljs-string"> SpringCloudConfig、Chef等                          </span>|<br>|<span class="hljs-string"> 服务路由(API网关)          </span>|<span class="hljs-string"> Zuul等                                            </span>|<br>|<span class="hljs-string"> 服务监控                 </span>|<span class="hljs-string"> Zabbix、Nagios、Metrics、Specatator等                </span>|<br>|<span class="hljs-string"> 全链路追踪                </span>|<span class="hljs-string"> Zipkin、Brave、Dapper等                             </span>|<br>|<span class="hljs-string"> 数据流操作开发包             </span>|<span class="hljs-string"> SpringCloud Stream(封装与Redis，Rabbit，Kafka等发送接收消息) </span>|<br>|<span class="hljs-string"> 时间消息总栈               </span>|<span class="hljs-string"> SpringCloud Bus                                  </span>|<br>|<span class="hljs-string"> 服务部署                 </span>|<span class="hljs-string"> Docker、OpenStack、Kubernetes等                     </span>|<br></code></pre></td></tr></table></figure><h3 id="🍑-2-5-为什么选择SpringCloud作为微服务架构？"><a href="#🍑-2-5-为什么选择SpringCloud作为微服务架构？" class="headerlink" title="🍑 2.5 为什么选择SpringCloud作为微服务架构？"></a>🍑 <strong>2.5 为什么选择SpringCloud作为微服务架构？</strong></h3><ol><li>选型依据<ul><li>整体解决方案和框架成熟度</li><li>社区热度</li><li>可维护性</li><li>学习曲线</li></ul></li><li>当前各大IT公司用的微服务架构有那些？<ul><li>阿里：dubbo+HFS</li><li>京东：JFS</li><li>新浪：Motan</li><li>当当网：DubboX</li></ul></li><li>各微服务框架对比</li></ol><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> **功能点/服务框架** </span>|<span class="hljs-string"> Netflix/SpringCloud </span>|<span class="hljs-string"> Motan </span>|<span class="hljs-string"> gRPC </span>|<span class="hljs-string"> Thri t </span>|<span class="hljs-string"> Dubbo/DubboX </span>|<br>|<span class="hljs-string">—————————————————- </span>|<span class="hljs-string"> ————————— </span>|<span class="hljs-string"> ———— </span>|<span class="hljs-string"> —————————— </span>|<br>|<span class="hljs-string"> 功能定位 </span>|<span class="hljs-string"> 完整的微服务框架 </span>|<span class="hljs-string"> RPC框架，但整合了ZK或Consul，实现集群环境的基本服务注册发现 </span>|<span class="hljs-string"> RPC框架 </span>|<span class="hljs-string"> RPC框架 </span>|<span class="hljs-string"> 服务框架 </span>|<br>|<span class="hljs-string"> 支持Rest </span>|<span class="hljs-string"> 是，Ribbon支持多种可拔插的序列号选择 </span>|<span class="hljs-string"> 否 </span>|<span class="hljs-string"> 否 </span>|<span class="hljs-string"> 否 </span>|<span class="hljs-string"> 否 </span>|<br>|<span class="hljs-string"> 支持RPC </span>|<span class="hljs-string"> 否 </span>|<span class="hljs-string"> 是(Hession2) </span>|<span class="hljs-string"> 是 </span>|<span class="hljs-string"> 是 </span>|<span class="hljs-string"> 是 </span>|<br>|<span class="hljs-string"> 支持多语言 </span>|<span class="hljs-string"> 是(Rest形式) </span>|<span class="hljs-string"> 否 </span>|<span class="hljs-string"> 是 </span>|<span class="hljs-string"> 是 </span>|<span class="hljs-string"> 否 </span>|<br>|<span class="hljs-string"> 负载均衡 </span>|<span class="hljs-string"> 是(服务端zuul+客户端Ribbon)，zuul-服务，动态路由，云端负载均衡Eureka（针对中间层服务器） </span>|<span class="hljs-string"> 是(客户端) </span>|<span class="hljs-string"> 否 </span>|<span class="hljs-string"> 否 </span>|<span class="hljs-string"> 是(客户端) </span>|<br>|<span class="hljs-string"> 配置服务 </span>|<span class="hljs-string"> Netfix Archaius，Spring Cloud Config Server 集中配置 </span>|<span class="hljs-string"> 是(Zookeeper提供) </span>|<span class="hljs-string"> 否 </span>|<span class="hljs-string"> 否 </span>|<span class="hljs-string"> 否 </span>|<br>|<span class="hljs-string"> 服务调用链监控 </span>|<span class="hljs-string"> 是(zuul)，zuul提供边缘服务，API网关 </span>|<span class="hljs-string"> 否 </span>|<span class="hljs-string"> 否 </span>|<span class="hljs-string"> 否 </span>|<span class="hljs-string"> 否 </span>|<br>|<span class="hljs-string"> 高可用/容错 </span>|<span class="hljs-string"> 是(服务端Hystrix+客户端Ribbon) </span>|<span class="hljs-string"> 是(客户端) </span>|<span class="hljs-string"> 否 </span>|<span class="hljs-string"> 否 </span>|<span class="hljs-string"> 是(客户端) </span>|<br>|<span class="hljs-string"> 典型应用案例 </span>|<span class="hljs-string"> Netflix </span>|<span class="hljs-string"> Sina </span>|<span class="hljs-string"> Google </span>|<span class="hljs-string"> Facebook </span>|<span class="hljs-string"> </span>|<br>|<span class="hljs-string"> 社区活跃程度 </span>|<span class="hljs-string"> 高 </span>|<span class="hljs-string"> 一般 </span>|<span class="hljs-string"> 高 </span>|<span class="hljs-string"> 一般 </span>|<span class="hljs-string"> 2017年后重新开始维护，之前中断了5年 </span>|<br>|<span class="hljs-string"> 学习难度 </span>|<span class="hljs-string"> 中等 </span>|<span class="hljs-string"> 低 </span>|<span class="hljs-string"> 高 </span>|<span class="hljs-string"> 高 </span>|<span class="hljs-string"> 低 </span>|<br>|<span class="hljs-string"> 文档丰富程度 </span>|<span class="hljs-string"> 高 </span>|<span class="hljs-string"> 一般 </span>|<span class="hljs-string"> 一般 </span>|<span class="hljs-string"> 一般 </span>|<span class="hljs-string"> 高 </span>|<br>|<span class="hljs-string"> 其他 </span>|<span class="hljs-string"> Spring Cloud Bus为我们的应用程序带来了更多管理端点 </span>|<span class="hljs-string"> 支持降级 </span>|<span class="hljs-string"> Netflix内部在开发集成gRPC </span>|<span class="hljs-string"> IDL定义 </span>|<span class="hljs-string"> 实践的公司比较多 </span>|<br></code></pre></td></tr></table></figure><h2 id="🥦-3-SpringCloud入门概述"><a href="#🥦-3-SpringCloud入门概述" class="headerlink" title="🥦 3.SpringCloud入门概述"></a>🥦 3.SpringCloud入门概述</h2><h3 id="🍑-3-1-SpringCloud是什么？"><a href="#🍑-3-1-SpringCloud是什么？" class="headerlink" title="🍑 3.1 SpringCloud是什么？"></a>🍑 <strong>3.1 SpringCloud是什么？</strong></h3><p>Spring官网：<a href="https://spring.io/">https://spring.io/</a></p><h3 id="🍑-3-2-SpringCloud和SpringBoot的关系"><a href="#🍑-3-2-SpringCloud和SpringBoot的关系" class="headerlink" title="🍑 3.2 SpringCloud和SpringBoot的关系"></a>🍑 <strong>3.2 SpringCloud和SpringBoot的关系</strong></h3><ul><li>SpringBoot专注于开苏方便的开发单个个体微服务；</li><li>SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务，整合并管理起来，为各个微服务之间提供：配置管理、服务发现、断路器、路由、为代理、事件总栈、全局锁、决策竞选、分布式会话等等集成服务；</li><li>SpringBoot可以离开SpringCloud独立使用，开发项目，但SpringCloud离不开SpringBoot，属于依赖关系；</li><li>SpringBoot专注于快速、方便的开发单个个体微服务，SpringCloud关注全局的服务治理框架；</li></ul><h3 id="🍑-3-3-Dubbo-和-SpringCloud技术选型"><a href="#🍑-3-3-Dubbo-和-SpringCloud技术选型" class="headerlink" title="🍑 3.3 Dubbo 和 SpringCloud技术选型"></a>🍑 <strong>3.3 Dubbo 和 SpringCloud技术选型</strong></h3><p>   🍓分布式+服务治理Dubb</p><p>   目前成熟的互联网架构，应用服务化拆分 + 消息中间件</p><p>   🍓Dubbo 和 SpringCloud对比</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">        |<span class="hljs-string"> Dubbo         </span>|<span class="hljs-string"> SpringCloud                  </span>|<br>|<span class="hljs-string"> ------ </span>|<span class="hljs-string"> ------------- </span>|<span class="hljs-string"> ---------------------------- </span>|<br>|<span class="hljs-string"> 服务注册中心 </span>|<span class="hljs-string"> Zookeeper     </span>|<span class="hljs-string"> Spring Cloud Netfilx Eureka  </span>|<br>|<span class="hljs-string"> 服务调用方式 </span>|<span class="hljs-string"> RPC           </span>|<span class="hljs-string"> REST API                     </span>|<br>|<span class="hljs-string"> 服务监控   </span>|<span class="hljs-string"> Dubbo-monitor </span>|<span class="hljs-string"> Spring Boot Admin            </span>|<br>|<span class="hljs-string"> 断路器    </span>|<span class="hljs-string"> 不完善           </span>|<span class="hljs-string"> Spring Cloud Netfilx Hystrix </span>|<br>|<span class="hljs-string"> 服务网关   </span>|<span class="hljs-string"> 无             </span>|<span class="hljs-string"> Spring Cloud Netfilx Zuul    </span>|<br>|<span class="hljs-string"> 分布式配置  </span>|<span class="hljs-string"> 无             </span>|<span class="hljs-string"> Spring Cloud Config          </span>|<br>|<span class="hljs-string"> 服务跟踪   </span>|<span class="hljs-string"> 无             </span>|<span class="hljs-string"> Spring Cloud Sleuth          </span>|<br>|<span class="hljs-string"> 消息总栈   </span>|<span class="hljs-string"> 无             </span>|<span class="hljs-string"> Spring Cloud Bus             </span>|<br>|<span class="hljs-string"> 数据流    </span>|<span class="hljs-string"> 无             </span>|<span class="hljs-string"> Spring Cloud Stream          </span>|<br>|<span class="hljs-string"> 批量任务   </span>|<span class="hljs-string"> 无             </span>|<span class="hljs-string"> Spring Cloud Task            </span>|<br><br></code></pre></td></tr></table></figure><p><strong>最大区别：Spring Cloud 抛弃了Dubbo的RPC通信，采用的是基于HTTP的REST方式</strong></p><p>严格来说，这两种方式各有优劣。虽然从一定程度上来说，后者牺牲了服务调用的性能，但也避免了上面提到的原生RPC带来的问题。而且REST相比RPC更为灵活，服务提供方和调用方的依赖只依靠一纸契约，不存在代码级别的强依赖，这个优点在当下强调快速演化的微服务环境下，显得更加合适。</p><p><strong>总结：</strong>二者解决的问题域不一样：Dubbo的定位是一款RPC框架，而SpringCloud的目标是微服务架构下的一站式解决方案。</p><h3 id="🍑-3-4-SpringCloud能干嘛？"><a href="#🍑-3-4-SpringCloud能干嘛？" class="headerlink" title="🍑 3.4 SpringCloud能干嘛？"></a>🍑 <strong>3.4 SpringCloud能干嘛？</strong></h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Distributed/versioned <span class="hljs-keyword">configuration</span> 分布式/版本控制配置<br>Service registration <span class="hljs-keyword">and</span> discovery 服务注册与发现<br>Routing 路由<br>Service-<span class="hljs-keyword">to</span>-service calls 服务到服务的调用<br><span class="hljs-keyword">Load</span> balancing 负载均衡配置<br>Circuit Breakers 断路器<br>Distributed messaging 分布式消息管理<br>…<br></code></pre></td></tr></table></figure><h3 id="🍑-3-5-SpringCloud下载"><a href="#🍑-3-5-SpringCloud下载" class="headerlink" title="🍑 3.5 SpringCloud下载"></a>🍑 <strong>3.5 SpringCloud下载</strong></h3><p>官网：<a href="http://projects.spring.io/spring-cloud/">http://projects.spring.io/spring-cloud/</a></p><p>版本号有点特别：</p><p>SpringCloud没有采用数字编号的方式命名版本号，而是采用了伦敦地铁站的名称，<strong>同时根据字母表的顺序来对应版本时间顺序</strong>，比如最早的Realse版本：Angel，第二个Realse版本：Brixton，然后是Camden、Dalston、Edgware，目前最新的是Hoxton SR4 CURRENT GA通用稳定版。</p><p><strong>自学参考书：</strong></p><ul><li><p>SpringCloud Netflix 中文文档：<a href="https://springcloud.cc/spring-cloud-netflix.html">https://springcloud.cc/spring-cloud-netflix.html</a></p></li><li><p>SpringCloud 中文API文档(官方文档翻译版)：<a href="https://springcloud.cc/spring-cloud-dalston.html">https://springcloud.cc/spring-cloud-dalston.html</a></p></li><li><p>SpringCloud中国社区：<a href="http://springcloud.cn/">http://springcloud.cn/</a></p></li><li><p>SpringCloud中文网：<a href="https://springcloud.cc/">https://springcloud.cc</a></p></li></ul><h2 id="🥦-4-SpringCloud-Rest学习环境搭建：服务提供者"><a href="#🥦-4-SpringCloud-Rest学习环境搭建：服务提供者" class="headerlink" title="🥦 4.SpringCloud Rest学习环境搭建：服务提供者"></a>🥦 4.SpringCloud Rest学习环境搭建：服务提供者</h2><h3 id="🍑-4-1-介绍"><a href="#🍑-4-1-介绍" class="headerlink" title="🍑 4.1 介绍"></a>🍑 <strong>4.1 介绍</strong></h3><ul><li>我们会使用一个Dept部门模块做一个微服务通用案例<strong>Consumer</strong>消费者(<strong>Client</strong>)通过REST调用<strong>Provider</strong>提供者(<strong>Server</strong>)提供的服务。</li><li>回顾Spring，SpringMVC，Mybatis等以往学习的知识。</li><li>Maven的分包分模块架构复习。</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">一个父工程带着多个Moudule子模块<br><br>MicroServiceCloud父工程(<span class="hljs-keyword">Project</span>)下初次带着<span class="hljs-number">3</span>个子模块(Module)<br><br>microservicecloud-api 【封装的整体entity<span class="hljs-regexp">/接口/</span>公共配置等】<br>microservicecloud-consumer-dept-<span class="hljs-number">80</span> 【服务提供者】<br>microservicecloud-provider-dept-<span class="hljs-number">8001</span> 【服务消费者】<br></code></pre></td></tr></table></figure><h3 id="🍑-4-2-SpringCloud版本选择"><a href="#🍑-4-2-SpringCloud版本选择" class="headerlink" title="🍑 4.2 SpringCloud版本选择"></a>🍑 <strong>4.2 SpringCloud版本选择</strong></h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">大版本说明<br>|<span class="hljs-string"> SpringBoot </span>|<span class="hljs-string"> SpringCloud       </span>|<span class="hljs-string"> 关系                                 </span>|<br>|<span class="hljs-string"> ---------- </span>|<span class="hljs-string"> ----------------- </span>|<span class="hljs-string"> ---------------------------------- </span>|<br>|<span class="hljs-string"> 1.2.x      </span>|<span class="hljs-string"> Angel版本(天使)       </span>|<span class="hljs-string"> 兼容SpringBoot1.2x                   </span>|<br>|<span class="hljs-string"> 1.3.x      </span>|<span class="hljs-string"> Brixton版本(布里克斯顿)  </span>|<span class="hljs-string"> 兼容SpringBoot1.3x，也兼容SpringBoot1.4x </span>|<br>|<span class="hljs-string"> 1.4.x      </span>|<span class="hljs-string"> Camden版本(卡姆登)     </span>|<span class="hljs-string"> 兼容SpringBoot1.4x，也兼容SpringBoot1.5x </span>|<br>|<span class="hljs-string"> 1.5.x      </span>|<span class="hljs-string"> Dalston版本(多尔斯顿)   </span>|<span class="hljs-string"> 兼容SpringBoot1.5x，不兼容SpringBoot2.0x </span>|<br>|<span class="hljs-string"> 1.5.x      </span>|<span class="hljs-string"> Edgware版本(埃奇韦尔)   </span>|<span class="hljs-string"> 兼容SpringBoot1.5x，不兼容SpringBoot2.0x </span>|<br>|<span class="hljs-string"> 2.0.x      </span>|<span class="hljs-string"> Finchley版本(芬奇利)   </span>|<span class="hljs-string"> 兼容SpringBoot2.0x，不兼容SpringBoot1.5x </span>|<br>|<span class="hljs-string"> 2.1.x      </span>|<span class="hljs-string"> Greenwich版本(格林威治) </span>|<span class="hljs-string">   </span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">实际开发版本关系</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span>|<span class="hljs-string"> spring-boot-starter-parent </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> spring-cloud-dependencles </span>|<span class="hljs-string">          </span>|<br>|<span class="hljs-string"> -------------------------- </span>|<span class="hljs-string"> -------- </span>|<span class="hljs-string"> ------------------------- </span>|<span class="hljs-string"> -------- </span>|<br>|<span class="hljs-string">          **版本号**         </span>|<span class="hljs-string"> 发布日期  </span>|<span class="hljs-string">          **版本号**        </span>|<span class="hljs-string">   发布日期 </span>|<br>|<span class="hljs-string">       1.5.2.RELEASE        </span>|<span class="hljs-string">  2017-03 </span>|<span class="hljs-string">        Dalston.RC1        </span>|<span class="hljs-string">  2017-x  </span>|<br>|<span class="hljs-string">       1.5.9.RELEASE        </span>|<span class="hljs-string">  2017-11 </span>|<span class="hljs-string">      Edgware.RELEASE      </span>|<span class="hljs-string"> 2017-11  </span>|<br>|<span class="hljs-string">       1.5.16.RELEASE       </span>|<span class="hljs-string">  2018-04 </span>|<span class="hljs-string">        Edgware.SR5        </span>|<span class="hljs-string"> 2018-10  </span>|<br>|<span class="hljs-string">       1.5.20.RELEASE       </span>|<span class="hljs-string">  2018-09 </span>|<span class="hljs-string">        Edgware.SR5        </span>|<span class="hljs-string"> 2018-10  </span>|<br>|<span class="hljs-string">       2.0.2.RELEASE        </span>|<span class="hljs-string">  2018-05 </span>|<span class="hljs-string">  Fomchiey.BULD-SNAPSHOT   </span>|<span class="hljs-string">  2018-x  </span>|<br>|<span class="hljs-string">       2.0.6.RELEASE        </span>|<span class="hljs-string">  2018-10 </span>|<span class="hljs-string">       Fomchiey-SR2        </span>|<span class="hljs-string"> 2018-10  </span>|<br>|<span class="hljs-string">       2.1.4.RELEASE        </span>|<span class="hljs-string">  2019-04 </span>|<span class="hljs-string">       Greenwich.SR1       </span>|<span class="hljs-string"> 2019-03  </span>|<br></code></pre></td></tr></table></figure><p>可以根据使用人数来选择版本，一般使用Green多一点</p><h3 id="🍑-4-3-创建父工程"><a href="#🍑-4-3-创建父工程" class="headerlink" title="🍑 4.3 创建父工程"></a>🍑 <strong>4.3 创建父工程</strong></h3><p>～新建一个maven项目</p><p>～编辑pom.xml文件<strong>Packageing是pom模式</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.haust<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud-api<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud-provider-dept-8001<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud-consumer-dept-80<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud-eureka-7001<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud-eureka-7002<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud-eureka-7003<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud-provider-dept-8002<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud-provider-dept-8003<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud-consumer-dept-feign<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud-provider-dept-hystrix-8001<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud-consumer-hystrix-dashboard<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud-zuul-9527<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud-config-server-3344<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud-config-client-3355<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud-config-eureka-7001<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud-config-dept-8001<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--打包方式  pom--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">junit.version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">junit.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">log4j.version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">log4j.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">lombok.version</span>&gt;</span>1.16.18<span class="hljs-tag">&lt;/<span class="hljs-name">lombok.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.2.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--springCloud的依赖--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Greenwich.SR1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--SpringBoot--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--数据库--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--SpringBoot 启动器--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志测试~--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="🍑-4-4-创建子模块"><a href="#🍑-4-4-创建子模块" class="headerlink" title="🍑 4.4 创建子模块"></a>🍑 <strong>4.4 创建子模块</strong></h3><h3 id="🍑-4-5-踩坑记录"><a href="#🍑-4-5-踩坑记录" class="headerlink" title="🍑 4.5 踩坑记录"></a>🍑 <strong>4.5 踩坑记录</strong></h3><ul><li><p>在springboot运行主类中的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yuting.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> yuting</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/10/18 1:54 AM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptProvider</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <br>        SpringApplication.run(DeptProvider.class,args);<br>      # ❌ SpringBootApplication.run(DeptProvider.class,args); 这里的run直接飘红<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221018231142.png"></p></li></ul><p><a href="https://blog.csdn.net/GTWZeus/article/details/116305390?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4-116305390-blog-82683368.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4-116305390-blog-82683368.pc_relevant_default&utm_relevant_index=5">CSDN上同样的错误</a></p><ul><li>在使用springboot连接数据库启动项目出现错误：Failed to configure a DataSource: ‘url’ attribute is not specified and no embedded datasource could</li></ul><p>完整错误信息：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">***************************<br>APPLICATION FAILED TO START<br>***************************<br> <br>Description:<br> <br>Failed <span class="hljs-built_in">to</span> configure <span class="hljs-keyword">a</span> DataSource: <span class="hljs-string">&#x27;url&#x27;</span> attribute is <span class="hljs-keyword">not</span> specified <span class="hljs-keyword">and</span> no embedded datasource could be configured.<br> <br>Reason: Failed <span class="hljs-built_in">to</span> determine <span class="hljs-keyword">a</span> suitable driver class<br> <br> <br>Action:<br> <br>Consider <span class="hljs-keyword">the</span> following:<br>    If you want <span class="hljs-keyword">an</span> embedded database (H2, HSQL <span class="hljs-keyword">or</span> Derby), please <span class="hljs-built_in">put</span> <span class="hljs-keyword">it</span> <span class="hljs-keyword">on</span> <span class="hljs-title">the</span> <span class="hljs-title">classpath</span>.<br>    If you have database settings <span class="hljs-built_in">to</span> be loaded <span class="hljs-built_in">from</span> <span class="hljs-keyword">a</span> particular profile you may need <span class="hljs-built_in">to</span> activate <span class="hljs-keyword">it</span> (no profiles are currently active).<br></code></pre></td></tr></table></figure><p>查询一圈发现是springboot没有识别到配置的application.yml文件，类似识别不到yml文件的情况可以用以下方法解决。</p><p>在父类工程中的pom文件中加入以下内容，解决了maven打包有时只识别java代码，而不会打包配置文件的问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">fork</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">fork</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">addResources</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addResources</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--将mapper文件打包进去--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--指定根目录 到源文件夹 一般如下--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.yml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.yaml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span> <span class="hljs-comment">&lt;!--指定根目录 到源文件夹 一般如下--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.yml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.yaml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>Invalid bound statement (not found): com.yuting.springcloud.dao.DeptDao.queryById</li></ul><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221018232135.png"></p><p>最坑的是这个问题，尝试遍了网上的各种解决办法</p><p>1.检查xml文件的namespace是不是指向了Dao类(这两个东西可以不用放在一个包下)</p><p><code>&lt;mapper namespace=&quot;com.yuting.springcloud.dao.DeptDao&quot;&gt;</code></p><p>2.检查DeptDao.xml文件的id在DeptDao是否有对应的方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"> &lt;<span class="hljs-keyword">select</span> id=<span class="hljs-string">&quot;queryById&quot;</span> resultType=<span class="hljs-string">&quot;Dept&quot;</span> parameterType=<span class="hljs-string">&quot;Long&quot;</span>&gt;<br>   <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> deptno = <span class="hljs-meta">#&#123;deptno&#125;;</span><br> &lt;/<span class="hljs-keyword">select</span>&gt;<br>    <br>    <br>@Mapper<br>@Repository<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">DeptDao</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> boolean <span class="hljs-title">addDept</span>(<span class="hljs-params">Dept dept</span>)</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">queryById</span>(<span class="hljs-params">Long id</span>)</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title">queryAll</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.DeptDao.xml方法返回值是否和DeptDao保持一致</p><p>4.mapper的xml配置路径是否正确</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221018233249.png"></p><p>可以看到这里显示有问题，结果发现是少写一个s. </p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">mapper-locations: <span class="hljs-keyword">classpath</span>:mybatis<span class="hljs-regexp">/mapper/</span>*.xml<br></code></pre></td></tr></table></figure><ul><li>端口号占用</li></ul><p>Mac系统使用查看端口是否被占用</p><p><code>sudo lsof -i tcp:8081</code></p><p>强制杀掉进程</p><p><code>sudo kill -9 6076</code></p><h2 id="🥦-5-Eureka服务注册中心"><a href="#🥦-5-Eureka服务注册中心" class="headerlink" title="🥦 5. Eureka服务注册中心"></a>🥦 5. Eureka服务注册中心</h2><h3 id="🍑-5-1-什么是Eureka"><a href="#🍑-5-1-什么是Eureka" class="headerlink" title="🍑 5.1 什么是Eureka"></a>🍑 <strong>5.1 什么是Eureka</strong></h3><ul><li>Netflix在涉及Eureka时，遵循的就是API原则.</li><li>Eureka是Netflix的有个子模块，也是核心模块之一。Eureka是基于REST的服务，用于定位服务，以实现云端中间件层服务发现和故障转移，服务注册与发现对于微服务来说是非常重要的，有了服务注册与发现，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了，功能类似于Dubbo的注册中心，比如Zookeeper.</li></ul><h3 id="🍑-5-2-原理理解"><a href="#🍑-5-2-原理理解" class="headerlink" title="🍑 5.2 原理理解"></a>🍑 <strong>5.2 原理理解</strong></h3><ul><li><p><strong>Eureka基本的架构</strong></p><ul><li>Springcloud 封装了Netflix公司开发的Eureka模块来实现服务注册与发现 (对比Zookeeper).</li><li>Eureka采用了C-S的架构设计，EurekaServer作为服务注册功能的服务器，他是服务注册中心.</li><li>而系统中的其他微服务，使用Eureka的客户端连接到EurekaServer并维持心跳连接。这样系统的维护人员就可以通过EurekaServer来监控系统中各个微服务是否正常运行，Springcloud 的一些其他模块 (比如Zuul) 就可以通过EurekaServer来发现系统中的其他微服务，并执行相关的逻辑.</li><li>Eureka 包含两个组件：<strong>Eureka Server</strong> 和 <strong>Eureka Client</strong>.</li><li>Eureka Server 提供服务注册，各个节点启动后，回在EurekaServer中进行注册，这样Eureka Server中的服务注册表中将会储存所有课用服务节点的信息，服务节点的信息可以在界面中直观的看到.</li><li>Eureka Client 是一个Java客户端，用于简化EurekaServer的交互，客户端同时也具备一个内置的，使用轮询负载算法的负载均衡器。在应用启动后，将会向EurekaServer发送心跳 (默认周期为30秒) 。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除掉 (默认周期为90s).</li></ul><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221026232621.png"></p></li><li><p><strong>三大角色</strong></p><ul><li>Eureka Server：提供服务的注册与发现</li><li>Service Provider：服务生产方，将自身服务注册到Eureka中，从而使服务消费方能够找到</li><li>Service Consumer：服务消费方，从Eureka中获取注册服务列表，从而找到消费服务</li></ul></li><li><p>目前工程状况</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;eureka.client&quot;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://localhost:8761&quot;</span> + PREFIX + <span class="hljs-string">&quot;/&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="🍑-5-3-构建步骤"><a href="#🍑-5-3-构建步骤" class="headerlink" title="🍑 5.3 构建步骤"></a>🍑 <strong>5.3 构建步骤</strong></h3><p>🍓1. eureka-server</p><p>​     01.springcloud-eureka-7001 模块建立</p><p>​     02.pom.xml 配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&lt;!--导包~--&gt;</span><br><span class="hljs-string">&lt;dependencies&gt;</span><br>    <span class="hljs-string">&lt;!--</span> <span class="hljs-string">https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server</span> <span class="hljs-string">--&gt;</span><br>    <span class="hljs-string">&lt;!--导入Eureka</span> <span class="hljs-string">Server依赖--&gt;</span><br>    <span class="hljs-string">&lt;dependency&gt;</span><br>        <span class="hljs-string">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br>        <span class="hljs-string">&lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;</span><br>        <span class="hljs-string">&lt;version&gt;1.4.6.RELEASE&lt;/version&gt;</span><br>    <span class="hljs-string">&lt;/dependency&gt;</span><br>    <span class="hljs-string">&lt;!--热部署工具--&gt;</span><br>    <span class="hljs-string">&lt;dependency&gt;</span><br>        <span class="hljs-string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br>        <span class="hljs-string">&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br>    <span class="hljs-string">&lt;/dependency&gt;</span><br><span class="hljs-string">&lt;/dependencies&gt;</span><br></code></pre></td></tr></table></figure><p>  03.application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7001</span><br><span class="hljs-comment"># Eureka配置</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-comment"># Eureka服务端的实例名字</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment"># 表示是否向 Eureka 注册中心注册自己(这个模块本身是服务器,所以不需要)</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># fetch-registry如果为false,则表示自己为注册中心,客户端的化为 ture</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># Eureka监控页面~</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></code></pre></td></tr></table></figure><p>04.主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Auther</span>: csp1999</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2020/05/18/10:26</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 启动之后，访问 http://127.0.0.1:7001/</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-comment">// @EnableEurekaServer 服务端的启动类，可以接受别人注册进来~</span><br><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaServer_7001</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaServer_7001.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>05.启动成功后访问 <a href="http://localhost:7001/">http://localhost:7001/</a> 得到以下页面</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221026233534.png"></p><p> 🍓2. eureka-client</p><p><strong>调整之前创建的springlouc-provider-dept-8001</strong></p><p> 01.导入Eureka依赖</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&lt;!--Eureka依赖--&gt;</span><br><span class="hljs-string">&lt;!--</span> <span class="hljs-string">https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka</span> <span class="hljs-string">--&gt;</span><br><span class="hljs-string">&lt;dependency&gt;</span><br>    <span class="hljs-string">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br>    <span class="hljs-string">&lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br>    <span class="hljs-string">&lt;version&gt;1.4.6.RELEASE&lt;/version&gt;</span><br><span class="hljs-string">&lt;/dependency&gt;</span><br></code></pre></td></tr></table></figure><p>02.application中新增Eureca配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># Eureka配置：配置服务注册中心地址</span><br>eureka:<br>  client:<br>    service-url:<br>      defaultZone: http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">7001</span><span class="hljs-regexp">/eureka/</span><br></code></pre></td></tr></table></figure><p>03.为主启动类添加<a href="https://github.com/EnableEurekaClient">@EnableEurekaClient</a>注解</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @Auther: csp1999</span><br><span class="hljs-comment"> * @Date: 2020/05/17/22:09</span><br><span class="hljs-comment"> * @Description: 启动类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-comment">// @EnableEurekaClient 开启Eureka客户端注解，在服务启动后自动向注册中心注册服务</span><br><span class="hljs-variable">@EnableEurekaClient</span><br>public class DeptProvider_8001 &#123;<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(DeptProvider_8001.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>04.先启动7001服务端后启动8001客户端进行测试，然后访问监控页<a href="http://localhost:7001/">http://localhost:7001/</a> 产看结果如图，成功</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221026233758.png"></p><p>05.修改Eureka上的默认描述信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Eureka配置：配置服务注册中心地址</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka/</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">springcloud-provider-dept-8001</span> <span class="hljs-comment">#修改Eureka上的默认描述信息</span><br></code></pre></td></tr></table></figure><p>结果如图：</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221026233859.png"></p><p>如果此时停掉springcloud-provider-dept-8001 等<strong>30s</strong>后 监控会开启保护机制：</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221026233924.png"></p><p> 06.配置关于服务加载的监控信息</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221026234114.png"></p><p>pom.xml中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--actuator完善监控信息--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>application.yml中添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># info配置</span><br><span class="hljs-attr">info:</span><br><span class="hljs-comment"># 项目的名称</span><br><span class="hljs-attr">app.name:</span> <span class="hljs-string">yuting-springcloud</span><br><span class="hljs-comment"># 公司的名称</span><br><span class="hljs-attr">company.name:</span> <span class="hljs-string">华东师范大学计算机科学学院</span><br></code></pre></td></tr></table></figure><p>此时刷新监控页，点击进入<img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221031230902.png" style="zoom:50%;" />跳转新页面显示如下内容：</p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221031231024.png" style="zoom:67%;" /><p>🍓3. Eureka自我保护机制：好死不如赖活着</p><p>一句话总结就是：<strong>某时刻某一个微服务不可用，eureka不会立即清理，依旧会对该微服务的信息进行保存！</strong></p><ul><li>默认情况下，当eureka server在一定时间内没有收到实例的心跳，便会把该实例从注册表中删除（<strong>默认是90秒</strong>），但是，如果短时间内丢失大量的实例心跳，便会触发eureka server的自我保护机制，比如在开发测试时，需要频繁地重启微服务实例，但是我们很少会把eureka server一起重启（因为在开发过程中不会修改eureka注册中心），<strong>当一分钟内收到的心跳数大量减少时，会触发该保护机制</strong>。可以在eureka管理界面看到Renews threshold和Renews(last min)，当后者（最后一分钟收到的心跳数）小于前者（心跳阈值）的时候，触发保护机制，会出现红色的警告：<code>EMERGENCY!EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY&#39;RE NOT.RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEGING EXPIRED JUST TO BE SAFE.</code>从警告中可以看到，eureka认为虽然收不到实例的心跳，但它认为实例还是健康的，eureka会保护这些实例，不会把它们从注册表中删掉。</li><li>该保护机制的目的是避免网络连接故障，在发生网络故障时，微服务和注册中心之间无法正常通信，但服务本身是健康的，不应该注销该服务，如果eureka因网络故障而把微服务误删了，那即使网络恢复了，该微服务也不会重新注册到eureka server了，因为只有在微服务启动的时候才会发起注册请求，后面只会发送心跳和服务列表请求，这样的话，该实例虽然是运行着，但永远不会被其它服务所感知。所以，eureka server在短时间内丢失过多的客户端心跳时，会进入自我保护模式，该模式下，eureka会保护注册表中的信息，不在注销任何微服务，当网络故障恢复后，eureka会自动退出保护模式。自我保护模式可以让集群更加健壮。</li><li>但是我们在开发测试阶段，需要频繁地重启发布，如果触发了保护机制，则旧的服务实例没有被删除，这时请求有可能跑到旧的实例中，而该实例已经关闭了，这就导致请求错误，影响开发测试。所以，在开发测试阶段，我们可以把自我保护模式关闭，只需在eureka server配置文件中加上如下配置即可：<code>eureka.server.enable-self-preservation=false</code>【不推荐关闭自我保护机制】</li></ul><p>详细内容可以参考下这篇博客内容：<a href="https://blog.csdn.net/wudiyong22/article/details/80827594">https://blog.csdn.net/wudiyong22/article/details/80827594</a></p><p> 🍓4. 注册进来的微服务，获取一些消息（团队开发会用到）</p><p><strong>DeptController.java</strong>新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * DiscoveryClient 可以用来获取一些配置的信息，得到具体的微服务！</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DiscoveryClient client;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取一些注册进来的微服务的信息~，</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/dept/discovery&quot;)</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">discovery</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取微服务列表的清单</span><br>    List&lt;String&gt; services = client.getServices();<br>    System.out.println(<span class="hljs-string">&quot;discovery=&gt;services:&quot;</span> + services);<br>    <span class="hljs-comment">// 得到一个具体的微服务信息,通过具体的微服务id，applicaioinName；</span><br>    List&lt;ServiceInstance&gt; instances = client.getInstances(<span class="hljs-string">&quot;SPRINGCLOUD-PROVIDER-DEPT&quot;</span>);<br>    <span class="hljs-keyword">for</span> (ServiceInstance instance : instances) &#123;<br>        System.out.println(<br>                instance.getHost() + <span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-comment">// 主机名称</span><br>                        instance.getPort() + <span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-comment">// 端口号</span><br>                        instance.getUri() + <span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-comment">// uri</span><br>                        instance.getServiceId() <span class="hljs-comment">// 服务id</span><br>        );<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.client;<br>&#125;<br></code></pre></td></tr></table></figure><p>主启动类中加入<a href="https://github.com/EnableDiscoveryClient">@EnableDiscoveryClient</a> 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-comment">// @EnableEurekaClient 开启Eureka客户端注解，在服务启动后自动向注册中心注册服务</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-comment">// @EnableEurekaClient 开启服务发现客户端的注解，可以用来获取一些配置的信息，得到具体的微服务</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptProvider_8001</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如图：</p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221101000801.png" style="zoom: 50%;" /><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221101000849.png"></p><h3 id="🍑-5-4-Eureka：集群环境配置"><a href="#🍑-5-4-Eureka：集群环境配置" class="headerlink" title="🍑 5.4  Eureka：集群环境配置"></a>🍑 <strong>5.4  Eureka：集群环境配置</strong></h3><p>🍓1.初始化</p><p>新建springcloud-eureka-7002、springcloud-eureka-7003 模块</p><p>1.为pom.xml添加依赖 (与springcloud-eureka-7001相同)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导包~--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --&gt;</span><br>    <span class="hljs-comment">&lt;!--导入Eureka Server依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--热部署工具--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.application.yml配置(与springcloud-eureka-7001相同)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7003</span><br><span class="hljs-comment"># Eureka配置</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhost</span> <span class="hljs-comment"># Eureka服务端的实例名字</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 表示是否向 Eureka 注册中心注册自己(这个模块本身是服务器,所以不需要)</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># fetch-registry如果为false,则表示自己为注册中心</span><br>    <span class="hljs-attr">service-url:</span> <span class="hljs-comment"># 监控页面~</span><br>      <span class="hljs-comment"># 重写Eureka的默认端口以及访问路径 ---&gt;http://localhost:7001/eureka/</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://$&#123;</span><br>    <span class="hljs-string">eureka.instance.hostname&#125;:$&#123;</span><br>    <span class="hljs-string">server.port&#125;/eureka/</span><br></code></pre></td></tr></table></figure><p>3.主启动类(与springcloud-eureka-7001相同)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Auther</span>: yuting</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2022/11/02/10:26</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 启动之后，访问 http://127.0.0.1:7003/</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-comment">// @EnableEurekaServer 服务端的启动类，可以接受别人注册进来~</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaServer_7003</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaServer_7003.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>🍓2.集群成员相互关联</p><p>配置一些自定义本机名字，找到本机hosts文件并打开</p><p>在hosts文件最后加上，要访问的本机名称，默认是localhost</p><p>127.0.0.1    eureka7001</p><p>127.0.0.1    eureka7002</p><p>127.0.0.1    eureka7003</p><p>修改application.yml的配置，如图为springcloud-eureka-7001配置，springcloud-eureka-7002&#x2F;springcloud-eureka-7003同样分别修改为其对应的名称即可</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221102234722.png"></p><p>在集群中使springcloud-eureka-7001关联springcloud-eureka-7002、springcloud-eureka-7003</p><p>完整的springcloud-eureka-7001下的application.yml如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7001</span><br><span class="hljs-comment">#Eureka配置</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka7001.com</span> <span class="hljs-comment">#Eureka服务端的实例名字</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#表示是否向 Eureka 注册中心注册自己(这个模块本身是服务器,所以不需要)</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#fetch-registry如果为false,则表示自己为注册中心</span><br>    <span class="hljs-attr">service-url:</span> <span class="hljs-comment">#监控页面~</span><br>      <span class="hljs-comment">#重写Eureka的默认端口以及访问路径 ---&gt;http://localhost:7001/eureka/</span><br>      <span class="hljs-comment"># 单机： defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br>      <span class="hljs-comment"># 集群（关联）：7001关联7002、7003</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span><br></code></pre></td></tr></table></figure><p>同时在集群中使springcloud-eureka-7002关联springcloud-eureka-7001、springcloud-eureka-7003</p><p>完整的springcloud-eureka-7002下的application.yml如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7002</span><br><span class="hljs-comment">#Eureka配置</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka7002.com</span> <span class="hljs-comment">#Eureka服务端的实例名字</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#表示是否向 Eureka 注册中心注册自己(这个模块本身是服务器,所以不需要)</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#fetch-registry如果为false,则表示自己为注册中心</span><br>    <span class="hljs-attr">service-url:</span> <span class="hljs-comment">#监控页面~</span><br>      <span class="hljs-comment">#重写Eureka的默认端口以及访问路径 ---&gt;http://localhost:7001/eureka/</span><br>      <span class="hljs-comment"># 单机： defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br>      <span class="hljs-comment"># 集群（关联）：7002关联7001、7003</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka/,http://eureka7003.com:7003/eureka/</span><br></code></pre></td></tr></table></figure><p>springcloud-eureka-7003配置方式同理可得.</p><p>通过springcloud-provider-dept-8001下的yml配置文件，修改<strong>Eureka配置：配置服务注册中心地址</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># Eureka配置：配置服务注册中心地址</span><br>eureka:<br>  client:<br>    service-url:<br>      <span class="hljs-comment"># 注册中心地址7001-7003</span><br>      defaultZone: http:<span class="hljs-regexp">//</span>eureka7001.com:<span class="hljs-number">7001</span><span class="hljs-regexp">/eureka/</span>,http:<span class="hljs-regexp">//</span>eureka7002.com:<span class="hljs-number">7002</span><span class="hljs-regexp">/eureka/</span>,http:<span class="hljs-regexp">//</span>eureka7003.com:<span class="hljs-number">7003</span><span class="hljs-regexp">/eureka/</span><br>  instance:<br>    instance-id: springcloud-provider-dept-<span class="hljs-number">8001</span> <span class="hljs-comment">#修改Eureka上的默认描述信息</span><br></code></pre></td></tr></table></figure><p>这样模拟集群就搭建号了，就可以把一个项目挂载到三个服务器上了</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221102234941.png"></p><h3 id="🍑5-5-对比和Zookeeper区别"><a href="#🍑5-5-对比和Zookeeper区别" class="headerlink" title="🍑5.5 对比和Zookeeper区别"></a>🍑<strong>5.5 对比和Zookeeper区别</strong></h3><p>🍐<strong>1. 回顾CAP原则</strong></p><p>RDBMS (MySQL\Oracle\sqlServer) &#x3D;&#x3D;&#x3D;&gt; ACID</p><p>NoSQL (Redis\MongoDB) &#x3D;&#x3D;&#x3D;&gt; CAP</p><p>🍐<strong>2. ACID是什么？</strong></p><ul><li>A (Atomicity) 原子性</li><li>C (Consistency) 一致性</li><li>I (Isolation) 隔离性</li><li>D (Durability) 持久性</li></ul><p>🍐<strong>3. CAP是什么?</strong></p><ul><li>C (Consistency) 强一致性</li><li>A (Availability) 可用性</li><li>P (Partition tolerance) 分区容错性</li></ul><p>CAP的三进二：CA、AP、CP</p><p>🍐<strong>4. CAP理论的核心</strong></p><ul><li>一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求</li><li>根据CAP原理，将NoSQL数据库分成了满足CA原则，满足CP原则和满足AP原则三大类<ul><li>CA：单点集群，满足一致性，可用性的系统，通常可扩展性较差</li><li>CP：满足一致性，分区容错的系统，通常性能不是特别高</li><li>AP：满足可用性，分区容错的系统，通常可能对一致性要求低一些</li></ul></li></ul><p>🍐<strong>5. 作为分布式服务注册中心，Eureka比Zookeeper好在哪里？</strong></p><p>著名的CAP理论指出，一个分布式系统不可能同时满足C (一致性) 、A (可用性) 、P (容错性)，由于分区容错性P再分布式系统中是必须要保证的，因此我们只能再A和C之间进行权衡。</p><ul><li>Zookeeper 保证的是 CP —&gt; 满足一致性，分区容错的系统，通常性能不是特别高</li><li>Eureka 保证的是 AP —&gt; 满足可用性，分区容错的系统，通常可能对一致性要求低一些</li></ul><p><strong>Zookeeper保证的是CP</strong></p><p>当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接收服务直接down掉不可用。也就是说，<strong>服务注册功能对可用性的要求要高于一致性</strong>。但zookeeper会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，30-120s，且选举期间整个zookeeper集群是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因为网络问题使得zookeeper集群失去master节点是较大概率发生的事件，虽然服务最终能够恢复，但是，漫长的选举时间导致注册长期不可用，是不可容忍的。</p><p><strong>Eureka保证的是AP</strong></p><p>Eureka看明白了这一点，因此在设计时就优先保证可用性。<strong>Eureka各个节点都是平等的</strong>，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册时，如果发现连接失败，则会自动切换至其他节点，只要有一台Eureka还在，就能保住注册服务的可用性，只不过查到的信息可能不是最新的，除此之外，Eureka还有之中自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：</p><ul><li>Eureka不在从注册列表中移除因为长时间没收到心跳而应该过期的服务</li><li>Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上 (即保证当前节点依然可用)</li><li>当网络稳定时，当前实例新的注册信息会被同步到其他节点中</li></ul><p>因此，Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪</p><p>⚠️注意：在使用spingcloud的微服务的时候，要记住不能使用下划线，用横线去代替。</p><p>(1)问题描述：</p><p>在进行使用springcloud微服务的时候，在eureka注册中心，注册完多个服务提供者在eureka注册中心，使用负载均衡Ribbon，在spingboot启动器运行时曝出这个错误的，抛出这个异常，<br>java.lang.IllegalStateException: Request URI does not contain a valid hostname: <a href="http://user_service/user/">http://user_service/user/</a></p><p>(2)问题分析：</p><p><code>java.lang.IllegalStateException: Request URI does not contain a valid hostname: http://user_service/user/</code></p><p>这个异常是找不到指定的url，在eureka的client端，通过restTemple向eureka的server获取微服务的时候，没有连接上主机名，所以需要检查url服务名字的错误，最后是发现负载均衡Ribbon是不支持下划线的，只支持横线。在将服务提供者的名字重新命名，将下划线改为横线，重新启动服务，这个异常就解决了。</p><p>参考：<a href="https://blog.csdn.net/weixin_42614080/article/details/88982043">https://blog.csdn.net/weixin_42614080/article/details/88982043</a></p><h2 id="🥦-6-Ribbon：负载均衡-基于客户端"><a href="#🥦-6-Ribbon：负载均衡-基于客户端" class="headerlink" title="🥦 6. Ribbon：负载均衡(基于客户端)"></a>🥦 6. Ribbon：负载均衡(基于客户端)</h2><h3 id="🍑6-1-负载均衡以及Ribbon"><a href="#🍑6-1-负载均衡以及Ribbon" class="headerlink" title="🍑6.1 负载均衡以及Ribbon"></a>🍑6.1 负载均衡以及Ribbon</h3><p>Ribbon是什么？</p><ul><li>Spring Cloud Ribbon 是基于Netflix Ribbon 实现的一套<strong>客户端负载均衡的工具</strong>。</li><li>简单的说，Ribbon 是 Netflix 发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将 Netflix 的中间层服务连接在一起。Ribbon 的客户端组件提供一系列完整的配置项，如：连接超时、重试等。简单的说，就是在配置文件中列出 LoadBalancer (简称LB：负载均衡) 后面所有的及其，Ribbon 会自动的帮助你基于某种规则 (如简单轮询，随机连接等等) 去连接这些机器。我们也容易使用 Ribbon 实现自定义的负载均衡算法！</li></ul><p>Ribbon能干嘛？</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221103224258.png"></p><ul><li><p>LB，即负载均衡 (LoadBalancer) ，在微服务或分布式集群中经常用的一种应用。</p></li><li><p>负载均衡简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA (高用)。</p></li><li><p>常见的负载均衡软件有 Nginx、Lvs 等等。</p></li><li><p>Dubbo、SpringCloud 中均给我们提供了负载均衡，<strong>SpringCloud 的负载均衡算法可以自定义</strong>。</p></li><li><p>负载均衡简单分类：</p><ul><li>集中式LB<ul><li>即在服务的提供方和消费方之间使用独立的LB设施，如**Nginx(反向代理服务器)**，由该设施负责把访问请求通过某种策略转发至服务的提供方！</li></ul></li><li>进程式 LB<ul><li>将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选出一个合适的服务器。</li><li><strong>Ribbon 就属于进程内LB</strong>，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址！</li></ul></li></ul></li></ul><h3 id="🍑6-2-集成Ribbon"><a href="#🍑6-2-集成Ribbon" class="headerlink" title="🍑6.2 集成Ribbon"></a>🍑6.2 集成Ribbon</h3><p><strong>springcloud-consumer-dept-80</strong>向pom.xml中添加Ribbon和Eureka依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Ribbon--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--Eureka: Ribbon需要从Eureka服务中心获取要拿什么--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在application.yml文件中配置Eureka</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># Eureka配置</span><br>eureka:<br>  client:<br>    register-with-eureka: false <span class="hljs-comment"># 不向 Eureka注册自己</span><br>    service-url: <span class="hljs-comment"># 从三个注册中心中随机取一个去访问</span><br>      defaultZone: http:<span class="hljs-regexp">//</span>eureka7001.com:<span class="hljs-number">7001</span><span class="hljs-regexp">/eureka/</span>,http:<span class="hljs-regexp">//</span>eureka7002.com:<span class="hljs-number">7002</span><span class="hljs-regexp">/eureka/</span>,http:<span class="hljs-regexp">//</span>eureka7003.com:<span class="hljs-number">7003</span><span class="hljs-regexp">/eureka/</span><br></code></pre></td></tr></table></figure><p>主启动类加上@EnableEurekaClient注解，开启Eureka注解</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">//Ribbon 和 Eureka 整合以后，客户端可以直接调用，不用关心IP地址和端口号</span><br><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@EnableEurekaClient</span> <span class="hljs-comment">//开启Eureka 客户端</span><br>public class DeptConsumer_80 &#123;<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(DeptConsumer_80.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义Spring配置类：ConfigBean.java 配置负载均衡实现RestTemplate</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Configuration</span><br>public class ConfigBean &#123;<br>    <span class="hljs-comment">//@Configuration -- spring  applicationContext.xml</span><br>    <span class="hljs-variable">@LoadBalanced</span> <span class="hljs-comment">//配置负载均衡实现RestTemplate</span><br>    <span class="hljs-variable">@Bean</span><br>    public RestTemplate getRestTemplate() &#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">new</span> <span class="hljs-selector-tag">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改conroller：DeptConsumerController.java</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//Ribbon:我们这里的地址，应该是一个变量，通过服务名来访问</span><br><span class="hljs-comment">//private static final String REST_URL_PREFIX = &quot;http://localhost:8001&quot;;</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> REST_URL_PREFIX = <span class="hljs-string">&quot;http://SPRINGCLOUD-PROVIDER-DEPT&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="🍑6-3-使用Ribbon实现负载均衡"><a href="#🍑6-3-使用Ribbon实现负载均衡" class="headerlink" title="🍑6.3 使用Ribbon实现负载均衡"></a>🍑6.3 使用Ribbon实现负载均衡</h3><p>流程图：</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221103224800.png"></p><p>1.新建两个服务提供者Moudle：springcloud-provider-dept-8003、springcloud-provider-dept-8002</p><p>2.参照springcloud-provider-dept-8001 依次为另外两个Moudle添加pom.xml依赖 、resourece下的mybatis和application.yml配置，Java代码</p><p>3.启动所有服务测试(根据自身电脑配置决定启动服务的个数)，访问<a href="http://eureka7001.com:7002/%E6%9F%A5%E7%9C%8B%E7%BB%93%E6%9E%9C">http://eureka7001.com:7002/查看结果</a></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221105175026.png"></p><p>测试访问<a href="http://localhost/consumer/dept/list">http://localhost/consumer/dept/list</a> 这时候随机访问的是服务提供者8003</p><p>再次访问<a href="http://localhost/consumer/dept/list%E8%BF%99%E6%97%B6%E5%80%99%E9%9A%8F%E6%9C%BA%E7%9A%84%E6%98%AF%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%858001">http://localhost/consumer/dept/list这时候随机的是服务提供者8001</a></p><p>以上这种<strong>每次访问<a href="http://localhost/consumer/dept/list%E9%9A%8F%E6%9C%BA%E8%AE%BF%E9%97%AE%E9%9B%86%E7%BE%A4%E4%B8%AD%E6%9F%90%E4%B8%AA%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%EF%BC%8C%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5%E5%8F%AB%E5%81%9A%E8%BD%AE%E8%AF%A2">http://localhost/consumer/dept/list随机访问集群中某个服务提供者，这种情况叫做轮询</a></strong>，轮询算法在SpringCloud中可以自定义。</p><p><strong>如何切换或者自定义规则呢？</strong></p><p>在springcloud-provider-dept-80模块下的ConfigBean中进行配置，切换使用不同的规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigBean</span> &#123;<br>    <span class="hljs-comment">//@Configuration -- spring  applicationContext.xml</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * IRule:</span><br><span class="hljs-comment">     * RoundRobinRule 轮询策略</span><br><span class="hljs-comment">     * RandomRule 随机策略</span><br><span class="hljs-comment">     * AvailabilityFilteringRule ： 会先过滤掉，跳闸，访问故障的服务~，对剩下的进行轮询~</span><br><span class="hljs-comment">     * RetryRule ： 会先按照轮询获取服务~，如果服务获取失败，则会在指定的时间内进行，重试</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> IRule <span class="hljs-title function_">myRule</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomRule</span>();<span class="hljs-comment">//使用随机策略</span><br>        <span class="hljs-comment">//return new RoundRobinRule();//使用轮询策略</span><br>        <span class="hljs-comment">//return new AvailabilityFilteringRule();//使用轮询策略</span><br>        <span class="hljs-comment">//return new RetryRule();//使用轮询策略</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以自定义规则，在myRule包下自定义一个配置类MyRule.java，注意：<strong>该包不要和主启动类所在的包同级，要跟启动类所在包同级</strong>：</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221105175159.png"></p><p>MyRule.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRule</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> IRule <span class="hljs-title function_">myRule</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRandomRule</span>();<span class="hljs-comment">//默认是轮询RandomRule,现在自定义为自己的</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>主启动类开启负载均衡并指定自定义的MyRule配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Ribbon 和 Eureka 整合以后，客户端可以直接调用，不用关心IP地址和端口号</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-comment">//在微服务启动的时候就能加载自定义的Ribbon类(自定义的规则会覆盖原有默认的规则)</span><br><span class="hljs-meta">@RibbonClient(name = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;,configuration = MyRule.class)</span><span class="hljs-comment">//开启负载均衡,并指定自定义的规则</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptConsumer_80</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(DeptConsumer_80.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义的规则(这里我们参考Ribbon中默认的规则代码自己稍微改动)：MyRandomRule.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRandomRule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractLoadBalancerRule</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 每个服务访问5次则换下一个服务(总共3个服务)</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * total=0,默认=0,如果=5,指向下一个服务节点</span><br><span class="hljs-comment">     * index=0,默认=0,如果total=5,index+1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//被调用的次数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">currentIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//当前是谁在提供服务</span><br>    <span class="hljs-comment">//@edu.umd.cs.findbugs.annotations.SuppressWarnings(value = &quot;RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE&quot;)</span><br>    <span class="hljs-keyword">public</span> Server <span class="hljs-title function_">choose</span><span class="hljs-params">(ILoadBalancer lb, Object key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (lb == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">Server</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (server == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (Thread.interrupted()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            List&lt;Server&gt; upList = lb.getReachableServers();<span class="hljs-comment">//获得当前活着的服务</span><br>            List&lt;Server&gt; allList = lb.getAllServers();<span class="hljs-comment">//获取所有的服务</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">serverCount</span> <span class="hljs-operator">=</span> allList.size();<br>            <span class="hljs-keyword">if</span> (serverCount == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                 * No servers. End regardless of pass, because subsequent passes</span><br><span class="hljs-comment">                 * only get more restrictive.</span><br><span class="hljs-comment">                 */</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-comment">//int index = chooseRandomInt(serverCount);//生成区间随机数</span><br>            <span class="hljs-comment">//server = upList.get(index);//从或活着的服务中,随机获取一个</span><br>            <span class="hljs-comment">//=====================自定义代码=========================</span><br>            <span class="hljs-keyword">if</span> (total &lt; <span class="hljs-number">5</span>) &#123;<br>                server = upList.get(currentIndex);<br>                total++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                total = <span class="hljs-number">0</span>;<br>                currentIndex++;<br>                <span class="hljs-keyword">if</span> (currentIndex &gt; upList.size()) &#123;<br>                    currentIndex = <span class="hljs-number">0</span>;<br>                &#125;<br>                server = upList.get(currentIndex);<span class="hljs-comment">//从活着的服务中,获取指定的服务来进行操作</span><br>            &#125;<br>            <span class="hljs-comment">//======================================================</span><br>            <span class="hljs-keyword">if</span> (server == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                 * The only time this should happen is if the server list were</span><br><span class="hljs-comment">                 * somehow trimmed. This is a transient condition. Retry after</span><br><span class="hljs-comment">                 * yielding.</span><br><span class="hljs-comment">                 */</span><br>                Thread.yield();<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (server.isAlive()) &#123;<br>                <span class="hljs-keyword">return</span> (server);<br>            &#125;<br>            <span class="hljs-comment">// Shouldn&#x27;t actually happen.. but must be transient or a bug.</span><br>            server = <span class="hljs-literal">null</span>;<br>            Thread.yield();<br>        &#125;<br>        <span class="hljs-keyword">return</span> server;<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">chooseRandomInt</span><span class="hljs-params">(<span class="hljs-type">int</span> serverCount)</span> &#123;<br>        <span class="hljs-keyword">return</span> ThreadLocalRandom.current().nextInt(serverCount);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Server <span class="hljs-title function_">choose</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-keyword">return</span> choose(getLoadBalancer(), key);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initWithNiwsConfig</span><span class="hljs-params">(IClientConfig clientConfig)</span> &#123;<br>        <span class="hljs-comment">// TODO Auto-generated method stub</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="🥦-7-Feign：负载均衡-基于服务端"><a href="#🥦-7-Feign：负载均衡-基于服务端" class="headerlink" title="🥦 7. Feign：负载均衡(基于服务端)"></a>🥦 7. Feign：负载均衡(基于服务端)</h2><h3 id="🍑-7-1-Feign简介"><a href="#🍑-7-1-Feign简介" class="headerlink" title="🍑 7.1 Feign简介"></a>🍑 7.1 Feign简介</h3><p>Feign是声明式Web Service客户端，它让微服务之间的调用变得更简单，类似controller调用service。SpringCloud集成了Ribbon和Eureka，可以使用Feigin提供负载均衡的http客户端</p><p><strong>只需要创建一个接口，然后添加注解即可~</strong></p><p>Feign，主要是社区版，大家都习惯面向接口编程。这个是很多开发人员的规范。调用微服务访问两种方法</p><ol><li>微服务名字 【ribbon】</li><li>接口和注解 【feign】</li></ol><p><strong>Feign能干什么？</strong></p><ul><li>Feign旨在使编写Java Http客户端变得更容易</li><li>前面在使用<strong>Ribbon</strong> + <strong>RestTemplate</strong>时，利用<strong>RestTemplate</strong>对Http请求的封装处理，形成了一套模板化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一个客户端类来包装这些依赖服务的调用。所以，<strong>Feign</strong>在此基础上做了进一步的封装，由他来帮助我们定义和实现依赖服务接口的定义，在Feign的实现下，我们只需要创建一个接口并使用注解的方式来配置它 (类似以前Dao接口上标注Mapper注解，现在是一个微服务接口上面标注一个Feign注解)，即可完成对服务提供方的接口绑定，简化了使用Spring Cloud Ribbon 时，自动封装服务调用客户端的开发量。</li></ul><p><strong>Feign默认集成了Ribbon</strong></p><ul><li>利用<strong>Ribbon</strong>维护了MicroServiceCloud-Dept的服务列表信息，并且通过轮询实现了客户端的负载均衡，而与<strong>Ribbon</strong>不同的是，通过<strong>Feign</strong>只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用。</li></ul><h3 id="🍑-7-2-Feign的使用步骤"><a href="#🍑-7-2-Feign的使用步骤" class="headerlink" title="🍑 7.2 Feign的使用步骤"></a>🍑 7.2 Feign的使用步骤</h3><p>创建springcloud-consumer-fdept-feign模块</p><p>拷贝springcloud-consumer-dept-80模块下的pom.xml，resource，以及java代码到springcloud-consumer-feign模块，并添加feign依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Feign的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs java">``````````<br>通过Ribbon实现：原来的controller：DeptConsumerController.java<br>``````````  <br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptConsumerController</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 理解：消费者，不应该有service层~</span><br><span class="hljs-comment">     * RestTemplate .... 供我们直接调用就可以了！ 注册到Spring中</span><br><span class="hljs-comment">     * (地址：url, 实体：Map ,Class&lt;T&gt; responseType)</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 提供多种便捷访问远程http服务的方法，简单的Restful服务模板~</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 服务提供方地址前缀</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * Ribbon:我们这里的地址，应该是一个变量，通过服务名来访问</span><br><span class="hljs-comment">     */</span><br><span class="hljs-comment">//    private static final String REST_URL_PREFIX = &quot;http://localhost:8001&quot;;</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">REST_URL_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://SPRINGCLOUD-PROVIDER-DEPT&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 消费方添加部门信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dept</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/consumer/dept/add&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Dept dept)</span> &#123;<br>        <span class="hljs-comment">// postForObject(服务提供方地址(接口),参数实体,返回类型.class)</span><br>        <span class="hljs-keyword">return</span> restTemplate.postForObject(REST_URL_PREFIX + <span class="hljs-string">&quot;/dept/add&quot;</span>, dept, Boolean.class);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 消费方根据id查询部门信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Dept <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>        <span class="hljs-comment">// getForObject(服务提供方地址(接口),返回类型.class)</span><br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX + <span class="hljs-string">&quot;/dept/get/&quot;</span> + id, Dept.class);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 消费方查询部门信息列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/consumer/dept/list&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX + <span class="hljs-string">&quot;/dept/list&quot;</span>, List.class);<br>    &#125;<br>&#125;<br>``````````<br>通过**Feign**实现：—改造后controller：**DeptConsumerController.java**<br>``````````<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Auther</span>: yuting</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2022/11/05/22:47</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptConsumerController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptClientService deptClientService;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 消费方添加部门信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dept</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/consumer/dept/add&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Dept dept)</span> &#123;<br>        <span class="hljs-keyword">return</span> deptClientService.addDept(dept);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 消费方根据id查询部门信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Dept <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>       <span class="hljs-keyword">return</span> deptClientService.queryById(id);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 消费方查询部门信息列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/consumer/dept/list&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> deptClientService.queryAll();<br>    &#125;<br>&#125;<br>``````````<br>Feign和Ribbon二者对比，前者显现出面向接口编程特点，代码看起来更清爽，而且Feign调用方式更符合我们之前在做SSM或者SprngBoot项目时，Controller层调用Service层的编程习惯！<br>**主配置类**：<br>``````````<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Auther</span>: yuting</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2022/11/05/22:47</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-comment">// feign客户端注解,并指定要扫描的包以及配置接口DeptClientService</span><br><span class="hljs-meta">@EnableFeignClients(basePackages = &#123;</span><br><span class="hljs-meta">      &quot;com.haust.springcloud&quot;&#125;)</span><br><span class="hljs-comment">// 切记不要加这个注解，不然会出现404访问不到</span><br><span class="hljs-comment">//@ComponentScan(&quot;com.haust.springcloud&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeignDeptConsumer_80</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(FeignDeptConsumer_80.class, args);<br>    &#125;<br>&#125;<br>``````````<br>  <br></code></pre></td></tr></table></figure><p>01.改造springcloud-api模块</p><p>pom.xml添加feign依赖</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&lt;!--Feign的依赖--&gt;</span><br><span class="hljs-string">&lt;dependency&gt;</span><br>    <span class="hljs-string">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br>    <span class="hljs-string">&lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt;</span><br>    <span class="hljs-string">&lt;version&gt;1.4.6.RELEASE&lt;/version&gt;</span><br><span class="hljs-string">&lt;/dependency&gt;</span><br></code></pre></td></tr></table></figure><p>新建service包，并新建DeptClientService.java接口，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// @FeignClient:微服务客户端注解,value:指定微服务的名字,这样就可以使Feign客户端直接找到对应的微服务</span><br>``````````<br><span class="hljs-meta">@FeignClient(value = “SPRINGCLOUD-PROVIDER-DEPT”)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptClientService</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/dept/get/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Dept <span class="hljs-title function_">queryById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;<br>    <span class="hljs-meta">@GetMapping(&quot;/dept/list&quot;)</span><br>    <span class="hljs-keyword">public</span> Dept <span class="hljs-title function_">queryAll</span><span class="hljs-params">()</span>;<br>    <span class="hljs-meta">@GetMapping(&quot;/dept/add&quot;)</span><br>    <span class="hljs-keyword">public</span> Dept <span class="hljs-title function_">addDept</span><span class="hljs-params">(Dept dept)</span>;<br>&#125;<br>``````````<br></code></pre></td></tr></table></figure><h3 id="🍑7-3-Feign和Ribbon如何选择？"><a href="#🍑7-3-Feign和Ribbon如何选择？" class="headerlink" title="🍑7.3 Feign和Ribbon如何选择？"></a>🍑7.3 Feign和Ribbon如何选择？</h3><p><strong>根据个人习惯而定，如果喜欢REST风格使用Ribbon；如果喜欢社区版的面向接口风格使用Feign.</strong></p><p>Feign 本质上也是实现了 Ribbon，只不过后者是在调用方式上，为了满足一些开发者习惯的接口调用习惯！</p><h2 id="🥦-8-Hystrix：服务熔断"><a href="#🥦-8-Hystrix：服务熔断" class="headerlink" title="🥦 8. Hystrix：服务熔断"></a>🥦 8. Hystrix：服务熔断</h2><blockquote><p>分布式系统面临的问题</p></blockquote><p>复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免失败！</p><h3 id="🍑8-1-服务雪崩"><a href="#🍑8-1-服务雪崩" class="headerlink" title="🍑8.1 服务雪崩"></a>🍑8.1 服务雪崩</h3><p>多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其他的微服务，这就是所谓的“扇出”，如果扇出的链路上<strong>某个微服务的调用响应时间过长，或者不可用</strong>，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221105223716.png"></p><p>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几十秒内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障，<strong>这些都表示需要对故障和延迟进行隔离和管理，以达到单个依赖关系的失败而不影响整个应用程序或系统运行</strong>。</p><p>我们需要，<strong>弃车保帅</strong>！</p><h3 id="🍑8-2-什么是Hystrix？"><a href="#🍑8-2-什么是Hystrix？" class="headerlink" title="🍑8.2 什么是Hystrix？"></a>🍑8.2 什么是Hystrix？</h3><p><strong>Hystrix</strong>是一个应用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时，异常等，<strong>Hystrix</strong> 能够保证在一个依赖出问题的情况下，不会导致整个体系服务失败，避免级联故障，以提高分布式系统的弹性。</p><p>“<strong>断路器</strong>”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控 (类似熔断保险丝) ，<strong>向调用方返回一个服务预期的，可处理的备选响应 (FallBack) ，而不是长时间的等待或者抛出调用方法无法处理的异常，这样就可以保证了服务调用方的线程不会被长时间，不必要的占用</strong>，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><h3 id="🍑8-3-Hystrix能干嘛？"><a href="#🍑8-3-Hystrix能干嘛？" class="headerlink" title="🍑8.3 Hystrix能干嘛？"></a>🍑8.3 Hystrix能干嘛？</h3><ul><li>服务降级</li><li>服务熔断</li><li>服务限流</li><li>接近实时的监控</li><li>…</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>spring cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何分析开源项目</title>
    <link href="/2022/10/15/%E5%A6%82%E4%BD%95%E5%88%86%E6%9E%90%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    <url>/2022/10/15/%E5%A6%82%E4%BD%95%E5%88%86%E6%9E%90%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="JAVA前后端分离开源项目"><a href="#JAVA前后端分离开源项目" class="headerlink" title="JAVA前后端分离开源项目"></a>JAVA前后端分离开源项目</h3><h4 id="1-开源项目下载"><a href="#1-开源项目下载" class="headerlink" title="1.开源项目下载"></a>1.开源项目下载</h4><p>github上clone或者码云上下载</p><p>加载完解压，先不要急着运行！</p><p><strong>观察：</strong></p><p>1.用到了哪些技术（SpringBoot，Vue等）</p><p>2.是否有数据库</p><p>3.你的环境是否匹配（Java，Maven，npm，nodejs，redis….）</p><p>然后再想办法运行</p><h4 id="2-跑起来是第一步"><a href="#2-跑起来是第一步" class="headerlink" title="2.跑起来是第一步"></a>2.跑起来是第一步</h4><p>1.安装数据库，执行SQL</p><p>2.后端项目导入跑起来！</p><p>​    1）后端需要的数据库需要先装</p><p>​    2）是否有swagger，有swagger就是先进入swagger，因为这里面都是接口，通过这个就可以分析了</p><p>​          swagger的标准页面为：localhost:8000&#x2F;swagger-ui.html (这里的默认端口号需要查看后端项目的配置文件)</p><p>​    3）查看配置文件！默认端口号，需要修改为自己的项目和环境地址</p><p>3.前端需要跑起来！</p><p>  前端就是安装依赖（npm…）,启动测试运行，看接口是否正常！</p><h4 id="3-前后端分离项目固定套路"><a href="#3-前后端分离项目固定套路" class="headerlink" title="3.前后端分离项目固定套路"></a>3.前后端分离项目固定套路</h4><p>1.从前段开始分析，打开控制台，点开一个接口，分析一波调用关系</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221015170223.png"></p><p>看到这里的端口号是8090，在后端项目的配置文件中查看也是8090，就说明前后端调用接口一致</p><p>如果前后端的调用接口不一致-如8013 – 8000，怎么操作的，封装了接口请求 ajax axios  request</p><ul><li>找到前端配置</li></ul><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221015172750.png"></p><ul><li>前后端分离项目的重点：找到接口调用关系</li><li>springboot提供服务！前端调用接口！Vue负责渲染页面！</li></ul><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221015173049.png"></p><p>看到这里的 <code>api/auth/login</code>可以在前端代码项目中的api目录（前端项目的套路api目录中装的是后端接口，可以在后端代码中找到一一对应的地址）</p><p>中根据业务含义到对应的js文件中搜索</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221015172629.png"></p><ul><li>找到后端对应的接口</li></ul><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20221015174108.png"></p><ul><li><p>Controller –Service–Dao：你就能看懂了</p></li><li><p>现在从前到后就可以分析了！但是如何渲染到视图上的呢？看前端：搜索一个接口如·<code>api/auth/login</code>看在哪里调用了</p></li><li><p>Vue标准套路</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>视图层<br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  js操作，接口的调用</span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span><br><span class="language-javascript">  </span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  页面的样式<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li></ul><h4 id="4-如何找到一个好的开源项目"><a href="#4-如何找到一个好的开源项目" class="headerlink" title="4.如何找到一个好的开源项目"></a>4.如何找到一个好的开源项目</h4><p>1.找分类 如：java</p><p>2.看收藏，大家都认为好的东西，活跃度</p><p>3.看价值</p><p>4.根据自身的理解能力去学，如果学起来很吃力，那肯定是找的资料不满足T+1的输入模型（指的是比你现阶段段位高一段的知识）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring-SpringMVC-SpringBoot注解</title>
    <link href="/2022/09/29/Spring-SpringMVC-SpringBoot%E6%B3%A8%E8%A7%A3/"/>
    <url>/2022/09/29/Spring-SpringMVC-SpringBoot%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="创建对象的"><a href="#创建对象的" class="headerlink" title="创建对象的"></a>创建对象的</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Controller</span>：放在类的上面，创建控制器对象，注入到容器中<br><br><span class="hljs-variable">@RestController</span>：放在类的上面，创建控制对象，注入到容器中，使用这个注解类的，里面的控制器方法的返回值都是数据<br>              是<span class="hljs-variable">@Controller</span>和<span class="hljs-variable">@ResponseBody</span>的复合注解<br><br><span class="hljs-variable">@Service</span>：放在业务层的实现上面，创建Service对象，注入到容器中<br><br><span class="hljs-variable">@Repository</span>:放在dao层的实现类上面，创建dao对象，放入到容器，没有使用这个注解是因为现在使用MyBatis框架，dao对象是MyBatis通过代理生成的，不需要Repository，所以没有使用<br><br><span class="hljs-variable">@Component</span>：放在类的上面，创建此类的对象，放入容器中<br></code></pre></td></tr></table></figure><h3 id="赋值的"><a href="#赋值的" class="headerlink" title="赋值的"></a>赋值的</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Value</span>：简单类型的赋值，例如在属性上面使用<br>        <span class="hljs-variable">@Value</span>(<span class="hljs-string">&quot;李四&quot;</span>)private String name<br>        还可以使用<span class="hljs-variable">@Value</span>，获取配置文件的数量（properties或者yml）<br>        <span class="hljs-variable">@Value</span>(<span class="hljs-string">&quot;$&#123;server.port&#125;&quot;</span>)private Interger port<br>        <br><span class="hljs-variable">@Autowired</span>:引用类型赋值自动注入的，支持byName，byType，默认是byType，放在属性的上面，也可以放在构造方法的上面，推荐是放在构造方法上面<br><br><span class="hljs-variable">@Qualifer</span>：给引用类型赋值，使用byName方式<br>           <span class="hljs-variable">@Autowired</span>，<span class="hljs-variable">@Qualifer</span>都是spring框架提供的<br>           <br><span class="hljs-variable">@Resource</span>：来自jdk中的定义，实现引用类型的自动注入，支持byName，byType，默认是byName，如果byName失败，再使用byType注入，在属性上面使用           <br></code></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml">@Configuration：放在类的上面，表示这是个配置类，相当于配置文件的作用<br><br>@Bean：放在方法的上面，把方法的返回值对象注入到spring容器中<br><br>@ImportResource：加载其他的xml配置文件，把文件中的对象注入到spring容器<br>@PropertySource：读取其他的properties属性配置文件<br>@ComponentScan：扫描器，指定包名，扫描注解<br>@ResponseBody：放在方法的上面，表示方法的返回值是数据，不是视图<br>@RequestBody：把请求体中的数据，读取出来，转为java对象使用<br>@ControllerAdvice：控制器增强，放在类上面，表示此类提供了方法，可以对Controller增加功能<br>@ExceptionHandler：处理异常的，放在方法的上面<br><br>@Transcational：处理事务的，放在service实现类的public方法上，表示此方法有事务<br><br><br>@SpringBootApplication：放在启动类的上面<br>   包含了@SpringBootConfiguration @EnableAutoConfiguration，@ComponentScan<br><br>MyBatis相关注解：<br>@Mapper：放在类上面，让MyBatis找到接口，创建代理对象<br>@MapperScan：放在主类的上面，指定扫描的包，把这个包中所有接口创建代理对象，对象都注入到容器中<br>@Param：放在dao接口的方法的形参前面，作为命名参数使用的<br><br>Dubbo注解：<br>@DubboService：在提供者端使用的，暴露服务的，放在接口的实现类上面<br>@DubboReference：在消费者端使用的，引用远程服务，放在属性上面使用<br>@EnableDubbo：放在主类上面，表示当前引用启动Dubbo功能<br><br>    <br><br></code></pre></td></tr></table></figure><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span> ：<br>  Spring MVC 的 <span class="hljs-meta">@RequestMapping</span> 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。 <br>  <br>  派生请求： 处理get请求的映射 —&gt; <span class="hljs-meta">@GetMapping</span> 请求指定的页面信息，并返回实体主体<br>           处理post请求的映射 —&gt; <span class="hljs-meta">@PostMapping</span> 向指定资源提交处理请求（例如提交表单或者上传文件）<br>           处理put请求的映射 —&gt;  <span class="hljs-meta">@PutMapping</span>   更新<br>           处理delete请求的映射 —&gt; <span class="hljs-meta">@DeleteMapping</span> 删除<br><span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">           value = &#123;&quot;/other&quot;,&quot;/other2&quot;,&quot;/other3&quot;&#125;,</span><br><span class="hljs-meta">           method = &#123;RequestMethod.GET,RequestMethod.POST&#125;</span><br><span class="hljs-meta">           params = &#123;&quot;username=Keeling&quot;,&quot;password=123456&quot;&#125;</span><br><span class="hljs-meta">           headers = &#123;&quot;Connection=keep-alive&quot;&#125;</span><br><span class="hljs-meta">         )</span>  <br>  <br>  * <span class="hljs-meta">@RequestMapping</span>的value属性：<br>      <span class="hljs-meta">@RequestMapping(“/other”)</span>等价于<span class="hljs-meta">@RequestMapping(value = “/other”)</span><br>  <br>  * <span class="hljs-meta">@RequestMapping</span>的method属性：<br>       method=RequestMethod.POST<br>  * <span class="hljs-meta">@RequestMapping</span>的params属性:<br>      <span class="hljs-number">1</span>、“param”：表示要求请求映射所匹配的请求必须携带param请求参数<br>      <span class="hljs-number">2</span>、“!param”：表示要求请求映射所匹配的请求不能携带param请求参数<br>      <span class="hljs-number">3</span>、“param=value”：表示要求请求映射所匹配的请求必须携带param请求参数且param=value<br>      <span class="hljs-number">4</span>、“param!=value”：表示要求请求映射所匹配的请求必须携带param请求参数且param!=value<br>     例如 params = &#123;<span class="hljs-string">&quot;username=Keeling&quot;</span>,<span class="hljs-string">&quot;password=123456&quot;</span>&#125;<br>         访问localhost:<span class="hljs-number">8080</span>/mvcDemo/other?username=Keeling&amp;password=<span class="hljs-number">123456</span><br>   * <span class="hljs-meta">@RequestMapping</span>的headers属性:<br>           <br>   * REST风格<br>       <span class="hljs-meta">@RequestMapping(&quot;/other/&#123;username&#125;/&#123;password&#125;&quot;)</span><br>       <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toPath</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String username,</span><br><span class="hljs-params">                            <span class="hljs-meta">@PathVariable(&quot;password&quot;)</span> String password,</span><br><span class="hljs-params">                           )</span>&#123;<br>           System.out.println(<span class="hljs-string">&quot;username=&quot;</span>+username)<br>           System.out.println(<span class="hljs-string">&quot;username=&quot;</span>+password)<br>           <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;other&quot;</span>;<br>         &#125; <br>        访问localhost:<span class="hljs-number">8080</span>/mvcDemo/other/Keeling/<span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><h3 id="swagger前后端分离"><a href="#swagger前后端分离" class="headerlink" title="swagger前后端分离"></a>swagger前后端分离</h3><p>SpringBoot集成Swagger</p><p>1、新建SpringBoot项目，导入swagger依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--swagger依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--swagger ui--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、编写swagger的配置文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Swagger2Config</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建API应用</span><br><span class="hljs-comment">     * apiInfo() 增加API相关信息</span><br><span class="hljs-comment">     * 通过select()函数返回一个ApiSelectorBuilder实例,用来控制哪些接口暴露给Swagger来展现，</span><br><span class="hljs-comment">     * 指定扫描的包路径来定义指定要建立API的目录。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Docket</span> <span class="hljs-title function_">coreApiConfig</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(<span class="hljs-title class_">DocumentationType</span>.<span class="hljs-property">SWAGGER_2</span>)<br>                .<span class="hljs-title function_">apiInfo</span>(<span class="hljs-title function_">adminApiInfo</span>())<br>                .<span class="hljs-title function_">groupName</span>(<span class="hljs-string">&quot;adminApi&quot;</span>)<br>                .<span class="hljs-title function_">select</span>()<br>                <span class="hljs-comment">//只显示admin下面的路径</span><br>                .<span class="hljs-title function_">paths</span>(<span class="hljs-title class_">Predicates</span>.<span class="hljs-title function_">and</span>(<span class="hljs-title class_">PathSelectors</span>.<span class="hljs-title function_">regex</span>(<span class="hljs-string">&quot;/admin/.*&quot;</span>)))<br>                .<span class="hljs-title function_">build</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">ApiInfo</span> <span class="hljs-title function_">adminApiInfo</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .<span class="hljs-title function_">title</span>(<span class="hljs-string">&quot;尚融宝后台管理系统--api文档&quot;</span>)<br>                .<span class="hljs-title function_">description</span>(<span class="hljs-string">&quot;尚融宝后台管理系统接口描述&quot;</span>)<br>                .<span class="hljs-title function_">version</span>(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .<span class="hljs-title function_">contact</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;李燕茹&quot;</span>,<span class="hljs-string">&quot;http://baidu.com&quot;</span>,<span class="hljs-string">&quot;728831102@qq.com&quot;</span>))<br>                .<span class="hljs-title function_">build</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、添加文档内容</p><p>在完成了上述配置后，其实已经可以生产文档内容，但是这样的文档主要针对请求本身，描述的主要来源是函数的命名，通常需要自己增加一些说明来丰富文档内容。</p><p>Swagger使用的注解及其说明：</p><p>@Api：用在类上，说明该类的作用。<br>@ApiOperation：用在方法上。<br>@ApiParam：定义在参数上<br>@ApiResponses：用于表示一组响应<br>@ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息<br>l code：数字，例如400<br>l message：信息，例如”请求参数没填好”<br>l response：抛出异常的类</p><p>@ApiModel：描述一个Model的信息（一般用在请求参数无法使用@ApiImplicitParam注解进行描述的时候）</p><p>l @ApiModelProperty：描述一个model的属性</p><p>@ApiImplicitParams: 用在方法上包含一组参数说明。</p><p>@ApiImplicitParam：用来注解来给方法入参增加说明。</p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实体类</span><br><span class="hljs-comment">//entity的实体类中可以添加一些自定义设置</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@EqualsAndHashCode(callSuper = false)</span><br><span class="hljs-meta">@ApiModel(value=&quot;IntegralGrade对象&quot;, description=&quot;积分等级表&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntegralGrade</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;编号&quot;)</span><br>      <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;积分区间开始&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer integralStart;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;积分区间结束&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer integralEnd;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;借款额度&quot;)</span><br>    <span class="hljs-keyword">private</span> BigDecimal borrowAmount;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;创建时间&quot;)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime createTime;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;更新时间&quot;)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime updateTime;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;逻辑删除(1:已删除，0:未删除)&quot;)</span><br>    <span class="hljs-meta">@TableField(&quot;is_deleted&quot;)</span><br>    <span class="hljs-meta">@TableLogic</span><br>    <span class="hljs-keyword">private</span> Boolean deleted;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">//controler层@RestController@RequestMapping(&quot;/admin/integralGrade&quot;)@Api(value = &quot;积分等级管理&quot;)public class IntegralGradeController &#123;  @Resource  private IntegralGradeService integralGradeService;  @GetMapping(&quot;/list&quot;)  @ApiOperation(&quot;积分等级列表&quot;)  public Result listAll()&#123;      List&lt;IntegralGrade&gt; list = integralGradeService.list();      return Result.ok().data(&quot;list&quot;,list);  &#125;  @DeleteMapping(&quot;/remove/&#123;id&#125;&quot;)  @ApiOperation(value = &quot;根据id删除积分等级&quot;,notes = &quot;逻辑删除&quot;)  public Result removeById(      @ApiParam(value = &quot;数据id&quot;,required = true,example = &quot;1&quot;)      @PathVariable Long id)&#123;      boolean result = integralGradeService.removeById(id);      if (result)&#123;          return Result.ok().message(&quot;删除成功&quot;);      &#125;else &#123;          return Result.error().message(&quot;删除失败&quot;);      &#125;  &#125;  @PostMapping(&quot;/save&quot;)  @ApiOperation(value = &quot;新增积分等级&quot;)  public Result save(@ApiParam(value = &quot;积分等级对象&quot;,required = true) @RequestBody IntegralGrade integralGrade)&#123;      boolean result = integralGradeService.save(integralGrade);      if (result)&#123;          return Result.ok().message(&quot;新增成功&quot;);      &#125;else &#123;          return Result.error().message(&quot;新增失败&quot;);      &#125;  &#125;  @PutMapping(&quot;/updateById&quot;)  @ApiOperation(value = &quot;根据id修改积分等级&quot;)  public Result updateById(@ApiParam(value = &quot;积分等级对象&quot;,required = true) @RequestBody IntegralGrade integralGrade)&#123;      boolean result = integralGradeService.updateById(integralGrade);      if (result)&#123;          return Result.ok().message(&quot;修改成功&quot;);      &#125;else &#123;          return Result.error().message(&quot;修改失败&quot;);      &#125;  &#125;  @GetMapping(&quot;/getById/&#123;id&#125;&quot;)  @ApiOperation(value = &quot;根据id查询积分等级&quot;)  public Result getById(@ApiParam(value = &quot;数据id&quot;,required = true,example = &quot;1&quot;) @PathVariable Long id)&#123;      IntegralGrade result = integralGradeService.getById(id);      if (result == null)&#123;          return Result.error().message(&quot;查询失败&quot;);      &#125;else &#123;          return Result.ok().data(&quot;integralGrade&quot;,result);      &#125;  &#125;  &#125;  </code></pre><p>4.swagger只部署在测试环境，生产环境不部署（暴露接口容易被攻击）</p><p>参考：swagger使用教程 <a href="https://blog.csdn.net/YR_112233/article/details/122630446">https://blog.csdn.net/YR_112233/article/details/122630446</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库系统原理与实现-华东师大课程笔记</title>
    <link href="/2022/09/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E5%8D%8E%E4%B8%9C%E5%B8%88%E5%A4%A7%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/09/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E5%8D%8E%E4%B8%9C%E5%B8%88%E5%A4%A7%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>Leveldb (总共两万行代码，很值得做系统的去学)</p><p><strong>做系统需要考虑到：</strong></p><p>性能</p><p>一致性（事务，副本，）</p><p>容错</p><p>kvs的数据结构（B+树，log-structure是顺序写（ 例如LSM tree），）</p><p>B link tree 是B+树的升级版 在并发上会有好处</p><p>缓冲区的需求</p><p>1.块是否空-bitmap</p><p>2.-hash表</p><p>3.淘汰策略-LRU，FIFO —&gt;second change</p><p>写放大（想要写的东西和真正在系统中要写的东西）</p><p>随机写和顺序写</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据库系统原理与实现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机视觉-华东师大课程笔记</title>
    <link href="/2022/09/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89-%E5%8D%8E%E4%B8%9C%E5%B8%88%E5%A4%A7%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/09/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89-%E5%8D%8E%E4%B8%9C%E5%B8%88%E5%A4%A7%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h3><h4 id="1-什么是计算机视觉"><a href="#1-什么是计算机视觉" class="headerlink" title="1.什么是计算机视觉"></a>1.什么是计算机视觉</h4><p>采集来的图像或者视频，对场景进行识别和表达，理解感知分析的能力</p><h4 id="2-人类感知与计算机视觉"><a href="#2-人类感知与计算机视觉" class="headerlink" title="2. 人类感知与计算机视觉"></a>2. 人类感知与计算机视觉</h4><p>人脑解析</p><p>计算机视觉算法推断景物含义</p><p>图像处理  计算机视觉  图形学(3D重建)</p><h3 id="第二章-图像处理相关基础"><a href="#第二章-图像处理相关基础" class="headerlink" title="第二章 图像处理相关基础"></a>第二章 图像处理相关基础</h3><p>查阅文献关键词</p><p>inpainting 图像修复</p><p>Multi-level </p><p>Multi-scale 多尺度</p><p>image pyramid 图像金字塔</p><p>Super-resolution 超分辨率</p><p>Correspondence 对应点</p><h5 id="常见预处理："><a href="#常见预处理：" class="headerlink" title="常见预处理："></a>常见预处理：</h5><ul><li>灰度化处理：Y &#x3D; 0.299R+xxG+xxB</li></ul><p>​    分量，3通道分解成3个灰度图</p><ul><li><p>几何变换处理</p><p>旋转，移动</p></li><li><p>图像的增强</p><p>降燥，暗光增强</p></li></ul><h5 id="图像的卷积"><a href="#图像的卷积" class="headerlink" title="图像的卷积"></a>图像的卷积</h5><p>图像金字塔</p><p>最底层最清晰，越高越模糊</p><h3 id="第三章-图像的特征"><a href="#第三章-图像的特征" class="headerlink" title="第三章 图像的特征"></a>第三章 图像的特征</h3><p>image feature 图像特征</p><p>edge feature 边缘特征</p><p>image contour 图像轮廓</p><p>Image shape</p><p>feature tracking特征跟踪</p><h3 id="第四章-图像对齐问题"><a href="#第四章-图像对齐问题" class="headerlink" title="第四章 图像对齐问题"></a>第四章 图像对齐问题</h3><p>Image matching</p><p>image registration图像配准</p><p>Image stitching图像拼接</p><h3 id="第五章-二值图像分析"><a href="#第五章-二值图像分析" class="headerlink" title="第五章 二值图像分析"></a>第五章 二值图像分析</h3><p>pixed-wise</p><p>binary image    </p><p>binary image analysis </p><h3 id="第六章-纹理特征及分析"><a href="#第六章-纹理特征及分析" class="headerlink" title="第六章  纹理特征及分析"></a>第六章  纹理特征及分析</h3><p>rigid</p><p>动态 （风，蜡烛）</p><p>Style-transferring 风格迁移</p><p>patch</p><p>texture analysis</p><h3 id="第7章-图像分割"><a href="#第7章-图像分割" class="headerlink" title="第7章 图像分割"></a>第7章 图像分割</h3><p>关键词：image segmentation</p><p>​        snake</p><p>​        level set</p><h3 id="第8章-摄像机模型与多视几何"><a href="#第8章-摄像机模型与多视几何" class="headerlink" title="第8章 摄像机模型与多视几何"></a>第8章 摄像机模型与多视几何</h3><p> Camera structure</p><p> 3D Reconstruction</p><h3 id="第9章-三维重建"><a href="#第9章-三维重建" class="headerlink" title="第9章 三维重建"></a>第9章 三维重建</h3><p>3D reconstruction，CNN</p><p> point cloud</p><p> mesh</p><h3 id="第10章-光流计算"><a href="#第10章-光流计算" class="headerlink" title="第10章 光流计算"></a>第10章 光流计算</h3><p>optical flow</p><h3 id="第11章-目标识别"><a href="#第11章-目标识别" class="headerlink" title="第11章 目标识别"></a>第11章 目标识别</h3><p>object recognition，CNN</p><p>Kalman filter</p><h3 id="第12章-运动跟踪"><a href="#第12章-运动跟踪" class="headerlink" title="第12章 运动跟踪"></a>第12章 运动跟踪</h3><p>dynamic tracking</p><p>correlation filter,tracking</p><h3 id="第13章-深度学习基础"><a href="#第13章-深度学习基础" class="headerlink" title="第13章 深度学习基础"></a>第13章 深度学习基础</h3><p>CNN,deep learning</p><h3 id="第14章-智能图像增强技术"><a href="#第14章-智能图像增强技术" class="headerlink" title="第14章 智能图像增强技术"></a>第14章 智能图像增强技术</h3><p>denoise,CNN</p><h3 id="第15章-智能图像彩色化处理技术"><a href="#第15章-智能图像彩色化处理技术" class="headerlink" title="第15章 智能图像彩色化处理技术"></a>第15章 智能图像彩色化处理技术</h3><p>colorization</p><h3 id="论文阅读"><a href="#论文阅读" class="headerlink" title="论文阅读"></a>论文阅读</h3><p>关键字搜索到500篇怎么看？</p><ul><li><p>第一遍 筛选 你感兴趣的 怎么筛选？快速读 </p><p> 1.看标题</p><p> 2.看摘要中间部分</p><p> 3.introduction 的末尾部分 in this work, our research等关键字 描述的</p><p> 4.架构图 </p><p> 5.实验结果</p></li><li><p>第二遍 上面筛选有思路了</p></li></ul><p>​    结合自己学到的知识点 想到了新思路</p><p>新-查顶级期刊（CCF）</p>]]></content>
    
    
    
    <tags>
      
      <tag>CV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA里运行代码没问题but生成jar运行报java.lang.NoClassDefFoundError错误</title>
    <link href="/2022/09/22/IDEA%E9%87%8C%E8%BF%90%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%B2%A1%E9%97%AE%E9%A2%98but%E7%94%9F%E6%88%90jar%E8%BF%90%E8%A1%8C%E6%8A%A5java-lang-NoClassDefFoundError%E9%94%99%E8%AF%AF/"/>
    <url>/2022/09/22/IDEA%E9%87%8C%E8%BF%90%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%B2%A1%E9%97%AE%E9%A2%98but%E7%94%9F%E6%88%90jar%E8%BF%90%E8%A1%8C%E6%8A%A5java-lang-NoClassDefFoundError%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在IDEA中运行程序成功，但是通过maven的打包package生成jar包后调用报错如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Caused by: java.lang.ClassNotFoundException: org.slf4j.LoggerFactory<br>at java.net.URLClassLoader.findClass(URLClassLoader.java:<span class="hljs-number">381</span>)<br>at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="hljs-number">424</span>)<br>at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:<span class="hljs-number">338</span>)<br>at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="hljs-number">357</span>)<br></code></pre></td></tr></table></figure><p>搜索一圈发现是依赖的jar包没有打进去。</p><h4 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h4><p>1.首先排除没有添加依赖（检查pom.xml文件）是否有依赖缺失</p><p>如果是没有添加依赖IDEA里面运行程序都会跑不成功。如下图依赖没缺失</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220922164353.png"></p><p>2.检查IDEA中Artfacts中的依赖</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220922171130.png"></p><p>在Artfacts中发现没有依赖的slf4j</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>Artfacts中添加依赖</p><p>在Project structure中选择左侧Artifacts，点击“+”号，弹出窗口中选择JAR–&gt;From modules with dependencies。</p><p>配置包含main函数类和生成jar包的MF目录，配置完点击OK按钮就行。注意：MF文件目录不要用默认目录，使用默认，我的生成jar就出错了，无法运行。</p><p>配置完后点击“OK按钮”确认。</p><p>配置完毕后，需要编译，编译步骤如下图：</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220923205741.png"></p><p>最后就可以到jar生成目录看到所生成的jar包了</p><p>生成的可执行jar在输出目录里。使用：java -jar *.jar命令执行jar包程序。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring框架-AOP切面编程</title>
    <link href="/2022/09/16/spring%E6%A1%86%E6%9E%B6-AOP%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/"/>
    <url>/2022/09/16/spring%E6%A1%86%E6%9E%B6-AOP%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="AOP-Aspect-Orient-Programming-面向切面编程"><a href="#AOP-Aspect-Orient-Programming-面向切面编程" class="headerlink" title="AOP(Aspect Orient Programming),面向切面编程"></a>AOP(Aspect Orient Programming),面向切面编程</h3><p>切面：公共的，通用的，重复的功能成为切面，面向切面编程就是将切面提取出来，单独开发，在需要的时候织入。</p><h3 id="手写AOP框架"><a href="#手写AOP框架" class="headerlink" title="手写AOP框架"></a>手写AOP框架</h3><p>​    业务：图书购买业务</p><p>​    切面：事物</p><p>   1）第一个版本：业务和切面紧耦合在一起，没有拆分</p><p>   2）第二个版本：使用子类代理的方式拆分业务和切面</p><p>   3）第三个版本：使用静态代理拆分业务和切面，业务和业务接口已分开，此时切面紧耦合在业务中</p><p>   4）第四个版本：使用静态代理拆分业务和业务接口，切面和切面接口</p><p>   5）第五个版本：使用动态代理完成第四个版本的优化</p><h4 id="第一个版本：业务和切面紧耦合在一起，没有拆分"><a href="#第一个版本：业务和切面紧耦合在一起，没有拆分" class="headerlink" title="第一个版本：业务和切面紧耦合在一起，没有拆分"></a>第一个版本：业务和切面紧耦合在一起，没有拆分</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span>&#123;<br>     <span class="hljs-keyword">try</span>&#123;<br>     System.out.println(<span class="hljs-string">&quot;事务开启。。。。&quot;</span>);<br>     System.out.println(<span class="hljs-string">&quot;图书购买业务功能实现。。。。&quot;</span>);<br>     System.out.println(<span class="hljs-string">&quot;事务提交。。。。&quot;</span>);<br>      &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>          System.out.println(<span class="hljs-string">&quot;事务回滚。。。。&quot;</span>);<br>     &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="第二个版本：使用子类代理的方式拆分业务和切面"><a href="#第二个版本：使用子类代理的方式拆分业务和切面" class="headerlink" title="第二个版本：使用子类代理的方式拆分业务和切面"></a>第二个版本：使用子类代理的方式拆分业务和切面</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span>&#123;<br>     System.out.println(<span class="hljs-string">&quot;图书购买业务功能实现。。。。&quot;</span>);<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//子类就是代理类，将父类的图书购买功能添加事务切面</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubBookServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BookServiceImpl</span>&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>       <span class="hljs-comment">// 事务切面</span><br>      System.out.println(<span class="hljs-string">&quot;事务开启。。。。&quot;</span>);<br>       <span class="hljs-comment">// 主业务实现</span><br>      <span class="hljs-built_in">super</span>.buy();<br>       <span class="hljs-comment">// 事务切面  </span><br>      System.out.println(<span class="hljs-string">&quot;事务提交。。。。&quot;</span>);<br>    &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>          System.out.println(<span class="hljs-string">&quot;事务回滚。。。。&quot;</span>);<br>     &#125;<br>  &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="第三个版本：使用静态代理拆分业务和切面，业务和业务接口已分开，此时切面紧耦合在业务中"><a href="#第三个版本：使用静态代理拆分业务和切面，业务和业务接口已分开，此时切面紧耦合在业务中" class="headerlink" title="第三个版本：使用静态代理拆分业务和切面，业务和业务接口已分开，此时切面紧耦合在业务中"></a>第三个版本：使用静态代理拆分业务和切面，业务和业务接口已分开，此时切面紧耦合在业务中</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Service</span>&#123;<br>  <span class="hljs-comment">//规定业务功能</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookSeviceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span>&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;图书购买业务功能实现。。。。&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span>&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;商品购买业务功能实现。。。。&quot;</span>);<br>  &#125;  <br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Agent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span>&#123;<br>  <span class="hljs-comment">//设计成员变量的类型为接口，为了灵活切换目标对象</span><br>  <span class="hljs-keyword">public</span> Service target;<br>  <br>  <span class="hljs-comment">//使用构造方法传入目标对象</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Agent</span><span class="hljs-params">(Service target)</span>&#123;<br>    <span class="hljs-built_in">this</span>.target = target;<br>  &#125;<br>  <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>       <span class="hljs-comment">// 切面功能</span><br>      System.out.println(<span class="hljs-string">&quot;事务开启。。。。&quot;</span>);<br>       <span class="hljs-comment">// 业务功能</span><br>      <span class="hljs-built_in">super</span>.buy();<br>       <span class="hljs-comment">// 切面功能  </span><br>      System.out.println(<span class="hljs-string">&quot;事务提交。。。。&quot;</span>);<br>    &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>          System.out.println(<span class="hljs-string">&quot;事务回滚。。。。&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br><br><br># Test<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mytest</span>&#123;<br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">Service</span> <span class="hljs-variable">agent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Agent</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BookSeviceImpl</span>());<br>    agent.buy();<br>    <br>    <span class="hljs-type">Service</span> <span class="hljs-variable">agent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Agent</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductServiceImpl</span>());<br>    agent.buy();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="第四个版本：使用静态代理拆分业务和业务接口，切面和切面接口"><a href="#第四个版本：使用静态代理拆分业务和业务接口，切面和切面接口" class="headerlink" title="第四个版本：使用静态代理拆分业务和业务接口，切面和切面接口"></a>第四个版本：使用静态代理拆分业务和业务接口，切面和切面接口</h4><p>上个版本只实现了事务切面，如果要换成日志切面实现呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java">###########################业务接口#####################<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Service</span>&#123;<br>  <span class="hljs-comment">//规定业务功能</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookSeviceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span>&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;图书购买业务功能实现。。。。&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span>&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;商品购买业务功能实现。。。。&quot;</span>);<br>  &#125;  <br>&#125;<br><br>#####################切面接口AOP########################<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AOP</span>&#123;<br>  <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;&#125;;<br>  <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;&#125;;<br>  <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exception</span><span class="hljs-params">()</span>&#123;&#125;;<br>&#125;  <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAop</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AOP</span>&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>     System.out.println(<span class="hljs-string">&quot;前置日志输出。。。。&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransAop</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AOP</span>&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>     System.out.println(<span class="hljs-string">&quot;事务开启。。。。&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>     System.out.println(<span class="hljs-string">&quot;事务提交。。。。&quot;</span>);<br>  &#125;  <br> <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exception</span><span class="hljs-params">()</span>&#123;<br>     System.out.println(<span class="hljs-string">&quot;事务回滚。。。。&quot;</span>);<br>  &#125;    <br>&#125;<br><br>#####################代理对象Agent########################<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Agent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span>&#123;<br>  <span class="hljs-comment">//传入业务对象，切面对象</span><br>  Service target;<br>  Aop aop;<br>  <br>  <span class="hljs-comment">//使用构造方法初始化业务对象和切面对象</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Agent</span><span class="hljs-params">(Service target, AOP aop)</span>&#123;<br>    <span class="hljs-built_in">this</span>.target = target;<br>    <span class="hljs-built_in">this</span>.aop = aop;<br>  &#125;<br>  <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>      <span class="hljs-comment">//切面</span><br>      aop.before(); <span class="hljs-comment">//事务 日志</span><br>      <span class="hljs-comment">//业务</span><br>      target.buy(); <span class="hljs-comment">// 图书 商品</span><br>      <span class="hljs-comment">//切面</span><br>      aop.after();  <span class="hljs-comment">// 事务</span><br>    &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>      aop.exception();<br>    &#125;<br>  &#125;<br>&#125;<br><br><br>## test<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mytest</span>&#123;<br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> test&#123;<br>   <span class="hljs-type">Serive</span> <span class="hljs-variable">agent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Agent</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BookServiceImpl</span>(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">LogAop</span>());<br>   agent.buy();<br>    <br>   <span class="hljs-type">Serive</span> <span class="hljs-variable">agent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Agent</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductServiceImpl</span>(),<span class="hljs-keyword">new</span>            <span class="hljs-title class_">TransAop</span>());<br>   agent.buy();    <br>  &#125;<br>&#125;<br><br>## 切入多个切面<br>## test<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mytest</span>&#123;<br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> test&#123;<br>   <span class="hljs-type">Serive</span> <span class="hljs-variable">agent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Agent</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BookServiceImpl</span>(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">LogAop</span>());<br>   agent.buy();<br>    <br>   <span class="hljs-type">Serive</span> <span class="hljs-variable">agent1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Agent</span>(agent,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransAop</span>());<br>   agent1.buy();    <br>  &#125;<br>&#125;  <br></code></pre></td></tr></table></figure><h4 id="第五个版本：使用动态代理完成第四个版本的优化"><a href="#第五个版本：使用动态代理完成第四个版本的优化" class="headerlink" title="第五个版本：使用动态代理完成第四个版本的优化"></a>第五个版本：使用动态代理完成第四个版本的优化</h4><p>业务功能的增加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java">###########################业务接口#####################<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Service</span>&#123;<br>  <span class="hljs-comment">//规定业务功能</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span>;<br>  <br>  <span class="hljs-comment">//增加有参返回值的方法测试代理功能</span><br>  <span class="hljs-keyword">default</span> String <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>&#125;;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookSeviceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span>&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;图书购买业务功能实现。。。。&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span>&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;商品购买业务功能实现。。。。&quot;</span>);<br>  &#125;  <br>  <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;这是show()方法调用。。。。&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;abcd&quot;</span>;<br>  &#125; <br>&#125;<br><br>#####################切面接口AOP########################<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AOP</span>&#123;<br>  <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;&#125;;<br>  <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;&#125;;<br>  <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exception</span><span class="hljs-params">()</span>&#123;&#125;;<br>&#125;  <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAop</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AOP</span>&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>     System.out.println(<span class="hljs-string">&quot;前置日志输出。。。。&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransAop</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AOP</span>&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>     System.out.println(<span class="hljs-string">&quot;事务开启。。。。&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>     System.out.println(<span class="hljs-string">&quot;事务提交。。。。&quot;</span>);<br>  &#125;  <br> <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exception</span><span class="hljs-params">()</span>&#123;<br>     System.out.println(<span class="hljs-string">&quot;事务回滚。。。。&quot;</span>);<br>  &#125;    <br>&#125;<br><br>####################动态代理####################<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyFactory</span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getAgent</span><span class="hljs-params">(Service target,Aop aop)</span>&#123;<br>    <span class="hljs-comment">//返回的是生成的动态代理对象</span><br>    <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<br>       <span class="hljs-comment">//类加载器</span><br>      target.getClass().getClassLoader(),<br>      <span class="hljs-comment">// 目标对象实现的所有的接口</span><br>      target.getClass().getInterfaces(),<br>      <span class="hljs-comment">//代理功能实现</span><br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>()&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(</span><br><span class="hljs-params">               //生成的代理对象</span><br><span class="hljs-params">               Object proxy</span><br><span class="hljs-params">               //正在被调用的目标方法buy()</span>,show()<br>               ,Method method<br>               <span class="hljs-comment">//目标方法的参数</span><br>               ,Object[] args) <span class="hljs-keyword">throws</span> Throwable&#123;<br>            <span class="hljs-comment">//切面</span><br>            aop.before();<span class="hljs-comment">//事务 日志</span><br>            <span class="hljs-comment">//业务</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> method.invoke(target,args);<br>            <span class="hljs-comment">//切面</span><br>            aop.after();<br>            <span class="hljs-comment">//切面</span><br>          <span class="hljs-keyword">return</span> obj;<span class="hljs-comment">//目标方法的返回值</span><br>        &#125;<br>      &#125;<br>    )<br>  &#125;    <br>&#125;<br><br>#test<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mytest</span>&#123;<br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Service</span> <span class="hljs-variable">agent</span> <span class="hljs-operator">=</span> ProxyFactory.getAgent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BookServiceImpl</span>(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransAop</span>());<br>    agent.buy();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> agent.show(<span class="hljs-number">22</span>);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h3 id="AspectJ框架"><a href="#AspectJ框架" class="headerlink" title="AspectJ框架"></a>AspectJ框架</h3><p>AspectJ中常用的通知有几种类型：</p><p>0）@Aspect:作用是把当前类标识为一个切面供容器读取</p><p>1）前置通知@Before</p><p>2）后置通知@AfterReturning</p><p>3）环绕通知@Around</p><p>4）最终通知@After</p><p>5）定义切入点@Pointcut</p><p> 使用@Pointcut注解，创建一个空方法，此方法的名称就是别名</p><p>@Pointcut：Pointcut是植入Advice的触发条件。每个Pointcut的定义包括2部分，一是表达式，二是方法签名。方法签名必须是 public及void型。可以将Pointcut中的方法看作是一个被Advice引用的助记符，因为表达式不直观，因此我们可以通过方法签名的方式为 此表达式命名。因此Pointcut中的方法只需要方法签名，而不需要在方法体内编写实际代码。</p><p>使用pointcut代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> SomeServiceImpl <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SomeService</span>&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">doSome</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>     System.out.println(<span class="hljs-string">&quot;doSome业务方法执行.......&quot;</span>+name);<br>     <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;abcd&quot;</span>;<br>  &#125;<br>&#125;<br><br><br><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect</span>&#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  前置通知切面方法规范</span><br><span class="hljs-comment">  1）访问权限是public</span><br><span class="hljs-comment">  2）方法的返回值是void</span><br><span class="hljs-comment">  3）方法名称自定义</span><br><span class="hljs-comment">  4）方法没有参数，如果有也只能是JoinPoint类型</span><br><span class="hljs-comment">  5）必须使用@Before注解来声明切入的时机</span><br><span class="hljs-comment">     参数：value 指定切入点表达式</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-meta">@Before(value = &quot;execution(public String com.yuting.SomeSeriveImpl.dosome(String,int))&quot;)</span><br>  # <span class="hljs-meta">@Around(value=&quot;myCut()&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myBefore</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;切面方法中的前置通知&quot;</span>);<br>  &#125;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  后置通知切面方法规范</span><br><span class="hljs-comment">  1）访问权限是public</span><br><span class="hljs-comment">  2）方法的返回值是void</span><br><span class="hljs-comment">  3）方法名称自定义</span><br><span class="hljs-comment">  4）方法没有参数，如果有也只能是JoinPoint类型</span><br><span class="hljs-comment">  5）必须使用@After注解表明是最终通知</span><br><span class="hljs-comment">     参数：value 指定切入点表达式</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-meta">@After(value=&quot;execution(* com.yuting.s01.*.*(..))&quot;)</span><br>  # <span class="hljs-meta">@Around(value=&quot;myCut()&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myAfter</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;切面方法中的最终通知&quot;</span>);<br>  &#125;<br>  <br>  <br>  <span class="hljs-meta">@AfterReturning(value=&quot;execution(* com.yuting.s01.*.*(..))&quot;,returning=&quot;obj&quot;)</span><br>  # <span class="hljs-meta">@Around(value=&quot;myCut()&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myAfterReturning</span><span class="hljs-params">(Object obj)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;后置通知的功能&quot;</span>);<br>  &#125;<br>  <br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  环绕通知切面方法规范</span><br><span class="hljs-comment">  1）访问权限是public</span><br><span class="hljs-comment">  2）方法的返回值是目标方法的返回值</span><br><span class="hljs-comment">  3）方法名称自定义</span><br><span class="hljs-comment">  4）方法有参数，此参数就是目标方法</span><br><span class="hljs-comment">  5）必须使用@Around注解表明是环绕通知</span><br><span class="hljs-comment">     参数：value 指定切入点表达式</span><br><span class="hljs-comment">  */</span>  <br>  <span class="hljs-meta">@Around(value=&quot;execution(* com.yuting.s01.*.*(...))&quot;)</span><br>  # <span class="hljs-meta">@Around(value=&quot;myCut()&quot;)</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">myAround</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable&#123;<br>    System.out.println(<span class="hljs-string">&quot;环绕通知中的前置通知功能&quot;</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> pjp.proceed(pjp.getArgs());<br>    System.out.println(<span class="hljs-string">&quot;环绕通知中的后置通知功能&quot;</span>);<br>    <span class="hljs-keyword">return</span> obj.toString().toUpperCase(); # 改变了目标方法的返回值<br>  &#125;<br>&#125;<br><br>  <span class="hljs-meta">@PointCut(value = &quot;execution(* com.yuting.s01.*.*(...))&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myCut</span><span class="hljs-params">()</span>&#123;<br><br>  &#125;<br> <br><br>注解配置<br>applicationContext.xml<br>&lt;!--基于注解的访问要添加包扫描--&gt;  <br> &lt;context:component-scan base-<span class="hljs-keyword">package</span>=<span class="hljs-string">&quot;com.yuting&quot;</span>&gt;&lt;/context:component-scan&gt; <br>&lt;!--绑定--&gt;  <br>&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;<br>   <br>   <br></code></pre></td></tr></table></figure><p>使用annotation代码：</p><p>@annotation: 元注解的作用就是负责注解其他注解。Java5.0定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation类型作说明。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-number">1.</span><span class="hljs-meta">@Target</span><br>说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、<span class="hljs-keyword">catch</span>参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标<br><br><span class="hljs-number">2.</span><span class="hljs-meta">@Retention</span><br>  <span class="hljs-meta">@Retention</span>定义了该Annotation被保留的时间长短==：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在<span class="hljs-class"><span class="hljs-keyword">class</span>文件中；编译在<span class="hljs-title">class</span>文件中的<span class="hljs-title">Annotation</span>可能会被虚拟机忽略，而另一些在<span class="hljs-title">class</span>被装载时将被读取（请注意并不影响<span class="hljs-title">class</span>的执行，因为<span class="hljs-title">Annotation</span>与<span class="hljs-title">class</span>在使用上是被分离的）。使用这个<span class="hljs-title">meta</span>-<span class="hljs-title">Annotation</span>可以对 <span class="hljs-title">Annotation</span>的“生命周期”限制。</span><br><span class="hljs-class"></span><br><span class="hljs-class">3.@<span class="hljs-title">Documented</span></span><br><span class="hljs-class">  @<span class="hljs-title">Documented</span>：用于描述其它类型的<span class="hljs-title">annotation</span>应该被作为被标注的程序成员的公共<span class="hljs-title">API</span>，因此可以被例如<span class="hljs-title">javadoc</span>此类的工具文档化。<span class="hljs-title">Documented</span>是一个标记注解，没有成员</span><br><span class="hljs-class">  </span><br><span class="hljs-class">4.@<span class="hljs-title">Inherited</span></span><br><span class="hljs-class">  @<span class="hljs-title">Inherited</span> ：元注解是一个标记注解，@<span class="hljs-title">Inherited</span>阐述了某个被标注的类型是被继承的。如果一个使用了@<span class="hljs-title">Inherited</span>修饰的<span class="hljs-title">annotation</span>类型被用于一个<span class="hljs-title">class</span>，则这个<span class="hljs-title">annotation</span>将被用于该<span class="hljs-title">class</span>的子类。</span><br><span class="hljs-class">  </span><br><span class="hljs-class">5.自定义注解</span><br><span class="hljs-class">  使用@<span class="hljs-title">interface</span>自定义注解时，自动继承了<span class="hljs-title">java</span>.<span class="hljs-title">lang</span>.<span class="hljs-title">annotation</span>.<span class="hljs-title">Annotation</span>接口，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。@<span class="hljs-title">interface</span>用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、<span class="hljs-title">Class</span>、<span class="hljs-title">String</span>、<span class="hljs-title">enum</span>）。可以通过<span class="hljs-title">default</span>来声明参数的默认值。</span><br><span class="hljs-class"></span><br><span class="hljs-class">  定义注解格式：</span><br><span class="hljs-class"><span class="hljs-title">public</span> @<span class="hljs-title">interface</span> 注解名 </span>&#123;定义体&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注解实体类</span><br><span class="hljs-keyword">package</span> com.trip.demo;<br> <br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br> <br> <br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(&#123; ElementType.METHOD &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SMSAndMailSender &#123;<br>    <span class="hljs-comment">/*短信模板String格式化串*/</span><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br> <br>    String <span class="hljs-title function_">smsContent</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br> <br>    String <span class="hljs-title function_">mailContent</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">/*是否激活发送功能*/</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isActive</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">/*主题*/</span><br>    String <span class="hljs-title function_">subject</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br> <br> <br><span class="hljs-comment">//切面类</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component(&quot;smsAndMailSenderMonitor&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SMSAndMailSenderMonitor</span> &#123;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(SMSAndMailSenderMonitor.class);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在所有标记了<span class="hljs-doctag">@SMSAndMailSender</span>的方法中切入</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> joinPoint</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> result</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@AfterReturning(value=&quot;@annotation(com.trip.demo.SMSAndMailSender)&quot;, returning=&quot;result&quot;)</span><span class="hljs-comment">//有注解标记的方法，执行该后置返回</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">(JoinPoint joinPoint , Object result//注解标注的方法返回值)</span> &#123;<br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> ms.getMethod();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">active</span> <span class="hljs-operator">=</span> method.getAnnotation(SMSAndMailSender.class).isActive();<br>        <span class="hljs-keyword">if</span> (!active) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">smsContent</span> <span class="hljs-operator">=</span> method.getAnnotation(SMSAndMailSender.class).smsContent();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">mailContent</span> <span class="hljs-operator">=</span> method.getAnnotation(SMSAndMailSender.class).mailContent();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> method.getAnnotation(SMSAndMailSender.class).subject();<br>       <br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在抛出异常时使用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> joinPoint</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ex</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@AfterThrowing(value=&quot;@annotation(com.trip.order.monitor.SMSAndMailSender)&quot;,throwing = &quot;ex&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">(JoinPoint joinPoint, Throwable ex//注解标注的方法抛出的异常)</span> &#123;<br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> ms.getMethod();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> method.getAnnotation(SMSAndMailSender.class).subject();<br>        <br>    &#125;<br>&#125;<br><span class="hljs-comment">//实体类中使用该注解标注方法</span><br><span class="hljs-meta">@Service(&quot;testService &quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@SMSAndMailSender(smsContent = &quot;MODEL_SUBMIT_SMS&quot;, mailContent =     </span><br><span class="hljs-meta">    &quot;MODEL_SUPPLIER_EMAIL&quot;, subject = &quot;MODEL_SUBJECT_EMAIL&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">(String param)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>｝<br><br></code></pre></td></tr></table></figure><p>记得在配置文件中加上：</p><p><code>&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot;/&gt;</code></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring框架-IOC注入</title>
    <link href="/2022/09/15/spring%E6%A1%86%E6%9E%B6-IOC%E6%B3%A8%E5%85%A5/"/>
    <url>/2022/09/15/spring%E6%A1%86%E6%9E%B6-IOC%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h3><h4 id="1-是什么："><a href="#1-是什么：" class="headerlink" title="1.是什么："></a>1.是什么：</h4><p>它是一个容器，是整合其他框架的框架，它的核心是IOC和AOP，它由20个模块构成，在很多领域都提供优秀的解决方案</p><h4 id="2-特性："><a href="#2-特性：" class="headerlink" title="2.特性："></a>2.特性：</h4><h5 id="轻量级"><a href="#轻量级" class="headerlink" title="轻量级"></a>轻量级</h5><p> 由20多个模块构成，每个jar包都很小，小于1M，核心包也就3M左右</p><h5 id="AOP（面向切面编程）"><a href="#AOP（面向切面编程）" class="headerlink" title="AOP（面向切面编程）"></a>AOP（面向切面编程）</h5><p>  将公共的，通用的，重复的代码单独开发，在需要的时候反织回去，底层的原理是动态代理（例如持久层，业务逻辑层，view层都需要输出打印日志，日志就可以做成公共的，需要的时候调用）</p><h5 id="IOC-（控制反转）"><a href="#IOC-（控制反转）" class="headerlink" title="IOC （控制反转）"></a>IOC （控制反转）</h5><p>   由spring容器进行对象的创建和依赖的注入，程序员在使用时直接取出来使用</p><p>   正转：由程序员进行对象的创建和依赖注入</p><p>   Student stu &#x3D; new Student();  程序员创建对象</p><p>   stu.setName(“张三”); 程序员进行赋值</p><p>   stu.setAge(22);</p><p>   反转：由Spring容器创建对象和依赖注入称为反转</p><p>  <bean id="stu" class="com.yuting.Student">  – Spring容器负责对象的创建</p><p>​     <property name="name" value="张三">  –spring容器依赖注入值</p><p>​     <property name="age" value="22">     </p><p>   备注：切记spring容器在启动时，就创建所有的对象stu。。。</p><h5 id="代码无污染"><a href="#代码无污染" class="headerlink" title="代码无污染"></a>代码无污染</h5><p>  没有约束，例如maven有规定的目录约束</p><h4 id="3-相关用法："><a href="#3-相关用法：" class="headerlink" title="3.相关用法："></a>3.相关用法：</h4><p>————————————<strong>基于xml的IOC</strong>————————————</p><ul><li>1）创建对象</li></ul><p>resource目录下创建命名为applicationContext.xml的文件，</p>  <bean id="stu" class="com.yuting.Student"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest1</span>&#123;<br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testStudent</span><span class="hljs-params">()</span>&#123;<br>     <span class="hljs-comment">//程序员创建对象</span><br>     <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>     System.out.println(stu);<br>   &#125;<br>  <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testStudentSpring</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//有spring容器进行对象的创建</span><br>    <span class="hljs-comment">//如果想从spring容器中取出对象，则要先创建容器对象，并启动才可以取对象</span><br>    <span class="hljs-comment">//s01/applicationContext.xml，这里可以在resource目录下再建一个s01文件夹</span><br>    <span class="hljs-type">ApplicationCOntext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;s01/applicationContext.xml&quot;</span>)<br>    <span class="hljs-comment">//取出对象</span><br>    <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> (Student) ac.getBean(<span class="hljs-string">&quot;stu&quot;</span>);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>2）给创建的对象赋值</li></ul><p>​         A 使用setter注入</p><p>​             简单类型注入值使用value属性   </p><p>​             引用类型注入值使用ref属性</p><p>​             ⚠️注意：使用setter注入必须提供无参的构造方法，必须提供setXXX()方法。   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"># 创建学校对象<br>&lt;bean id=<span class="hljs-string">&quot;school&quot;</span> class=<span class="hljs-string">&quot;com.yuting.School&quot;</span>&gt;  -- Spring容器负责对象的创建<br>  &lt;property name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;清华大学&quot;</span>&gt;  --spring容器依赖注入值<br>  &lt;property name=<span class="hljs-string">&quot;address&quot;</span> value=<span class="hljs-string">&quot;海淀区&quot;</span>&gt; <br>&lt;/bean&gt;<br>  <br>&lt;bean id=<span class="hljs-string">&quot;stu&quot;</span> class=<span class="hljs-string">&quot;com.yuting.Student&quot;</span>&gt;  <br>  &lt;property name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;张三&quot;</span>&gt; <br>  &lt;property name=<span class="hljs-string">&quot;age&quot;</span> value=<span class="hljs-string">&quot;22&quot;</span>&gt;   <br>  &lt;property name=<span class="hljs-string">&quot;sch&quot;</span> ref=<span class="hljs-string">&quot;school&quot;</span>&gt; <br>&lt;/bean&gt;        <br></code></pre></td></tr></table></figure><p>​        B 使用构造方法注入</p><p>​            a.使用构造方法的参数名称进行注入值</p><p>​            b.使用构造方法参数的下标注入值</p><p>​            c.使用默认的构造方法的参数的顺序注入值  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java">## 使用构造方法的参数名称进行注入值<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">School</span>&#123;<br>  <span class="hljs-keyword">private</span> String name;<br>  <span class="hljs-keyword">private</span> String address;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">School</span><span class="hljs-params">(String name1,String address1)</span>&#123;<br>     <span class="hljs-built_in">this</span>.name = name1;<br>     <span class="hljs-built_in">this</span>.address = address1;<br>  &#125;<br>&#125;<br>  <br>&lt;bean id=<span class="hljs-string">&quot;school&quot;</span> class=<span class="hljs-string">&quot;com.yuting.School&quot;</span>&gt;  -- Spring容器负责对象的创建<br>  &lt;constructor-arg name=<span class="hljs-string">&quot;name1&quot;</span> value=<span class="hljs-string">&quot;清华大学&quot;</span>&gt;&lt;/constructor-arg&gt; <br>  &lt;constructor-arg name=<span class="hljs-string">&quot;address1&quot;</span> value=<span class="hljs-string">&quot;海淀区&quot;</span>&gt;&lt;/constructor-arg&gt; <br>&lt;/bean&gt;<br>  <br><br>## 使用构造方法参数的下标注入值<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>  <span class="hljs-keyword">private</span> String name;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>  <span class="hljs-keyword">private</span> School school;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age, School school)</span>&#123;<br>     <span class="hljs-built_in">this</span>.name = name;<br>     <span class="hljs-built_in">this</span>.age = age;<br>     <span class="hljs-built_in">this</span>.school = school;<br>  &#125;<br>&#125;  <br><br>&lt;bean id=<span class="hljs-string">&quot;stu&quot;</span> class=<span class="hljs-string">&quot;com.yuting.Student&quot;</span>&gt;  -- Spring容器负责对象的创建<br>  &lt;constructor-arg index=<span class="hljs-string">&quot;0&quot;</span> value=<span class="hljs-string">&quot;ywq&quot;</span>&gt;&lt;/constructor-arg&gt; <br>  &lt;constructor-arg index=<span class="hljs-string">&quot;1&quot;</span> value=<span class="hljs-string">&quot;20&quot;</span>&gt;&lt;/constructor-arg&gt; <br>  &lt;constructor-arg index=<span class="hljs-string">&quot;2&quot;</span> ref=<span class="hljs-string">&quot;school&quot;</span>&gt;&lt;/constructor-arg&gt; <br>&lt;/bean&gt;<br>  <br><br>## 使用默认的构造方法的参数的顺序注入值<br>&lt;bean id=<span class="hljs-string">&quot;stuSequence&quot;</span> class=<span class="hljs-string">&quot;com.yuting.Student&quot;</span>&gt;  -- Spring容器负责对象的创建<br>  &lt;constructor-arg value=<span class="hljs-string">&quot;yt&quot;</span>&gt;&lt;/constructor-arg&gt; <br>  &lt;constructor-arg value=<span class="hljs-string">&quot;20&quot;</span>&gt;&lt;/constructor-arg&gt; <br>  &lt;constructor-arg ref=<span class="hljs-string">&quot;school&quot;</span>&gt;&lt;/constructor-arg&gt; <br>&lt;/bean&gt; <br></code></pre></td></tr></table></figure><p>————————————<strong>基于注解的IOC</strong>————————————</p><p>也称为DI(Dependency Injection),它是IOC的具体实现的技术</p><p>汤：xml  annotation</p><p>药：创建对象并依赖注入</p><ul><li>1）创建对象的注解</li></ul><p>​    @Component:可以创建任意对象，创建对象的默认名称是类名的驼峰命名法。也可以指定对象的名称。</p><p>​    @Controller:专门来创建控制器的对象(Servlet), 这种对象可以接收用户的请求，可以返回处理结果给客户端</p><p>​    @Service:专门用来创建业务逻辑层的对象，负责向下访问数据访问层，处理完毕后的结果返回给界面层。</p><p>​    @Repository:专门用来创建数据访问层的对象，负责数据库中的增删改查所有操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml">@Component<br>public class Student&#123;<br>private String name;<br>  private int age;<br>  <br>  public Student()&#123;<br>    System.out.println(&quot;学生对象的无参构造方法&quot;)<br>  &#125;<br>&#125;<br><br>@Component(&quot;stu&quot;)<br>public class Student&#123;<br>private String name;<br>  private int age;<br>  <br>  public Student()&#123;<br>    System.out.println(&quot;学生对象的无参构造方法&quot;)<br>  &#125;<br>&#125;<br><br># applicationContext.xml<br><span class="hljs-comment">&lt;!--添加包扫描--&gt;</span><br># 只要包下面有顶着那些创建对象的注解，就给你自动创建对象<br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.yuting.s01&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br>  <br>@Test<br>public void testStudentSpring()&#123;<br>    //有spring容器进行对象的创建<br>    //如果想从spring容器中取出对象，则要先创建容器对象，并启动才可以取对象<br>    //s01/applicationContext.xml，这里可以在resource目录下再建一个s01文件夹<br>    ApplicationCOntext ac = new ClassPathXmlApplicationContext(&quot;s01/applicationContext.xml&quot;)<br>    //取出对象<br>    Student stu = (Student) ac.getBean(&quot;stu&quot;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>2）创建依赖的注解</p><p> <strong>值类型的注入</strong></p></li></ul><p>​    @value:用来给简单类型注入值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;stu&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>  <span class="hljs-meta">@Value(&quot;zhangsan&quot;)</span><br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-meta">@Value(&quot;22&quot;)</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;学生对象的无参构造方法&quot;</span>)<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​    </p><p><strong>引用类型的注入</strong></p><p>​    A.@Autowired:使用类型注入值，从整个Bean工厂中搜索同源类型的对象进行注入</p><p>​        同源类型: </p><p>​         1.被注入的类型(Student中的school)与注入的类型是完全相同的类型</p><p>​         2.被注入的类型(Student中的school父)与注入的类型(子)是父子类</p><p>​         3.被注入的类型(Student中的school接口)与注入的类型(实现类)是接口和实现类的类型</p><p>  注：在有父子类的情况下，使用按类型注入，就意味着有多个可注入的对象，此时按照名称进行二次筛选，选中与被注入对象相同名称的对象进行注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java">-------------<span class="hljs-number">1.</span>被注入的类型(Student中的school)与注入的类型是完全相同的类型-----------<br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">School</span>&#123;<br>  <span class="hljs-meta">@Value(&quot;清华大学&quot;)</span><br>  <span class="hljs-keyword">private</span> String name;<br>  <span class="hljs-meta">@Value(&quot;海淀区&quot;)</span><br>  <span class="hljs-keyword">private</span> String address;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">School</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;school对象的无参构造方法&quot;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>  <span class="hljs-meta">@Value(&quot;lisi&quot;)</span><br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-meta">@Value(&quot;23&quot;)</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>  <br>  <span class="hljs-comment">//引用类型按类型注入</span><br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> School school;<br>&#125;<br><br># applicationContext.xml<br>&lt;!--添加包扫描--&gt;<br># 只要包下面有顶着那些创建对象的注解，就给你自动创建对象<br>&lt;context:component-scan base-<span class="hljs-keyword">package</span>=<span class="hljs-string">&quot;com.yuting.s01&quot;</span>&gt;&lt;/context:component-scan&gt;<br><br><br>-------------------<span class="hljs-number">2.</span>被注入的类型(Student中的school父)与注入的类型(子)是父子类--------------------<br><span class="hljs-meta">@Component(&quot;schoolNew&quot;)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">School</span>&#123;<br>  <span class="hljs-meta">@Value(&quot;清华大学&quot;)</span><br>  <span class="hljs-keyword">private</span> String name;<br>  <span class="hljs-meta">@Value(&quot;海淀区&quot;)</span><br>  <span class="hljs-keyword">private</span> String address;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">School</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;school对象的无参构造方法&quot;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-meta">@Component(&quot;school&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubSchool</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">School</span>&#123;<br>  <span class="hljs-meta">@Value(&quot;清华附小&quot;)</span><br>  <span class="hljs-keyword">private</span> String name;<br>  <span class="hljs-meta">@Value(&quot;海淀小区&quot;)</span><br>  <span class="hljs-keyword">private</span> String address;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">SubSchool</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;这是SubSchool的构造方法&quot;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>  <span class="hljs-meta">@Value(&quot;lisi&quot;)</span><br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-meta">@Value(&quot;23&quot;)</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>  <br>  <span class="hljs-comment">//引用类型按类型注入</span><br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> School school;<br>&#125;<br><br>默认：父类被注入进来<br>结果：子类被注入进来<br>  <br>--<span class="hljs-number">3.</span>被注入的类型(Student中的school接口)与注入的类型(实现类)是接口和实现类的类型<br></code></pre></td></tr></table></figure><p>​    B.@Autowired</p><p>​       @Qualifier:使用名称注入值，从整个Bean工厂中搜索相同名称的对象进行注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//交给spring去创建对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">School</span>&#123;  <span class="hljs-comment">//此时School对象的名称就是school</span><br>  <span class="hljs-meta">@Value(&quot;清华大学&quot;)</span><br>  <span class="hljs-keyword">private</span> String name;<br>  <span class="hljs-meta">@Value(&quot;海淀区&quot;)</span><br>  <span class="hljs-keyword">private</span> String address;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">School</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;school对象的无参构造方法&quot;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>  <span class="hljs-meta">@Value(&quot;lisi&quot;)</span><br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-meta">@Value(&quot;23&quot;)</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>  <br>  <span class="hljs-comment">//引用类型按名称注入</span><br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-meta">@Qualifier(&quot;school&quot;)</span><span class="hljs-comment">// 按照名称school找</span><br>  <span class="hljs-keyword">private</span> School s; <br>&#125;<br><br># applicationContext.xml<br>&lt;!--添加包扫描--&gt;<br># 只要包下面有顶着那些创建对象的注解，就给你自动创建对象<br>&lt;context:component-scan base-<span class="hljs-keyword">package</span>=<span class="hljs-string">&quot;com.yuting.s01&quot;</span>&gt;&lt;/context:component-scan&gt;<br><br><br></code></pre></td></tr></table></figure><hr><h3 id="创建spring项目"><a href="#创建spring项目" class="headerlink" title="创建spring项目"></a>创建spring项目</h3><p>项目结构如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">__springDemo</span><br><span class="hljs-strong">__</span><span class="hljs-strong">__src</span><br><span class="hljs-strong">__</span><span class="hljs-strong">____</span><span class="hljs-emphasis">_main</span><br><span class="hljs-emphasis"><span class="hljs-strong">____</span><span class="hljs-strong">____</span>_</span>java<br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span>com<br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">__yuting</span><br><span class="hljs-strong">__</span><span class="hljs-strong">____</span><span class="hljs-strong">__<span class="hljs-emphasis">_resources</span></span><br><span class="hljs-emphasis"><span class="hljs-strong">_</span>__</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-emphasis">_applicationContext.xml</span><br><span class="hljs-emphasis"><span class="hljs-strong">____</span><span class="hljs-strong">___test</span></span><br><span class="hljs-strong"><span class="hljs-emphasis">__</span><span class="hljs-strong">____</span><span class="hljs-strong">___java</span></span><br><span class="hljs-strong"><span class="hljs-emphasis">__</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span>_</span>com<br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-emphasis">_yuting</span><br><span class="hljs-emphasis"><span class="hljs-strong">____</span><span class="hljs-strong">____</span>_</span>resources<br><span class="hljs-strong">____</span>pom.xml<br></code></pre></td></tr></table></figure><p>1.新建maven项目</p><p>2.maven是代码污染框架，所以得按照maven规定的目录来</p><p>3.新建的文件夹要退出去才能被maven识别</p><p>4.修改pom文件</p><ul><li>添加依赖</li><li>build 增加配置文件路径（xml，properties等配置文件不需要编译，因此编译好的class文件会在target文件夹下找到配置文件，因为idea的原因，有些时候不会把配置文件copy到target目录下就没办法正常运行，所以build标签在编译时执行在编译阶段copy到target目录下）</li></ul><p>5.resource目录下创建命名为applicationContext.xml的文件</p><h3 id="三层架构的项目实例"><a href="#三层架构的项目实例" class="headerlink" title="三层架构的项目实例"></a>三层架构的项目实例</h3><p>界面层、业务逻辑层、数据访问层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">src.main.java.com.yuting.pojo     # 实体类<br>        Users.java<br>  <br>src.main.java.com.yuting.dao      # 数据访问层<br>        UserMapper.java <br>        UserMapperImpl.java <br>        <br>src.main.java.com.yuting.service  # 业务逻辑层<br>      impl<br>         UserServiceImpl.java<br>      UserService.java<br>         <br>src.main.java.com.yuting.controller # 界面层<br>        UserController.java<br>        <br></code></pre></td></tr></table></figure><p>Spring会接管三层架构中哪些对象的创建？</p><p>Users.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Users</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> uid;<br>  <span class="hljs-keyword">private</span> String uname;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> uage;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getUid</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> uid;&#125;;<br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUname</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> uname;&#125;;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getUage</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> uage;&#125;;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUid</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span>&#123;<span class="hljs-built_in">this</span>.uid=uid&#125;;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUname</span><span class="hljs-params">(String uname)</span>&#123;<span class="hljs-built_in">this</span>.uname=uname&#125;;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUage</span><span class="hljs-params">(<span class="hljs-type">int</span> uage)</span>&#123;<span class="hljs-built_in">this</span>.uage=uage&#125;;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Users</span><span class="hljs-params">(<span class="hljs-type">int</span> uid,String uname,<span class="hljs-type">int</span> uage)</span>&#123;<br>    <span class="hljs-built_in">this</span>.uid=uid;<br>    <span class="hljs-built_in">this</span>.uname=uname;<br>    <span class="hljs-built_in">this</span>.uage=uage;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserMapperImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span> <span class="hljs-comment">// 交给spring框架去创建数据访问层的对象创建</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserMapperImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserMapper</span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Users u)</span>&#123;<br>    System.out.println(u.getUname()+<span class="hljs-string">&#x27;用户增加成功！&#x27;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span>&#123;<br>  <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Users u)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span> <span class="hljs-comment">//交给spring框架创建业务逻辑层的对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UsersService</span>&#123;<br>  <span class="hljs-comment">//在所有的业务逻辑中都必定有数据访问层的对象</span><br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> UsersMapper usersMapper; <span class="hljs-comment">// = new UsersMapperImpl();</span><br>  <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Users users)</span>&#123;<br>    <span class="hljs-keyword">return</span> usersMapper.insert(users)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UsersService</span>&#123;<br>  <span class="hljs-comment">//在所有的业务逻辑中都必定有数据访问层的对象</span><br><br>  <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Users users)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span>&#123;<br>  <span class="hljs-comment">//所有的界面层都会有业务逻辑层的对象</span><br>  <span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">public</span> UsersService userService;<span class="hljs-comment">// = new UsersServiceImpl();</span><br>  <br>  <span class="hljs-comment">//界面层对外提供访问的功能</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Users users)</span>&#123;<br>    <span class="hljs-keyword">return</span> userService.insert(users);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span>&#123;<br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertUsers</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationCOntext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    <span class="hljs-type">UserController</span> <span class="hljs-variable">userController</span> <span class="hljs-operator">=</span> (UserController)ac.getBean(<span class="hljs-string">&quot;userController&quot;</span>);<br>    userController.insert(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Users</span>(<span class="hljs-number">100</span>,<span class="hljs-string">&quot;haha&quot;</span>,<span class="hljs-number">25</span>));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flink作业读取mysql-binlog写入kafka报错</title>
    <link href="/2022/08/31/Flink%E4%BD%9C%E4%B8%9A%E8%AF%BB%E5%8F%96mysql-binlog%E5%86%99%E5%85%A5kafka%E6%8A%A5%E9%94%99/"/>
    <url>/2022/08/31/Flink%E4%BD%9C%E4%B8%9A%E8%AF%BB%E5%8F%96mysql-binlog%E5%86%99%E5%85%A5kafka%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>flinkcdc读取mysql-binlog日志写到kafka时出现不能获取kafka metadata的问题</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220831214337.png"></p><p>遇到获取不到获取不到metadata的情况，检查kafka集群是否有节点挂了。我们kafka集群为3节点，排查发现其中一个节点由于磁盘写满挂了。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220831214941.png"></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220831214849.png"></p>]]></content>
    
    
    <categories>
      
      <category>Flink</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flink使用之SQL Client</title>
    <link href="/2022/08/20/Flink%E4%BD%BF%E7%94%A8%E4%B9%8BSQL-Client/"/>
    <url>/2022/08/20/Flink%E4%BD%BF%E7%94%A8%E4%B9%8BSQL-Client/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Flink提供了SQL Client端，有了它我们可以像Hive的beeline一样直接在控制台编写SQL并提交作业。这里与FlinkSQL不同的是，虽然FlinkSQL实现了可以在Flink程序中写SQL，但还是需要写一些java和scala代码，Flink提供了SQL Client可以帮助不会写java和scala的程序员快速上手。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>Flink SQL client支持运行在standalone集群和Yarn集群上。在提交任务的命令有所不同。</p><h3 id="SQL-client运行于standalone模式："><a href="#SQL-client运行于standalone模式：" class="headerlink" title="SQL client运行于standalone模式："></a><strong>SQL client运行于standalone模式：</strong></h3><ol><li>事先启动一个Flink standalone集群</li></ol><p><code>./start-cluster.sh</code></p><ol start="2"><li>启动sql-client on standalone</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./sql-client.sh embedded<br></code></pre></td></tr></table></figure><blockquote><p>注意。如果使用standalone模式运行，需要事先启动一个Flink standalone集群。方法如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./start-cluster.sh<br></code></pre></td></tr></table></figure></blockquote><p>默认情况下，这个sql-client上面所跑的任务，会提交到flink的standalone集群上，如果你没有<strong>bin&#x2F;start-cluster.s</strong>h启动standalon集群，那么sql-client进程可以启动起来，但是在实际执行sql的时候，会报如下连接拒绝的错误</p><h3 id="运行到Yarn集群上："><a href="#运行到Yarn集群上：" class="headerlink" title="运行到Yarn集群上："></a><strong>运行到Yarn集群上：</strong></h3><ol><li>启动一个yarn-session集群</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入flink安装目录</span><br>cd &#123;Flink_ENV&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行</span><br>./bin/yarn-session.sh -s 2 -jm 1024 -tm 2048 -nm test1 -d<br><span class="hljs-meta prompt_"># </span><span class="language-bash">-d 表示detach()放在后台执行</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-nm 名字</span><br></code></pre></td></tr></table></figure><ol start="2"><li>启动sql-client on yarn-session</li></ol><p><code>./sql-client.sh embedded -s yarn-session</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">或者bin<span class="hljs-operator">/</span><span class="hljs-keyword">sql</span><span class="hljs-operator">-</span>client.sh embedded <span class="hljs-operator">-</span>e <span class="hljs-keyword">sql</span><span class="hljs-operator">-</span>env.yaml<br># <span class="hljs-keyword">sql</span><span class="hljs-operator">-</span>env.yaml文件内容为：<br>configuration:<br>  execution.target: yarn<span class="hljs-operator">-</span>session<br></code></pre></td></tr></table></figure><p>大家可能会问：SQL slient怎么知道提交到哪个yarn app上？</p><p>指定<code>yarn-session</code>方式启动的时候会看到如下日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">INFO  org.apache.flink.yarn.cli.FlinkYarnSessionCli                [] - Found Yarn properties file under /tmp/.yarn-properties-root.<br></code></pre></td></tr></table></figure><p>Flink每次启动<code>yarn-session</code>，都会创建一个<code>/tmp/.yarn-properties-root</code>文件(root为用户名，源码位于<code>FlinkYarnSessionCli</code>)。内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">dynamicPropertiesString=<br>applicationID=application_xxxxxxxxxxxxx_xxxx<br></code></pre></td></tr></table></figure><p>记录了最近一次提交的yarn session对应的application ID。SQL client如果使用yarn session模式启动，会查找<code>/tmp/.yarn-properties-root</code>文件中指定的application id，将SQL提交到这个yarn session上运行。</p><p>参考：</p><p><a href="https://nightlies.apache.org/flink/flink-docs-release-1.13/zh/docs/dev/table/sqlclient/">Flink官网</a></p><p><a href="https://blog.csdn.net/lsr40/article/details/113398830">CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Flink</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ETL算法</title>
    <link href="/2022/08/16/ETL%E7%AE%97%E6%B3%95/"/>
    <url>/2022/08/16/ETL%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="ETL算法"><a href="#ETL算法" class="headerlink" title="ETL算法"></a>ETL算法</h2><blockquote><p>1.全删全插</p></blockquote><p><strong>应用场景</strong></p><p>适合<strong>源表是全量数据表</strong>，该数据表业务逻辑只需保存当前最新全量数据，不需跟踪过往历史信息。主要应用在维表、参数表</p><p><strong>算法实现逻辑</strong></p><p>1.清空目标表；</p><p>2.源表全量插入；</p><p><strong>ETL代码原型</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--   1. 清理目标表</span><br><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>目标表<span class="hljs-operator">&gt;</span>;<br> <br><span class="hljs-comment">--   2. 全量插入</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-operator">&lt;</span>目标表<span class="hljs-operator">&gt;</span>   (字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>)<br><span class="hljs-keyword">SELECT</span> 字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>源表<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-keyword">JOIN</span> <span class="hljs-operator">&lt;</span>关联数据<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">WHERE</span>   <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>;<br></code></pre></td></tr></table></figure><hr><blockquote><p>2.增量累全模型</p></blockquote><p>即Upsert实现逻辑</p><p><strong>应用场景</strong></p><p>源表可以是增量或全量数据表，目标表始终最新最全记录。</p><p><strong>算法实现逻辑</strong></p><p>1.利用PK主键比对；</p><p>2.目标表和源表PK一致的变化记录，更新目标表；</p><p>3.源表存在但目标表不存在，直接插入；</p><p><strong>ETL代码原型</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 1. 生成加工源表</span><br><span class="hljs-keyword">Create</span> temp <span class="hljs-keyword">Table</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">&gt;</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">&gt;</span> (字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>)<br><span class="hljs-keyword">SELECT</span> 字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>  <br><span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>源表<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-keyword">JOIN</span> <span class="hljs-operator">&lt;</span>关联数据<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">WHERE</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>;<br> <br><span class="hljs-comment">-- 2. 可利用Merge Into实现累全能力，当前也可以采用分步Delete/Insert或Update/Insert操作</span><br><span class="hljs-keyword">Merge</span> <span class="hljs-keyword">INTO</span> <span class="hljs-operator">&lt;</span>目标表<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">As</span> T1 (字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>)<br><span class="hljs-keyword">Using</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">as</span> S1<br><span class="hljs-keyword">on</span> (<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>PK<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>)<br><span class="hljs-keyword">when</span> Matched <span class="hljs-keyword">then</span><br><span class="hljs-keyword">update</span> <span class="hljs-keyword">set</span> Colx <span class="hljs-operator">=</span> S1.Colx <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br><span class="hljs-keyword">when</span> <span class="hljs-keyword">Not</span> Matched <span class="hljs-keyword">then</span><br><span class="hljs-keyword">INSERT</span> (字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>)   <span class="hljs-keyword">values</span> (字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> )<br>;<br></code></pre></td></tr></table></figure><hr><blockquote><p>3.增量累加模型</p></blockquote><p>即Append实现逻辑；</p><p><strong>应用场景</strong></p><p>主要应用在流水表加载上，即每日产生的流水、事件数据，追加到目标表中保留全历史数据。流水表、快照表、统计分析表等均是通过该逻辑实现。</p><p><strong>算法实现逻辑</strong></p><p>1.源表直接插入目标表；</p><p><strong>ETL代码原型</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--   1.插入目标表</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-operator">&lt;</span>目标表<span class="hljs-operator">&gt;</span>   (字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>)<br><span class="hljs-keyword">SELECT</span> 字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>源表<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-keyword">JOIN</span> <span class="hljs-operator">&lt;</span>关联数据<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">WHERE</span>   <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>;<br></code></pre></td></tr></table></figure><hr><blockquote><p>4.全历史拉链模型</p></blockquote><p><strong>应用场景</strong></p><p>全历史拉链，跟踪源表全量变化历史，若源表记录不存在，则说明数据闭链；根据PK新拉一条有效记录。源表数据要求全量</p><p><strong>算法实现逻辑</strong></p><p>1.提取当前有效记录；</p><p>2.提取当日源系统最新数据；</p><p>3.根据PK字段比对当前有效记录与最新源表，更新目标表当前有效记录，进行闭链操作；</p><p>4.根据全字段比对最新源表与当前有效记录，插入目标表；</p><p><strong>ETL代码原型</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 1. 提取当前有效记录</span><br><span class="hljs-keyword">Insert</span> <span class="hljs-keyword">into</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">-</span>开链<span class="hljs-operator">-</span>pre<span class="hljs-operator">&gt;</span> (不含开闭链字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>)<br><span class="hljs-keyword">Select</span> 不含开闭链字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br><span class="hljs-keyword">From</span> <span class="hljs-operator">&lt;</span>目标表<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">Where</span> 结束日期 <span class="hljs-operator">=</span><span class="hljs-type">date</span><span class="hljs-string">&#x27;&lt;最大日期&gt;&#x27;</span>;<br>;<br><br><span class="hljs-comment">-- 2. 提取当日源系统最新数据</span><br><span class="hljs-operator">&lt;</span>源表临时表<span class="hljs-operator">-</span>cur<span class="hljs-operator">&gt;</span><br><br><br><span class="hljs-comment">-- 3 今天全部开链的数据，即包含今天全新插入、数据发生变化的记录</span><br><span class="hljs-keyword">Insert</span> <span class="hljs-keyword">Into</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">-</span>增量<span class="hljs-operator">-</span>ins<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">Select</span> 不含开闭链字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br><span class="hljs-keyword">From</span> <span class="hljs-operator">&lt;</span>源表临时表<span class="hljs-operator">-</span>cur<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">where</span> (不含开闭链字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span><br>   (<span class="hljs-keyword">Select</span> 不含开闭链字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br> <span class="hljs-keyword">From</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">-</span>开链<span class="hljs-operator">-</span>pre<span class="hljs-operator">&gt;</span><br>   );<br>   <br><span class="hljs-comment">-- 4 今天需要闭链的数据，即今天发生变化的记录</span><br><span class="hljs-keyword">Insert</span> <span class="hljs-keyword">into</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">-</span>增量<span class="hljs-operator">-</span>upd<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">Select</span> 不含开闭链字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>,开始时间<br><span class="hljs-keyword">From</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">-</span>开链<span class="hljs-operator">-</span>pre<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">where</span> (不含开闭链字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span><br>   (<span class="hljs-keyword">Select</span> 不含开闭链字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br> <span class="hljs-keyword">From</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">-</span>开链<span class="hljs-operator">-</span>cur<span class="hljs-operator">&gt;</span><br>   );<br>   <br><span class="hljs-comment">-- 5 更新闭链数据，即历史记录闭链（删除-插入替代更新）</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>目标表<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">WHERE</span> (PK<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>) <span class="hljs-keyword">IN</span><br>(<span class="hljs-keyword">Select</span> PK<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-keyword">From</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">-</span>增量<span class="hljs-operator">-</span>upd<span class="hljs-operator">&gt;</span>)<br><span class="hljs-keyword">AND</span> 结束日期<span class="hljs-operator">=</span><span class="hljs-type">date</span><span class="hljs-string">&#x27;&lt;最大日期&gt;&#x27;</span>;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-operator">&lt;</span>目标表<span class="hljs-operator">&gt;</span><br>      (不含开闭链字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>,开始时间,结束日期)<br><span class="hljs-keyword">Select</span> 不含开闭链字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>,开始时间,<span class="hljs-type">date</span><span class="hljs-string">&#x27;&lt;数据日期&gt;&#x27;</span><br><span class="hljs-keyword">From</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">-</span>增量<span class="hljs-operator">-</span>upd<span class="hljs-operator">&gt;</span>;<br><br><span class="hljs-comment">-- 6 插入开链数据，即当日新增记录</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-operator">&lt;</span>目标表<span class="hljs-operator">&gt;</span> .<br>      (不含开闭链字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>,开始时间,结束日期)<br><span class="hljs-keyword">Select</span> 不含开闭链字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>,<span class="hljs-type">date</span><span class="hljs-string">&#x27;&lt;数据日期&gt;&#x27;</span>,<span class="hljs-type">date</span><span class="hljs-string">&#x27;&lt;最大日期&gt;&#x27;</span><br><span class="hljs-keyword">From</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">-</span>增量<span class="hljs-operator">-</span>ins<span class="hljs-operator">&gt;</span>;<br></code></pre></td></tr></table></figure><hr><blockquote><p>5.<strong>增量拉链模型</strong></p></blockquote><p><strong>应用场景</strong></p><p>增量拉链，目的是追踪数据增量变化历史，根据PK比对新拉一条开链数据；</p><p>算法要求源表增量或者全量。</p><p><strong>算法实现逻辑</strong></p><p>1.提取上日开链数据；</p><p>2.PK相同变化记录，关闭旧记录链，开启新记录链；</p><p>3.PK不同，源表存在，新增开链记录</p><p><strong>ETL代码原型</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--   1. 提取当前有效记录</span><br><span class="hljs-keyword">Insert</span> <span class="hljs-keyword">into</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">-</span>开链<span class="hljs-operator">-</span>pre<span class="hljs-operator">&gt;</span> (不含开闭链字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>)<br><span class="hljs-keyword">Select</span> 不含开闭链字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br><span class="hljs-keyword">From</span> <span class="hljs-operator">&lt;</span>目标表<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">Where</span> 结束日期 <span class="hljs-operator">=</span><span class="hljs-type">date</span><span class="hljs-string">&#x27;&lt;最大日期&gt;&#x27;</span>;<br><br><span class="hljs-comment">--   2. 提取当日源系统增量记录</span><br><span class="hljs-operator">&lt;</span>源表临时表<span class="hljs-operator">-</span>cur<span class="hljs-operator">&gt;</span><br><br><span class="hljs-comment">--   3. 提取当日源系统新增记录</span><br><span class="hljs-keyword">Insert</span> <span class="hljs-keyword">into</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">-</span>增量<span class="hljs-operator">-</span>ins<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">Select</span> 不含开闭链字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br><span class="hljs-keyword">From</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">-</span>开链<span class="hljs-operator">-</span>cur<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">where</span> (<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>PK<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span><br>  (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>PK<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">-</span>开链<span class="hljs-operator">-</span>pre<span class="hljs-operator">&gt;</span>);<br>  <br><span class="hljs-comment">--   4. 提取当日源系统历史变化记录</span><br><span class="hljs-keyword">Insert</span> <span class="hljs-keyword">into</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">-</span>增量<span class="hljs-operator">-</span>upd<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">Select</span> 不含开闭链字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br><span class="hljs-keyword">From</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">-</span>开链<span class="hljs-operator">-</span>cur<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">-</span>开链<span class="hljs-operator">-</span>pre<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">on</span> (<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>PK 等值<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>)<br><span class="hljs-keyword">where</span> (<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>变化字段 非等值<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>);<br><br><span class="hljs-comment">--   5. 更新历史变化记录，关闭历史旧链，开启新链</span><br><span class="hljs-keyword">update</span> <span class="hljs-operator">&lt;</span>目标表<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">AS</span> T1<br><span class="hljs-keyword">SET</span> <span class="hljs-operator">&lt;</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>变化字段 S1赋值<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">&gt;</span>,结束日期 <span class="hljs-operator">=</span> <span class="hljs-type">date</span><span class="hljs-string">&#x27;&lt;数据日期&gt;&#x27;</span><br><span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">-</span>增量<span class="hljs-operator">-</span>upd<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">AS</span> S1<br><span class="hljs-keyword">WHERE</span> ( <span class="hljs-operator">&lt;</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>PK 等值<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">&gt;</span> )<br><span class="hljs-keyword">AND</span>   T1.结束日期 <span class="hljs-operator">=</span><span class="hljs-type">date</span><span class="hljs-string">&#x27;&lt;最大日期&gt;&#x27;</span><br>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-operator">&lt;</span>目标表<span class="hljs-operator">&gt;</span><br>      (不含开闭链字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>,开始时间,结束日期)<br><span class="hljs-keyword">SELECT</span> 不含开闭链字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>,<span class="hljs-type">date</span><span class="hljs-string">&#x27;&lt;数据日期&gt;&#x27;</span>,<span class="hljs-type">date</span><span class="hljs-string">&#x27;&lt;最大日期&gt;&#x27;</span><br><span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">-</span>增量<span class="hljs-operator">-</span>upd<span class="hljs-operator">&gt;</span>;<br><br><span class="hljs-comment">--   6. 插入全新开链数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-operator">&lt;</span>目标表<span class="hljs-operator">&gt;</span><br>      (不含开闭链字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>,开始时间,结束日期)<br><span class="hljs-keyword">SELECT</span> 不含开闭链字段<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>,<span class="hljs-type">date</span><span class="hljs-string">&#x27;&lt;数据日期&gt;&#x27;</span>,<span class="hljs-type">date</span><span class="hljs-string">&#x27;&lt;最大日期&gt;&#x27;</span><br><span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>临时表<span class="hljs-operator">-</span>增量<span class="hljs-operator">-</span>ins<span class="hljs-operator">&gt;</span>;<br></code></pre></td></tr></table></figure><hr><blockquote><p>6.<strong>增删拉链模型</strong></p></blockquote><p><strong>应用场景</strong></p><p>主要是利用业务字段跟踪增量数据中包含删除的变化历史。</p><p><strong>算法实现逻辑</strong></p><p>1.提取上日开链数据；</p><p>2.提取源表非删除记录；</p><p>3.PK相同变化记录，关闭旧记录链，开启新记录链；</p><p>4.PK比对，源表存在，新增开链记录；</p><p>5.提取源表删除记录；</p><p>6.PK比对，旧开链记录存在，关闭旧记录链；</p><p><strong>ETL代码原型</strong></p><hr><blockquote><p>7.全量增删拉链模型</p></blockquote><p><strong>应用场景</strong></p><p>主要是利用业务字段跟踪全量数据中包含删除的变化历史。</p><p><strong>算法实现逻辑</strong></p><p>1.提取上日开链数据；</p><p>2.提取源表非删除记录；</p><p>3.PK相同变化记录，关闭旧记录链，开启新记录链；</p><p>4.PK比对，源表存在，新增开链记录；</p><p>5.提取源表删除记录；</p><p>6.PK比对，旧开链记录存在，关闭旧记录链；</p><p>7.PK比对，提取旧开链存在但源表不存在记录，关闭旧记录链；</p><p><strong>ETL代码原型</strong></p><p><strong>应用场景</strong></p><p><strong>算法实现逻辑</strong></p><p><strong>ETL代码原型</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>ETL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Doris索引</title>
    <link href="/2022/08/15/Doris%E7%B4%A2%E5%BC%95/"/>
    <url>/2022/08/15/Doris%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<h2 id="BloomFilter索引"><a href="#BloomFilter索引" class="headerlink" title="BloomFilter索引"></a>BloomFilter索引</h2><h3 id="BloomFilter索引原理"><a href="#BloomFilter索引原理" class="headerlink" title="BloomFilter索引原理"></a>BloomFilter索引原理</h3><p>布隆过滤器实际上是由一个超长的二进制位数组和一系列的哈希函数组成。二进制位数组初始全部为0，当给定一个待查询的元素时，这个元素会被一系列哈希函数计算映射出一系列的值，所有的值在位数组的偏移量处置为1。</p><p>下图所示出一个 m&#x3D;18, k&#x3D;3 （m是该Bit数组的大小，k是Hash函数的个数）的Bloom Filter示例。集合中的 x、y、z 三个元素通过 3 个不同的哈希函数散列到位数组中（这里因为hash函数是3个，需要散列的3个位值都为1时，才说明在集合中）。当查询元素w时，通过Hash函数计算之后因为有一个比特为0，因此w不在该集合中。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220815201708.png"></p><h3 id="Doris-BloomFilter索引及使用场景"><a href="#Doris-BloomFilter索引及使用场景" class="headerlink" title="Doris BloomFilter索引及使用场景"></a>Doris BloomFilter索引及使用场景</h3><p>Bloom Filter本质上是一种位图结构，用于快速的判断一个给定的值是否在一个集合中。这种判断会产生小概率的误判。即如果返回false，则一定不在这个集合内。而如果范围true，则有可能在这个集合内。</p><h4 id="创建BloomFilter索引"><a href="#创建BloomFilter索引" class="headerlink" title="创建BloomFilter索引"></a>创建BloomFilter索引</h4><p>Doris BloomFilter索引的创建是通过在建表语句的PROPERTIES里加上”bloom_filter_columns”&#x3D;”k1,k2,k3”,这个属性，k1,k2,k3是你要创建的BloomFilter索引的Key列名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> sale_detail_bloom  (<br>    sale_date <span class="hljs-type">date</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT &quot;销售时间&quot;,<br>    customer_id <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT &quot;客户编号&quot;,<br>    saler_id <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT &quot;销售员&quot;,<br>    sku_id <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT &quot;商品编号&quot;,<br>    category_id <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT &quot;商品分类&quot;,<br>    sale_count <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT &quot;销售数量&quot;,<br>    sale_price <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">12</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT &quot;单价&quot;,<br>    sale_amt <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">20</span>,<span class="hljs-number">2</span>)  COMMENT &quot;销售总金额&quot;<br>)<br>Duplicate  KEY(sale_date, customer_id,saler_id,sku_id,category_id)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">RANGE</span>(sale_date)<br>(<br><span class="hljs-keyword">PARTITION</span> P_202111 <span class="hljs-keyword">VALUES</span> [(<span class="hljs-string">&#x27;2021-11-01&#x27;</span>), (<span class="hljs-string">&#x27;2021-12-01&#x27;</span>))<br>)<br>DISTRIBUTED <span class="hljs-keyword">BY</span> HASH(saler_id) BUCKETS <span class="hljs-number">10</span><br>PROPERTIES (<br>&quot;replication_num&quot; <span class="hljs-operator">=</span> &quot;3&quot;,<br>&quot;bloom_filter_columns&quot;<span class="hljs-operator">=</span>&quot;saler_id,category_id&quot;,<br>&quot;dynamic_partition.enable&quot; <span class="hljs-operator">=</span> &quot;true&quot;,<br>&quot;dynamic_partition.time_unit&quot; <span class="hljs-operator">=</span> &quot;MONTH&quot;,<br>&quot;dynamic_partition.time_zone&quot; <span class="hljs-operator">=</span> &quot;Asia/Shanghai&quot;,<br>&quot;dynamic_partition.start&quot; <span class="hljs-operator">=</span> &quot;-2147483648&quot;,<br>&quot;dynamic_partition.end&quot; <span class="hljs-operator">=</span> &quot;2&quot;,<br>&quot;dynamic_partition.prefix&quot; <span class="hljs-operator">=</span> &quot;P_&quot;,<br>&quot;dynamic_partition.replication_num&quot; <span class="hljs-operator">=</span> &quot;3&quot;,<br>&quot;dynamic_partition.buckets&quot; <span class="hljs-operator">=</span> &quot;3&quot;<br>);<br></code></pre></td></tr></table></figure><h4 id="查看BloomFilter索引"><a href="#查看BloomFilter索引" class="headerlink" title="查看BloomFilter索引"></a>查看BloomFilter索引</h4><p>查看我们在表上建立的BloomFilter索引是使用:</p><p><code>SHOW CREATE TABLE &lt;table_name&gt;</code></p><h4 id="删除BloomFilter索引"><a href="#删除BloomFilter索引" class="headerlink" title="删除BloomFilter索引"></a>删除BloomFilter索引</h4><p><code>ALTER TABLE &lt;db.table_name&gt; SET (&quot;bloom_filter_columns&quot; = &quot;&quot;);</code></p><h4 id="修改BloomFilter索引"><a href="#修改BloomFilter索引" class="headerlink" title="修改BloomFilter索引"></a>修改BloomFilter索引</h4><p><code>ALTER TABLE &lt;db.table_name&gt; SET (&quot;bloom_filter_columns&quot; = &quot;k1,k3&quot;);</code></p><h4 id="Doris-BloomFilter使用场景"><a href="#Doris-BloomFilter使用场景" class="headerlink" title="Doris BloomFilter使用场景"></a><strong>Doris BloomFilter使用场景</strong></h4><p>满足以下几个条件时可以考虑对某列建立Bloom Filter 索引：</p><p>1.首先BloomFilter适用于非前缀过滤。</p><p>2.查询会根据该列高频过滤，而且查询条件大多是 in 和 &#x3D; 过滤。</p><p>3.不同于Bitmap, BloomFilter适用于高基数列。比如UserID。因为如果创建在低基数的列上，比如 “性别” 列，则每个Block几乎都会包含所有取值，导致BloomFilter索引失去意义。</p><h3 id="Doris-BloomFilter使用注意事项"><a href="#Doris-BloomFilter使用注意事项" class="headerlink" title="Doris BloomFilter使用注意事项"></a><strong>Doris BloomFilter使用注意事项</strong></h3><ol><li>不支持对Tinyint、Float、Double 类型的列建Bloom Filter索引。</li><li>Bloom Filter索引只对 in 和 &#x3D; 过滤查询有加速效果。</li><li>如果要查看某个查询是否命中了Bloom Filter索引，可以通过查询的Profile信息查看。</li></ol><h2 id="Bitmap-索引"><a href="#Bitmap-索引" class="headerlink" title="Bitmap 索引"></a>Bitmap 索引</h2><h3 id="Bitmap索引原理"><a href="#Bitmap索引原理" class="headerlink" title="Bitmap索引原理"></a>Bitmap索引原理</h3><p>举个例子，给定一块长度是10bit的内存空间，想要依次插入数据4，2，1，3怎么做？</p><p>1.给定长度是10的bitmap，每一个bit位分别对应着从0到9的10个整型数。此时bitmap的所有位都是0</p><p>2.把整型数4存入bitmap，对应存储的位置就是下标为4的位置，将此bit置为1</p><p>3.把整型数2存入bitmap，对应存储的位置就是下标为2的位置，将此bit置为1</p><p>4.把整型数1存入bitmap，对应存储的位置就是下标为1的位置，将此bit置为1</p><p>5.把整型数3存入bitmap，对应存储的位置就是下标为3的位置，将此bit置为1</p><p>![image-20220815204429416](&#x2F;Users&#x2F;tingyu&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220815204429416.png)</p><p>要问此时bitmap里存储了哪些元素？显然是4,3,2,1，一目了然。</p><p>Bitmap不仅方便查询，还可以去除掉重复的整型数。</p><p>这里有个实际工作中遇到的例子，一个用户数据表，每条用户数据都对应着几百上千个标签，怎么转化成bitmap？</p><p>让每一个标签存储包含此标签的所有用户ID，每一个标签都是一个独立的Bitmap</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220815205230.png"></p><p>如何查找使用苹果手机的程序员用户？</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220815205522.png"></p><h3 id="Doris-Bitmap索引使用场景"><a href="#Doris-Bitmap索引使用场景" class="headerlink" title="Doris Bitmap索引使用场景"></a>Doris Bitmap索引使用场景</h3><p>1.适用于低基数的列上，建议在100到100000之间，如：职业、地市等。基数太高则没有明显优势；基数太低，则空间效率和性能会大大降低。</p><p>2.对于特定类型的查询例如count、or、and等逻辑操作因为只需要进行位运算。如：通过类似 <code>select count(*) from table where city = &#39;beijing&#39; and job = &#39;teacher&#39;</code> 这种多个条件组合查询场景，如果在每个查询条件列上都建立了bitmap索引，则可以进行高效的位运算，精确定位到需要的数据，数据扫描量。当筛选出的结果集越小，bitmap索引的优势越明显</p><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/54783053">Apache Doris索引机制介绍</a></p><p><a href="https://zhuanlan.zhihu.com/p/394882844">Bitmap算法介绍</a></p>]]></content>
    
    
    <categories>
      
      <category>Doris</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Doris</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>deep_learning_7.数值稳定性和模型初始化</title>
    <link href="/2022/08/14/deep-learning-7-%E6%95%B0%E5%80%BC%E7%A8%B3%E5%AE%9A%E6%80%A7%E5%92%8C%E6%A8%A1%E5%9E%8B%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <url>/2022/08/14/deep-learning-7-%E6%95%B0%E5%80%BC%E7%A8%B3%E5%AE%9A%E6%80%A7%E5%92%8C%E6%A8%A1%E5%9E%8B%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>到目前为止，我们实现的每个模型都是根据某个预先指定的分布来初始化模型的参数。这样比较容易忽略模型初始值对训练的影响。</p><p>选择哪个函数以及如何初始化参数可以决定优化算法收敛的速度有多快。 糟糕选择可能会导致我们在训练时遇到梯度爆炸或梯度消失。</p><h2 id="梯度消失和梯度爆炸"><a href="#梯度消失和梯度爆炸" class="headerlink" title="梯度消失和梯度爆炸"></a>梯度消失和梯度爆炸</h2><p>当初始值选取的点不一样时，就会造成梯度消失或者是梯度爆炸的情况</p><p>所谓梯度消失是指，梯度的值在很小的范围内变化，导数接近于平滑的直线。</p><p>梯度爆炸是指，导数斜率很大导致w更新的时候超出了浮点数所能表示的范围</p><h4 id="1-梯度消失"><a href="#1-梯度消失" class="headerlink" title="1.梯度消失"></a>1.梯度消失</h4><p>曾经sigmoid函数1&#x2F;(1+exp⁡(−x))很流行， 因为它类似于阈值函数。 由于早期的人工神经网络受到生物神经网络的启发， 神经元要么完全激活要么完全不激活（就像生物神经元）的想法很有吸引力。 然而，它却是导致梯度消失问题的一个常见的原因， 让我们仔细看看sigmoid函数为什么会导致梯度消失。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">%matplotlib inline<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br>x = torch.arange(-<span class="hljs-number">8.0</span>, <span class="hljs-number">8.0</span>, <span class="hljs-number">0.1</span>, requires_grad=<span class="hljs-literal">True</span>)<br>y = torch.sigmoid(x)<br>y.backward(torch.ones_like(x))<br><br>d2l.plot(x.detach().numpy(), [y.detach().numpy(), x.grad.numpy()],<br>         legend=[<span class="hljs-string">&#x27;sigmoid&#x27;</span>, <span class="hljs-string">&#x27;gradient&#x27;</span>], figsize=(<span class="hljs-number">4.5</span>, <span class="hljs-number">2.5</span>))<br></code></pre></td></tr></table></figure><p>![](<a href="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img%E6%88%AA%E5%B1%8F2022-10-06">https://raw.githubusercontent.com/YUTING0907/PicGo/main/img截屏2022-10-06</a> 下午11.41.35.png)</p><p>当sigmoid函数的输入很大或是很小时，它的梯度都会消失。 此外，当反向传播通过许多层时，除非我们在刚刚好的地方， 这些地方sigmoid函数的输入接近于零，否则整个乘积的梯度可能会消失。 当我们的网络有很多层时，除非我们很小心，否则在某一层可能会切断梯度。 事实上，这个问题曾经困扰着深度网络的训练。 因此，更稳定的ReLU系列函数已经成为从业者的默认选择（虽然在神经科学的角度看起来不太合理）。</p><h4 id="2-梯度爆炸"><a href="#2-梯度爆炸" class="headerlink" title="2.梯度爆炸"></a>2.梯度爆炸</h4><p>梯度爆炸可能同样令人烦恼。 为了更好地说明这一点，我们生成100个高斯随机矩阵，并将它们与某个初始矩阵相乘。 对于我们选择的尺度（方差σ2&#x3D;1），矩阵乘积发生爆炸。 当这种情况是由于深度网络的初始化所导致时，我们没有机会让梯度下降优化器收敛。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">M = torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, size=(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;一个矩阵 \n&#x27;</span>,M)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    M = torch.mm(M,torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, size=(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>)))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;乘以100个矩阵后\n&#x27;</span>, M)<br><br><br>一个矩阵<br> tensor([[ <span class="hljs-number">0.4382</span>, -<span class="hljs-number">0.7687</span>,  <span class="hljs-number">0.2731</span>, -<span class="hljs-number">0.2587</span>],<br>        [-<span class="hljs-number">0.1789</span>, -<span class="hljs-number">0.2395</span>,  <span class="hljs-number">1.4915</span>,  <span class="hljs-number">0.2634</span>],<br>        [-<span class="hljs-number">0.5272</span>,  <span class="hljs-number">0.2403</span>,  <span class="hljs-number">2.4397</span>, -<span class="hljs-number">0.7587</span>],<br>        [ <span class="hljs-number">0.9805</span>,  <span class="hljs-number">0.4166</span>, -<span class="hljs-number">0.1906</span>, -<span class="hljs-number">0.2581</span>]])<br>乘以<span class="hljs-number">100</span>个矩阵后<br> tensor([[ <span class="hljs-number">7.6616e+22</span>,  <span class="hljs-number">4.2587e+22</span>, -<span class="hljs-number">5.8065e+22</span>,  <span class="hljs-number">1.2980e+23</span>],<br>        [-<span class="hljs-number">2.3790e+21</span>, -<span class="hljs-number">1.3224e+21</span>,  <span class="hljs-number">1.8030e+21</span>, -<span class="hljs-number">4.0304e+21</span>],<br>        [-<span class="hljs-number">1.3796e+23</span>, -<span class="hljs-number">7.6687e+22</span>,  <span class="hljs-number">1.0456e+23</span>, -<span class="hljs-number">2.3373e+23</span>],<br>        [ <span class="hljs-number">8.5987e+20</span>,  <span class="hljs-number">4.7795e+20</span>, -<span class="hljs-number">6.5167e+20</span>,  <span class="hljs-number">1.4567e+21</span>]])<br></code></pre></td></tr></table></figure><h3 id="解决数值不稳定"><a href="#解决数值不稳定" class="headerlink" title="解决数值不稳定"></a>解决数值不稳定</h3><p><strong>目标：让梯度值在合理的范围内，例如【1e-6，1e3】</strong></p><p><strong>1.合理的权重初始化和激活函数</strong></p><p>合理化的权重是要把权重的在均值和方差保持在一个范围</p><p>Xavier初始化方法</p><p>一般采用Xavier初始化方法来进行初始化，意味着说激活函数应该近似是y&#x3D;x</p><p>常用激活函数</p><p>sigmoid(X) &#x3D; 1&#x2F;2 + x&#x2F;4 - x^3 &#x2F;48 + O(x^5)</p><p>tanh(x) &#x3D; 0+x-x^3&#x2F;3 + O(x^5)</p><p>Relu(x) &#x3D; 0 + x </p><p>调整sigmoid：</p><p>4*sigmoid(x) - 2</p><p>注：Relu：max(0,x)</p><p><strong>2.将乘法变加法</strong></p><p>   ResNet、LSTM</p><p><strong>3.归一化</strong></p><p>  梯度归一化，梯度裁剪</p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>1.nan和inf是怎么产生的？</p><p>nan是➗0导致的，inf是值太大了炸掉了。可以把学习率减少，合理的初始化权重，激活函数不要选错，简单的做法是lr调小，直到不出现nan或者inf为止，还有就是初始化权重的时候，可以方差取小一点，均值为0，方差可以取小点</p><p>2.训练过程中，如果网络层的输出的中间层特征元素的值突然变成nanle，是发生了梯度爆炸了嘛？</p><p>一般是梯度爆炸造成的</p><p>3.遇到复杂的数学公式，看文字描述也没什么感觉，怎么突破？</p><p>上数学课hhh，线形代数学一学概率论学一学呗，虽然深度学习没有用到太多的数学知识，但是你如果要去看别的模型，数学不好你可能就看不懂，也就玩不了别的模型</p><p>4.梯度消失可以说是因为使用了sigmoid激活函数引起的吗？所以我们可以用ReLU替换sigmoid解决梯度消失的问题？</p><p>sigmoid确实是会造成梯度消失，但不能说是梯度消失就是sigmoid造成的，还可能有其他原因。用ReLU可以代替sigmoid有可能解决这个问题，但是不能保证一定能解决</p><p>5.梯度爆炸是由什么激活函数引起的？</p><p>激活函数相对都是比较平滑的曲线，它的梯度一般不会有太大的问题。梯度爆炸的产生是每层输出的值太大，n个很大的数相乘会导致梯度爆炸</p><p>6.山地图可以可视化出来吗？我们可以把损失函数可视化出来来指导训练吗？</p><p>没有特别好的方法，但是有一些研究正在做</p><p>7.强制似的每一层的输出特征均值为0，方差为1，是不是损失了网络的表达能力？会降低学到的模型的准确率？</p><p>其实没有损失网络的表达能力，只是把它们拉到一个合理数值区间，只是让硬件更好处理和计算，从数学上来讲无论拉到什么区间都不会影响模型的可表达性</p><p>8.为什么4*sigmoid(x)-2可以提高稳定性？</p><p>其实是sigmoid做这样的处理后，它在0点附近的区间近视与y&#x3D;x</p><p>9.激活函数选择有什么建议吗？</p><p>用ReLU</p><p>10.一般权重是在每个epoch结束后更新的吧？</p><p>权重更新是在每个data_iter每个batch，每个epoch结束后是已经更新过很多次了</p>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>deep_learning_6.过拟合-暂退法(Dropout)</title>
    <link href="/2022/08/14/deep-learning-6-%E8%BF%87%E6%8B%9F%E5%90%88-%E6%9A%82%E9%80%80%E6%B3%95-Dropout/"/>
    <url>/2022/08/14/deep-learning-6-%E8%BF%87%E6%8B%9F%E5%90%88-%E6%9A%82%E9%80%80%E6%B3%95-Dropout/</url>
    
    <content type="html"><![CDATA[<h2 id="暂退法（Dropout）"><a href="#暂退法（Dropout）" class="headerlink" title="暂退法（Dropout）"></a>暂退法（Dropout）</h2><p>模型的泛化性越强，要求模型对其输入的微小变化越不敏感，也就是对噪声的适应能力越强。</p><p>那么关键是如何加入这种噪声，一种想法是<strong>无偏差（unbiased）</strong>的方式注入噪声。这样在固定住其他层时，每一层的期望值等于没有噪声时的值。我们把这种方法叫做暂退法。</p><p>暂退法其实就是在训练过程中丢弃（drop out）一些神经元。 在整个训练过程的每一次迭代中，标准暂退法包括在计算下一层之前将当前层中的一些节点置零。</p><p>无偏差的加入噪音</p><ul><li><p>对X加入噪音得到X‘，我们希望</p><p>$E[x’] &#x3D; x$</p></li><li><p>丢弃法对每个元素进行如下的扰动<br>$$<br>x_i’ &#x3D; \begin{cases} 0 \ , with\  probablity\  p  \<br>\frac {x_i}{1-p} \ , otherwise<br>\end{cases}<br>$$</p></li></ul><p>$E[x_i’] &#x3D; p<em>0 + (1-p)</em> \frac {x_i’}{(1-p)} &#x3D; x_i’$ </p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>要实现单层的暂退法函数， 我们从均匀分布U[0,1]中抽取样本，样本数与这层神经网络的维度一致。 然后我们保留那些对应样本大于p的节点，把剩下的丢弃。</p><p>在下面的代码中，我们实现 <code>dropout_layer</code> 函数， 该函数以<code>dropout</code>的概率丢弃张量输入<code>X</code>中的元素， 如上所述重新缩放剩余部分：将剩余部分除以<code>1.0-dropout</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dropout_layer</span>(<span class="hljs-params">X, dropout</span>):<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">0</span> &lt;= dropout &lt;= <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 在本情况中，所有元素都被丢弃</span><br>    <span class="hljs-keyword">if</span> dropout == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> torch.zeros_like(X)<br>    <span class="hljs-comment"># 在本情况中，所有元素都被保留</span><br>    <span class="hljs-keyword">if</span> dropout == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> X<br>    mask = (torch.rand(X.shape) &gt; dropout).<span class="hljs-built_in">float</span>()<br>    <span class="hljs-keyword">return</span> mask * X / (<span class="hljs-number">1.0</span> - dropout)<br></code></pre></td></tr></table></figure><p>我们可以通过下面几个例子来测试<code>dropout_layer</code>函数。 我们将输入<code>X</code>通过暂退法操作，暂退概率分别为0、0.5和1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">X = torch.arange(<span class="hljs-number">16</span>,dtype=torch.float32).reshape((<span class="hljs-number">2</span>,<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(X)<br><span class="hljs-built_in">print</span>(drop_out_layer(X,<span class="hljs-number">0.</span>))<br><span class="hljs-built_in">print</span>(drop_out_layer(X,<span class="hljs-number">0.5</span>))<br><span class="hljs-built_in">print</span>(drop_out_layer(X,<span class="hljs-number">1.</span>))<br><span class="hljs-built_in">print</span>(torch.rand(X.shape) &gt; <span class="hljs-number">0.5</span>)<br><span class="hljs-built_in">print</span>((torch.rand(X.shape) &gt; <span class="hljs-number">0.5</span>).<span class="hljs-built_in">float</span>())<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs lua">tensor(<span class="hljs-string">[[ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.],</span><br><span class="hljs-string">        [ 8.,  9., 10., 11., 12., 13., 14., 15.]]</span>)<br>tensor(<span class="hljs-string">[[ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.],</span><br><span class="hljs-string">        [ 8.,  9., 10., 11., 12., 13., 14., 15.]]</span>)<br>tensor(<span class="hljs-string">[[ 0.,  0.,  4.,  0.,  8., 10.,  0.,  0.],</span><br><span class="hljs-string">        [ 0., 18., 20., 22.,  0., 26.,  0., 30.]]</span>)<br>tensor(<span class="hljs-string">[[0., 0., 0., 0., 0., 0., 0., 0.],</span><br><span class="hljs-string">        [0., 0., 0., 0., 0., 0., 0., 0.]]</span>)<br>tensor(<span class="hljs-string">[[ True, False,  True, False,  True, False, False,  True],</span><br><span class="hljs-string">        [False,  True, False,  True, False,  True, False, False]]</span>)<br>tensor(<span class="hljs-string">[[0., 0., 1., 1., 1., 0., 0., 0.],</span><br><span class="hljs-string">        [0., 0., 1., 0., 1., 0., 1., 0.]]</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">num_inputs, num_outputs, num_hiddens1, num_hiddens2 = <span class="hljs-number">784</span>, <span class="hljs-number">10</span>, <span class="hljs-number">256</span>, <span class="hljs-number">256</span><br><br>dropout1, dropout2 = <span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Net</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_inputs, num_outputs, num_hiddens1, num_hiddens2,</span><br><span class="hljs-params">                 is_training = <span class="hljs-literal">True</span></span>):<br>        <span class="hljs-built_in">super</span>(Net, self).__init__()<br>        self.num_inputs = num_inputs<br>        self.training = is_training<br>        self.lin1 = nn.Linear(num_inputs, num_hiddens1)<br>        self.lin2 = nn.Linear(num_hiddens1, num_hiddens2)<br>        self.lin3 = nn.Linear(num_hiddens2, num_outputs)<br>        self.relu = nn.ReLU()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, X</span>):<br>        H1 = self.relu(self.lin1(X.reshape((-<span class="hljs-number">1</span>, self.num_inputs))))<br>        <span class="hljs-comment"># 只有在训练模型时才使用dropout</span><br>        <span class="hljs-keyword">if</span> self.training == <span class="hljs-literal">True</span>:<br>            <span class="hljs-comment"># 在第一个全连接层之后添加一个dropout层</span><br>            H1 = dropout_layer(H1, dropout1)<br>        H2 = self.relu(self.lin2(H1))<br>        <span class="hljs-keyword">if</span> self.training == <span class="hljs-literal">True</span>:<br>            <span class="hljs-comment"># 在第二个全连接层之后添加一个dropout层</span><br>            H2 = dropout_layer(H2, dropout2)<br>        out = self.lin3(H2)<br>        <span class="hljs-keyword">return</span> out<br><br><br>net = Net(num_inputs, num_outputs, num_hiddens1, num_hiddens2)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">num_epochs, lr, batch_size = <span class="hljs-number">10</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">256</span><br>loss = nn.CrossEntropyLoss(reduction=<span class="hljs-string">&#x27;none&#x27;</span>)<br>train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)<br>trainer = torch.optim.SGD(net.parameters(), lr=lr)<br>d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, trainer)<br></code></pre></td></tr></table></figure><h2 id="简介代码实现"><a href="#简介代码实现" class="headerlink" title="简介代码实现"></a>简介代码实现</h2><p>对于深度学习框架的高级API，我们只需在每个全连接层之后添加一个<code>Dropout</code>层， 将暂退概率作为唯一的参数传递给它的构造函数。 在训练时，<code>Dropout</code>层将根据指定的暂退概率随机丢弃上一层的输出（相当于下一层的输入）。 在测试时，<code>Dropout</code>层仅传递数据。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">net = nn.<span class="hljs-constructor">Sequential(<span class="hljs-params">nn</span>.Flatten()</span>,<br>        nn.<span class="hljs-constructor">Linear(784, 256)</span>,<br>        nn.<span class="hljs-constructor">ReLU()</span>,<br>        # 在第一个全连接层之后添加一个dropout层<br>        nn.<span class="hljs-constructor">Dropout(<span class="hljs-params">dropout1</span>)</span>,<br>        nn.<span class="hljs-constructor">Linear(256, 256)</span>,<br>        nn.<span class="hljs-constructor">ReLU()</span>,<br>        # 在第二个全连接层之后添加一个dropout层<br>        nn.<span class="hljs-constructor">Dropout(<span class="hljs-params">dropout2</span>)</span>,<br>        nn.<span class="hljs-constructor">Linear(256, 10)</span>)<br><br>def init<span class="hljs-constructor">_weights(<span class="hljs-params">m</span>)</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">type</span>(m)<span class="hljs-operator"> == </span>nn.Linear:<br>        nn.init.normal<span class="hljs-constructor">_(<span class="hljs-params">m</span>.<span class="hljs-params">weight</span>, <span class="hljs-params">std</span>=0.01)</span><br><br>net.apply(init_weights);<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">trainer = torch.optim.SGD(net.parameters(), lr=lr)<br>d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, trainer)<br></code></pre></td></tr></table></figure><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>1.丢弃法的丢弃依据是什么？如果丢弃不合理对输出的结果影响会很大？</p><p>所谓丢弃不合理，其实就是过大或过小，过小就还是过拟合，太大那么就是欠拟合，慢慢调超参数就好了</p><p>2.dropout随机置0对求梯度和反向传播的影响是什么？</p><p>dropout掉的对应的梯度不会更新</p><p>3.丢弃法是在训练中把神经元丢弃后训练，在预测时网络中的神经元没有丢弃吗？</p><p>是的，dropout其实是正则项，正则项唯一的作用是你在训练模型的时候，让你的模型复杂度变低一点，当你在做推理的时候你不会更新你的模型，这就是为什么在预测的时候不用dropout。</p><p>4.丢弃法是每次迭代一次，随机丢弃一次吗？</p><p>每一个层在调用前项运算的时候，随机丢一次，假如你3个隐藏层就是套3个dropout</p><p>5.dropout会不会让训练的loss曲线方差变大，不够平滑？</p><p>李沐说不care这件事情，没有具体去看过</p><p>6.在解决过拟合问题上，dropout和regularization的主要区别是什么？</p><p>可以认为dropout就是正则regularization</p><p>7.dropout层丢弃的是前一层还是后一层？</p><p>丢弃前一层的输出，后一层的输入</p><p>8.dropout和权重衰减都属于正则，为何dropout效果更好更常用呢？</p><p>dropout其实没有权重衰减常用，dropout是在全连接层使用，权重衰减对于卷积层啊之后的transformer都可以用。至于为什么效果更好，其实是dropout更好调参一点，权重衰减的weight没那么好调。</p><p>9.在同样的学习率lr上，dropout的介入会不会造成参数手链更慢，需要比没有dropout的情况下适当调大lr？</p><p>lr主要是对期望和方差敏感一点，dropout不改变期望，没有说dropout的情况下一定要调大lr，但你也可以试试。但会收敛变慢是可能的，等于是说你每次你更小的数量在更新梯度</p>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac电脑重新启动后hexo d需要输入密码</title>
    <link href="/2022/08/11/Mac%E7%94%B5%E8%84%91%E9%87%8D%E6%96%B0%E5%90%AF%E5%8A%A8%E5%90%8Ehexo-d%E9%9C%80%E8%A6%81%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81/"/>
    <url>/2022/08/11/Mac%E7%94%B5%E8%84%91%E9%87%8D%E6%96%B0%E5%90%AF%E5%8A%A8%E5%90%8Ehexo-d%E9%9C%80%E8%A6%81%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在一次我Mac电脑重启后，hexo部署文章时，需要手动输入密码</p><p>在确认ssh密钥已经配置后，开始网上搜索Mac重启后密钥失效问题。</p><h3 id="ssh密钥确认"><a href="#ssh密钥确认" class="headerlink" title="ssh密钥确认"></a>ssh密钥确认</h3><p>&#x2F;Users&#x2F;tingyu&#x2F;.ssh 目录下存在id_rsa和id_rsa.pub两个文件</p><p>![](<a href="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img%E6%88%AA%E5%B1%8F2022-08-11">https://raw.githubusercontent.com/YUTING0907/PicGo/main/img截屏2022-08-11</a> 下午11.16.32.png)</p><p>再去查看github的settings-》SSH and GPG keys也已经配置过</p><p>但是在执行<code>hexo d</code>命令的时候,仍然要求输入密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">(base) tingyu@TINGdeMacBook-Pro blog % hexo d<br>INFO  Validating config<br>WARN  Deprecated config detected: &quot;external_link&quot; with a Boolean value is deprecated. See https://hexo.io/docs/configuration for more details.<br>INFO  Deploying: git<br>INFO  Clearing .deploy_git folder...<br>INFO  Copying files from public folder...<br>INFO  Copying files from extend dirs...<br>On branch master<br>nothing to commit, working tree clean<br>Enter passphrase for key &#x27;/Users/tingyu/.ssh/id_rsa&#x27;: <br></code></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>为了不必在重新启动后填写密码，请将以下内容添加到ssh配置文件中(通常位于<del>&#x2F;.ssh&#x2F;config)，即在</del>&#x2F;.ssh&#x2F;目录下新建config文件，写入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host *<br>  UseKeychain <span class="hljs-built_in">yes</span><br>  AddKeysToAgent <span class="hljs-built_in">yes</span><br>  IdentityFile ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure><p>之后密码会在重启Mac后被记住！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">(base) tingyu@TINGdeMacBook-Pro blog % hexo d<br>INFO  Validating config<br>WARN  Deprecated config detected: &quot;external_link&quot; with a Boolean value is deprecated. See https://hexo.io/docs/configuration for more details.<br>INFO  Deploying: git<br>INFO  Clearing .deploy_git folder...<br>INFO  Copying files from public folder...<br>INFO  Copying files from extend dirs...<br>On branch master<br>nothing to commit, working tree clean<br>Branch &#x27;master&#x27; set up to track remote branch &#x27;master&#x27; from &#x27;git@github.com:YUTING0907/YUTING0907.github.io.git&#x27;.<br>Everything up-to-date<br>INFO  Deploy done: git<br></code></pre></td></tr></table></figure><p>参考：<a href="https://www.codenong.com/21095054/">https://www.codenong.com/21095054/</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Doris性能优化实战技巧</title>
    <link href="/2022/08/10/Doris%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/08/10/Doris%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="为什么选择Doris"><a href="#为什么选择Doris" class="headerlink" title="为什么选择Doris"></a>为什么选择Doris</h3><p>1.开源 Doris 和 Clickhouse 之间的优势和劣势是什么？</p><p>Doris 是 MPP 架构的数据库，这点是和 Clickhouse 从架构上有本质的不同。Doris 在 多表 Join 和分布式管理上更有优势，Clickhouse 单机性能突出。不过我们的向量化引擎也马上就能和大家见面了，性能上可以期待一下。</p><p>2.Doris 入门门槛高吗？超过多大的数据量比较合适使用 Doris ？哪些场景下特别适合doris数据库的发挥优势？哪些场景下 Doris 的性能不好？</p><p>Doris 入门门槛不高，G-TB的数据量都适合使用。Doris 因为没有其他依赖，所以运维会方便一些。场景方面，当然是面向分析的 OLAP 场景。OLTP 场景，比如 qps 上万的点查这类以及频繁的 update&#x2F;delete的场景并不适合 Doris。</p><p>3.您好，想要咨询一下关于物联网时序数据这种场景下是否适合？</p><p>之前也有社区用户使用 Doris 应用在时序场景的，主要瓶颈在写入频率，不建议特别高频的写入。</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>4.对于聚合模型， MODIFY COLUMN 某一个已经存在的列, 从类型 BIGINT 变更为 VARCHAR , 该表按每天分区,每天数据量 1亿+，发现该表这一列历史数据过多，一直处于 SCHEMA_CHANGE【 state is not NORMAL】 状态 （大概5小时），导致后续其他的增加列，增加动态分区都不断失败重试,直到表恢复 NORMAL 状态才成功。这种情况有什么建议吗？</p><p>同一时间单个表只能做一个 schema change 操作。所以做第一个 schema change 的时候后面增加列和增加分区的操作都被禁止了。schema change 的时间过长主要原因是表数据量大导致的。对于这种大表的表结构变更最好是等到业务不太忙的时候，比如半夜。再者，如果需要多次 schema change 建议合并为一次。</p><p>5.Doris 现在是否支持修改列的名称？</p><p>因为一些历史原因，目前列名称是直接写入到数据文件中的。Doris 在查询时，也是通过类名查找到对应的列的。所以修改列名不仅是简单的元数据修改，还会涉及到数据的重写，是一个非常重的操作。后续可能通过一些兼容手段来支持轻量化的列名修改操作。</p><p>6.通过 Broker Load 导入数据时，总偶然碰到查询超时，而且这个问题是必现，我怎么定位问题？</p><p>导入过程中的查询超时，建议先看监控，grafana 上的数据。比如是否导入占用了过多的 IO或者 cpu 等，导致了相互影响，再逐步根据 pprof + 代码分析。</p><p>7.Doris 集群 不定期的出现某个 BE 节点直接挂掉的情况，每次挂掉的 BE 节点并不一样。查看监控看机器 Load 比较高（主要是磁盘IO write高）怎么排查这个问题，怎么知道这台机器上在做什么，有什么命令可以知道。</p><p>BE 挂掉最常见的两种情况：</p><p>第一：oom 被系统 Kill，通过 dmesg 方式排查，并且结合使用方式确定 导入还是查询导致的内存使用量过大，需要优化使用方式。</p><p>第二：be core 了，通过 core dump 方式找到 core 栈，core 栈就可以看到是哪部分行为导致的 BE 挂掉。并且在 Issue 里面搜索，看是否是 Doris 旧版本已知问题。每次不一样节点，那就要逐个分析，可能虽然节点不一样但原因都一样。</p><h3 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h3><p>8.在 Apache Doris 中，如果表按天分区，每天大约 2000 至 3000 万数据量，通常按照业务字段查询最近 30 天的明细信息。如何设计能支持更多的并发查询呢？</p><p>如果是明细查询，建议利用<strong>前缀索引、分桶分区裁剪以及 Bitmap 索引</strong>这类的优化策略。</p><p>9.如果是 Uniq 数据模型，在查询的过程中存在对数据的 update 操作，那么对查询会有哪些影响呢？</p><p>update 操作可以，如果 update 的操作频率和导入占比很小，就不会对查询有影响。</p><p>10.请教下 Doris 集群规模为 6个 BE节点，在聚合模型下用天 Date做时间分区、每天数据近2亿行，发现 select max(date) 性能不佳（接近10秒），看了下执行计划发现全表扫描了，这样设计的主要考虑是什么呢？</p><p>确实，如果对 Range 分区字段求 Max 或者 Min 等，逻辑上可以只读最大分区数据。Doris 没对这种特殊场景做优化，所以是全表扫描。需要增加 Where 条件从而匹配到分区分桶裁剪，才能减少数据量。比如这样写 select max(date) from table where date &gt;xxx。分区字段和索引字段需要出现在 Where 条件中效果最好。</p><p>11.关于性能优化这方面，与数据类型是否有什么关联，各种数据源中的表联合查询的时候，对于复杂类型的性能优化是从哪方面着手的？</p><p>和数据类型关系还是很大的。比如 Int 类型的性能就会比 String 要好。复杂类型的性能优化我举个 Bitmap 的例子。Bitmap 的聚合函数在 Bitmap 分布相对稠密情况下，会比稀疏的要性能高不少。</p><p>12.请问高吞吐量的即席查询实时性如何，比如1张1亿条数据的表，查出200万条数据，大约需要多少毫秒?</p><p>这个差异可能会非常大，需要结合建表语句、查询 SQL 、机器配置、集群规模等多方面因素综合来看。在 Doris 官网上基于 Star-Schema-Benchmark 标准测试数据集做过性能测试，可以参考一下 <a href="https://doris.apache.org/zh-CN/benchmark/star-schema-benchmark.html#">https://doris.apache.org/zh-CN/benchmark/star-schema-benchmark.html#</a></p><p>13.接口性能优化都有哪些好的方案？</p><p>首先要看你的情况是提升 QPS 还是提升单个慢查询。</p><p>先说慢查询：</p><p>第一，打开 Profile 观察慢查询主要的性能瓶</p><p>第二，梳理 Doris 的常见优化，比如 Join Reorder 、Runtime Filter、谓词下推等等需要手动开启的优化策略，并观察作用。</p><p>第三，从数据模型入手，比如是否存在数据版本过多、数据模型和列类型设计不合理等等问题。</p><p>14.请教一下分桶的优化技巧？</p><p>数据分桶主要是为了分桶裁剪，并且避免数据倾斜。所以首先，最好选用像 id，uuid 这种不容易产生数据倾斜，且分散广的列作为分桶列。同时可以选择查询的 Where 条件列作为分桶列，来更好的减少读取的数据量，提升查询性能。</p>]]></content>
    
    
    <categories>
      
      <category>Doris</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Doris</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>deep_learning_5.过拟合-权重衰减法</title>
    <link href="/2022/08/07/deep-learning-5-%E8%BF%87%E6%8B%9F%E5%90%88-%E6%9D%83%E9%87%8D%E8%A1%B0%E5%87%8F%E6%B3%95/"/>
    <url>/2022/08/07/deep-learning-5-%E8%BF%87%E6%8B%9F%E5%90%88-%E6%9D%83%E9%87%8D%E8%A1%B0%E5%87%8F%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>出现过拟合的现象，是数据集的大小不能够支撑现有的模型。除了收集更多的数据外（大多数情况耗时短期内不可能做到），可以引入正则化来处理过拟合的问题。</p><h2 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h2><p>正则化一般分为两种，一种是L1范数，一种是L2范数。L2正则化线性模型构成经典的<em>岭回归</em>（ridge regression）算法， L1正则化线性回归是统计学中类似的基本模型， 通常被称为<em>套索回归</em>（lasso regression）。 </p><p><strong>为什么我们首先使用L2范数，而不是L1范数？</strong></p><p>使用L2范数的一个原因是它对权重向量的大分量施加了巨大的惩罚。 这使得我们的学习算法偏向于在大量特征上均匀分布权重的模型。 在实践中，这可能使它们对单个变量中的观测误差更为稳定。 相比之下，L1惩罚会导致模型将权重集中在一小部分特征上， 而将其他权重清除为零。 这称为<em>特征选择</em>（feature selection），这可能是其他场景下需要的。</p><p> L2正则化回归的小批量随机梯度下降更新如下式：</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220807163459.png"></p><p>我们根据估计值与观测值之间的差异来更新w。 </p><p>然而，我们同时也在试图将w的大小缩小到零。 这就是为什么这种方法有时被称为<em>权重衰减</em>。 我们仅考虑惩罚项，优化算法在训练的每一步<em>衰减</em>权重。 与特征选择相比，权重衰减为我们提供了一种连续的机制来调整函数的复杂度。 较小的λ值对应较少约束的w， 而较大的λ值对w的约束更大。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>下面将从头开始实现权重衰减，只需将L2的平方惩罚添加到原始目标函数中。</p><h3 id="1-初始化模型参数"><a href="#1-初始化模型参数" class="headerlink" title="1. 初始化模型参数"></a>1. 初始化模型参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_params</span>():<br>    w = torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, size=(num_inputs, <span class="hljs-number">1</span>), requires_grad=<span class="hljs-literal">True</span>)<br>    b = torch.zeros(<span class="hljs-number">1</span>, requires_grad=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> [w, b]<br></code></pre></td></tr></table></figure><h3 id="2-定义L2范数惩罚"><a href="#2-定义L2范数惩罚" class="headerlink" title="2.定义L2范数惩罚"></a>2.定义L2范数惩罚</h3><p>实现这一惩罚最方便的方法是对所有项求平方后并将它们求和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">l2_penalty</span>(<span class="hljs-params">w</span>):<br>    <span class="hljs-keyword">return</span> torch.<span class="hljs-built_in">sum</span>(w.<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>)) / <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="3-定义训练代码实现"><a href="#3-定义训练代码实现" class="headerlink" title="3.定义训练代码实现"></a>3.定义训练代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">lambd</span>):<br>    w, b = init_params()<br>    net, loss = <span class="hljs-keyword">lambda</span> X: d2l.linreg(X, w, b), d2l.squared_loss<br>    num_epochs, lr = <span class="hljs-number">100</span>, <span class="hljs-number">0.003</span><br>    animator = d2l.Animator(xlabel=<span class="hljs-string">&#x27;epochs&#x27;</span>, ylabel=<span class="hljs-string">&#x27;loss&#x27;</span>, yscale=<span class="hljs-string">&#x27;log&#x27;</span>,<br>                            xlim=[<span class="hljs-number">5</span>, num_epochs], legend=[<span class="hljs-string">&#x27;train&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>])<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>        <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> train_iter:<br>            <span class="hljs-comment"># 增加了L2范数惩罚项，</span><br>            <span class="hljs-comment"># 广播机制使l2_penalty(w)成为一个长度为batch_size的向量</span><br>            l = loss(net(X), y) + lambd * l2_penalty(w)<br>            l.<span class="hljs-built_in">sum</span>().backward()<br>            d2l.sgd([w, b], lr, batch_size)<br>        <span class="hljs-keyword">if</span> (epoch + <span class="hljs-number">1</span>) % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>:<br>            animator.add(epoch + <span class="hljs-number">1</span>, (d2l.evaluate_loss(net, train_iter, loss),<br>                                     d2l.evaluate_loss(net, test_iter, loss)))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;w的L2范数是：&#x27;</span>, torch.norm(w).item())<br></code></pre></td></tr></table></figure><h3 id="4-忽略正则化直接训练"><a href="#4-忽略正则化直接训练" class="headerlink" title="4.忽略正则化直接训练"></a>4.忽略正则化直接训练</h3><p>我们现在用<code>lambd = 0</code>禁用权重衰减后运行这个代码。 注意，这里训练误差有了减少，但测试误差没有减少， 这意味着出现了严重的过拟合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">train(lambd=<span class="hljs-number">0</span>)<br>w的L2范数： <span class="hljs-number">13.860143661499023</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220807171557.png"></p><h3 id="5-使用权重衰减"><a href="#5-使用权重衰减" class="headerlink" title="5.使用权重衰减"></a>5.使用权重衰减</h3><p>下面，我们使用权重衰减来运行代码。 注意，在这里训练误差增大，但测试误差减小。 这正是我们期望从正则化中得到的效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">train(lambd=<span class="hljs-number">3</span>)<br>w的L2范数： <span class="hljs-number">0.490328311920166</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220807171625.png"></p><h3 id="简洁实现"><a href="#简洁实现" class="headerlink" title="简洁实现"></a>简洁实现</h3><p>在下面的代码中，我们在实例化优化器时直接通过<code>weight_decay</code>指定weight decay超参数。 默认情况下，PyTorch同时衰减权重和偏移。 这里我们只为权重设置了<code>weight_decay</code>，所以偏置参数b不会衰减。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_concise</span>(<span class="hljs-params">wd</span>):<br>    net = nn.Sequential(nn.Linear(num_inputs, <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> net.parameters():<br>        param.data.normal_()<br>    loss = nn.MSELoss(reduction=<span class="hljs-string">&#x27;none&#x27;</span>)<br>    num_epochs, lr = <span class="hljs-number">100</span>, <span class="hljs-number">0.003</span><br>    <span class="hljs-comment"># 偏置参数没有衰减</span><br>    trainer = torch.optim.SGD([<br>        &#123;<span class="hljs-string">&quot;params&quot;</span>:net[<span class="hljs-number">0</span>].weight,<span class="hljs-string">&#x27;weight_decay&#x27;</span>: wd&#125;,<br>        &#123;<span class="hljs-string">&quot;params&quot;</span>:net[<span class="hljs-number">0</span>].bias&#125;], lr=lr)<br>    animator = d2l.Animator(xlabel=<span class="hljs-string">&#x27;epochs&#x27;</span>, ylabel=<span class="hljs-string">&#x27;loss&#x27;</span>, yscale=<span class="hljs-string">&#x27;log&#x27;</span>,<br>                            xlim=[<span class="hljs-number">5</span>, num_epochs], legend=[<span class="hljs-string">&#x27;train&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>])<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>        <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> train_iter:<br>            trainer.zero_grad()<br>            l = loss(net(X), y)<br>            l.mean().backward()<br>            trainer.step()<br>        <span class="hljs-keyword">if</span> (epoch + <span class="hljs-number">1</span>) % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>:<br>            animator.add(epoch + <span class="hljs-number">1</span>,<br>                         (d2l.evaluate_loss(net, train_iter, loss),<br>                          d2l.evaluate_loss(net, test_iter, loss)))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;w的L2范数：&#x27;</span>, net[<span class="hljs-number">0</span>].weight.norm().item())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">train_concise(<span class="hljs-number">0</span>)<br>w的L2范数： <span class="hljs-number">14.026016235351562</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220807171933.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">train_concise(<span class="hljs-number">3</span>)<br>w的L2范数： <span class="hljs-number">0.7186794877052307</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220807172016.png"></p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><ol><li>为什么可以通过使用均方范数作为硬性限制来降低模型复杂度(模型容量)？或者说限制参数值(w,b)的选择范围来控制模型容量？</li></ol><p>简单来说就是一个多项式中的高次项的系数变小了，函数也就变平滑了。限制参数值是为了让模型的训练过程中从那些平滑的曲线中去选，而不是波动特别大的曲线</p><ol start="2"><li>实践中权重衰退的值一般设置多少为好呢？之前在跑代码的时候总感觉权重衰退的效果并不是那么好？</li></ol><p>一般是取0.01,0.001,0.0001,权重衰退有效果但不要太指望，如果你的模型真的特别复杂，权重衰退是不会给你带来很好的效果，需要换别的方法。</p><ol start="3"><li>为什么要把w往小的拉？如果最优解的W就是比较大的数，那权重衰减是不是会有反作用？</li></ol><p>假设是存在真正的最优解，但实际你是学不到这个最优解的，数据有噪声，模型会尝试去记住所有的数据，合适的λ(w前面乘的值)可以把曲线拉到合适地方，不是说越小越好</p><ol start="4"><li>λ作为超参数是怎么调优的？</li></ol><p>看验证集和训练集的loss值的差别，上节讲到的k-fold可以帮助调超参数</p>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>deep_learning_4.模型选择&amp;欠拟合和过拟合</title>
    <link href="/2022/08/06/deep-learning-4-%E6%A8%A1%E5%9E%8B%E9%80%89%E6%8B%A9-%E6%AC%A0%E6%8B%9F%E5%90%88%E5%92%8C%E8%BF%87%E6%8B%9F%E5%90%88/"/>
    <url>/2022/08/06/deep-learning-4-%E6%A8%A1%E5%9E%8B%E9%80%89%E6%8B%A9-%E6%AC%A0%E6%8B%9F%E5%90%88%E5%92%8C%E8%BF%87%E6%8B%9F%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h2 id="模型选择"><a href="#模型选择" class="headerlink" title="模型选择"></a>模型选择</h2><p>在机器学习中，我们通常在评估几个候选模型后选择最终的模型。 这个过程叫做<em>模型选择</em>。 有时，需要进行比较的模型在本质上是完全不同的（比如，决策树与线性模型）。</p><p> 又有时，我们需要<strong>比较不同的超参数</strong>设置下的同一类模型。</p><p>例如，训练多层感知机模型时，我们可能希望比较具有 不同数量的隐藏层、不同数量的隐藏单元以及不同的激活函数组合的模型。 为了确定候选模型中的最佳模型，我们通常会使用验证集。</p><h3 id="验证集"><a href="#验证集" class="headerlink" title="验证集"></a>验证集</h3><p>原则上，在我们确定所有的超参数之前，我们不希望用到测试集。 如果我们在模型选择过程中使用测试数据，可能会有过拟合测试数据的风险</p><p>因此，我们决不能依靠测试数据进行模型选择。 然而，我们也不能仅仅依靠训练数据来选择模型，因为我们无法估计训练数据的泛化误差。</p><p>虽然理想情况下我们只会使用测试数据一次， 以评估最好的模型或比较一些模型效果，但现实是测试数据很少在使用一次后被丢弃。 我们很少能有充足的数据来对每一轮实验采用全新测试集。</p><p>解决此问题的常见做法是将我们的数据分成三份， 除了<strong>训练和测试数据集</strong>之外，还增加一个<strong>验证数据集</strong>（validation dataset）， 也叫<em>验证集</em>（validation set）。</p><p> 但现实是验证数据和测试数据之间的边界模糊得令人担忧。 </p><h3 id="K-折交叉验证"><a href="#K-折交叉验证" class="headerlink" title="K 折交叉验证"></a>K 折交叉验证</h3><p>当训练数据稀缺时，我们甚至可能无法提供足够的数据来构成一个合适的验证集。 这个问题的一个流行的解决方案是采用K<em>折交叉验证</em>。 这里，原始训练数据被分成K个不重叠的子集。 然后执行K次模型训练和验证，每次在K−1个子集上进行训练， 并在剩余的一个子集（在该轮中没有用于训练的子集）上进行验证。 最后，通过对K次实验的结果取平均来估计训练和验证误差。</p><h2 id="欠拟合和过拟合"><a href="#欠拟合和过拟合" class="headerlink" title="欠拟合和过拟合"></a>欠拟合和过拟合</h2><p>当我们比较训练和验证误差时，我们要注意两种常见的情况。</p><p> 首先，当训练误差和验证误差都很严重， 且它们之间仅有一点差距。 如果模型不能降低训练误差，这可能意味着模型过于简单（即表达能力不足）， 无法捕获试图学习的模式。 此外，由于我们的训练和验证误差之间的<em>泛化误差</em>很小， 我们有理由相信可以用一个更复杂的模型降低训练误差。 这种现象被称为<em>欠拟合</em>（underfitting）。</p><p>另一方面，当我们的训练误差明显低于验证误差时要小心， 这表明严重的<em>过拟合</em>（overfitting）。 注意，<em>过拟合</em>并不总是一件坏事。 特别是在深度学习领域，众所周知， 最好的预测模型在训练数据上的表现往往比在保留（验证）数据上好得多。 最终，我们通常更关心验证误差，而不是训练误差和验证误差之间的差距。</p><p>对于模型的欠拟合和过拟合有两个重要的影响因素：<strong>第一，模型复杂度，第二，数据集大小</strong></p><ul><li><p>当数据集大小不变时，模型越复杂过拟合程度就会越高，也就是在训练集上的误差小，在测试集上的误差相差较大</p></li><li><p>另一个重要因素是数据集的大小。 训练数据集中的样本越少，我们就越有可能（且更严重地）过拟合。 随着训练数据量的增加，泛化误差通常会减小。 此外，一般来说，更多的数据不会有什么坏处。</p></li></ul><p>对于固定的任务和数据分布，模型复杂性和数据集大小之间通常存在关系。 给出更多的数据，我们可能会尝试拟合一个更复杂的模型。 能够拟合更复杂的模型可能是有益的。 如果没有足够的数据，简单的模型可能更有用。 </p><p>对于许多任务，深度学习只有在有数千个训练样本时才优于线性模型。 从一定程度上来说，深度学习目前的生机要归功于 廉价存储、互联设备以及数字化经济带来的海量数据集。</p><h3 id="欠拟合过拟合实验"><a href="#欠拟合过拟合实验" class="headerlink" title="欠拟合过拟合实验"></a>欠拟合过拟合实验</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br>!pip install d2l<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">max_degree = <span class="hljs-number">20</span> <span class="hljs-comment"># 多项式的最大阶数</span><br>n_train,n_test = <span class="hljs-number">100</span>, <span class="hljs-number">100</span> <span class="hljs-comment"># 训练和测试数据集的大小</span><br>true_w = np.zeros(max_degree)<br>true_w[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>] = np.array([<span class="hljs-number">5</span>,<span class="hljs-number">1.2</span>,-<span class="hljs-number">3.4</span>,<span class="hljs-number">5.6</span>])<br><br>features = np.random.normal(size=(n_train+n_test,<span class="hljs-number">1</span>))<br>np.random.shuffle(features)<br>poly_features = np.power(features,np.arange(max_degree).reshape(<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(max_degree):<br>  poly_features[:,i] /= math.gamma(i+<span class="hljs-number">1</span>) <span class="hljs-comment"># gamma(n) = (n-1)!</span><br><br>labels = np.dot(poly_features,true_w)<br>labels += np.random.normal(scale=<span class="hljs-number">0.1</span>,size=labels.shape)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">true_w,features,poly_features,labels = [torch.tensor(x,dtype=torch.float32) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [true_w,features,poly_features,labels]]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">features[:<span class="hljs-number">2</span>],poly_features[:<span class="hljs-number">2</span>,:],labels[:<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate_loss</span>(<span class="hljs-params">net,data_iter,loss</span>):<br>  metirc = d2l.Accumulator(<span class="hljs-number">2</span>)<br>  <span class="hljs-keyword">for</span> X,y <span class="hljs-keyword">in</span> data_iter:<br>    out = net(X)<br>    y = y.reshape(out.shape)<br>    l = loss(out,y)<br>    metirc.add(l.<span class="hljs-built_in">sum</span>(),l.numel())<br>  <span class="hljs-keyword">return</span> metirc[<span class="hljs-number">0</span>] / metirc[<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">train_features, test_features, train_labels, test_labels,</span><br><span class="hljs-params">          num_epochs=<span class="hljs-number">400</span></span>):<br>    loss = nn.MSELoss(reduction=<span class="hljs-string">&#x27;none&#x27;</span>)<br>    input_shape = train_features.shape[-<span class="hljs-number">1</span>]<br>    <span class="hljs-comment"># 不设置偏置，因为我们已经在多项式中实现了它</span><br>    net = nn.Sequential(nn.Linear(input_shape, <span class="hljs-number">1</span>, bias=<span class="hljs-literal">False</span>))<br>    batch_size = <span class="hljs-built_in">min</span>(<span class="hljs-number">10</span>, train_labels.shape[<span class="hljs-number">0</span>])<br>    train_iter = d2l.load_array((train_features, train_labels.reshape(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)),<br>                                batch_size)<br>    test_iter = d2l.load_array((test_features, test_labels.reshape(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)),<br>                               batch_size, is_train=<span class="hljs-literal">False</span>)<br>    trainer = torch.optim.SGD(net.parameters(), lr=<span class="hljs-number">0.01</span>)<br>    animator = d2l.Animator(xlabel=<span class="hljs-string">&#x27;epoch&#x27;</span>, ylabel=<span class="hljs-string">&#x27;loss&#x27;</span>, yscale=<span class="hljs-string">&#x27;log&#x27;</span>,<br>                            xlim=[<span class="hljs-number">1</span>, num_epochs], ylim=[<span class="hljs-number">1e-3</span>, <span class="hljs-number">1e2</span>],<br>                            legend=[<span class="hljs-string">&#x27;train&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>])<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>        d2l.train_epoch_ch3(net, train_iter, loss, trainer)<br>        <span class="hljs-keyword">if</span> epoch == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> (epoch + <span class="hljs-number">1</span>) % <span class="hljs-number">20</span> == <span class="hljs-number">0</span>:<br>            animator.add(epoch + <span class="hljs-number">1</span>, (evaluate_loss(net, train_iter, loss),<br>                                     evaluate_loss(net, test_iter, loss)))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;weight:&#x27;</span>, net[<span class="hljs-number">0</span>].weight.data.numpy())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># matplotlib版本过高，会导致下面画图报错，故而降低版本</span><br>! pip uninstall matplotlib<br>! pip install matplotlib==<span class="hljs-number">3.0</span><span class="hljs-number">.0</span><br><br></code></pre></td></tr></table></figure><h3 id="三阶多项式函数拟合-正常"><a href="#三阶多项式函数拟合-正常" class="headerlink" title="三阶多项式函数拟合(正常)"></a>三阶多项式函数拟合(正常)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 从多项式特征中选择前4个维度，即1,x,x^2/2!,x^3/3!</span><br>train(poly_features[:n_train, :<span class="hljs-number">4</span>], poly_features[n_train:, :<span class="hljs-number">4</span>],<br>      labels[:n_train], labels[n_train:])<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220806211046.png"></p><h3 id="线性函数拟合-欠拟合"><a href="#线性函数拟合-欠拟合" class="headerlink" title="线性函数拟合(欠拟合)"></a>线性函数拟合(欠拟合)</h3><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220806211133.png"></p><h3 id="高阶多项式函数拟合-过拟合"><a href="#高阶多项式函数拟合-过拟合" class="headerlink" title="高阶多项式函数拟合(过拟合)"></a>高阶多项式函数拟合(过拟合)</h3><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220806211216.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>欠拟合是指模型无法继续减少训练误差。过拟合是指训练误差远小于验证误差。</li><li>由于不能基于训练误差来估计泛化误差，因此简单地最小化训练误差并不一定意味着泛化误差的减小。机器学习模型需要注意防止过拟合，即防止泛化误差过大。</li><li>我们应该选择一个复杂度适当的模型，避免使用数量不足的训练样本。</li></ul><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><ol><li>k则交叉验证中的k怎么确定？</li></ol><p>k在能承受的计算成本里面，k越大越好</p><ol start="2"><li>模型参数和超参数不一样吗？</li></ol><p>模型参数是这w和b，超参数是指学习率，如果是多层感知机选择多少层</p><ol start="3"><li>类别不平衡怎么办？</li></ol><p>可以把验证数据集平衡一下，或者可以加权重</p><ol start="4"><li>k折交叉验证的目的是确定超参数吗？然后还要用这个超参数再训练一遍全数据吗？</li></ol><p>最常见的做法是k折验证之后确定超参数，整个数据集上再全部训练一次</p><p>第二个做法是，不再训练了，就在k折中找出训练最好的那一折模型拿出来</p><p>第三种做法是，验证的k个模型全部拿出来，测试数据集对k个模型每一个都测一次，然后把预测结果取均值。坏处是代价变成k倍了，之前只用过一遍，现在要过k遍了，但好处是说模型稳定性更好了，因为你做了一个voting。</p><ol start="5"><li>为什么svm打败了多层感知机，后来深度学习cnn又打败了svm呢？</li></ol><p>学术界其实就是赶时髦，svm打败了多层感知机是因为不那么要调参，并且有数学理论，有人推就火了。深度学习打败svm是实际效果很好，精度高了很多。其实也不要纠结这个事情，学术界这个东西可能今天火了的东西，明天又不火了。一波又一波的</p><ol start="6"><li>如果训练是不平衡的，是否先考虑测试集是否也是不平衡的，再去决定是否使用一个平衡的验证集？</li></ol><p>首先要考虑真实的世界中，是不是一类就是百分之九十，剩下的一类就是百分之十。如果是因为采样的原因，你就应该吧小的那个百分之十的权重提升</p>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>deep_learning_3.多层感知机的从零实现</title>
    <link href="/2022/07/31/deep-learning-3-%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA%E7%9A%84%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/07/31/deep-learning-3-%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA%E7%9A%84%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>单层感知机模型</strong>，给定输入x，权重w，和偏移b，感知机输出：</p><p>o &#x3D; O(&lt;w,x&gt; + b )   O(i) &#x3D; {1, if x&gt;0; -1 otherwise}</p><p>感知机模型为二分类：-1或1</p><ul><li>vs 回归 输出实数</li><li>vs Softmax回归 输出概率</li></ul><p>单层感知机不能划分XOR数据（亦或），对于这一点，我们可以使用多层感知机模型。我们可以通过在网络中加入一个或多个隐藏层来克服线性模型的限制， 使其能处理更普遍的函数关系类型。 要做到这一点，最简单的方法是将许多全连接层堆叠在一起。 每一层都输出到上面的层，直到生成最后的输出。 我们可以把前L−1层看作表示，把最后一层看作线性预测器。 </p><p>这种架构通常称为<em>多层感知机</em>（multilayer perceptron），通常缩写为<em>MLP</em>。</p><p><strong>多层感知机模型</strong></p><p>   <strong>h1</strong> &#x3D; O(<strong>W1*x</strong> + <strong>b1</strong>)</p><p>   <strong>h2</strong> &#x3D; O(<strong>W2*h1</strong> + <strong>b2</strong>)</p><p>   <strong>h3</strong> &#x3D; O(<strong>W3*h2</strong> + <strong>b3</strong>)</p><p>  <strong>o</strong> &#x3D; <strong>W4*h3</strong> + <strong>b4</strong></p><p>最后一层不需要激活函数，激活函数主要是用来避免层数的塌陷。</p><p><strong>常用的激活函数：</strong></p><ul><li>ReLU函数，ReLU提供了一种非常简单的非线性变换。</li></ul><p>ReLU(x) &#x3D; max(x,0)</p><ul><li>sigmoid函数,<em>sigmoid函数</em>将输入变换为区间(0, 1)上的输出</li></ul><p>Sigmoid(x) &#x3D; $\frac{1}{1+exp(-x)}$</p><ul><li>tanh函数</li></ul><p>tanh(x) &#x3D; $\frac{1-exp(-2x)}{1+exp(-2x)}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br>batch_size = <span class="hljs-number">256</span><br>train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)<br></code></pre></td></tr></table></figure><h2 id="多层感知机从零实现"><a href="#多层感知机从零实现" class="headerlink" title="多层感知机从零实现"></a>多层感知机从零实现</h2><h3 id="1-初始化模型参数"><a href="#1-初始化模型参数" class="headerlink" title="1.初始化模型参数"></a>1.初始化模型参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">num_inputs, num_outputs, num_hiddens = <span class="hljs-number">784</span>, <span class="hljs-number">10</span>, <span class="hljs-number">256</span><br><br>W1 = nn.Parameter(torch.randn(<br>    num_inputs, num_hiddens, requires_grad=<span class="hljs-literal">True</span>) * <span class="hljs-number">0.01</span>)<br>b1 = nn.Parameter(torch.zeros(num_hiddens, requires_grad=<span class="hljs-literal">True</span>))<br>W2 = nn.Parameter(torch.randn(<br>    num_hiddens, num_outputs, requires_grad=<span class="hljs-literal">True</span>) * <span class="hljs-number">0.01</span>)<br>b2 = nn.Parameter(torch.zeros(num_outputs, requires_grad=<span class="hljs-literal">True</span>))<br><br>params = [W1, b1, W2, b2]<br></code></pre></td></tr></table></figure><h3 id="2-激活函数"><a href="#2-激活函数" class="headerlink" title="2.激活函数"></a>2.激活函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">relu</span>(<span class="hljs-params">X</span>):<br>    a = torch.zeros_like(X)<br>    <span class="hljs-keyword">return</span> torch.<span class="hljs-built_in">max</span>(X, a)<br></code></pre></td></tr></table></figure><h3 id="3-模型"><a href="#3-模型" class="headerlink" title="3.模型"></a>3.模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">net</span>(<span class="hljs-params">X</span>):<br>    X = X.reshape((-<span class="hljs-number">1</span>, num_inputs))<br>    H = relu(X@W1 + b1)  <span class="hljs-comment"># 这里“@”代表矩阵乘法</span><br>    <span class="hljs-keyword">return</span> (H@W2 + b2)<br></code></pre></td></tr></table></figure><h3 id="4-损失函数"><a href="#4-损失函数" class="headerlink" title="4.损失函数"></a>4.损失函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">loss = nn.CrossEntropyLoss(reduction=<span class="hljs-string">&#x27;none&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="5-训练"><a href="#5-训练" class="headerlink" title="5.训练"></a>5.训练</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">num_epochs, lr = <span class="hljs-number">10</span>, <span class="hljs-number">0.1</span><br>updater = torch.optim.SGD(params, lr=lr)<br>d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, updater)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220806114407.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">d2l.predict_ch3(net, test_iter)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220806114524.png"></p><h2 id="多层感知机的简介实现"><a href="#多层感知机的简介实现" class="headerlink" title="多层感知机的简介实现"></a>多层感知机的简介实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">添加了<span class="hljs-number">2</span>个全连接层（之前我们只添加了<span class="hljs-number">1</span>个全连接层）。 第一层是隐藏层，它包含<span class="hljs-number">256</span>个隐藏单元，并使用了ReLU激活函数。 第二层是输出层<br>net = nn.Sequential(nn.Flatten(),<br>                    nn.Linear(<span class="hljs-number">784</span>, <span class="hljs-number">256</span>),<br>                    nn.ReLU(),<br>                    nn.Linear(<span class="hljs-number">256</span>, <span class="hljs-number">10</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_weights</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(m) == nn.Linear:<br>        nn.init.normal_(m.weight, std=<span class="hljs-number">0.01</span>)<br><br>net.apply(init_weights);<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">batch_size, lr, num_epochs = <span class="hljs-number">256</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">10</span><br>loss = nn.CrossEntropyLoss(reduction=<span class="hljs-string">&#x27;none&#x27;</span>)<br>trainer = torch.optim.SGD(net.parameters(), lr=lr)<br><br>train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)<br>d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, trainer)<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>多层感知机使用隐藏层和激活函数来得到非线形模型</p><p>常用的激活函数是Sigmoid，Tanh，ReLU（没有想法的时候，通常用ReLU）</p><p>使用Softmax来处理多类分类</p><p>超参数为隐藏层数，和各个隐藏层大小</p><p>对于设置隐藏层数大小，没有科学的方法解释，只能全凭手感</p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><ol><li>epoch是什么？和batch_size有什么不同？</li></ol><p>一次epoch是指将所有数据训练一次，所有数据迭代一次不够的，实际训练中，要反复多次才能收敛。batch_size则是在一次训练中把所有数据分成几批进行模型的训练，因为模型的训练是把数据加载到内存中处理的，没办法一次性把所有数据加载到内存中处理的</p><ol start="2"><li>隐藏层的层数怎么设置？</li></ol><p>输入维数比较多的时候，比如128维的输入你要把它压缩到10维的空间的话，最好是慢慢的把它压缩，比如先到64，再到32，再到16等，最后到你的输出。</p><p>还有一种做法是，先压缩再扩张再压缩，这样做会避免模型的overfitting</p><ol start="3"><li>神经网络中的一层是包括了线形函数和激活函数的</li><li>SVM替换了多层感知机吗？</li></ol><p>SVM用起来更简单，不用调那么多超参数，有很漂亮的数学解释，在实用性都差不多的情况下，学术界会更倾向于有数学解释的模型</p><ol start="5"><li>请问神经网络要增加隐藏层的层数，而不是神经元的个数？</li></ol><p>增加神经元的个数，学习起来很难，浅显解释就是不能一口吃一个胖子，先学习一点，每一层可以慢慢训练</p><ol start="6"><li>不同任务下的激活函数是不是都不一样？也是通过实验来确认的吗？</li></ol><p>一般都差不多，激活函数远远没有选择隐藏层的大小这些来的重要，可以尽量用ReLU</p><ol start="7"><li>模型深度和宽度哪个更影响性能，怎么根据输入空间选择最优的深度或者宽度？</li></ol><p>没有最优，哪有最优哈哈哈，慢慢尝试，比如说128到2，首先不要隐藏层，第二次加一个隐藏层，比如试下16，32，64，第三次可以再试下加两个隐藏层。这些就是老中医要自己试手感</p>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>deep_learning-2.softmax回归的从零实现</title>
    <link href="/2022/07/30/deep_learning-2.softmax%E5%9B%9E%E5%BD%92%E7%9A%84%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/07/30/deep_learning-2.softmax%E5%9B%9E%E5%BD%92%E7%9A%84%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="softmax回归"><a href="#softmax回归" class="headerlink" title="softmax回归"></a>softmax回归</h2><p>回归可以用于预测<em>多少</em>的问题。 比如预测房屋被售出价格，或者棒球队可能获得的胜场数，又或者患者住院的天数。</p><p>事实上，我们也对<em>分类</em>问题感兴趣：不是问“多少”，而是问“哪一个”：</p><ul><li>某个电子邮件是否属于垃圾邮件文件夹？</li><li>某个用户可能<em>注册</em>或<em>不注册</em>订阅服务？</li><li>某个图像描绘的是驴、狗、猫、还是鸡？</li><li>某人接下来最有可能看哪部电影？</li></ul><p>通常，机器学习实践者用<em>分类</em>这个词来描述两个有微妙差别的问题： 1. 我们只对样本的“硬性”类别感兴趣，即属于哪个类别； 2. 我们希望得到“软性”类别，即得到属于每个类别的概率。 这两者的界限往往很模糊。其中的一个原因是：即使我们只关心硬类别，我们仍然使用软类别的模型。</p><h3 id="分类问题"><a href="#分类问题" class="headerlink" title="分类问题"></a>分类问题</h3><p>我们从一个图像分类问题开始。 假设每次输入是一个2×2的灰度图像。 我们可以用一个标量表示每个像素值，每个图像对应四个特征x1,x2,x3,x4。 此外，假设每个图像属于类别“猫”，“鸡”和“狗”中的一个。</p><p>接下来，我们要选择如何表示标签。 我们有两个明显的选择：最直接的想法是选择y∈{1,2,3}， 其中整数分别代表狗猫鸡{狗,猫,鸡}。 这是在计算机上存储此类信息的有效方法。 如果类别间有一些自然顺序， 比如说我们试图预测婴儿儿童青少年青年人中年人老年人{婴儿,儿童,青少年,青年人,中年人,老年人}， 那么将这个问题转变为回归问题，并且保留这种格式是有意义的。</p><p>但是一般的分类问题并不与类别之间的自然顺序有关。 幸运的是，统计学家很早以前就发明了一种表示分类数据的简单方法：<em>独热编码</em>（one-hot encoding）。 独热编码是一个向量，它的分量和类别一样多。 类别对应的分量设置为1，其他所有分量设置为0。 在我们的例子中，标签y将是一个三维向量， 其中(1,0,0)对应于“猫”、(0,1,0)对应于“鸡”、(0,0,1)对应于“狗”：</p><h3 id="softmax运算"><a href="#softmax运算" class="headerlink" title="softmax运算"></a>softmax运算</h3><p>现在我们将优化参数以最大化观测数据的概率。 为了得到预测结果，我们将设置一个阈值，如选择具有最大概率的标签。</p><p>我们希望模型的输出y^j可以视为属于类j的概率， 然后选择具有最大输出值的类别argmaxjyj作为我们的预测。 例如，如果y^1、y^2和y^3分别为0.1、0.8和0.1， 那么我们预测的类别是2，在我们的例子中代表“鸡”。</p><p>然而我们能否将未规范化的预测o直接视作我们感兴趣的输出呢？ 答案是否定的。 因为将线性层的输出直接视为概率时存在一些问题： 一方面，我们没有限制这些输出数字的总和为1。 另一方面，根据输入的不同，它们可以为负值。</p><p>要将输出视为概率，我们必须保证在任何数据上的输出都是非负的且总和为1。 此外，我们需要一个训练目标，来鼓励模型精准地估计概率。 在分类器输出0.5的所有样本中，我们希望这些样本有一半实际上属于预测的类。 这个属性叫做<em>校准</em>（calibration）。</p><h2 id="Softmax的从零开始实现"><a href="#Softmax的从零开始实现" class="headerlink" title="Softmax的从零开始实现"></a>Softmax的从零开始实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> IPython <span class="hljs-keyword">import</span> display<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br>batch_size = <span class="hljs-number">256</span><br>train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)<br></code></pre></td></tr></table></figure><h3 id="1-初始化模型参数"><a href="#1-初始化模型参数" class="headerlink" title="1.初始化模型参数"></a>1.初始化模型参数</h3><p>和之前线性回归的例子一样，这里的每个样本都将用固定长度的向量表示。 原始数据集中的每个样本都是28×28的图像。 在本节中，我们将展平每个图像，把它们看作长度为784的向量。 在后面的章节中，我们将讨论能够利用图像空间结构的特征， 但现在我们暂时只把每个像素位置看作一个特征。</p><p>回想一下，在softmax回归中，我们的输出与类别一样多。 因为我们的数据集有10个类别，所以网络输出维度为10。 因此，权重将构成一个784×10的矩阵， 偏置将构成一个1×10的行向量。 与线性回归一样，我们将使用正态分布初始化我们的权重<code>W</code>，偏置初始化为0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">num_inputs = <span class="hljs-number">784</span><br>num_outputs = <span class="hljs-number">10</span><br><br>W = torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>, size=(num_inputs, num_outputs), requires_grad=<span class="hljs-literal">True</span>)<br>b = torch.zeros(num_outputs, requires_grad=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h3 id="2-定义softmax操作"><a href="#2-定义softmax操作" class="headerlink" title="2.定义softmax操作"></a>2.定义softmax操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">X = torch.tensor([[<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>], [<span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">6.0</span>]])<br>X.<span class="hljs-built_in">sum</span>(<span class="hljs-number">0</span>, keepdim=<span class="hljs-literal">True</span>), X.<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>回想一下，实现softmax由三个步骤组成：</p><ol><li>对每个项求幂（使用<code>exp</code>）；</li><li>对每一行求和（小批量中每个样本是一行），得到每个样本的规范化常数；</li><li>将每一行除以其规范化常数，确保结果的和为1。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">softmax</span>(<span class="hljs-params">X</span>):<br>    X_exp = torch.exp(X)<br>    partition = X_exp.<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> X_exp / partition  <span class="hljs-comment"># 这里应用了广播机制</span><br>  <br>X = torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, (<span class="hljs-number">2</span>, <span class="hljs-number">5</span>))<br>X_prob = softmax(X)<br>X_prob, X_prob.<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>)<br><br>(tensor([[<span class="hljs-number">0.2290</span>, <span class="hljs-number">0.1027</span>, <span class="hljs-number">0.1771</span>, <span class="hljs-number">0.0187</span>, <span class="hljs-number">0.4725</span>],<br>         [<span class="hljs-number">0.0509</span>, <span class="hljs-number">0.2083</span>, <span class="hljs-number">0.6785</span>, <span class="hljs-number">0.0430</span>, <span class="hljs-number">0.0193</span>]]),<br> tensor([<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>]))<br></code></pre></td></tr></table></figure><h3 id="3-定义模型"><a href="#3-定义模型" class="headerlink" title="3. 定义模型"></a>3. 定义模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">net</span>(<span class="hljs-params">X</span>):<br>    <span class="hljs-keyword">return</span> softmax(torch.matmul(X.reshape((-<span class="hljs-number">1</span>, W.shape[<span class="hljs-number">0</span>])), W) + b)<br></code></pre></td></tr></table></figure><h3 id="4-定义损失函数"><a href="#4-定义损失函数" class="headerlink" title="4.定义损失函数"></a>4.定义损失函数</h3><p>回顾一下，交叉熵采用真实标签的预测概率的负对数似然。 这里我们不使用Python的for循环迭代预测（这往往是低效的）， 而是通过一个运算符选择所有元素。 下面，我们创建一个数据样本<code>y_hat</code>，其中包含2个样本在3个类别的预测概率， 以及它们对应的标签<code>y</code>。 有了<code>y</code>，我们知道在第一个样本中，第一类是正确的预测； 而在第二个样本中，第三类是正确的预测。 然后使用<code>y</code>作为<code>y_hat</code>中概率的索引， 我们选择第一个样本中第一个类的概率和第二个样本中第三个类的概率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">y = torch.tensor([<span class="hljs-number">0</span>, <span class="hljs-number">2</span>])<br>y_hat = torch.tensor([[<span class="hljs-number">0.1</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.6</span>], [<span class="hljs-number">0.3</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span>]])<br>y_hat[[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], y]<br><br>tensor([<span class="hljs-number">0.1000</span>, <span class="hljs-number">0.5000</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cross_entropy</span>(<span class="hljs-params">y_hat, y</span>):<br>    <span class="hljs-keyword">return</span> - torch.log(y_hat[<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(y_hat)), y])<br><br>cross_entropy(y_hat, y)<br><br>tensor([<span class="hljs-number">2.3026</span>, <span class="hljs-number">0.6931</span>])<br></code></pre></td></tr></table></figure><h3 id="5-分类精度"><a href="#5-分类精度" class="headerlink" title="5.分类精度"></a>5.分类精度</h3><p>给定预测概率分布<code>y_hat</code>，当我们必须输出硬预测（hard prediction）时， 我们通常选择预测概率最高的类。 许多应用都要求我们做出选择。如Gmail必须将电子邮件分类为“Primary（主要邮件）”、 “Social（社交邮件）”、“Updates（更新邮件）”或“Forums（论坛邮件）”。 Gmail做分类时可能在内部估计概率，但最终它必须在类中选择一个。</p><p>当预测与标签分类<code>y</code>一致时，即是正确的。 分类精度即正确预测数量与总预测数量之比。 虽然直接优化精度可能很困难（因为精度的计算不可导）， 但精度通常是我们最关心的性能衡量标准，我们在训练分类器时几乎总会关注它。</p><p>为了计算精度，我们执行以下操作。 首先，如果<code>y_hat</code>是矩阵，那么假定第二个维度存储每个类的预测分数。 我们使用<code>argmax</code>获得每行中最大元素的索引来获得预测类别。 然后我们将预测类别与真实<code>y</code>元素进行比较。 由于等式运算符“<code>==</code>”对数据类型很敏感， 因此我们将<code>y_hat</code>的数据类型转换为与<code>y</code>的数据类型一致。 结果是一个包含0（错）和1（对）的张量。 最后，我们求和会得到正确预测的数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">accuracy</span>(<span class="hljs-params">y_hat, y</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;计算预测正确的数量&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(y_hat.shape) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> y_hat.shape[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">1</span>:<br>        y_hat = y_hat.argmax(axis=<span class="hljs-number">1</span>)<br>    cmp = y_hat.<span class="hljs-built_in">type</span>(y.dtype) == y<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">float</span>(cmp.<span class="hljs-built_in">type</span>(y.dtype).<span class="hljs-built_in">sum</span>())<br></code></pre></td></tr></table></figure><p>我们将继续使用之前定义的变量<code>y_hat</code>和<code>y</code>分别作为预测的概率分布和标签。 可以看到，第一个样本的预测类别是2（该行的最大元素为0.6，索引为2），这与实际标签0不一致。 第二个样本的预测类别是2（该行的最大元素为0.5，索引为2），这与实际标签2一致。 因此，这两个样本的分类精度率为0.5。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">accuracy(y_hat, y) / <span class="hljs-built_in">len</span>(y)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">同样，对于任意数据迭代器data_iter可访问的数据集， 我们可以评估在任意模型net的精度。<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate_accuracy</span>(<span class="hljs-params">net, data_iter</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;计算在指定数据集上模型的精度&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(net, torch.nn.Module):<br>        net.<span class="hljs-built_in">eval</span>()  <span class="hljs-comment"># 将模型设置为评估模式</span><br>    metric = Accumulator(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 正确预测数、预测总数</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> data_iter:<br>            metric.add(accuracy(net(X), y), y.numel())<br>    <span class="hljs-keyword">return</span> metric[<span class="hljs-number">0</span>] / metric[<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p>这里定义一个实用程序类<code>Accumulator</code>，用于对多个变量进行累加。 在上面的<code>evaluate_accuracy</code>函数中， 我们在<code>Accumulator</code>实例中创建了2个变量， 分别用于存储正确预测的数量和预测的总数量。 当我们遍历数据集时，两者都将随着时间的推移而累加。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Accumulator</span>:  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;在n个变量上累加&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n</span>):<br>        self.data = [<span class="hljs-number">0.0</span>] * n<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, *args</span>):<br>        self.data = [a + <span class="hljs-built_in">float</span>(b) <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(self.data, args)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reset</span>(<span class="hljs-params">self</span>):<br>        self.data = [<span class="hljs-number">0.0</span>] * <span class="hljs-built_in">len</span>(self.data)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        <span class="hljs-keyword">return</span> self.data[idx]<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">evaluate<span class="hljs-constructor">_accuracy(<span class="hljs-params">net</span>, <span class="hljs-params">test_iter</span>)</span><br></code></pre></td></tr></table></figure><h3 id="6-训练"><a href="#6-训练" class="headerlink" title="6.训练"></a>6.训练</h3><p>首先，我们定义一个函数来训练一个迭代周期。 请注意，<code>updater</code>是更新模型参数的常用函数，它接受批量大小作为参数。 它可以是<code>d2l.sgd</code>函数，也可以是框架的内置优化函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_epoch_ch3</span>(<span class="hljs-params">net, train_iter, loss, updater</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;训练模型一个迭代周期（定义见第3章）&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 将模型设置为训练模式</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(net, torch.nn.Module):<br>        net.train()<br>    <span class="hljs-comment"># 训练损失总和、训练准确度总和、样本数</span><br>    metric = Accumulator(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> train_iter:<br>        <span class="hljs-comment"># 计算梯度并更新参数</span><br>        y_hat = net(X)<br>        l = loss(y_hat, y)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(updater, torch.optim.Optimizer):<br>            <span class="hljs-comment"># 使用PyTorch内置的优化器和损失函数</span><br>            updater.zero_grad()<br>            l.mean().backward()<br>            updater.step()<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 使用定制的优化器和损失函数</span><br>            l.<span class="hljs-built_in">sum</span>().backward()<br>            updater(X.shape[<span class="hljs-number">0</span>])<br>        metric.add(<span class="hljs-built_in">float</span>(l.<span class="hljs-built_in">sum</span>()), accuracy(y_hat, y), y.numel())<br>    <span class="hljs-comment"># 返回训练损失和训练精度</span><br>    <span class="hljs-keyword">return</span> metric[<span class="hljs-number">0</span>] / metric[<span class="hljs-number">2</span>], metric[<span class="hljs-number">1</span>] / metric[<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animator</span>:  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;在动画中绘制数据&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, xlabel=<span class="hljs-literal">None</span>, ylabel=<span class="hljs-literal">None</span>, legend=<span class="hljs-literal">None</span>, xlim=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                 ylim=<span class="hljs-literal">None</span>, xscale=<span class="hljs-string">&#x27;linear&#x27;</span>, yscale=<span class="hljs-string">&#x27;linear&#x27;</span>,</span><br><span class="hljs-params">                 fmts=(<span class="hljs-params"><span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;m--&#x27;</span>, <span class="hljs-string">&#x27;g-.&#x27;</span>, <span class="hljs-string">&#x27;r:&#x27;</span></span>), nrows=<span class="hljs-number">1</span>, ncols=<span class="hljs-number">1</span>,</span><br><span class="hljs-params">                 figsize=(<span class="hljs-params"><span class="hljs-number">3.5</span>, <span class="hljs-number">2.5</span></span>)</span>):<br>        <span class="hljs-comment"># 增量地绘制多条线</span><br>        <span class="hljs-keyword">if</span> legend <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            legend = []<br>        d2l.use_svg_display()<br>        self.fig, self.axes = d2l.plt.subplots(nrows, ncols, figsize=figsize)<br>        <span class="hljs-keyword">if</span> nrows * ncols == <span class="hljs-number">1</span>:<br>            self.axes = [self.axes, ]<br>        <span class="hljs-comment"># 使用lambda函数捕获参数</span><br>        self.config_axes = <span class="hljs-keyword">lambda</span>: d2l.set_axes(<br>            self.axes[<span class="hljs-number">0</span>], xlabel, ylabel, xlim, ylim, xscale, yscale, legend)<br>        self.X, self.Y, self.fmts = <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, fmts<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, x, y</span>):<br>        <span class="hljs-comment"># 向图表中添加多个数据点</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(y, <span class="hljs-string">&quot;__len__&quot;</span>):<br>            y = [y]<br>        n = <span class="hljs-built_in">len</span>(y)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(x, <span class="hljs-string">&quot;__len__&quot;</span>):<br>            x = [x] * n<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.X:<br>            self.X = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.Y:<br>            self.Y = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        <span class="hljs-keyword">for</span> i, (a, b) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-built_in">zip</span>(x, y)):<br>            <span class="hljs-keyword">if</span> a <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> b <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                self.X[i].append(a)<br>                self.Y[i].append(b)<br>        self.axes[<span class="hljs-number">0</span>].cla()<br>        <span class="hljs-keyword">for</span> x, y, fmt <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(self.X, self.Y, self.fmts):<br>            self.axes[<span class="hljs-number">0</span>].plot(x, y, fmt)<br>        self.config_axes()<br>        display.display(self.fig)<br>        display.clear_output(wait=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>接下来我们实现一个训练函数， 它会在<code>train_iter</code>访问到的训练数据集上训练一个模型<code>net</code>。 该训练函数将会运行多个迭代周期（由<code>num_epochs</code>指定）。 在每个迭代周期结束时，利用<code>test_iter</code>访问到的测试数据集对模型进行评估。 我们将利用<code>Animator</code>类来可视化训练进度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_ch3</span>(<span class="hljs-params">net, train_iter, test_iter, loss, num_epochs, updater</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;训练模型（定义见第3章）&quot;&quot;&quot;</span><br>    animator = Animator(xlabel=<span class="hljs-string">&#x27;epoch&#x27;</span>, xlim=[<span class="hljs-number">1</span>, num_epochs], ylim=[<span class="hljs-number">0.3</span>, <span class="hljs-number">0.9</span>],<br>                        legend=[<span class="hljs-string">&#x27;train loss&#x27;</span>, <span class="hljs-string">&#x27;train acc&#x27;</span>, <span class="hljs-string">&#x27;test acc&#x27;</span>])<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>        train_metrics = train_epoch_ch3(net, train_iter, loss, updater)<br>        test_acc = evaluate_accuracy(net, test_iter)<br>        animator.add(epoch + <span class="hljs-number">1</span>, train_metrics + (test_acc,))<br>    train_loss, train_acc = train_metrics<br>    <span class="hljs-keyword">assert</span> train_loss &lt; <span class="hljs-number">0.5</span>, train_loss<br>    <span class="hljs-keyword">assert</span> train_acc &lt;= <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> train_acc &gt; <span class="hljs-number">0.7</span>, train_acc<br>    <span class="hljs-keyword">assert</span> test_acc &lt;= <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> test_acc &gt; <span class="hljs-number">0.7</span>, test_acc<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">lr = <span class="hljs-number">0.1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">updater</span>(<span class="hljs-params">batch_size</span>):<br>    <span class="hljs-keyword">return</span> d2l.sgd([W, b], lr, batch_size)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">num_epochs = <span class="hljs-number">10</span><br>train_ch3(net, train_iter, test_iter, cross_entropy, num_epochs, updater)<br></code></pre></td></tr></table></figure><h3 id="7-预测"><a href="#7-预测" class="headerlink" title="7.预测"></a>7.预测</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict_ch3</span>(<span class="hljs-params">net, test_iter, n=<span class="hljs-number">6</span></span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;预测标签（定义见第3章）&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> test_iter:<br>        <span class="hljs-keyword">break</span><br>    trues = d2l.get_fashion_mnist_labels(y)<br>    preds = d2l.get_fashion_mnist_labels(net(X).argmax(axis=<span class="hljs-number">1</span>))<br>    titles = [true +<span class="hljs-string">&#x27;\n&#x27;</span> + pred <span class="hljs-keyword">for</span> true, pred <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(trues, preds)]<br>    d2l.show_images(<br>        X[<span class="hljs-number">0</span>:n].reshape((n, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>)), <span class="hljs-number">1</span>, n, titles=titles[<span class="hljs-number">0</span>:n])<br><br>predict_ch3(net, test_iter)<br></code></pre></td></tr></table></figure><h2 id="Softmax的简洁实现"><a href="#Softmax的简洁实现" class="headerlink" title="Softmax的简洁实现"></a>Softmax的简洁实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br>batch_size = <span class="hljs-number">256</span><br>train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">############## 1. 初始化模型参数################</span><br><br><span class="hljs-comment"># PyTorch不会隐式地调整输入的形状。因此，</span><br><span class="hljs-comment"># 我们在线性层前定义了展平层（flatten），来调整网络输入的形状</span><br>net = nn.Sequential(nn.Flatten(), nn.Linear(<span class="hljs-number">784</span>, <span class="hljs-number">10</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_weights</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(m) == nn.Linear:<br>        nn.init.normal_(m.weight, std=<span class="hljs-number">0.01</span>)<br><br>net.apply(init_weights);<br><br><span class="hljs-comment">############## 2. 重新审视Softmax的实现################</span><br>loss = nn.CrossEntropyLoss(reduction=<span class="hljs-string">&#x27;none&#x27;</span>)<br><br><span class="hljs-comment">############## 3. 优化算法 ###########################</span><br>trainer = torch.optim.SGD(net.parameters(), lr=<span class="hljs-number">0.1</span>)<br><br><span class="hljs-comment">############## 4. 训练 ##############################</span><br>num_epochs = <span class="hljs-number">10</span><br>d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, trainer)<br></code></pre></td></tr></table></figure><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>问题1: softmax回归和logistic回归分析是一样的吗？</p><p>softmax回归是多分类，logistic回归是2分类问题</p><p>问题2: batch_size设置为1或者设置为4，设置4是设置为1的4倍速度吗？</p><p>不是的，batch_size的大小与否，它的计算量都是不会发生变化的，发生变化的是计算的并行度是不是能增加使得整个执行的效率能不能增加</p><p>问题3: 在计算精度的时候，为什么需要使用new.eval()将模型设置成评估模式？</p><p>设置eval模式是为了不算梯度，默认是会算梯度的，可以不用开，但在性能上可能会好一点。</p><p>问题4: 如何把自己的图片数据集用于训练？</p><p>pytorch官方文档可以去看一下，是支持本地照片用训练集的</p><p>参考：<a href="https://zh-v2.d2l.ai/">https://zh-v2.d2l.ai</a></p>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch框架-TensorDataset</title>
    <link href="/2022/07/27/PyTorch%E6%A1%86%E6%9E%B6-TensorDataset/"/>
    <url>/2022/07/27/PyTorch%E6%A1%86%E6%9E%B6-TensorDataset/</url>
    
    <content type="html"><![CDATA[<p>在学习深度学习前有必要先学习下当下深度学习的主流框架PyTorch、tensorflow、MXnet，但本篇文章主要介绍PyTorch的TensorDataset和DataLoader。我目前接触的框架也只有PyTorch，其他框架自己按需学习吧 :)</p><p>先看下面的代码，就能大致知道TensorDataset和DataLoader是干什么的了</p><h2 id="TensorDataset"><a href="#TensorDataset" class="headerlink" title="TensorDataset"></a>TensorDataset</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># TensorDataset 学习</span><br><span class="hljs-comment"># DataLoader 学习</span><br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> TensorDataset<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>a = torch.tensor([<br>                  [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>                  ,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br>                  ,[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br>                  ,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>                  ,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br>                  ,[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br>                  ,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>                  ,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br>                  ,[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br>                  ,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>                  ,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br>                  ,[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]                                     <br>                ])<br>b = torch.tensor([<span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span>]<br>                 )<br>train_ids = TensorDataset(a,b)<br><span class="hljs-comment"># 切片输出</span><br><span class="hljs-built_in">print</span>(train_ids[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=&#x27;</span> * <span class="hljs-number">80</span>)<br><span class="hljs-comment"># 循环取数据</span><br><span class="hljs-keyword">for</span> x_train,y_label <span class="hljs-keyword">in</span> train_ids:<br>  <span class="hljs-built_in">print</span>(x_train,y_label)<br><br><span class="hljs-comment"># DataLoader进行数据封装</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=&#x27;</span> * <span class="hljs-number">80</span>)<br>train_loader = DataLoader(dataset=train_ids,batch_size=<span class="hljs-number">4</span>,shuffle=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">for</span> i, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader,<span class="hljs-number">1</span>):<br>  x_data,label = data<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;batch:&#123;0&#125; x_data:&#123;1&#125; label:&#123;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i,x_data,label))<br><br></code></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python">(tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>        [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]), tensor([<span class="hljs-number">44</span>, <span class="hljs-number">55</span>]))<br>&lt;torch.utils.data.dataset.TensorDataset <span class="hljs-built_in">object</span> at <span class="hljs-number">0x7fb6189168d0</span>&gt;<br>================================================================================<br>tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) tensor(<span class="hljs-number">44</span>)<br>tensor([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]) tensor(<span class="hljs-number">55</span>)<br>tensor([<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]) tensor(<span class="hljs-number">66</span>)<br>tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) tensor(<span class="hljs-number">44</span>)<br>tensor([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]) tensor(<span class="hljs-number">55</span>)<br>tensor([<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]) tensor(<span class="hljs-number">66</span>)<br>tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) tensor(<span class="hljs-number">44</span>)<br>tensor([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]) tensor(<span class="hljs-number">55</span>)<br>tensor([<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]) tensor(<span class="hljs-number">66</span>)<br>tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) tensor(<span class="hljs-number">44</span>)<br>tensor([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]) tensor(<span class="hljs-number">55</span>)<br>tensor([<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]) tensor(<span class="hljs-number">66</span>)<br>================================================================================<br>batch:<span class="hljs-number">1</span> x_data:tensor([[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>],<br>        [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>        [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],<br>        [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]]) label:tensor([<span class="hljs-number">66</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">44</span>])<br>batch:<span class="hljs-number">2</span> x_data:tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>        [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>],<br>        [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],<br>        [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]]) label:tensor([<span class="hljs-number">44</span>, <span class="hljs-number">66</span>, <span class="hljs-number">55</span>, <span class="hljs-number">44</span>])<br>batch:<span class="hljs-number">3</span> x_data:tensor([[<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],<br>        [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>],<br>        [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>],<br>        [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]) label:tensor([<span class="hljs-number">55</span>, <span class="hljs-number">66</span>, <span class="hljs-number">66</span>, <span class="hljs-number">55</span>])<br></code></pre></td></tr></table></figure><p>TensorDataset(a,b)将两个tensor传入到TensorDataset里，</p><p>得到TensorDataset后可以对其进行<strong>切片输出</strong>，例如TensorDataset(a,b)[0:2]，指的是取a和b前面两个元素。</p><p>除了进行<strong>切片输出</strong>外，还可以用循环来取数据，例如a是矩阵，b是向量，用for循环取出来的分别就是矩阵的每一行和向量的每个元素。</p><h2 id="DataLoader"><a href="#DataLoader" class="headerlink" title="DataLoader"></a>DataLoader</h2><p>DataLoader进行数据封装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># DataLoader进行数据封装</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=&#x27;</span> * <span class="hljs-number">80</span>)<br>train_loader = DataLoader(dataset=train_ids,batch_size=<span class="hljs-number">4</span>,shuffle=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">for</span> i, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader,<span class="hljs-number">1</span>):<br>  x_data,label = data<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;batch:&#123;0&#125; x_data:&#123;1&#125; label:&#123;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i,x_data,label))<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">batch:<span class="hljs-number">1</span> x_data:tensor([[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>],<br>        [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>        [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],<br>        [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]]) label:tensor([<span class="hljs-number">66</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">44</span>])<br>batch:<span class="hljs-number">2</span> x_data:tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>        [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>],<br>        [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],<br>        [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]]) label:tensor([<span class="hljs-number">44</span>, <span class="hljs-number">66</span>, <span class="hljs-number">55</span>, <span class="hljs-number">44</span>])<br>batch:<span class="hljs-number">3</span> x_data:tensor([[<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],<br>        [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>],<br>        [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>],<br>        [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]) label:tensor([<span class="hljs-number">55</span>, <span class="hljs-number">66</span>, <span class="hljs-number">66</span>, <span class="hljs-number">55</span>])<br></code></pre></td></tr></table></figure><p>DataLoader(dataset&#x3D;train_ids,batch_size&#x3D;4,shuffle&#x3D;True)这里分别是传入上面讲的TensorDataset类型的train_ids，batch_size&#x3D;4指的是一个批次里有几个元素，这里等于4，是指一个batch里取四个元素。shuffle&#x3D;True每次都洗牌。取到的都不一样。</p><p>将batch_size设置为1时，输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># DataLoader进行数据封装</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=&#x27;</span> * <span class="hljs-number">80</span>)<br>train_loader = DataLoader(dataset=train_ids,batch_size=<span class="hljs-number">1</span>,shuffle=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">for</span> i, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader,<span class="hljs-number">1</span>):<br>  x_data,label = data<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;batch:&#123;0&#125; x_data:&#123;1&#125; label:&#123;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i,x_data,label))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">================================================================================<br>batch:<span class="hljs-number">1</span> x_data:tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]]) label:tensor([<span class="hljs-number">44</span>])<br>batch:<span class="hljs-number">2</span> x_data:tensor([[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]]) label:tensor([<span class="hljs-number">66</span>])<br>batch:<span class="hljs-number">3</span> x_data:tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]]) label:tensor([<span class="hljs-number">44</span>])<br>batch:<span class="hljs-number">4</span> x_data:tensor([[<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]) label:tensor([<span class="hljs-number">55</span>])<br>batch:<span class="hljs-number">5</span> x_data:tensor([[<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]) label:tensor([<span class="hljs-number">55</span>])<br>batch:<span class="hljs-number">6</span> x_data:tensor([[<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]) label:tensor([<span class="hljs-number">55</span>])<br>batch:<span class="hljs-number">7</span> x_data:tensor([[<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]) label:tensor([<span class="hljs-number">55</span>])<br>batch:<span class="hljs-number">8</span> x_data:tensor([[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]]) label:tensor([<span class="hljs-number">66</span>])<br>batch:<span class="hljs-number">9</span> x_data:tensor([[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]]) label:tensor([<span class="hljs-number">66</span>])<br>batch:<span class="hljs-number">10</span> x_data:tensor([[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]]) label:tensor([<span class="hljs-number">66</span>])<br>batch:<span class="hljs-number">11</span> x_data:tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]]) label:tensor([<span class="hljs-number">44</span>])<br>batch:<span class="hljs-number">12</span> x_data:tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]]) label:tensor([<span class="hljs-number">44</span>])<br></code></pre></td></tr></table></figure><p>将shuffle改为False, 每次取到的数据都是一样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># DataLoader进行数据封装</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=&#x27;</span> * <span class="hljs-number">80</span>)<br>train_loader = DataLoader(dataset=train_ids,batch_size=<span class="hljs-number">1</span>,shuffle=<span class="hljs-literal">False</span>)<br><span class="hljs-keyword">for</span> i, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader,<span class="hljs-number">1</span>):<br>  x_data,label = data<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;batch:&#123;0&#125; x_data:&#123;1&#125; label:&#123;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i,x_data,label))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyTorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>deep_learning_1.线性回归的从零实现</title>
    <link href="/2022/07/25/deep-learning-1-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/07/25/deep-learning-1-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><p><em>回归</em>（regression）是能为一个或多个自变量与因变量之间关系建模的一类方法。 在自然科学和社会科学领域，回归经常用来表示输入和输出之间的关系。</p><p>在机器学习领域中的大多数任务通常都与<em>预测</em>（prediction）有关。 当我们想预测一个数值时，就会涉及到回归问题。 常见的例子包括：预测价格（房屋、股票等）、预测住院时间（针对住院病人等）、 预测需求（零售销量等）。 但不是所有的<em>预测</em>都是回归问题。 </p><p><em>线性回归</em>（linear regression）可以追溯到19世纪初， 它在回归的各种标准工具中最简单而且最流行。 线性回归基于几个简单的假设： 首先，假设自变量x和因变量y之间的关系是线性的， 即y可以表示为x中元素的加权和，这里通常允许包含观测值的一些噪声； 其次，我们假设任何噪声都比较正常，如噪声遵循正态分布。</p><p>为了解释<em>线性回归</em>，我们举一个实际的例子： 我们希望根据房屋的面积（平方英尺）和房龄（年）来估算房屋价格（美元）。 为了开发一个能预测房价的模型，我们需要收集一个真实的数据集。</p><p> 这个数据集包括了房屋的销售价格、面积和房龄。 在机器学习的术语中，该数据集称为<em>训练数据集</em>（training data set） 或<em>训练集</em>（training set）。 每行数据（比如一次房屋交易相对应的数据）称为<em>样本</em>（sample）， 也可以称为<em>数据点</em>（data point）或<em>数据样本</em>（data instance）。 我们把试图预测的目标（比如预测房屋价格）称为<em>标签</em>（label）或<em>目标</em>（target）。 预测所依据的自变量（面积和房龄）称为<em>特征</em>（feature）或<em>协变量</em>（covariate）。</p><h2 id="线性回归的从零开始实现"><a href="#线性回归的从零开始实现" class="headerlink" title="线性回归的从零开始实现"></a>线性回归的从零开始实现</h2><p>以下是pytorch版本实现</p><p><strong>导入包</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">%matplotlib inline<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br></code></pre></td></tr></table></figure><p><strong>生成数据集</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">synthetic_data</span>(<span class="hljs-params">w, b, num_examples</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;生成y=Xw+b+噪声&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># torch.normal(mean,std,out) 输出均值为0，标准差为1，大小为[1000,2]的数组</span><br>    X = torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, (num_examples, <span class="hljs-built_in">len</span>(w))) <br>    <span class="hljs-comment"># matmul:如果一个二维矩阵和一个一维向量input的乘积运算，则先将input的一维向量扩充到二维，然后进行矩阵乘积，得到结果后再将此维度去掉，得到的与input的维度相同。</span><br>    y = torch.matmul(X, w) + b<br>    y += torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>, y.shape) <span class="hljs-comment"># 这里是加入一些噪声</span><br>    <span class="hljs-keyword">return</span> X, y.reshape((-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br><br>true_w = torch.tensor([<span class="hljs-number">2</span>, -<span class="hljs-number">3.4</span>])<br>true_b = <span class="hljs-number">4.2</span><br>features, labels = synthetic_data(true_w, true_b, <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p>注意，<code>features</code>中的每一行都包含一个二维数据样本， <code>labels</code>中的每一行都包含一维标签值（一个标量）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;features:&#x27;</span>, features[<span class="hljs-number">0</span>],<span class="hljs-string">&#x27;\nlabel:&#x27;</span>, labels[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">d2l.set_figsize()<br>d2l.plt.scatter(features[:, (<span class="hljs-number">1</span>)].detach().numpy(), labels.detach().numpy(), <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p><strong>读取数据集</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">data_iter</span>(<span class="hljs-params">batch_size, features, labels</span>):<br>    num_examples = <span class="hljs-built_in">len</span>(features)<br>    indices = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(num_examples))<br>    <span class="hljs-comment"># 这些样本是随机读取的，没有特定的顺序</span><br>    random.shuffle(indices)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, num_examples, batch_size):<br>        batch_indices = torch.tensor(<br>            indices[i: <span class="hljs-built_in">min</span>(i + batch_size, num_examples)])<br>        <span class="hljs-keyword">yield</span> features[batch_indices], labels[batch_indices]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">batch_size = <span class="hljs-number">10</span><br><br><span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> data_iter(batch_size, features, labels):<br>    <span class="hljs-built_in">print</span>(X, <span class="hljs-string">&#x27;\n&#x27;</span>, y)<br>    <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>当我们运行迭代时，我们会连续地获得不同的小批量，直至遍历完整个数据集。 上面实现的迭代对于教学来说很好，但它的执行效率很低，可能会在实际问题上陷入麻烦。 例如，它要求我们将所有数据加载到内存中，并执行大量的随机内存访问。 在深度学习框架中实现的内置迭代器效率要高得多， 它可以处理存储在文件中的数据和数据流提供的数据。</p><p><strong>初始化模型参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">w = torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>, size=(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>), requires_grad=<span class="hljs-literal">True</span>)<br>b = torch.zeros(<span class="hljs-number">1</span>, requires_grad=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p><strong>定义数据模型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">linreg</span>(<span class="hljs-params">X, w, b</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;线性回归模型&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> torch.matmul(X, w) + b <span class="hljs-comment"># [1000,2] * [2,1]  = [1000,1] + b (随意变换)</span><br></code></pre></td></tr></table></figure><p><strong>定义损失函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">squared_loss</span>(<span class="hljs-params">y_hat, y</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;均方损失&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> (y_hat - y.reshape(y_hat.shape)) ** <span class="hljs-number">2</span> / <span class="hljs-number">2</span><br>  <span class="hljs-string">&#x27;&#x27;&#x27;正常应该是同样的shape，但以防一个是行向量、一个是列向量。</span><br><span class="hljs-string">现在reshape，可以确保shape一样&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>定义优化算法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sgd</span>(<span class="hljs-params">params, lr, batch_size</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;小批量随机梯度下降&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># torch.no_grad()包含的代码不算梯度</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> params:<br>          <span class="hljs-comment"># x-=k 与x= x-k 不同，前者会更新变量的值，而后者不会 此时的param为None.</span><br>            param -= lr * param.grad / batch_size<br>            <span class="hljs-comment"># torch的梯度值每次会累加，所以要清0</span><br>            <span class="hljs-comment"># torch的梯度保存在.grad里面</span><br>            param.grad.zero_()<br></code></pre></td></tr></table></figure><p><strong>训练</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">lr = <span class="hljs-number">0.03</span><br>num_epochs = <span class="hljs-number">3</span><br>net = linreg<br>loss = squared_loss<br><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>    <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> data_iter(batch_size, features, labels):<br>        l = loss(net(X, w, b), y)  <span class="hljs-comment"># X和y的小批量损失</span><br>        <span class="hljs-comment"># 因为l形状是(batch_size,1)，而不是一个标量。l中的所有元素被加到一起，</span><br>        <span class="hljs-comment"># 并以此计算关于[w,b]的梯度</span><br>        l.<span class="hljs-built_in">sum</span>().backward()<br>        sgd([w, b], lr, batch_size)  <span class="hljs-comment"># 使用参数的梯度更新参数</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        train_l = loss(net(features, w, b), labels)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;epoch <span class="hljs-subst">&#123;epoch + <span class="hljs-number">1</span>&#125;</span>, loss <span class="hljs-subst">&#123;<span class="hljs-built_in">float</span>(train_l.mean()):f&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>epoch 1, loss 0.037357 </p><p>epoch 2, loss 0.000146 </p><p>epoch 3, loss 0.000049</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;w的估计误差: <span class="hljs-subst">&#123;true_w - w.reshape(true_w.shape)&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;b的估计误差: <span class="hljs-subst">&#123;true_b - b&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>w的估计误差: tensor([ 4.0927, -2.6497], grad_fn&#x3D;<SubBackward0>) </p><p>b的估计误差: tensor([67.1991], grad_fn&#x3D;<RsubBackward1>)</p><h2 id="线性回归的简洁实现"><a href="#线性回归的简洁实现" class="headerlink" title="线性回归的简洁实现"></a>线性回归的简洁实现</h2><p><strong>生成数据集</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.utils <span class="hljs-keyword">import</span> data<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br>true_w = torch.tensor([<span class="hljs-number">2</span>, -<span class="hljs-number">3.4</span>])<br>true_b = <span class="hljs-number">4.2</span><br>features, labels = d2l.synthetic_data(true_w, true_b, <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p><strong>读取数据集</strong></p><p>我们可以调用框架中现有的API来读取数据。 我们将<code>features</code>和<code>labels</code>作为API的参数传递，并通过数据迭代器指定<code>batch_size</code>。 此外，布尔值<code>is_train</code>表示是否希望数据迭代器对象在每个迭代周期内打乱数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_array</span>(<span class="hljs-params">data_arrays, batch_size, is_train=<span class="hljs-literal">True</span></span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;构造一个PyTorch数据迭代器&quot;&quot;&quot;</span><br>    dataset = data.TensorDataset(*data_arrays)<br>    <span class="hljs-keyword">return</span> data.DataLoader(dataset, batch_size, shuffle=is_train)<br><br>batch_size = <span class="hljs-number">10</span><br>data_iter = load_array((features, labels), batch_size)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(data_iter)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">[tensor([[ <span class="hljs-number">0.4162</span>, -<span class="hljs-number">1.5868</span>],<br>         [-<span class="hljs-number">0.4829</span>,  <span class="hljs-number">0.1374</span>],<br>         [-<span class="hljs-number">0.5748</span>, -<span class="hljs-number">0.6860</span>],<br>         [-<span class="hljs-number">0.6347</span>,  <span class="hljs-number">0.1200</span>],<br>         [-<span class="hljs-number">0.9963</span>,  <span class="hljs-number">2.0180</span>],<br>         [ <span class="hljs-number">1.5813</span>, -<span class="hljs-number">1.2615</span>],<br>         [-<span class="hljs-number">0.4949</span>,  <span class="hljs-number">2.0363</span>],<br>         [ <span class="hljs-number">0.3605</span>,  <span class="hljs-number">0.5714</span>],<br>         [ <span class="hljs-number">0.4059</span>, -<span class="hljs-number">1.2410</span>],<br>         [ <span class="hljs-number">0.1744</span>,  <span class="hljs-number">1.4118</span>]]),<br> tensor([[<span class="hljs-number">10.4306</span>],<br>         [ <span class="hljs-number">2.7637</span>],<br>         [ <span class="hljs-number">5.3611</span>],<br>         [ <span class="hljs-number">2.5469</span>],<br>         [-<span class="hljs-number">4.6475</span>],<br>         [<span class="hljs-number">11.6465</span>],<br>         [-<span class="hljs-number">3.7162</span>],<br>         [ <span class="hljs-number">2.9882</span>],<br>         [ <span class="hljs-number">9.2429</span>],<br>         [-<span class="hljs-number">0.2496</span>]])]<br></code></pre></td></tr></table></figure><p><strong>定义模型</strong></p><p>当我们在前面从0实现线性回归时， 我们明确定义了模型参数变量，并编写了计算的代码，这样通过基本的线性代数运算得到输出。 但是，如果模型变得更加复杂，且当你几乎每天都需要实现模型时，你会想简化这个过程。 这种情况类似于为自己的博客从零开始编写网页。 做一两次是有益的，但如果每个新博客你就花一个月的时间重新开始编写网页，那并不高效。</p><p>对于标准深度学习模型，我们可以使用框架的预定义好的层。这使我们只需关注使用哪些层来构造模型，而不必关注层的实现细节。 我们首先定义一个模型变量<code>net</code>，它是一个<code>Sequential</code>类的实例。 <code>Sequential</code>类将多个层串联在一起。 当给定输入数据时，<code>Sequential</code>实例将数据传入到第一层， 然后将第一层的输出作为第二层的输入，以此类推。 在下面的例子中，我们的模型只包含一个层，因此实际上不需要<code>Sequential</code>。 但是由于以后几乎所有的模型都是多层的，在这里使用<code>Sequential</code>会让你熟悉“标准的流水线”。</p><p>回顾上面的线性回归模型中的单层网络架构， 这一单层被称为<em>全连接层</em>（fully-connected layer）， 因为它的每一个输入都通过矩阵-向量乘法得到它的每个输出</p><p>在PyTorch中，全连接层在<code>Linear</code>类中定义。 值得注意的是，我们将两个参数传递到<code>nn.Linear</code>中。 第一个指定输入特征形状，即2，第二个指定输出特征形状，输出特征形状为单个标量，因此为1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># nn是神经网络的缩写</span><br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br>net = nn.Sequential(nn.Linear(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><p><strong>初始化模型参数</strong></p><p>在使用<code>net</code>之前，我们需要初始化模型参数。 如在线性回归模型中的权重和偏置。 深度学习框架通常有预定义的方法来初始化参数。 在这里，我们指定每个权重参数应该从均值为0、标准差为0.01的正态分布中随机采样， 偏置参数将初始化为零。</p><p>正如我们在构造<code>nn.Linear</code>时指定输入和输出尺寸一样， 现在我们能直接访问参数以设定它们的初始值。 我们通过<code>net[0]</code>选择网络中的第一个图层， 然后使用<code>weight.data</code>和<code>bias.data</code>方法访问参数。 我们还可以使用替换方法<code>normal_</code>和<code>fill_</code>来重写参数值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">net[<span class="hljs-number">0</span>].weight.data.normal_(<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>)<br>net[<span class="hljs-number">0</span>].bias.data.fill_(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p><strong>定义损失函数</strong></p><p>计算均方误差使用的是<code>MSELoss</code>类，也称为平方L2范数。 默认情况下，它返回所有样本损失的平均</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">loss = nn.MSELoss()<br></code></pre></td></tr></table></figure><p><strong>定义优化算法</strong></p><p>小批量随机梯度下降算法是一种优化神经网络的标准工具， PyTorch在<code>optim</code>模块中实现了该算法的许多变种。 当我们实例化一个<code>SGD</code>实例时，我们要指定优化的参数 （可通过<code>net.parameters()</code>从我们的模型中获得）以及优化算法所需的超参数字典。 小批量随机梯度下降只需要设置<code>lr</code>值，这里设置为0.03。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">trainer = torch.optim.SGD(net.parameters(), lr=<span class="hljs-number">0.03</span>)<br></code></pre></td></tr></table></figure><p><strong>训练</strong></p><p>通过深度学习框架的高级API来实现我们的模型只需要相对较少的代码。 我们不必单独分配参数、不必定义我们的损失函数，也不必手动实现小批量随机梯度下降。 当我们需要更复杂的模型时，高级API的优势将大大增加。 当我们有了所有的基本组件，训练过程代码与我们从零开始实现时所做的非常相似。</p><p>回顾一下：在每个迭代周期里，我们将完整遍历一次数据集（<code>train_data</code>）， 不停地从中获取一个小批量的输入和相应的标签。 对于每一个小批量，我们会进行以下步骤:</p><ul><li>通过调用<code>net(X)</code>生成预测并计算损失<code>l</code>（前向传播）。</li><li>通过进行反向传播来计算梯度。</li><li>通过调用优化器来更新模型参数。</li></ul><p>为了更好的衡量训练效果，我们计算每个迭代周期后的损失，并打印它来监控训练过程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">num_epochs = <span class="hljs-number">3</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>    <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> data_iter:<br>        l = loss(net(X) ,y)<br>        trainer.zero_grad()<br>        l.backward()<br>        trainer.step()<br>    l = loss(net(features), labels)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;epoch <span class="hljs-subst">&#123;epoch + <span class="hljs-number">1</span>&#125;</span>, loss <span class="hljs-subst">&#123;l:f&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">epoch <span class="hljs-number">1</span>, loss <span class="hljs-number">0.000392</span><br>epoch <span class="hljs-number">2</span>, loss <span class="hljs-number">0.000104</span><br>epoch <span class="hljs-number">3</span>, loss <span class="hljs-number">0.000104</span><br></code></pre></td></tr></table></figure><p>下面我们比较生成数据集的真实参数和通过有限数据训练获得的模型参数。 要访问参数，我们首先从<code>net</code>访问所需的层，然后读取该层的权重和偏置。 正如在从零开始实现中一样，我们估计得到的参数与生成数据的真实参数非常接近。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">w = net[<span class="hljs-number">0</span>].weight.data<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;w的估计误差：&#x27;</span>, true_w - w.reshape(true_w.shape))<br>b = net[<span class="hljs-number">0</span>].bias.data<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b的估计误差：&#x27;</span>, true_b - b)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">w的估计误差： tensor([ <span class="hljs-number">0.0002</span>, -<span class="hljs-number">0.0002</span>])<br>b的估计误差： tensor([-<span class="hljs-number">9.1553e-05</span>])<br></code></pre></td></tr></table></figure><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>问题1: 为啥使用平方损失函数而不是绝对差值呢？</p><p>绝对差值函数在0点处不可导，会导致在0点出现跳跃梯度的情况，其实的话问题也不大</p><p>问题2: 线性回归损失函数是不是通常都是MSE？</p><p>是的</p><p>问题3: 损失为什么要求平均？</p><p>求不求平均其实问题不大，有点像标准化归一化处理，不求平均的话你就是在某个scale内，求了平均这个scale范围等于是等比例缩小了</p><p>问题4: 怎么找到合适的学习率？</p><p>第一，你可以找一个对学习率不那么敏感的算法，比较smooth的算法，</p><p>第二，可以通过合理的参数初始化，然后学习率取0.1或者0.01就差不多了</p><p>第三，有找学习率的方法，比如网格搜索等</p><p>问题5: batchsize是否会影响模型结果？</p><p>batchsize越小实际上是效果越好的，batchsize越小，模型每次处理的数据就越多，如果一次喂的数据少的话，带来的噪音会越多，但是一定的噪音会对模型的 范化性更好</p><p>问题6: 学习率和批次会影响模型收敛吗？</p><p>一般来说只要是你的学习率不要给到太大，学习率和批次是不会影响到收敛的，只是时间问题，模型最终都会收敛的</p><p>问题7: 随机梯度下降的随机指的是什么？</p><p>指的是每次随机采样批量大小的样本</p><p>问题8: 为什么机器学习优化算法都采用随机梯度下降（一阶导算法）,而不是采用牛顿（二阶导算法），收敛速度更快？</p><p>我们其实不太关心收敛的快不快，我们关心的是它收敛到哪里，牛顿法快可能不是最优解，不一定比随机梯度下降训练出来的模型范化性好。不要步子迈太快😄</p><p>问题9: 本质上我们为什么要用SGD，是因为大部分的实际loss太复杂，推导不出导数为0的解么？只能逐个batch去逼近？</p><p>是的，机器学习深度学习存在的意义就是无法直接求出具体的最优解，只能通过参数的训练达到无限逼近最优解</p><p>问题10: 定义网络层后一定要手动设置参数初始值吗？</p><p>不一定，给默认的初始值也挺好的</p><p>问题11: 每个batch计算的时候，为什么要把梯度清零啊？<br>因为pytorch你不清0的话，它会一直在上面的梯度上做累加</p><p>问题12: 矩阵怎么求导数？</p><p>标量的导数：就是数学里面学习的导数</p><p>将导数拓展到向量，进而到矩阵：</p><table><thead><tr><th align="left"></th><th>标量x(1,)</th><th>向量x(s,1)</th><th>矩阵(s,k)</th></tr></thead><tbody><tr><td align="left">标量y(1,)</td><td>标量(1,)</td><td>向量(1,s)</td><td>矩阵(k,s)</td></tr><tr><td align="left">向量y(m,1)</td><td>向量(m,1)</td><td>矩阵(m,s)</td><td>矩阵(m,k,s)</td></tr><tr><td align="left">矩阵Y(m,n)</td><td>矩阵(m,n)</td><td>矩阵(m,n,s)</td><td>矩阵(m,n,k,s)</td></tr></tbody></table><p>问题13: 如果将小批量的总损失替换为小批量损失的平均值，你需要如何更改学习率？</p><p>若不将损失函数采用均值 将会使得参数的梯度过大，梯度经过放大后，原有的学习率显得过大 使得其出现了振荡 即步长过长导致，在最优解的附近震荡 而无法高效逼近最优点，mean意味着所有样本损失的平均值，即loss会除以样本数，sum没有除这个样本数，所以会放大1000倍（这里样本数为1000），默认情况下以mean作为损失的计算结果更好，</p><p>loss function reduction&#x3D; ‘mean’ , lr&#x3D;0.03:<br>epoch 1, loss 0.000361<br>epoch 2, loss 0.000095<br>epoch 3, loss 0.000095<br>w的估计误差： tensor([-0.0002, -0.0002])<br>b的估计误差： tensor([8.6784e-05])</p><p>loss function reduction &#x3D; ‘sum’, lr &#x3D;0.03&#x2F;batch_size&#x3D;0.003<br>epoch 1, loss 0.176310<br>epoch 2, loss 0.091707<br>epoch 3, loss 0.092358<br>w的估计误差： tensor([0.0007, 0.0012])<br>b的估计误差： tensor([0.0005])</p><p>参考：<a href="https://zh-v2.d2l.ai/">https://zh-v2.d2l.ai</a></p>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apache Doris在橙联的应用实践</title>
    <link href="/2022/07/24/Apache-Doris%E5%9C%A8%E6%A9%99%E8%81%94%E7%9A%84%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5/"/>
    <url>/2022/07/24/Apache-Doris%E5%9C%A8%E6%A9%99%E8%81%94%E7%9A%84%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><h3 id="1-1-公司介绍"><a href="#1-1-公司介绍" class="headerlink" title="1.1 公司介绍"></a>1.1 公司介绍</h3><p>橙联（Orange Connex）是一家服务全球跨境电商的科技公司，致力于通过市场分析、系统研发及资源整合，为客户提供物流、金融、大数据等多方面的服务产品，为全球跨境电商提供高品质、全方位的服务解决方案。橙联股份由中信产业基金和 eBAY 联合成立，拥有非常丰富的物流服务经验和客户市场资源，旨在为卖家客户提供快捷 、稳定 、成本领先 、可视及可持续的物流服务，让买家客户享有更加优质贴心的服务体验</p><h3 id="1-2-目前痛点"><a href="#1-2-目前痛点" class="headerlink" title="1.2 目前痛点"></a>1.2 目前痛点</h3><p>随着公司业务的发展和数据的不断增长，基于 MySQL 的传统数仓架构已经无法应对公司数据的快速增长。业务的需求和运营的决策对于数据时效性的要求越来越高，对数仓准实时能力的需求越发强烈</p><p>基于 MySQL 的传统离线数仓的数据时效性是 T+1，调度频率以天为单位，无法支撑准实时场景的数据需求。即使将调度频率设置成 x 小时，也只能解决部分时效性要求不高的场景，对于实效性要求很高的场景还是无法支撑</p><h2 id="2-架构与实现"><a href="#2-架构与实现" class="headerlink" title="2. 架构与实现"></a>2. 架构与实现</h2><p>公司目前已搭建完成了基于 Doris 的准实时数仓 1.0 版本，在介绍实时数仓的架构之前，简单介绍公司业务的几个计算场景</p><h3 id="公司业务主要计算场景："><a href="#公司业务主要计算场景：" class="headerlink" title="公司业务主要计算场景："></a>公司业务主要计算场景：</h3><h4 id="场景1-物流数据宽表"><a href="#场景1-物流数据宽表" class="headerlink" title="场景1. 物流数据宽表"></a>场景1. 物流数据宽表</h4><p>物流数据宽表数据的生成来自于几十张表的关联，以下是物流数据宽表的主要驱动表</p><p>​    1. 轨迹时间表，日均变动数据峰值 100W 条，用于更新订单轨迹节点时间</p><p>​    2. 订单表，日均数据变动数据峰值 25W 条，用于 ascan 和 dscan 节点时间更新</p><p>​    3. 财务流水表，日均数据变动数据峰值 30W 条，该表用于更新订单物流费用</p><p>​    4. 订单异常表，日均数据变动不大，用于更新异常订单状态</p><p>​    5. 订单取消表，日均数据变动不大，用于更新订单状态</p><p>​    6. 发货预报表</p><p>​    7. 揽收表</p><p>​    8. 分拣表</p><p>​    9. 分拣大小包关系表</p><p>​    10. 申报信息表</p><p>​    11. 预计流程 &#x2F; 预计流程回 call 表</p><h4 id="场景2-财务数据统计"><a href="#场景2-财务数据统计" class="headerlink" title="场景2. 财务数据统计"></a>场景2. 财务数据统计</h4><p>财务日常统计需求，如按天+客户来统计客户物流费用</p><p>在统计当天，来自于供应商的部分数据并不能及时回传到业务系统，客户会在发现问题后采取补回传的操作</p><p>业务实际发生时间到数据补传时间跨度甚至在 1 个月左右，针对补回传的数据，需要对数据涉及的业务日期的天进行重新统计</p><h4 id="场景3-SLA-计算"><a href="#场景3-SLA-计算" class="headerlink" title="场景3. SLA 计算"></a>场景3. SLA 计算</h4><p>一条订单有多个轨迹节点，如 A、B、C、D、E</p><p>各个节点时间的回传并非严格遵守时间顺序，后续节点的时间会先于前节点时间进入系统</p><p>每个节点时间进入系统时，需要计算两个节点之间的 SLA，如 A–B，A–C，B–D 的时间</p><p>SLA 计算逻辑复杂，需要考虑不同国家节假日及冬令时&#x2F;夏令时转换，若 2 个节点跨国家，还需要考虑时区转换</p><p>不同订单根据路向，物流产品，内部产品，尾程供应商等6个维度各种组合来判定 SLA 的计算逻辑</p><p>举例来说同一考核点，P1 产品需要按 A–B 来考核，P2 产品需要按照 A–C 来考核，目前单一考核点的规则最多达 20+ 种</p><h3 id="准实时数仓架构"><a href="#准实时数仓架构" class="headerlink" title="准实时数仓架构"></a>准实时数仓架构</h3><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img%E6%A9%99%E8%81%94%E6%95%B0%E4%BB%93%E6%9E%B6%E6%9E%84%E5%9B%BE_3.jpeg"> </p><h3 id="流批一体准实时数仓数据加工"><a href="#流批一体准实时数仓数据加工" class="headerlink" title="流批一体准实时数仓数据加工"></a>流批一体准实时数仓数据加工</h3><p>以上几个业务场景都对数据时效性有较高的要求，为了解决业务场景数据时效性高痛点，我们采用基于 Doris 的流批一体的准实时数仓架构，Doris 的三种数据模型能够全面的覆盖公司当前所有的数据场景，为了满足从业务数据库到 Doris ODS 层的端到端 EOS，我们使用了 Unique 模型，有效的解决了数据的精准一次问题；使用 Aggregate 模型，加速固定模式的报表查询；使用 Duplicate 模型解决既没有主键也没有聚合需求的多维分析场景</p><p>以下是业务数据的采集、清洗、流转流程图</p><p>对于业务数据源 MySQL 数据的实时获取，我们使用 FlinkCDC 实时获取业务 MySQL 备库的 Binlog 日志，写入到 Kafka 做为中间缓冲，下游 Flink 消费 Kafka 数据，使用 flink-doris-connector 将数据写入 Doris ODS。通过 Flink at least once + Doris Unique 模型，实现数据从 <strong>Flink CDC → Kafka → Flink → Doris 端到端 EOS 保证</strong></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img%E6%A9%99%E8%81%94%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE_2.jpeg"> </p><p>在准实时数仓的分层设计上，采用 ODS(Operation Data Store 数据准备区，也称为贴源层)， 数据细节层 DWD、数据中间层 DWM、数据服务层 DWS，数据应用层 ADS 的分层思想</p><h2 id="3-问题及解决方案"><a href="#3-问题及解决方案" class="headerlink" title="3. 问题及解决方案"></a>3. 问题及解决方案</h2><p>在基于 Doris 的准实时数仓搭建过程中也解决了一些问题</p><p><strong>1. longtext 字段数据采用外部表映射方式导入数据到 Doris 报错</strong></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img%E5%A4%96%E9%83%A8%E8%A1%A8%E6%98%A0%E5%B0%84%E6%96%B9%E5%BC%8F%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%88%B0dori.png"> </p><p>不是字段 null 的问题，这个提示有误，实际问题是 detail 字段太大了，不适合利用外部表的方式导入，外部表不支持 longtext 这类超长字段的导入</p><p>以下是 MySQL 和 Doris 中的类型匹配情况</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgdoris%E5%92%8C%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB%E5%9E%8B%E5%8C%B9%E9%85%8D%E6%83%85%E5%86%B5.png"></p><p>MySQL 表结构如下，detail 字段数据长度可达几十 MB</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220724135541.png"> </p><p><strong>解决方案：采用 FlinkCDC 的方式，成功导入</strong></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imglanguage_detail.png"> </p><p><strong>2. 业务数据库物理删除操作</strong></p><p>业务数据库会有物理删除的情况，FlinkCDC 在做数据抽取的时候使用 Debezium 提供的 op 来判断物理删除，Doris 的 ODS 表增加逻辑删除字段 is_deleted_flag 来标识数据是否删除</p><p><strong>3. FlinkCDC 抽取数据写入到 Doris 报错 err&#x3D;-235</strong></p><p>FlinkCDC 抽取数据写入到 Doris 报错，<code>err: tablet writer write failed, tablet_id=8165971, txn_id=122211550, err=-235, see more in null</code></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgdoris_error_235.png">  </p><p>排查问题发现是 Doris 集群挂了以后，在重启时积累了大量的数据写入批次，Doris 内部来不及 compaction 导致了 tablet 的数据版本超过了最大限制（默认500），这里目前暂时解决方案是将 <code>max_tablet_version_num</code> 扩大了 6 倍</p><p>未来将升级 Doris 1.1.1 版本，配合最新的 flink-doris-connector 来避免此类问题</p><p><strong>Doris 1.1 版本新特性：</strong></p><p>在 <strong>Compaction 实时性</strong>做出了优化，数据能快速合并，Tablet 数据版本个数维持在 50 以下， Compaction Score 稳定。相比于之前高并发导入频出的 -235 问题，<strong>Compaction 合并效率有 10+ 倍提升</strong></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgDoris1.1_Compaction%E5%AE%9E%E6%97%B6%E6%80%A7.jpeg"> </p><p>在 <strong>CPU 资源消耗</strong>上，Doris 1.1.1 针对小文件的 Compaction 进行了策略优化，在上述高并发导入场景，<strong>CPU 资源消耗下降 25%</strong></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgDoris1.1_CPU%E8%B5%84%E6%BA%90%E6%B6%88%E8%80%97.jpeg"> </p><p>另外对于 <strong>QPS 查询延迟的稳定性</strong>，Doris 1.1 通过降低 CPU 使用率，减少数据版本的个数，提升了数据整体有序性，从而减少了 SQL 查询的延迟。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgDoris1.1_QPS%E6%9F%A5%E8%AF%A2%E5%BB%B6%E8%BF%9F%E7%A8%B3%E5%AE%9A.jpeg"> </p><p><strong>Doris 1.1 对高并发导入、秒级别数据同步、数据实时可见等场景都做了针对性优化，大大增加了 Flink + Doris 系统的易用性以及稳定性，节省了集群整体资源</strong></p><p>另外我们部署了 Doris 集群 Grafana Dashboard 监控，能及时监控 Doris 集群相关指标</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220724151404.png"></p><p><strong>4. SQL执行超时</strong></p><p>批处理过程中确实会有一些复杂的任务或者写入数据太多的任务会超时，除了调大 timeout 参数（目前设置为 10 分钟）以外，我们还把任务做了切分。有些写入的 SQL 按照分区字段或者日期区间来分批计算或引入中间层 DWM 进行复杂任务的拆分</p><p>未来会使用 Doris 多租户的功能进行资源隔离，减少大作业的资源占用对生产集群其他作业的影响</p><p><strong>5. 调度系统存在的问题</strong></p><p>我们之前使用 Dolphinscheduler 2.x 对 Doris 进行数据调度，使用中发现当多段 Doris SQL 编辑在同一个 node 时，会出现只执行了第一段 Doris SQL 的情况</p><p>以生产的一张宽表调度任务为例，这张宽表有 75 个字段，数据量为几十万，关联表有 15 张，调度在正常情况下不可能 1s ~ 2s 完成，debug 发现调度任务只执行了第一段 Doris SQL</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgdolpin%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98.png"></h3><p>针对次问题 Dolphinscheduler 2.x 官网解释是不支持 MySQL 数据源一次执行多段 SQL，Dolphinscheduler 3.0 修复了此问题，可在任务参数中配置分段执行符号</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220731160955.png">  </p><p>我们将 Dolphinscheduler 升级到 3.x，并持续观察运行时长，稳定在 1m30s 左右，此类调度问题被解决</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgdolpin3.0%E8%B0%83%E5%BA%A6.png"></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>目前我们数仓 1.0 版本已上线，橙联正在形成以 Apache Doris 为核心的数据生态，随着应用的深入，我们也正在创建以 Doris 为基础的数据中台和 DataOps</p><p>最后，感谢 Apache Doris 团队给予的支持，祝愿 Apache Doris 社区发展越来越好！</p><p>作者：喻婷 橙联 大数据开发工程师</p>]]></content>
    
    
    
    <tags>
      
      <tag>Doris</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python导入模块和包</title>
    <link href="/2022/07/23/python%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/"/>
    <url>/2022/07/23/python%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h2 id="python导入模块"><a href="#python导入模块" class="headerlink" title="python导入模块"></a>python导入模块</h2><p>模块就是 Python 程序。换句话说，任何 Python 程序都可以作为模块</p><h3 id="python导入模块的2种方式"><a href="#python导入模块的2种方式" class="headerlink" title="python导入模块的2种方式"></a>python导入模块的2种方式</h3><p> import 导入模块的语法：</p><p><code>1.import 模块名1 [as 别名1], 模块名2 [as 别名2]，…</code></p><p>使用这种语法格式的 import 语句，会导入指定模块中的所有成员（包括变量、函数、类等）。</p><p>不仅如此，当需要使用模块中的成员时，需用该模块名（或别名）作为前缀，否则 Python 解释器会报错。</p><p><code>2.from 模块名 import 成员名1 [as 别名1]，成员名2 [as 别名2]，…</code></p><p>使用这种语法格式的 import 语句，只会导入模块中指定的成员，而不是全部成员。同时，当程序中使用该成员时，无需附加任何前缀，直接使用成员名（或别名）即可。</p><h4 id="import-模块名-as-别名"><a href="#import-模块名-as-别名" class="headerlink" title="import 模块名 as 别名"></a>import 模块名 as 别名</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入sys、os两个模块</span><br><span class="hljs-keyword">import</span> sys,os<br><span class="hljs-comment"># 使用模块名作为前缀来访问模块中的成员</span><br><span class="hljs-built_in">print</span>(sys.argv[<span class="hljs-number">0</span>])<br><span class="hljs-comment"># os模块的sep变量代表平台上的路径分隔符</span><br><span class="hljs-built_in">print</span>(os.sep)<br></code></pre></td></tr></table></figure><p>上面第 2 行代码一次导入了 sys 和 os 两个模块，因此程序要使用 sys、os 两个模块内的成员，只要分别使用 sys、os 模块名作为前缀即可</p><h4 id="from-模块名-import-成员名-as-别名"><a href="#from-模块名-import-成员名-as-别名" class="headerlink" title="from 模块名 import 成员名 as 别名"></a>from 模块名 import 成员名 as 别名</h4><p>下面程序使用了 from…import 最简单的语法来导入指定成员：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入sys模块的argv成员</span><br><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argv<br><span class="hljs-comment"># 使用导入成员的语法，直接使用成员名访问</span><br><span class="hljs-built_in">print</span>(argv[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>第 2 行代码导入了 sys 模块中的 argv 成员，这样即可在程序中直接使用 argv 成员，无须使用任何前缀。</p><p>导入模块成员时，也可以为成员指定别名，例如如下程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入sys模块的argv成员，并为其指定别名v</span><br><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argv <span class="hljs-keyword">as</span> v<br><span class="hljs-comment"># 使用导入成员（并指定别名）的语法，直接使用成员的别名访问</span><br><span class="hljs-built_in">print</span>(v[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>第 2 行代码导入了 sys 模块中的 argv 成员，并为该成员指定别名 v，这样即可在程序中通过别名 v 使用 argv 成员，无须使用任何前缀。</p><p><strong>Tips:</strong> 需要说明的是，一般不推荐使用“from 模块 import”这种语法导入指定模块内的所有成员，因为它存在潜在的风险。比如同时导入 module1 和 module2 内的所有成员，假如这两个模块内都有一个 foo() 函数，那么当在程序中执行如下代码时：</p><p><code>foo()</code></p><p>上面调用的这个 foo() 函数到底是 module1 模块中的还是 module2 模块中的？因此，这种导入指定模块内所有成员的用法是有风险的。</p><p>但如果换成如下两种导入方式：</p><p><code>import module1 import module2 </code></p><p>接下来要分别调用这两个模块中的 foo() 函数就非常清晰。程序可使用如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#使用模块module1 的模块名作为前缀调用foo()函数</span><br>module1.foo()<br><span class="hljs-comment">#使用module2 的模块别名作为前缀调用foo()函数</span><br>module2.foo()<br></code></pre></td></tr></table></figure><p>或者使用 from…import 语句也是可以的，但是得给别名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#导入module1 中的foo 成员，并指定其别名为foo1</span><br><span class="hljs-keyword">from</span> module1 <span class="hljs-keyword">import</span> foo <span class="hljs-keyword">as</span> fool<br><span class="hljs-comment">#导入module2 中的foo 成员，并指定其别名为foo2</span><br><span class="hljs-keyword">from</span> module2 <span class="hljs-keyword">import</span> foo <span class="hljs-keyword">as</span> foo2<br></code></pre></td></tr></table></figure><p>此时通过别名将 module1 和 module2 两个模块中的 foo 函数很好地进行了区分，接下来分别调用两个模块中 foo() 函数就很清晰：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">foo1() <span class="hljs-comment">#调用module1 中的foo()函数</span><br>foo2() <span class="hljs-comment">#调用module2 中的foo()函数</span><br></code></pre></td></tr></table></figure><h2 id="python导入包"><a href="#python导入包" class="headerlink" title="python导入包"></a>python导入包</h2><p>实际开发中，一个大型的项目往往需要使用成百上千的Python模块，如果将这些模块都堆放在一起，势必不好管理。而且，使用模块可以有效避免变量名或函数名重名引发的冲突，但是如果模块名重复怎么办呢？因此，Python提出了包（Package）的概念。</p><p>简单理解，包就是文件夹，只不过在该文件夹下必须存在一个名为_<em>init</em>_.py的文件。</p><p>| 注意，这是 Python 2.x 的规定，而在 Python 3.x 中，<strong>init</strong>.py 对包来说，并不是必须的。</p><p>每个包的目录下都必须建立一个 _<em>init</em>_.py 的模块，可以是一个空模块，可以写一些初始化代码，其作用就是告诉 Python 要将该目录当成包来处理。</p><p>包是一个包含多个模块的文件夹，它的本质依然是模块，因此包中也可以包含包。例如，我们安装了 numpy 模块之后可以在 Lib\site-packages 安装目录下找到名为 numpy 的文件夹，它就是安装的 numpy 模块（其实就是一个包）</p><p>假如我们有如下文件结构的包：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">my_package<br>     ┠── __init__.<span class="hljs-keyword">py</span><br>     ┠── module1.<span class="hljs-keyword">py</span><br>     ┗━━ module2.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>_<em>init</em>_.py</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">&#x27;&#x27;&#x27;<br>http://c.biancheng.net/<br>创建第一个 Python 包<br>&#x27;&#x27;&#x27;<br>print(<span class="hljs-emphasis">&#x27;http://c.biancheng.net/python/&#x27;</span>)<br></code></pre></td></tr></table></figure><p>module1.py模块文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#module1.py模块文件</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">display</span>(<span class="hljs-params">arc</span>):<br>    <span class="hljs-built_in">print</span>(arc)<br></code></pre></td></tr></table></figure><p>module2.py 模块文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#module2.py 模块文件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CLanguage</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">display</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;http://c.biancheng.net/python/&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="python导入包的3种方式"><a href="#python导入包的3种方式" class="headerlink" title="python导入包的3种方式"></a>python导入包的3种方式</h3><p>导入包的方法可归结为以下 3 种：</p><ol><li><p><code>import 包名[.模块名 [as 别名]]</code></p></li><li><p><code>from 包名 import 模块名 [as 别名]</code></p></li><li><p><code>from 包名.模块名 import 成员名 [as 别名]</code></p></li></ol><h4 id="1-import-包名-模块名-as-别名"><a href="#1-import-包名-模块名-as-别名" class="headerlink" title="1) import 包名[.模块名 [as 别名]]"></a>1) import 包名[.模块名 [as 别名]]</h4><p>以前面创建好的 my_package 包为例，导入 module1 模块并使用该模块中成员可以使用如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> my_package.module1<br>my_package.module1.display(<span class="hljs-string">&quot;http://c.biancheng.net/java/&quot;</span>)<br></code></pre></td></tr></table></figure><p>运行结果为：</p><p><code>http://c.biancheng.net/java/</code></p><p>可以看到，通过此语法格式导入包中的指定模块后，在使用该模块中的成员（变量、函数、类）时，需添加“包名.模块名”为前缀。当然，如果使用 as 给包名.模块名”起一个别名的话，就使用直接使用这个别名作为前缀使用该模块中的方法。</p><p>另外，当直接导入指定包时，程序会自动执行该包所对应文件夹下的 <strong>init</strong>.py 文件中的代码,例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> my_package<br>my_package.module1.display(<span class="hljs-string">&quot;http://c.biancheng.net/linux_tutorial/&quot;</span>)<br></code></pre></td></tr></table></figure><p>直接导入包名，并不会将包中所有模块全部导入到程序中，它的作用仅仅是导入并执行包下的 _<em>init</em>_.py 文件，因此，运行该程序，在执行 <strong>init</strong>.py 文件中代码的同时，还会抛出 AttributeError 异常（访问的对象不存在）</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">http://<span class="hljs-keyword">c</span>.biancheng.net/<span class="hljs-keyword">python</span>/<br>Traceback (most recent <span class="hljs-keyword">call</span> <span class="hljs-keyword">last</span>):<br>  File <span class="hljs-string">&quot;C:\Users\mengma\Desktop\demo.py&quot;</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">2</span>, in <span class="hljs-symbol">&lt;module&gt;</span><br>    my_package.module1.<span class="hljs-keyword">display</span>(<span class="hljs-string">&quot;http://c.biancheng.net/linux_tutorial/&quot;</span>)<br>AttributeError: module <span class="hljs-string">&#x27;my_package&#x27;</span> <span class="hljs-built_in">has</span> <span class="hljs-keyword">no</span> attribute <span class="hljs-string">&#x27;module1&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="2-from-包名-import-模块名-as-别名"><a href="#2-from-包名-import-模块名-as-别名" class="headerlink" title="2) from 包名 import 模块名 [as 别名]"></a>2) from 包名 import 模块名 [as 别名]</h4><p>仍以导入 my_package 包中的 module1 模块为例，使用此语法格式的实现代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> my_package <span class="hljs-keyword">import</span> module1<br>module1.display(<span class="hljs-string">&quot;http://c.biancheng.net/golang/&quot;</span>)<br></code></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>c.biancheng.net<span class="hljs-regexp">/python/</span><br>http:<span class="hljs-regexp">//</span>c.biancheng.net<span class="hljs-regexp">/golang/</span><br></code></pre></td></tr></table></figure><p>同样，既然包也是模块，那么这种语法格式自然也支持 <code>from 包名 import *</code> 这种写法，它和 import 包名 的作用一样，都只是将该包的 <strong>init</strong>.py 文件导入并执行。</p><h4 id="3-from-包名-模块名-import-成员名-as-别名"><a href="#3-from-包名-模块名-import-成员名-as-别名" class="headerlink" title="3) from 包名.模块名 import 成员名 [as 别名]"></a>3) from 包名.模块名 import 成员名 [as 别名]</h4><p>此语法格式用于向程序中导入“包.模块”中的指定成员（变量、函数或类）。通过该方式导入的变量（函数、类），在使用时可以直接使用变量名（函数名、类名）调用，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> my_package.module1 <span class="hljs-keyword">import</span> display<br>display(<span class="hljs-string">&quot;http://c.biancheng.net/shell/&quot;</span>)<br></code></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>c.biancheng.net<span class="hljs-regexp">/python/</span><br>http:<span class="hljs-regexp">//</span>c.biancheng.net<span class="hljs-regexp">/shell/</span><br></code></pre></td></tr></table></figure><hr><p><strong>Tips: Python __all__变量用法</strong></p><p>事实上，当我们向文件导入某个模块时，导入的是该模块中那些名称不以下划线（单下划线“_”或者双下划线“__”）开头的变量、函数和类。因此，如果我们不想模块文件中的某个成员被引入到其它文件中使用，可以在其名称前添加下划线。</p><p>除此之外，还可以借助模块提供的  _<em>all__变量，该变量的值是一个列表，存储的是当前模块中一些成员（变量、函数或者类）的名称。通过在模块文件中设置 _<em>all</em></em> 变量，当其它文件以“from 模块名 import *”的形式导入该模块时，该文件中只能使用_<em>all</em>_ 列表中指定的成员。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">say</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;人生苦短，我学Python！&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CLanguage</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;C语言中文网：http://c.biancheng.net&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">disPython</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python教程：http://c.biancheng.net/python&quot;</span>)<br>__all__ = [<span class="hljs-string">&quot;say&quot;</span>,<span class="hljs-string">&quot;CLanguage&quot;</span>]<br></code></pre></td></tr></table></figure><p>此时调用disPython() 函数会报错</p><p>再次声明，_<em>all</em>_ 变量仅限于在其它文件中以“from 模块名 import *”的方式引入。也就是说，如果使用以下 2 种方式引入模块，则  _<em>all</em>_ 变量的设置是无效的。</p><p>以“import 模块名”的形式导入模块</p><p>以“from 模块名 import 成员”的形式直接导入指定成员</p><p>参考链接：<a href="http://c.biancheng.net/python">http://c.biancheng.net/python</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python包源码安装</title>
    <link href="/2022/07/23/python%E5%8C%85%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/"/>
    <url>/2022/07/23/python%E5%8C%85%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>比如我们在要用numpy这个库的时候，我们通常的下载方法是<code>pip install numpy</code></p><p>但本文提供另外一种下载python包的方法，下载源码安装。</p><p>一般使用的场景是pip在线下载很慢，或者在GitHub上看到好玩的程序，拿到源码来安装。</p><h3 id="python包源码安装"><a href="#python包源码安装" class="headerlink" title="python包源码安装"></a>python包源码安装</h3><h4 id="方法一：pip-install"><a href="#方法一：pip-install" class="headerlink" title="方法一：pip install ."></a>方法一：pip install .</h4><p>下载到源码包后，进入包内，例如我们下载了requests的源码包，cd包内，然后进行pip install的安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs linux">cd requests<br>pip install .<br></code></pre></td></tr></table></figure><h4 id="方法二：python-setup-py-install"><a href="#方法二：python-setup-py-install" class="headerlink" title="方法二：python setup.py install"></a>方法二：python setup.py install</h4><p>cd 进入requests文件夹内，输入命令：</p><p><code>python setup.py install</code>回车即可</p><h4 id="方法三：Install-a-project-from-VCS"><a href="#方法三：Install-a-project-from-VCS" class="headerlink" title="方法三：Install a project from VCS"></a>方法三：Install a project from VCS</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">python3 -m pip install -e git+https://git.repo/some_pkg.git<span class="hljs-comment">#egg=SomePackage          # from git</span><br>python3 -m pip install -e hg+https://hg.repo/some_pkg.git<span class="hljs-comment">#egg=SomePackage            # from mercurial</span><br>python3 -m pip install -e svn+svn://svn.repo/some_pkg/trunk/<span class="hljs-comment">#egg=SomePackage         # from svn</span><br>python3 -m pip install -e git+https://git.repo/some_pkg.git@feature<span class="hljs-comment">#egg=SomePackage  # from &#x27;feature&#x27; branch</span><br>python3 -m pip install -e <span class="hljs-string">&quot;git+https://git.repo/some_repo.git#egg=subdir&amp;subdirectory=subdir_path&quot;</span> <span class="hljs-comment"># install a python package from a repo subdirectory</span><br></code></pre></td></tr></table></figure><p>参考链接：<a href="https://pip.pypa.io/en/stable/cli/pip_install/#">pip document v22.2</a> </p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>本文主要介绍了python的3种方式安装源码包的方法，give it a try! 😊</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>anaconda创建多个python环境</title>
    <link href="/2022/07/23/anaconda%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AApython%E7%8E%AF%E5%A2%83/"/>
    <url>/2022/07/23/anaconda%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AApython%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>本文旨在讲怎么用anaconda创建多个python环境，主要是因为在github上看到好玩的项目非得要用python3.10版本，我之前装的python版本比这个低，不然才不会折腾环境的安装呢 :( </p><h3 id="conda查看目前已有的环境"><a href="#conda查看目前已有的环境" class="headerlink" title="conda查看目前已有的环境"></a>conda查看目前已有的环境</h3><p>关于anaconda的安装可以自己去百度安装下，这里就不赘述安装的过程了。</p><p>当安装完成并设置环境变量之后，就可以在命令行终端查看conda的环境了。</p><p>运行命令<code>conda env list</code> 就可以查看目前conda有哪些环境，如下图是我目前conda的环境，这里有一个是base, 注意base前面有个*，这表示是我们当前的环境，这个是安装anaconda最初时候就产生的。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220723134349.png"></p><h3 id="conda创建新python环境"><a href="#conda创建新python环境" class="headerlink" title="conda创建新python环境"></a>conda创建新python环境</h3><p>在原来的基础上，如果我想用python3.10版本，是不是要重新去官网下载python3.10版本呢，其实不用的，可以直接通过conda-forge的channel，只需要下面这一行命令即可创建新的<code>Python</code>3.10正式版本虚拟环境：</p><p><code>conda create -n py310 python=3.10 -c conda-forge -y</code></p><p>输入这行命令之后你会看到如下安装过程</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220723135012.png"></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220723135138.png"></p><p>这样python3.10就算是下载完成了，完成安装之后，激活环境进入<code>Python</code>的shell</p><p>激活新环境命令：<code>conda activate py310(新环境名称)</code></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220723135512.png"></p><p>退出当前环境可以使用命令</p><p><code>conda deactivate</code></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文主要是conda命令的学习</p><p>1.查看conda所有环境</p><p><code>conda env list</code> </p><p>2.创建新python环境</p><p><code>conda create -n py310 python=3.10 -c conda-forge -y</code> </p><p>3.激活新环境</p><p><code>conda activate py310(新环境名称)</code></p><p>4.退出当前环境</p><p><code>conda deactivate</code></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python实现配置文件传参的多线程爬虫</title>
    <link href="/2022/07/15/python%E5%AE%9E%E7%8E%B0%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BC%A0%E5%8F%82%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB/"/>
    <url>/2022/07/15/python%E5%AE%9E%E7%8E%B0%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BC%A0%E5%8F%82%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB/</url>
    
    <content type="html"><![CDATA[<h3 id="迷你定向网页抓取器"><a href="#迷你定向网页抓取器" class="headerlink" title="迷你定向网页抓取器"></a>迷你定向网页抓取器</h3><h4 id="明确要求"><a href="#明确要求" class="headerlink" title="明确要求"></a>明确要求</h4><p>这个迷你定向网页抓取器是基于如下需求来实现的网络爬虫的功能，实现对种子链接的广度优先抓取，并把URL格式符合特定pattern的网页保存到磁盘上。</p><p>要求：</p><ol><li><p>需要支持命令行参数处理。具体包含: -h(帮助)、-v(版本)、-c(配置文件)</p></li><li><p>需要按照广度优先的顺序抓取网页</p></li><li><p>单个网页抓取或解析失败，不能导致整个程序退出。需要在日志中记录下错误原因并继续</p></li><li><p>当程序完成所有抓取任务后，必须优雅退出。</p></li><li><p>从HTML提取链接时需要处理相对路径和绝对路径。</p></li><li><p>网页存储时每个网页单独存为一个文件，以URL为文件名。注意对URL中的特殊字符，需要做转义。</p></li><li><p>要求支持多线程并行抓取。</p></li><li><p>代码的可读性和可维护性好。注意模块、类、函数的设计和划分</p></li><li><p>PS Python CM委员会为大家提供测试抓取网站: <a href="http://pycm.baidu.com:8081/">http://pycm.baidu.com:8081</a></p></li></ol><hr><h4 id="程序说明"><a href="#程序说明" class="headerlink" title="程序说明"></a>程序说明</h4><p><strong>Py-files:</strong></p><blockquote><p><strong>run_main.py</strong> : this file is the execute-file of the project</p></blockquote><blockquote><p><strong>mini_spider.py</strong> : this file is to start multi crawling-threads</p></blockquote><blockquote><p><strong>config_args.py</strong> : this file is to load configurations from spider.conf</p></blockquote><blockquote><p><strong>Url.py</strong> : this file is the class for url</p></blockquote><blockquote><p><strong>crawl_thread.py</strong>: this file is a unit of crawling-thread</p></blockquote><blockquote><p><strong>html_parse.py</strong> : this file is a class for parsing html to extract urls</p></blockquote><blockquote><p><strong>downloader.py</strong> : this file is a class for downloading a page <strong>log.py</strong> : this file is used for logging</p></blockquote><p><strong>Cfg-files:</strong></p><blockquote><p><strong>urls</strong> : this file save seed-urls (depth - 0)</p></blockquote><blockquote><p><strong>spider.conf</strong> : this file save normal configurations for crawling</p></blockquote><p><strong>Dirs:</strong></p><blockquote><p><strong>log</strong> : this dir is used for saving log-files</p></blockquote><blockquote><p><strong>output</strong> : this dir is used for saving Url-page</p></blockquote><blockquote><p><strong>test</strong> : this dir contains all unittest-py</p></blockquote><p><strong>How to run:</strong></p><blockquote><p>1: change into this dir</p></blockquote><blockquote><p>2: run <code>python run_main.py -c spider.conf</code> or <code>python run_main.p</code></p></blockquote><hr><h4 id="代码走读"><a href="#代码走读" class="headerlink" title="代码走读"></a>代码走读</h4><h5 id="spider-conf配置文件"><a href="#spider-conf配置文件" class="headerlink" title="spider.conf配置文件"></a>spider.conf配置文件</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[spider]</span><br><span class="hljs-attr">url_list_file</span> = ./urls<br><span class="hljs-attr">output_directory</span> = ./output<br><span class="hljs-attr">max_depth</span> = <span class="hljs-number">1</span><br><span class="hljs-attr">crawl_interval</span> = <span class="hljs-number">0.3</span> <br><span class="hljs-attr">crawl_timeout</span> = <span class="hljs-number">2</span><br><span class="hljs-attr">target_url</span> = .*.(gif|png|jpg|bmp)$ <br><span class="hljs-attr">thread_count</span> = <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h5 id="run-main-py"><a href="#run-main-py" class="headerlink" title="run_main.py"></a>run_main.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> logging<br><br><span class="hljs-keyword">import</span> mini_spider<br><span class="hljs-keyword">import</span> log<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    主程序,程序入口</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    log.init_log(<span class="hljs-string">&#x27;./log/mini_spider&#x27;</span>)<br>    logging.info(<span class="hljs-string">&#x27;%-35s&#x27;</span> % <span class="hljs-string">&#x27; * miniSpider is starting ... &#x27;</span>)<br>    <span class="hljs-comment"># **********************  start  ***********************</span><br>    <span class="hljs-comment"># 1.set args for the program(设置参数)</span><br>    parser = argparse.ArgumentParser(description = <span class="hljs-string">&#x27;This is a mini spider program!&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-v&#x27;</span>,<br>                        <span class="hljs-string">&#x27;--version&#x27;</span>,<br>                        action=<span class="hljs-string">&#x27;version&#x27;</span>,<br>                        version=<span class="hljs-string">&#x27;%(prog)s 1.0.0&#x27;</span>)<br><br>    parser.add_argument(<span class="hljs-string">&#x27;-c&#x27;</span>,<br>                        <span class="hljs-string">&#x27;--config_file&#x27;</span>,<br>                        action=<span class="hljs-string">&#x27;store&#x27;</span>,<br>                        dest=<span class="hljs-string">&#x27;CONF_PATH&#x27;</span>,<br>                        default=<span class="hljs-string">&#x27;spider.conf&#x27;</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Set configuration file path&#x27;</span>)<br><br>    args = parser.parse_args()<br><br>    <span class="hljs-comment">#2.create an instance of miniSpider and start crawling</span><br>    mini_spider_inst = mini_spider.MiniSpider(args.CONF_PATH)<br>    init_success = mini_spider_inst.initialize()<br>    <span class="hljs-keyword">if</span> init_success:<br>        mini_spider_inst.pre_print()<br>        mini_spider_inst.run_threads()<br><br>    <span class="hljs-comment"># ********************* end  **************************</span><br>    logging.info(<span class="hljs-string">&#x27;%-35s&#x27;</span> % <span class="hljs-string">&#x27; * miniSpider is ending ...&#x27;</span>)<br></code></pre></td></tr></table></figure><p>可以看到主程序其实就是两步，第一步是传入参数（配置文件），第二步是多线程爬虫（另外写的爬虫类）</p><p>先来看传入参数：</p><p>这里使用的是argparse模块，argparse的使用demo：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> argparse<br>parser = argparse.ArgumentParser()<br>parser.add_argument(<span class="hljs-string">&quot;--verbosity&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;increase output verbosity&quot;</span>)<br>args = parser.parse_args()<br><span class="hljs-keyword">if</span> args.verbosity:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;verbosity turned on&quot;</span>)<br>  <br>运行和输出  <br>$ python3 prog.py --verbosity <span class="hljs-number">1</span><br>verbosity turned on<br><br>$ python3 prog.py<br>无输出（这里--verbosity是可选参数）<br><br>$ python3 prog.py --<span class="hljs-built_in">help</span><br>usage: prog.py [-h] [--verbosity VERBOSITY]<br>options:<br>  -h, --<span class="hljs-built_in">help</span>            show this <span class="hljs-built_in">help</span> message <span class="hljs-keyword">and</span> exit<br>  --verbosity VERBOSITY<br>                        increase output verbosity<br>    <br>$ python3 prog.py --verbosity<br>usage: prog.py [-h] [--verbosity VERBOSITY]<br>prog.py: error: argument --verbosity: expected one argument<br></code></pre></td></tr></table></figure><p>argparse中dest的用法：</p><p>dest：如果提供dest，例如dest&#x3D;“CONF_PATH”，那么可以通过args.CONF_PATH访问该参数。</p><p>再来看多线程爬虫：</p><p>先是mini_spider模块调用生成MiniSpider类对象</p><p>mini_spider_inst &#x3D; mini_spider.MiniSpider(args.CONF_PATH)</p><p>再是调用initialize()的方法，init_success &#x3D; mini_spider_inst.initialize()，就是将配置文件的内容赋值给类变量。</p><p>最后就是多线程掉起，mini_spider_inst.run_threads()</p><h5 id="mini-spider-py"><a href="#mini-spider-py" class="headerlink" title="mini_spider.py"></a>mini_spider.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">import</span> termcolor<br><br><span class="hljs-keyword">import</span> url_object<br><span class="hljs-keyword">import</span> config_args<br><span class="hljs-keyword">import</span> crawl_thread<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MiniSpider</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    This class is a crawler-master-class for operating serveral crawling threads</span><br><span class="hljs-string">    Attributes:</span><br><span class="hljs-string">        checking_url      : 存放待爬URL的队列</span><br><span class="hljs-string">        checked_url       : 存放已经爬取过URL的队列</span><br><span class="hljs-string">        config_file_path  : 配置文件路径</span><br><span class="hljs-string">        error_url         : 存放访问出错URL的队列</span><br><span class="hljs-string">        lock              : 线程锁</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, config_file_path=<span class="hljs-string">&#x27;spider.conf&#x27;</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Initialize variables</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.checking_url = Queue.Queue(<span class="hljs-number">0</span>)<br>        self.checked_url = <span class="hljs-built_in">set</span>()<br>        self.error_url = <span class="hljs-built_in">set</span>()<br>        self.config_file_path = config_file_path<br>        self.lock = threading.Lock()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">initialize</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Initialize ConfigArgs parameters</span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            True / False : 相关配置文件正常返回True，否则返回False</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        config_arg = config_args.ConfigArgs(self.config_file_path) <span class="hljs-comment"># 从配置文件中读取数据</span><br>        is_load = config_arg.initialize()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_load:<br>            self.program_end(<span class="hljs-string">&#x27;there is no conf file !&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        self.url_list_file = config_arg.get_url_list_file()<br>        self.output_dir = config_arg.get_output_dir()<br>        self.max_depth = config_arg.get_max_depth()<br>        self.crawl_interval = config_arg.get_crawl_interval()<br>        self.crawl_timeout = config_arg.get_crawl_timeout()<br>        self.target_url = config_arg.get_target_url()<br>        self.thread_count = config_arg.get_thread_count()<br>        self.tag_dict = config_arg.get_tag_dict()<br>        self.url_pattern = re.<span class="hljs-built_in">compile</span>(self.target_url)<br><br>        seedfile_is_exist = self.get_seed_url()<br>        <span class="hljs-keyword">return</span> seedfile_is_exist<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pre_print</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        MiniSpider 创建时显示配置信息</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span> termcolor.colored(<span class="hljs-string">&#x27;* MiniSpider Configurations list as follows:&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>)<br>        <span class="hljs-built_in">print</span> termcolor.colored(<span class="hljs-string">&#x27;* %-25s : %s&#x27;</span> % (<span class="hljs-string">&#x27;url_list_file   :&#x27;</span>,<br>                                                   self.url_list_file),<br>                                                   <span class="hljs-string">&#x27;green&#x27;</span><br>                                                   )<br><br>        <span class="hljs-built_in">print</span> termcolor.colored(<span class="hljs-string">&#x27;* %-25s : %s&#x27;</span> % (<span class="hljs-string">&#x27;output_directory:&#x27;</span>,<br>                                                   self.output_dir),<br>                                                   <span class="hljs-string">&#x27;green&#x27;</span><br>                                                   )<br><br>        <span class="hljs-built_in">print</span> termcolor.colored(<span class="hljs-string">&#x27;* %-25s : %s&#x27;</span> % (<span class="hljs-string">&#x27;max_depth       :&#x27;</span>,<br>                                                  self.max_depth),<br>                                                  <span class="hljs-string">&#x27;green&#x27;</span><br>                                                  )<br><br>        <span class="hljs-built_in">print</span> termcolor.colored(<span class="hljs-string">&#x27;* %-25s : %s&#x27;</span> % (<span class="hljs-string">&#x27;crawl_interval  :&#x27;</span>,<br>                                                  self.crawl_interval),<br>                                                  <span class="hljs-string">&#x27;green&#x27;</span><br>                                                  )<br><br>        <span class="hljs-built_in">print</span> termcolor.colored(<span class="hljs-string">&#x27;* %-25s : %s&#x27;</span> % (<span class="hljs-string">&#x27;crawl_timeout   :&#x27;</span>,<br>                                                  self.crawl_timeout),<br>                                                  <span class="hljs-string">&#x27;green&#x27;</span><br>                                                  )<br><br>        <span class="hljs-built_in">print</span> termcolor.colored(<span class="hljs-string">&#x27;* %-25s : %s&#x27;</span> % (<span class="hljs-string">&#x27;target_url      :&#x27;</span>,<br>                                                   self.target_url),<br>                                                   <span class="hljs-string">&#x27;green&#x27;</span><br>                                                   )<br><br>        <span class="hljs-built_in">print</span> termcolor.colored(<span class="hljs-string">&#x27;* %-25s : %s&#x27;</span> % (<span class="hljs-string">&#x27;thread_count    :&#x27;</span>,<br>                                                  self.thread_count),<br>                                                  <span class="hljs-string">&#x27;green&#x27;</span><br>                                                  )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_seed_url</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        get seed url from seedUrlFile</span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            True / False : 存在种子文件返回True, 否则返回 False</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isfile(self.url_list_file):<br>            logging.error(<span class="hljs-string">&#x27; * seedfile is not existing !!!&#x27;</span>)<br>            self.program_end(<span class="hljs-string">&#x27;there is no seedfile !&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(self.url_list_file, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            lines = f.readlines()<br><br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>            <span class="hljs-keyword">if</span> line.strip() == <span class="hljs-string">&#x27;&#x27;</span>:<br>                <span class="hljs-keyword">continue</span><br><br>            url_obj = url_object.Url(line.strip(), <span class="hljs-number">0</span>)<br>            self.checking_url.put(url_obj)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">program_end</span>(<span class="hljs-params">self, info</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        退出程序的后续信息输出函数</span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            info : 退出原因信息</span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            none</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span> termcolor.colored(<span class="hljs-string">&#x27;* crawled page num : &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(self.checked_url)), <span class="hljs-string">&#x27;green&#x27;</span>)<br>        logging.info(<span class="hljs-string">&#x27;crawled  pages  num : &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(self.checked_url)))<br>        <span class="hljs-built_in">print</span> termcolor.colored(<span class="hljs-string">&#x27;* error page num : &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(self.error_url)), <span class="hljs-string">&#x27;green&#x27;</span>)<br>        logging.info(<span class="hljs-string">&#x27;error page num : &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(self.error_url)))<br>        <span class="hljs-built_in">print</span> termcolor.colored(<span class="hljs-string">&#x27;* finish_reason  :&#x27;</span> + info, <span class="hljs-string">&#x27;green&#x27;</span>)<br>        logging.info(<span class="hljs-string">&#x27;reason of ending :&#x27;</span> + info)<br>        <span class="hljs-built_in">print</span> termcolor.colored(<span class="hljs-string">&#x27;* program is ended ... &#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>)<br>        logging.info(<span class="hljs-string">&#x27;program is ended ... &#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_threads</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        设置线程池，并启动线程</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        args_dict = &#123;&#125;<br>        args_dict[<span class="hljs-string">&#x27;output_dir&#x27;</span>] = self.output_dir<br>        args_dict[<span class="hljs-string">&#x27;crawl_interval&#x27;</span>] = self.crawl_interval<br>        args_dict[<span class="hljs-string">&#x27;crawl_timeout&#x27;</span>] = self.crawl_timeout<br>        args_dict[<span class="hljs-string">&#x27;url_pattern&#x27;</span>] = self.url_pattern<br>        args_dict[<span class="hljs-string">&#x27;max_depth&#x27;</span>] = self.max_depth<br>        args_dict[<span class="hljs-string">&#x27;tag_dict&#x27;</span>] = self.tag_dict<br><br>        <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> xrange(self.thread_count):<br>            thread_name = <span class="hljs-string">&#x27;thread - %d&#x27;</span> % index<br>            <span class="hljs-comment"># CrawlerThread类继承了threading.Thread</span><br>            thread = crawl_thread.CrawlerThread(thread_name,<br>                                                self.process_request,<br>                                                self.process_response,<br>                                                args_dict)<br><br>            thread.setDaemon(<span class="hljs-literal">True</span>) <span class="hljs-comment"># MainThread 结束，子线程也立马结束，怎么做呢</span><br>            thread.start()<br>            <span class="hljs-built_in">print</span> termcolor.colored((<span class="hljs-string">&quot;第%s个线程开始工作&quot;</span>) % index, <span class="hljs-string">&#x27;yellow&#x27;</span>)<br>            logging.info((<span class="hljs-string">&quot;第%s个线程开始工作&quot;</span>) % index)<br><br>        self.checking_url.join()<br>        self.program_end(<span class="hljs-string">&#x27;normal exits &#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_visited</span>(<span class="hljs-params">self, url_obj</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        check new url_obj if visited (including Checked_Url and Error_Url)</span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            url_obj : Url 对象</span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            True / False  -  若访问过则返回 True ，否则返回 False</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        checked_url_list = self.checked_url.union(self.error_url)<br><br>        <span class="hljs-keyword">for</span> checked_url_ <span class="hljs-keyword">in</span> checked_url_list:<br>            <span class="hljs-keyword">if</span> url_obj.get_url() == checked_url_.get_url():<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        线程任务前期处理的回调函数：</span><br><span class="hljs-string">            负责从任务队列checking_url中取出url对象</span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            url_obj : 取出的url-object 对象</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        url_obj = self.checking_url.get()<br>        <span class="hljs-keyword">return</span> url_obj<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_response</span>(<span class="hljs-params">self, url_obj, flag, extract_url_list=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        线程任务后期回调函数：</span><br><span class="hljs-string">            解析HTML源码，获取下一层URLs 放入checking_url</span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            extract_url_list : 返回抽取出的urls集合</span><br><span class="hljs-string">            url_obj  : 被下载页面所处的url链接对象</span><br><span class="hljs-string">            flag     : 页面下载具体情况的返回标志</span><br><span class="hljs-string">                     - 0  : 表示下载成功且为非pattern页面</span><br><span class="hljs-string">                     - 1  : 表示下载成功且为符合pattern的图片</span><br><span class="hljs-string">                     - -1 : 表示页面下载失败</span><br><span class="hljs-string">                     - 2  : depth &gt;= max_depth 的非target - URL</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self.lock.acquire():<br>            <span class="hljs-keyword">if</span> flag == -<span class="hljs-number">1</span>:<br>                self.error_url.add(url_obj)<br><br>            <span class="hljs-keyword">elif</span> flag == <span class="hljs-number">0</span>:<br>                self.checked_url.add(url_obj)<br>                    <span class="hljs-comment"># link add into Checking_Url</span><br>                <span class="hljs-keyword">for</span> ex_url <span class="hljs-keyword">in</span> extract_url_list:<br>                    next_url_obj = url_object.Url(ex_url, <span class="hljs-built_in">int</span>(url_obj.get_depth()) + <span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.is_visited(next_url_obj):<br>                        self.checking_url.put(next_url_obj)<br><br>            <span class="hljs-keyword">elif</span> flag == <span class="hljs-number">1</span>:<br>                self.checked_url.add(url_obj)<br>            self.checking_url.task_done()<br>        self.lock.release()<br></code></pre></td></tr></table></figure><h5 id="crawl-thread-py"><a href="#crawl-thread-py" class="headerlink" title="crawl_thread.py"></a>crawl_thread.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">import</span> downloader<br><span class="hljs-keyword">import</span> html_parser<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CrawlerThread</span>(threading.Thread):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    This class is a crawler thread for crawling pages by breadth-first-crawling</span><br><span class="hljs-string">    Attributes:</span><br><span class="hljs-string">        process_request : 前期回调函数</span><br><span class="hljs-string">        process_response: 后期回调函数</span><br><span class="hljs-string">        output_dir      : 存放target 目录</span><br><span class="hljs-string">        crawl_interval  : 爬取间隔</span><br><span class="hljs-string">        crawl_timeout   : 爬取时间延迟</span><br><span class="hljs-string">        target_url      : 目标文件链接格式</span><br><span class="hljs-string">        max_depth       : 爬取最大深度</span><br><span class="hljs-string">        tag_dict        : 链接标签字典</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, process_request, process_response, args_dict</span>):<br><br>        <span class="hljs-built_in">super</span>(CrawlerThread, self).__init__(name=name)<br>        self.process_request = process_request<br>        self.process_response = process_response<br>        self.output_dir = args_dict[<span class="hljs-string">&#x27;output_dir&#x27;</span>]<br>        self.crawl_interval = args_dict[<span class="hljs-string">&#x27;crawl_interval&#x27;</span>]<br>        self.crawl_timeout = args_dict[<span class="hljs-string">&#x27;crawl_timeout&#x27;</span>]<br>        self.url_pattern = args_dict[<span class="hljs-string">&#x27;url_pattern&#x27;</span>]<br>        self.max_depth = args_dict[<span class="hljs-string">&#x27;max_depth&#x27;</span>]<br>        self.tag_dict = args_dict[<span class="hljs-string">&#x27;tag_dict&#x27;</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        线程执行的具体内容</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>            url_obj = self.process_request()<br>            time.sleep(self.crawl_interval)<br><br>            logging.info(<span class="hljs-string">&#x27;%-12s  : get a url  in depth : &#x27;</span> %<br>                         threading.currentThread().getName() + <span class="hljs-built_in">str</span>(url_obj.get_depth()))<br><br>            <span class="hljs-keyword">if</span> self.is_target_url(url_obj.get_url()):<br>                flag = -<span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> self.save_target(url_obj.get_url()):<br>                    flag = <span class="hljs-number">1</span><br>                self.process_response(url_obj, flag)<br>                <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">if</span> url_obj.get_depth() &lt; self.max_depth:<br>                downloader_obj = downloader.Downloader(url_obj, self.crawl_timeout)<br>                response, flag = downloader_obj.download() <span class="hljs-comment">#flag = 0 or -1</span><br><br>                <span class="hljs-keyword">if</span> flag == -<span class="hljs-number">1</span>: <span class="hljs-comment"># download failed</span><br>                    self.process_response(url_obj, flag)<br>                    <span class="hljs-keyword">continue</span><br><br>                <span class="hljs-keyword">if</span> flag == <span class="hljs-number">0</span>: <span class="hljs-comment"># download sucess</span><br>                    content = response.read()<br>                    url = url_obj.get_url()<br>                    soup = html_parser.HtmlParser(content, self.tag_dict, url)<br>                    extract_url_list = soup.extract_url()<br><br>                    self.process_response(url_obj, flag, extract_url_list)<br>            <span class="hljs-keyword">else</span>:<br>                flag = <span class="hljs-number">2</span>  <span class="hljs-comment"># depth &gt; max_depth 的正常URL</span><br>                self.process_response(url_obj, flag)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_target_url</span>(<span class="hljs-params">self, url</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        判断url 是否符合TargetUrl的形式</span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            url : 被用来判断的url</span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            True/False : 符合返回True 否则返回False</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        found_aim =self.url_pattern.match(url)<br>        <span class="hljs-keyword">if</span> found_aim:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">save_target</span>(<span class="hljs-params">self, url</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        save targetUrl-page into outputDir</span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            response : 页面返回file-object</span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            none</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isdir(self.output_dir):<br>            os.mkdir(self.output_dir)<br><br>        file_name = urllib.quote_plus(url)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(file_name) &gt; <span class="hljs-number">127</span>:<br>            file_name = file_name[-<span class="hljs-number">127</span>:]<br>        target_path = <span class="hljs-string">&quot;&#123;&#125;/&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.output_dir, file_name)<br>        <span class="hljs-keyword">try</span>:<br>            urllib.urlretrieve(url, target_path)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> e:<br>            logging.warn(<span class="hljs-string">&#x27; * Save target Faild: %s - %s&#x27;</span> % (url, e))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>在多线程的调用中这里是自定义一个类CrawlerThread，继承了父类threading.Thread。</p><p>派生类中重写父类threading.Thread的run()方法，其他方法（除了构造函数)都不应在子类中被重写，换句话说，在子类中只有_init_()和run()方法被重写。使用线程的时候先生成一个子线程类的对象，然后对象调用start()方法就可以运行线程啦（start调用run）</p><p>参考Github：<a href="https://github.com/DrCubic/MiniSpider">https://github.com/DrCubic/MiniSpider</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>文章中介绍了python程序通过配置文件传参数，多线程广度优先爬取符合要求的网页</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微博超话自动签到程序-SpringBoot注解</title>
    <link href="/2022/07/14/%E5%BE%AE%E5%8D%9A%E8%B6%85%E8%AF%9D%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%E7%A8%8B%E5%BA%8F-SpringBoot%E6%B3%A8%E8%A7%A3/"/>
    <url>/2022/07/14/%E5%BE%AE%E5%8D%9A%E8%B6%85%E8%AF%9D%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%E7%A8%8B%E5%BA%8F-SpringBoot%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="微博超话自动签到程序"><a href="#微博超话自动签到程序" class="headerlink" title="微博超话自动签到程序"></a>微博超话自动签到程序</h3><p>与世界交手的这二十几年来，我没追过星，专业领域里的偶像倒是有几个，但都不是歌手或演员，这次看浪姐3是粉上于文文了，直给的酷酷的性格，再深扒她在音乐领域也很能打，烟嗓配摇滚开嗓即巅峰哈哈哈哈。后面基本天天泡在三文鱼超话里面，有一天是看到一个文文粉丝挂了一个微博自动签到的程序。</p><p>这不巧了吗，同行啊，正好看看学习下这个签到程序，里面用到的是java的SpringBoot框架，web程序的框架正好我也不熟悉，借着追星还可以学代码🤩</p><hr><h4 id="代码走读"><a href="#代码走读" class="headerlink" title="代码走读"></a>代码走读</h4><h5 id="AutoCheckInApplication-java-类"><a href="#AutoCheckInApplication-java-类" class="headerlink" title="AutoCheckInApplication.java 类"></a><strong>AutoCheckInApplication.java</strong> 类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.didi.autocheckin;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.didi.autocheckin.config.WbConfig;<br><span class="hljs-keyword">import</span> com.didi.autocheckin.portConfig.StartCommand;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> okhttp3.MediaType;<br><span class="hljs-keyword">import</span> okhttp3.OkHttpClient;<br><span class="hljs-keyword">import</span> okhttp3.Request;<br><span class="hljs-keyword">import</span> okhttp3.Response;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.Scheduled;<br><br><span class="hljs-keyword">import</span> javax.annotation.PostConstruct;<br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoCheckInApplication</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> WbConfig wbConfig;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">StartCommand</span>(args); # 检查可用端口<br>        SpringApplication.run(AutoCheckInApplication.class, args);<br>    &#125;<br><br>  <br>    <span class="hljs-meta">@Scheduled(cron = &quot;0 0  0 * * ?&quot;)</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">auto</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> wbConfig.getCookie();<br>        List&lt;String&gt; pids = wbConfig.getPids();<br><br>        pids.forEach(x-&gt;&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                autoCheck(x,cookie);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                log.info(e.getMessage());<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自动签到</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pid 超话id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cookie cookie</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">autoCheck</span><span class="hljs-params">(String pid,String cookie)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">scCode</span> <span class="hljs-operator">=</span> <span class="hljs-number">100000</span>;<br>        log.info(<span class="hljs-string">&quot;开始自动签到&#123;&#125;&quot;</span>,pid);<br>        <span class="hljs-type">OkHttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpClient</span>().newBuilder()<br>                .build();<br><br>        <span class="hljs-type">MediaType</span> <span class="hljs-variable">mediaType</span> <span class="hljs-operator">=</span> MediaType.parse(<span class="hljs-string">&quot;text/plain&quot;</span>);<br><br>        <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>.Builder()<br>                .url(<span class="hljs-string">&quot;https://weibo.com/p/aj/general/button?api=http://i.huati.weibo.com/aj/super/checkin&amp;id=&quot;</span>+pid)<br>                .addHeader(<span class="hljs-string">&quot;cookie&quot;</span>, cookie)<br>                .build();<br><br>        <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.newCall(request).execute();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> response.body().string();<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">dataJsonObject</span> <span class="hljs-operator">=</span> JSONObject.parseObject(data);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> dataJsonObject.getInteger(<span class="hljs-string">&quot;code&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (code.equals(scCode)) &#123;<br>            log.info(<span class="hljs-string">&quot;签到成功&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            log.info(dataJsonObject.getString(<span class="hljs-string">&quot;msg&quot;</span>));<br>        &#125;<br>        log.info(<span class="hljs-string">&quot;结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类主要是看几个注解: </p><ul><li><p>@SpringBootApplication，可以看到这个启动类AutoCheckInApplication</p><p>最上面标的就是@SpringBootApplication注解，mian方法里调用run方法。这里.   run方法的作用如下：</p><p>SpringApplication.run()一共做了两件事</p><p> 1.创建SpringApplication对象；在对象初始化时保存事件监听器，容器初始化类.  以及判断是否为web应用，保存包含main方法的主配置类。</p></li></ul><p>​    2.调用run方法；准备spring的上下文，完成容器的初始化，创建，加载等。<strong>会在不同的时机触发监听器的不同事件。</strong></p><ul><li><p>@Resource，<strong>从Spring上下文中找到唯一匹配的bean进行装配</strong>，说白了就是去spring容器里面去找而不用new对象</p></li><li><p>@Scheduled，定时调度该方法</p></li><li><p>@PostConstruct</p></li></ul><p>@PostConstruct是java5的时候引入的注解，指的是在项目启动的时候执行这个方法，也可以理解为在spring容器启动的时候执行，可作为一些数据的常规化加载，比如数据字典之类的。</p><p>被@PostConstruct修饰的方法会在服务器加载Servle的时候运行，并且只会被服务器执行一次。PostConstruct在构造函数之后执行</p><hr><h5 id="WbConfig-java-类"><a href="#WbConfig-java-类" class="headerlink" title="WbConfig.java 类"></a><strong>WbConfig.java</strong> 类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.didi.autocheckin.config;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;wb&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WbConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;wb.cookie&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String cookie;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;wb.pid&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; pids;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>@Component：</strong> 标注Spring管理的Bean，使用@Component注解在一个类上，表示将此类标记为Spring容器中的一个Bean。</li></ul><p>  补充：**@controller：  controller控制器层（注入服务）**</p><p>  ​            <strong>@service ：   service服务层（注入dao）</strong></p><p>  ​            <strong>@repository ： dao持久层（实现dao访问）</strong></p><ul><li><p><strong>@Data</strong>:  属性的set和get方法不用写</p></li><li><p><strong>@ConfigurationProperties</strong>: 在编写项目代码时，我们要求更灵活的配置，更好的模块化整合。在 Spring Boot 项目中，为满足以上要求，我们将大量的参数配置在 application.properties 或 application.yml 文件中，通过 <code>@ConfigurationProperties</code> 注解，我们可以方便的获取这些参数值</p></li></ul><hr><h5 id="application-yml-配置文件内容："><a href="#application-yml-配置文件内容：" class="headerlink" title="application.yml 配置文件内容："></a><strong>application.yml 配置文件内容：</strong></h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-string">$&#123;auto.port&#125;</span><br><br><span class="hljs-comment"># cookie </span><br><span class="hljs-attr">wb:</span><br>  <span class="hljs-attr">cookie:</span> <span class="hljs-comment">#cookie</span><br>  <span class="hljs-attr">pid:</span> <span class="hljs-string">100808445c68f22a32b95efe6c3d025512d13c,1008089f1260fce8d1d56c76d01541995b2d5c</span><br></code></pre></td></tr></table></figure><hr><h5 id="StartCommand-java类"><a href="#StartCommand-java类" class="headerlink" title="StartCommand.java类"></a><strong>StartCommand.java类</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.didi.autocheckin.portConfig;<br><span class="hljs-keyword">import</span> com.didi.autocheckin.util.ServerPortUtil;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StartCommand</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 端口属性名称，如果名称为server.port则在配置文件中不用指定，否则需要指定为此处配置的名称，如$&#123;auto.port&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SERVER_PORT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;auto.port&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StartCommand</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isServerPort</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">serverPort</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (args != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (String arg : args) &#123;<br>                <span class="hljs-keyword">if</span> (StringUtils.hasText(arg) &amp;&amp; arg.startsWith(<span class="hljs-string">&quot;--server.port&quot;</span> )) &#123;<br>                    isServerPort = <span class="hljs-literal">true</span>;<br>                    serverPort = arg;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        String port;<br>        <span class="hljs-keyword">if</span> (isServerPort) &#123;<br>            port = serverPort.split(<span class="hljs-string">&quot;=&quot;</span>)[<span class="hljs-number">1</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            port = ServerPortUtil.getAvailablePort();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;Current project port is &quot;</span> + port);<br>        System.setProperty(SERVER_PORT, port);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="ServerPortUtil-java类"><a href="#ServerPortUtil-java类" class="headerlink" title="ServerPortUtil.java类"></a>ServerPortUtil.java类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.didi.autocheckin.util;<br><br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerPortUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_PORT</span> <span class="hljs-operator">=</span> <span class="hljs-number">65535</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MIN_PORT</span> <span class="hljs-operator">=</span> <span class="hljs-number">8000</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getAvailablePort</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-comment">// 最大尝试次数为端口范围</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxRetryCount</span> <span class="hljs-operator">=</span> MAX_PORT - MIN_PORT;<br>        <span class="hljs-keyword">while</span> (maxRetryCount &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 指定范围内随机端口，随便写的算法，根据自己需要调整</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> random.nextInt(MAX_PORT - MIN_PORT) + MIN_PORT;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isUsed</span> <span class="hljs-operator">=</span> isLocalePortUsing(port);<br>            <span class="hljs-keyword">if</span> (!isUsed) &#123;<br>                <span class="hljs-keyword">return</span> String.valueOf(port);<br>            &#125;<br>            --maxRetryCount;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;系统暂无端口可用，运行结束&quot;</span>);<br>        System.exit(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检查给定端口是否可用</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> tianxincode@163.com</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 2020/10/14</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLocalePortUsing</span><span class="hljs-params">(<span class="hljs-type">int</span> port)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 建立一个Socket连接, 如果该端口还在使用则返回true, 否则返回false, 127.0.0.1代表本机</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), port);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// 异常说明端口连接不上，端口能使用</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个签到程序，第一遍看完os：哇好混乱，这是什么注解啊！！那是什么意思啊</p><p>看第二遍os：我画画它的流程图看看。看第三遍os：好像就是两步，先检查可用port，然后设置一个定时签到任务。哈哈哈哈哈，看不懂就多看几遍就好了。</p><p>参考链接：<a href="https://gitee.com/didi1212/AutoCheckIn"></a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Doris写入数据报错err=-235</title>
    <link href="/2022/07/11/Doris%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E6%8A%A5%E9%94%99err-235/"/>
    <url>/2022/07/11/Doris%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E6%8A%A5%E9%94%99err-235/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><ul><li>Flinkcdc抽取数据写入到doris报错，err: tablet writer write failed, tablet_id&#x3D;8165971, txn_id&#x3D;122211550, err&#x3D;-235, see more in null</li></ul><p>具体截图如下：</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgdoris_235.png"></p><hr><h3 id="问题查询和解决"><a href="#问题查询和解决" class="headerlink" title="问题查询和解决"></a>问题查询和解决</h3><p>通过网上查询一圈，发现该问题还挺普遍的，而且还已经记录在了doris官网</p><p>[<a href="https://doris.apache.org/zh-CN/docs/faq/data-faq.html#q4-tablet-writer-write-failed-tablet-id-27306172-txn-id-28573520-err-235-or-215-or-238]">https://doris.apache.org/zh-CN/docs/faq/data-faq.html#q4-tablet-writer-write-failed-tablet-id-27306172-txn-id-28573520-err-235-or-215-or-238]</a>(tablet writer write failed, tablet_id&#x3D;27306172, txn_id&#x3D;28573520, err&#x3D;-235 or -215 or -238)</p><p>这个错误通常发生在数据导入操作中。新版错误码为 -235，老版本错误码可能是 -215。</p><p>这个错误的含义是，对应tablet的数据版本超过了最大限制（默认500，由 BE 参数 <code>max_tablet_version_num</code> 控制），后续写入将被拒绝。</p><p>比如问题中这个错误，即表示 27306172 这个tablet的数据版本超过了限制。</p><p>这个错误通常是因为导入的频率过高，大于后台数据的compaction速度，导致版本堆积并最终超过了限制。</p><p>此时，我们可以先通过show tablet 27306172 语句，然后执行结果中的 show proc 语句，查看tablet各个副本的情况。结果中的 versionCount即表示版本数量。</p><p>如果发现某个副本的版本数量过多，则需要降低导入频率(batch_size)或停止导入，并观察版本数是否有下降。</p><p>如果停止导入后，版本数依然没有下降，则需要去对应的BE节点查看be.INFO日志，搜索tablet id以及 compaction关键词，检查compaction是否正常运行。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上问题，可以通过两种方式解决</p><p>1.降低dorisBatchSize大小</p><p>2.增大tablet的数据版本数据版本最大限制，我们是将默认的调大到了3000，修改be.conf 中max_tablet_version_num &#x3D; 3000</p><p>我们项目组出线这个问题是因为，当天几台doris全挂了，重启后max_tablet_version_num之前设置的实效了，导致doris启动后积压了很多数据的需要compaction，一下子就达到了默认值versionCount&#x3D;500，导致的报错</p>]]></content>
    
    
    <categories>
      
      <category>Doris</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Doris</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flinkCDC抽取mysql数据问题记录</title>
    <link href="/2022/06/19/flinkCDC%E6%8A%BD%E5%8F%96mysql%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/06/19/flinkCDC%E6%8A%BD%E5%8F%96mysql%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="情景描述"><a href="#情景描述" class="headerlink" title="情景描述"></a>情景描述</h3><p>利用flinkcdc抽取mysql数据到kafka，再从kafka消费数据到Doris。</p><p>上游mysql的delete操作，在下游Doris做成逻辑删除，即表增加一列is_delete_flg做为是否删除的标志。Doris表设置为unique模型，保证端对端的幂等性，保证数据不会重复。其中Doris的unique模型表需要设置sequence列。</p><p>flinkcdc官网介绍的op_ts操作时间正好可以做为sequence。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220619203017.png"></p><p>在同步了两百多张表后，发现有一张表Doris的is_delete_flg&#x3D;1，也就是逻辑删除的状态，而mysql表里并没有删除。</p><hr><h3 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h3><p>定位问题的思路就是打印原始数据看看，直接flinkcdc读取过来然后做print打印原始数据</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala">------<span class="hljs-type">Struct</span>-原始value数据如下：--------------------<br><span class="hljs-type">Struct</span>&#123;before=<span class="hljs-type">Struct</span>&#123;goods_id=<span class="hljs-number">311054013088959091</span>,send_location=<span class="hljs-type">US</span>&#125;,source=<span class="hljs-type">Struct</span>&#123;version=<span class="hljs-number">1.5</span><span class="hljs-number">.4</span>.<span class="hljs-type">Final</span>,connector=mysql,name=mysql_binlog_source,ts_ms=<span class="hljs-number">1654866586000</span>,db=isc_goods,table=prd_goods_send_location,server_id=<span class="hljs-number">50103306</span>,gtid=<span class="hljs-number">25e11912</span>-aa95<span class="hljs-number">-11</span>ec<span class="hljs-number">-9</span>f6c<span class="hljs-number">-002248168</span>efc:<span class="hljs-number">3002800</span>,file=mysql_bin<span class="hljs-number">.000023</span>,pos=<span class="hljs-number">647582276</span>,row=<span class="hljs-number">0</span>&#125;,op=d,ts_ms=<span class="hljs-number">1654866586278</span>&#125;<br><br>------<span class="hljs-type">DELETE</span>-value数据如下：--------------------<br><span class="hljs-type">Struct</span>&#123;before=<span class="hljs-type">Struct</span>&#123;goods_id=<span class="hljs-number">311054013088959091</span>,send_location=<span class="hljs-type">US</span>&#125;,source=<span class="hljs-type">Struct</span>&#123;version=<span class="hljs-number">1.5</span><span class="hljs-number">.4</span>.<span class="hljs-type">Final</span>,connector=mysql,name=mysql_binlog_source,ts_ms=<span class="hljs-number">1654866586000</span>,db=isc_goods,table=prd_goods_send_location,server_id=<span class="hljs-number">50103306</span>,gtid=<span class="hljs-number">25e11912</span>-aa95<span class="hljs-number">-11</span>ec<span class="hljs-number">-9</span>f6c<span class="hljs-number">-002248168</span>efc:<span class="hljs-number">3002800</span>,file=mysql_bin<span class="hljs-number">.000023</span>,pos=<span class="hljs-number">647582276</span>,row=<span class="hljs-number">0</span>&#125;,op=d,ts_ms=<span class="hljs-number">1654866586278</span>&#125;<br>&#123;<span class="hljs-string">&quot;op&quot;</span>:<span class="hljs-string">&quot;-D&quot;</span>,<span class="hljs-string">&quot;data&quot;</span>:&#123;<span class="hljs-string">&quot;send_location&quot;</span>:<span class="hljs-string">&quot;US&quot;</span>,<span class="hljs-string">&quot;goods_id&quot;</span>:<span class="hljs-string">&quot;311054013088959091&quot;</span>,<span class="hljs-string">&quot;is_deleted_flg&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;ts_ms&quot;</span>:<span class="hljs-number">1654866586278</span>&#125;,<span class="hljs-string">&quot;source&quot;</span>:<span class="hljs-string">&quot;isc_goods.prd_goods_send_location&quot;</span>&#125;<br><br>------<span class="hljs-type">Struct</span>-原始value数据如下：--------------------<br><span class="hljs-type">Struct</span>&#123;after=<span class="hljs-type">Struct</span>&#123;goods_id=<span class="hljs-number">311054013088959091</span>,send_location=<span class="hljs-type">US</span>&#125;,source=<span class="hljs-type">Struct</span>&#123;version=<span class="hljs-number">1.5</span><span class="hljs-number">.4</span>.<span class="hljs-type">Final</span>,connector=mysql,name=mysql_binlog_source,ts_ms=<span class="hljs-number">1654866586000</span>,db=isc_goods,table=prd_goods_send_location,server_id=<span class="hljs-number">50103306</span>,gtid=<span class="hljs-number">25e11912</span>-aa95<span class="hljs-number">-11</span>ec<span class="hljs-number">-9</span>f6c<span class="hljs-number">-002248168</span>efc:<span class="hljs-number">3002800</span>,file=mysql_bin<span class="hljs-number">.000023</span>,pos=<span class="hljs-number">647582531</span>,row=<span class="hljs-number">0</span>&#125;,op=c,ts_ms=<span class="hljs-number">1654866586278</span>&#125;<br>&#123;<span class="hljs-string">&quot;op&quot;</span>:<span class="hljs-string">&quot;+I&quot;</span>,<span class="hljs-string">&quot;data&quot;</span>:&#123;<span class="hljs-string">&quot;send_location&quot;</span>:<span class="hljs-string">&quot;US&quot;</span>,<span class="hljs-string">&quot;goods_id&quot;</span>:<span class="hljs-string">&quot;311054013088959091&quot;</span>,<span class="hljs-string">&quot;is_deleted_flg&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;ts_ms&quot;</span>:<span class="hljs-number">1654866586278</span>&#125;,<span class="hljs-string">&quot;source&quot;</span>:<span class="hljs-string">&quot;isc_goods.prd_goods_send_location&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>发现delete的”ts_ms”:1654866586278和insert的 “ts_ms”:1654866586278是在同一毫秒发生，此时到Doris就会随机取一条数据，可能取到delete的那一条，所以标志is_delete_flg&#x3D;1，而mysql由于还有insert同一条数据，故而发生了👆描述的问题。</p><h3 id="猜想上游发生此数据现象的原因"><a href="#猜想上游发生此数据现象的原因" class="headerlink" title="猜想上游发生此数据现象的原因"></a>猜想上游发生此数据现象的原因</h3><p>可能delete和insert放在同一个事物中提交了，于是找上游要了处理逻辑</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220619204843.png"></p><p>发现真是批量提交了</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>1.可以将insert操作的op_ts➕1s使得和delete的操作时间不同</p><p>2.因为数据量比较小，我直接采用了select方式的datax方式抽取数据</p>]]></content>
    
    
    <categories>
      
      <category>Flink</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机统考专业课(408)笔记</title>
    <link href="/2022/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%9F%E8%80%83%E4%B8%93%E4%B8%9A%E8%AF%BE-408-%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%9F%E8%80%83%E4%B8%93%E4%B8%9A%E8%AF%BE-408-%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>每门学科其实都有自己的底层逻辑，如果说高屋建瓴，搭好一个好房子最重要的是地基，那么计算机学科的地基就是408，即计算机组成原理(CO)、数据结构(DS)、操作系统(OS)、计算机网络(CN)。这也是计算机很多优秀学校的考研专业课，算得上是工科考研难度天花板。</p><p>下面👇分别整理了四门课程的思维导图，在这里做个整理😄</p><h4 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h4><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.png"></p><h3 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h3><p>​<img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86@2x.png"></p><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.png"></p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>数据结构部分为手写，可以从线性到非线性的这个主题框架来阅读。因为数据结构除了线性就是非线性结构。</p><p>线性结构有：线性1.0（顺序表、链表），线性2.0（栈、队列），再进行推广有数据和字符串。</p><p>非线性结构：树，图</p><p><strong>线性结构和非线性结构是谈的数据的构成，要将数据结构这门课程灵活运用，重在数据的操作</strong>。什么是数据的操作呢？在大多数开发的场景，我们会对数据进行排序和查找。</p><p>排序和查找都有对应的算法，读到这里数据结构的精髓其实就已经出来了，它就是上面介绍的数据构成方式（线性和非线性）➕算法（查询、排序等等）</p><ul><li>数据结构总览</li></ul><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220611191533.png"></p><ul><li>线性结构</li></ul><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220611184958.png"></p><ul><li>非线性结构</li></ul><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220611185350.png"></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220611185601.png"></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220611185647.png"></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220611185735.png"></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220612112140.png"></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220611190007.png"></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220611190158.png"></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220611190252.png"></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220611190355.png"></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220611190640.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机基础专业课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Doris大表关联优化</title>
    <link href="/2022/06/08/Doris%E5%A4%A7%E8%A1%A8%E5%85%B3%E8%81%94%E4%BC%98%E5%8C%96/"/>
    <url>/2022/06/08/Doris%E5%A4%A7%E8%A1%A8%E5%85%B3%E8%81%94%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="记一次Doris大表关联优化"><a href="#记一次Doris大表关联优化" class="headerlink" title="记一次Doris大表关联优化"></a>记一次Doris大表关联优化</h3><p><strong>场景：</strong></p><p>有两张大表，数据量分别为5kw+和接近7kw，表空间占用约等于6.26GB和7.77GB</p><p>![](<a href="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img%E6%88%AA%E5%B1%8F2022-06-08">https://raw.githubusercontent.com/YUTING0907/PicGo/main/img截屏2022-06-08</a> 下午9.58.01.png)</p><p>历史数据上游提供的全部为同一天的数据，所以没办法进行分区，只能进行分桶，按照大概每个桶10w-15w数据量，将表分为300个bucket</p><p>表结构如下：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">CREATE TABLE `ods_esc_buyer_goods_ebay_compatibility_model_test` (<br>  `id` varchar(<span class="hljs-number">128</span>) <span class="hljs-literal">NOT</span> NULL COMMENT <span class="hljs-string">&quot;id&quot;</span>,<br>  `create_time` datetime <span class="hljs-literal">NOT</span> NULL COMMENT <span class="hljs-string">&quot;create_time&quot;</span>,<br>  `category_id` varchar(<span class="hljs-number">200</span>) <span class="hljs-literal">NOT</span> NULL COMMENT <span class="hljs-string">&quot;ebayid&quot;</span>,<br>  `site` varchar(<span class="hljs-number">1020</span>) <span class="hljs-literal">NOT</span> NULL COMMENT <span class="hljs-string">&quot;站点&quot;</span>,<br>  `model_id` bigint NULL COMMENT <span class="hljs-string">&quot;车型id&quot;</span>,<br>  `esc_category_id` varchar(<span class="hljs-number">128</span>) NULL COMMENT <span class="hljs-string">&quot;esc品类id&quot;</span>,<br>  `version` varchar(<span class="hljs-number">128</span>) NULL COMMENT <span class="hljs-string">&quot;版本号&quot;</span>,<br>  `update_type` int(<span class="hljs-number">11</span>) NULL COMMENT <span class="hljs-string">&quot;更新类型&quot;</span>,<br>  `update_time` datetime NULL COMMENT <span class="hljs-string">&quot;update_time&quot;</span>,<br>  `deleted` tinyint(<span class="hljs-number">4</span>) NULL DEFAULT <span class="hljs-string">&quot;0&quot;</span> COMMENT <span class="hljs-string">&quot;删除标记&quot;</span>,<br>  `is_deleted_flg` int(<span class="hljs-number">11</span>) NULL DEFAULT <span class="hljs-string">&quot;0&quot;</span> COMMENT <span class="hljs-string">&quot;是否被系統物理刪 0：未被物理删，1：系统已删除&quot;</span>,<br>  `ts_ms` bigint(<span class="hljs-number">20</span>) NULL DEFAULT <span class="hljs-string">&quot;0&quot;</span> COMMENT <span class="hljs-string">&quot;数据拉取时间&quot;</span>,<br>  INDEX idx_site (`site`) USING BITMAP COMMENT &#x27;站点索引&#x27;,<br>  INDEX idx_category_id (`category_id`) USING BITMAP COMMENT &#x27;品类索引&#x27;,<br>  INDEX idx_model_id (`model_id`) USING BITMAP COMMENT &#x27;车型id索引&#x27;<br>) ENGINE=OLAP<br>UNIQUE KEY(`id`, `create_time`, `category_id`, `site`)<br>COMMENT <span class="hljs-string">&quot;品类车型关联表&quot;</span><br>DISTRIBUTED BY HASH(`id`) BUCKETS <span class="hljs-number">300</span><br>PROPERTIES (<br><span class="hljs-string">&quot;replication_allocation&quot;</span> = <span class="hljs-string">&quot;tag.location.default: 3&quot;</span>,<br><span class="hljs-string">&quot;in_memory&quot;</span> = <span class="hljs-string">&quot;false&quot;</span>,<br><span class="hljs-string">&quot;storage_format&quot;</span> = <span class="hljs-string">&quot;V2&quot;</span><br>)<span class="hljs-comment">;</span><br><br><br>CREATE TABLE ods.`ods_esc_buyer_goods_ebay_compatibility_properties_values_test` (<br>  `id` varchar(<span class="hljs-number">128</span>) <span class="hljs-literal">NOT</span> NULL COMMENT <span class="hljs-string">&quot;id&quot;</span>,<br>  `create_time` datetime <span class="hljs-literal">NOT</span> NULL COMMENT <span class="hljs-string">&quot;create_time&quot;</span>,<br>  `site` varchar(<span class="hljs-number">1020</span>) <span class="hljs-literal">NOT</span> NULL COMMENT <span class="hljs-string">&quot;站点&quot;</span>,<br>  `model_id` bigint <span class="hljs-literal">NOT</span> NULL COMMENT <span class="hljs-string">&quot;车型id&quot;</span>,<br>  `level1` varchar(<span class="hljs-number">1020</span>) NULL COMMENT <span class="hljs-string">&quot;对应goods_ebay_compatibility_properties表propertyName,FitmentComments不是属性，遇到FitmentComments则删除FitmentComments并且level前移一位&quot;</span>,<br>  `level2` varchar(<span class="hljs-number">1020</span>) NULL COMMENT <span class="hljs-string">&quot;level2&quot;</span>,<br>  `level3` varchar(<span class="hljs-number">1020</span>) NULL COMMENT <span class="hljs-string">&quot;level3&quot;</span>,<br>  `level4` varchar(<span class="hljs-number">1020</span>) NULL COMMENT <span class="hljs-string">&quot;level4&quot;</span>,<br>  `level5` varchar(<span class="hljs-number">1020</span>) NULL COMMENT <span class="hljs-string">&quot;level5&quot;</span>,<br>  `level6` varchar(<span class="hljs-number">1020</span>) NULL COMMENT <span class="hljs-string">&quot;level6&quot;</span>,<br>  `level7` varchar(<span class="hljs-number">1020</span>) NULL COMMENT <span class="hljs-string">&quot;level7&quot;</span>,<br>  `level8` varchar(<span class="hljs-number">1020</span>) NULL COMMENT <span class="hljs-string">&quot;level8&quot;</span>,<br>  `deleted` tinyint(<span class="hljs-number">4</span>) NULL COMMENT <span class="hljs-string">&quot;状态&quot;</span>,<br>  `update_time` datetime NULL COMMENT <span class="hljs-string">&quot;update_time&quot;</span>,<br>  `is_deleted_flg` int(<span class="hljs-number">11</span>) NULL DEFAULT <span class="hljs-string">&quot;0&quot;</span> COMMENT <span class="hljs-string">&quot;是否被系統物理刪 0：未被物理删，1：系统已删除&quot;</span>,<br>  `ts_ms` bigint(<span class="hljs-number">20</span>) NULL DEFAULT <span class="hljs-string">&quot;0&quot;</span> COMMENT <span class="hljs-string">&quot;数据拉取时间&quot;</span>,<br>  INDEX idx_site (`site`) USING BITMAP COMMENT &#x27;站点索引&#x27;,<br>  INDEX idx_model_id (`model_id`) USING BITMAP COMMENT &#x27;车型id索引&#x27;,<br>  INDEX idx_level1 (`level1`) USING BITMAP COMMENT &#x27;level1索引&#x27;,<br>  INDEX idx_level2 (`level2`) USING BITMAP COMMENT &#x27;level2索引&#x27;,<br>  INDEX idx_level3 (`level3`) USING BITMAP COMMENT &#x27;level3索引&#x27;,<br>  INDEX idx_level4 (`level4`) USING BITMAP COMMENT &#x27;level4索引&#x27;,<br>  INDEX idx_level5 (`level5`) USING BITMAP COMMENT &#x27;level5索引&#x27;,<br>  INDEX idx_level6 (`level6`) USING BITMAP COMMENT &#x27;level6索引&#x27;,<br>  INDEX idx_level7 (`level7`) USING BITMAP COMMENT &#x27;level7索引&#x27;,<br>  INDEX idx_level8 (`level8`) USING BITMAP COMMENT &#x27;level8索引&#x27;<br>) ENGINE=OLAP<br>UNIQUE KEY(`id`, `create_time`, `site`)<br>COMMENT <span class="hljs-string">&quot;品类属性值&quot;</span><br>DISTRIBUTED BY HASH(`id`) BUCKETS <span class="hljs-number">300</span><br>PROPERTIES (<br><span class="hljs-string">&quot;replication_allocation&quot;</span> = <span class="hljs-string">&quot;tag.location.default: 3&quot;</span>,<br><span class="hljs-string">&quot;in_memory&quot;</span> = <span class="hljs-string">&quot;false&quot;</span>,<br><span class="hljs-string">&quot;storage_format&quot;</span> = <span class="hljs-string">&quot;V2&quot;</span><br>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>查询语句如下：</p><p>发现SET query_timeout &#x3D; 10000; 发现查询仍旧会time out </p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">select <br> <span class="hljs-built_in">t1</span>.model_id<br> ,split_part(<span class="hljs-built_in">t1</span>.version , <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-number">1</span>) <br> ,<span class="hljs-built_in">t1</span>.esc_category_id<br> ,<span class="hljs-built_in">t1</span>.category_id<br> ,<span class="hljs-built_in">t1</span>.site<br> ,<span class="hljs-built_in">t3</span>.catagory_name<br> ,<span class="hljs-string">&quot;&quot;</span><br> ,<span class="hljs-built_in">t1</span>.update_type<br> ,<span class="hljs-built_in">t1</span>.deleted<br> ,<span class="hljs-built_in">t1</span>.create_time<br> ,<span class="hljs-built_in">t1</span>.update_time<br> ,<span class="hljs-built_in">t2</span>.level1<br> ,<span class="hljs-built_in">t2</span>.level2<br> ,<span class="hljs-built_in">t2</span>.level3<br> ,<span class="hljs-built_in">t2</span>.level4<br> ,<span class="hljs-built_in">t2</span>.level5<br> ,<span class="hljs-built_in">t2</span>.level6<br> ,<span class="hljs-built_in">t2</span>.level7<br> ,<span class="hljs-built_in">t2</span>.level8<br> from ods.ods_esc_buyer_goods_ebay_compatibility_model <span class="hljs-built_in">t1</span><br>left <span class="hljs-keyword">join </span>ods.ods_esc_buyer_goods_ebay_compatibility_properties_values <span class="hljs-built_in">t2</span><br>on <span class="hljs-built_in">t1</span>.model_id = <span class="hljs-built_in">t2</span>.model_id<br><span class="hljs-keyword">and </span><span class="hljs-built_in">t2</span>.is_deleted_flg=<span class="hljs-number">0</span><br><span class="hljs-keyword">and </span><span class="hljs-built_in">t2</span>.deleted = <span class="hljs-number">0</span><br>left <span class="hljs-keyword">join </span>ods.ods_esc_goods_prd_catagory <span class="hljs-built_in">t3</span><br>on <span class="hljs-built_in">t1</span>.esc_category_id = <span class="hljs-built_in">t3</span>.catagory_uid<br><span class="hljs-keyword">and </span><span class="hljs-built_in">t3</span>.is_deleted_flg = <span class="hljs-number">0</span><br>where <span class="hljs-built_in">t1</span>.is_deleted_flg=<span class="hljs-number">0</span><br>;<br></code></pre></td></tr></table></figure><p>观察select查询语句发现关联键model_id, 没有用上前缀索引。可以用bukect shuffle join进行优化。</p><hr><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><h4 id="bukect-shuffle-join原理"><a href="#bukect-shuffle-join原理" class="headerlink" title="bukect shuffle join原理"></a>bukect shuffle join原理</h4><p>Doris支持的常规分布式Join方式包括了<em>shuffle</em> join 和broadcast join。这两种join都会导致不小的网络开销:</p><p>举个例子，当前存在A表与B表的Join查询，它的Join方式为HashJoin，不同Join类型的开销如下：</p><ul><li><strong>Broadcast Join</strong>: 如果根据数据分布，查询规划出A表有3个执行的HashJoinNode，那么需要将B表全量的发送到3个HashJoinNode，那么它的网络开销是<code>3B</code>，它的内存开销也是<code>3B</code></li><li><strong>Shuffle  Join</strong>: <em>Shuffle</em> Join会将A，B两张表的数据根据哈希计算分散到集群的节点之中，所以它的网络开销为 <code>A + B</code>，内存开销为<code>B</code></li></ul><p>在FE之中保存了Doris每个表的数据分布信息，如果join语句命中了表的数据分布列，我们应该使用数据分布信息来减少join语句的网络与内存开销，这就是Bucket <em>Shuffle</em> Join的思路来源。</p><h3 id="bukect-shuffle-join使用方式"><a href="#bukect-shuffle-join使用方式" class="headerlink" title="bukect shuffle join使用方式"></a>bukect shuffle join使用方式</h3><ul><li><p>将session变量<code>enable_bucket_*shuffle*_join</code>设置为<code>true</code></p><p>则FE在进行查询规划时就会默认将能够转换为Bucket <em>Shuffle</em> Join的查询自动规划为Bucket <em>Shuffle</em> Join。</p></li></ul><p><code>set enable_bucket_*shuffle*_join = true;</code></p><p>在FE进行分布式查询规划时，优先选择的顺序为 Colocate Join -&gt; Bucket <em>Shuffle</em> Join -&gt; Broadcast Join -&gt; <em>Shuffle</em> Join。但是如果用户显式hint了Join的类型，如：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test <span class="hljs-keyword">join</span> [shuffle] baseall <span class="hljs-keyword">on</span> test.k1 = baseall.k1;<br></code></pre></td></tr></table></figure><ul><li>可以通过<code>explain</code>命令来查看Join是否为Bucket <em>Shuffle</em> Join：</li></ul><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin|<span class="hljs-string"></span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">  join opspan>|<br>|<span class="hljs-string">   </span>|<span class="hljs-string">  hash predicatesspan>|<br>|<span class="hljs-string">   </span>|<span class="hljs-string">  colocate: false, reason: table not in the same groupspan>|<br>|<span class="hljs-string">   </span>|<span class="hljs-string">  equal join conjunct: `test`.`k1` = `baseall`.`k1`</span><br></code></pre></td></tr></table></figure><p>在Join类型之中会指明使用的Join方式为：<code>BUCKET_*SHUFFLE*</code></p><h4 id="Bucket-Shuffle-Join的规划规则"><a href="#Bucket-Shuffle-Join的规划规则" class="headerlink" title="Bucket Shuffle Join的规划规则"></a>Bucket <em>Shuffle</em> Join的规划规则</h4><ul><li>Bucket <em>Shuffle</em> Join只生效于Join条件为等值的场景，原因与Colocate Join类似，它们都依赖hash来计算确定的数据分布</li><li>在等值Join条件之中包含两张表的分桶列，当左表的分桶列为等值的Join条件时，它有很大概率会被规划为Bucket <em>Shuffle</em> Join</li><li>由于不同的数据类型的hash值计算结果不同，所以Bucket <em>Shuffle</em> Join要求左表的分桶列的类型与右表等值join列的类型需要保持一致，否则无法进行对应的规划</li><li>对于分区表，由于每一个分区的数据分布规则可能不同，所以Bucket <em>Shuffle</em> Join只能保证左表为单分区时生效。所以在SQL执行之中，需要尽量使用<code>where</code>条件使分区裁剪的策略能够生效。</li></ul><p>基于以上规则，将关联键设置为bukect分桶列，并加入到key列，利用前缀索引加速查询。</p><p><strong>tips：</strong>Join 条件中存在左表的分布式列(bukect列)，且左表执行时为单分区，才可以让 Bucket Shuffle Join 生效。</p><p>优化后的表结构如下，优化完3s出结果。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">CREATE TABLE `ods_esc_buyer_goods_ebay_compatibility_model_test` (<br>  `model_id` bigint NULL COMMENT <span class="hljs-string">&quot;车型id&quot;</span>,<br>  `id` varchar(<span class="hljs-number">128</span>) <span class="hljs-literal">NOT</span> NULL COMMENT <span class="hljs-string">&quot;id&quot;</span>,<br>  `create_time` datetime <span class="hljs-literal">NOT</span> NULL COMMENT <span class="hljs-string">&quot;create_time&quot;</span>,<br>  `category_id` varchar(<span class="hljs-number">200</span>) <span class="hljs-literal">NOT</span> NULL COMMENT <span class="hljs-string">&quot;ebayid&quot;</span>,<br>  `site` varchar(<span class="hljs-number">1020</span>) <span class="hljs-literal">NOT</span> NULL COMMENT <span class="hljs-string">&quot;站点&quot;</span>,<br>  `esc_category_id` varchar(<span class="hljs-number">128</span>) NULL COMMENT <span class="hljs-string">&quot;esc品类id&quot;</span>,<br>  `version` varchar(<span class="hljs-number">128</span>) NULL COMMENT <span class="hljs-string">&quot;版本号&quot;</span>,<br>  `update_type` int(<span class="hljs-number">11</span>) NULL COMMENT <span class="hljs-string">&quot;更新类型&quot;</span>,<br>  `update_time` datetime NULL COMMENT <span class="hljs-string">&quot;update_time&quot;</span>,<br>  `deleted` tinyint(<span class="hljs-number">4</span>) NULL DEFAULT <span class="hljs-string">&quot;0&quot;</span> COMMENT <span class="hljs-string">&quot;删除标记&quot;</span>,<br>  `is_deleted_flg` int(<span class="hljs-number">11</span>) NULL DEFAULT <span class="hljs-string">&quot;0&quot;</span> COMMENT <span class="hljs-string">&quot;是否被系統物理刪 0：未被物理删，1：系统已删除&quot;</span>,<br>  `ts_ms` bigint(<span class="hljs-number">20</span>) NULL DEFAULT <span class="hljs-string">&quot;0&quot;</span> COMMENT <span class="hljs-string">&quot;数据拉取时间&quot;</span>,<br>  INDEX idx_site (`site`) USING BITMAP COMMENT &#x27;站点索引&#x27;,<br>  INDEX idx_category_id (`category_id`) USING BITMAP COMMENT &#x27;品类索引&#x27;,<br>  INDEX idx_model_id (`model_id`) USING BITMAP COMMENT &#x27;车型id索引&#x27;<br>) ENGINE=OLAP<br>UNIQUE KEY(`model_id`,`id`, `create_time`, `category_id`, `site`)<br>COMMENT <span class="hljs-string">&quot;品类车型关联表&quot;</span><br>DISTRIBUTED BY HASH(`model_id`) BUCKETS <span class="hljs-number">300</span><br>PROPERTIES (<br><span class="hljs-string">&quot;replication_allocation&quot;</span> = <span class="hljs-string">&quot;tag.location.default: 3&quot;</span>,<br><span class="hljs-string">&quot;in_memory&quot;</span> = <span class="hljs-string">&quot;false&quot;</span>,<br><span class="hljs-string">&quot;storage_format&quot;</span> = <span class="hljs-string">&quot;V2&quot;</span><br>)<span class="hljs-comment">;</span><br><br><br>CREATE TABLE ods.`ods_esc_buyer_goods_ebay_compatibility_properties_values_test` (<br>  `model_id` bigint <span class="hljs-literal">NOT</span> NULL COMMENT <span class="hljs-string">&quot;车型id&quot;</span>,<br>  `id` varchar(<span class="hljs-number">128</span>) <span class="hljs-literal">NOT</span> NULL COMMENT <span class="hljs-string">&quot;id&quot;</span>,<br>  `create_time` datetime <span class="hljs-literal">NOT</span> NULL COMMENT <span class="hljs-string">&quot;create_time&quot;</span>,<br>  `site` varchar(<span class="hljs-number">1020</span>) <span class="hljs-literal">NOT</span> NULL COMMENT <span class="hljs-string">&quot;站点&quot;</span>,<br>  `level1` varchar(<span class="hljs-number">1020</span>) NULL COMMENT <span class="hljs-string">&quot;对应goods_ebay_compatibility_properties表propertyName,FitmentComments不是属性，遇到FitmentComments则删除FitmentComments并且level前移一位&quot;</span>,<br>  `level2` varchar(<span class="hljs-number">1020</span>) NULL COMMENT <span class="hljs-string">&quot;level2&quot;</span>,<br>  `level3` varchar(<span class="hljs-number">1020</span>) NULL COMMENT <span class="hljs-string">&quot;level3&quot;</span>,<br>  `level4` varchar(<span class="hljs-number">1020</span>) NULL COMMENT <span class="hljs-string">&quot;level4&quot;</span>,<br>  `level5` varchar(<span class="hljs-number">1020</span>) NULL COMMENT <span class="hljs-string">&quot;level5&quot;</span>,<br>  `level6` varchar(<span class="hljs-number">1020</span>) NULL COMMENT <span class="hljs-string">&quot;level6&quot;</span>,<br>  `level7` varchar(<span class="hljs-number">1020</span>) NULL COMMENT <span class="hljs-string">&quot;level7&quot;</span>,<br>  `level8` varchar(<span class="hljs-number">1020</span>) NULL COMMENT <span class="hljs-string">&quot;level8&quot;</span>,<br>  `deleted` tinyint(<span class="hljs-number">4</span>) NULL COMMENT <span class="hljs-string">&quot;状态&quot;</span>,<br>  `update_time` datetime NULL COMMENT <span class="hljs-string">&quot;update_time&quot;</span>,<br>  `is_deleted_flg` int(<span class="hljs-number">11</span>) NULL DEFAULT <span class="hljs-string">&quot;0&quot;</span> COMMENT <span class="hljs-string">&quot;是否被系統物理刪 0：未被物理删，1：系统已删除&quot;</span>,<br>  `ts_ms` bigint(<span class="hljs-number">20</span>) NULL DEFAULT <span class="hljs-string">&quot;0&quot;</span> COMMENT <span class="hljs-string">&quot;数据拉取时间&quot;</span>,<br>  INDEX idx_site (`site`) USING BITMAP COMMENT &#x27;站点索引&#x27;,<br>  INDEX idx_model_id (`model_id`) USING BITMAP COMMENT &#x27;车型id索引&#x27;,<br>  INDEX idx_level1 (`level1`) USING BITMAP COMMENT &#x27;level1索引&#x27;,<br>  INDEX idx_level2 (`level2`) USING BITMAP COMMENT &#x27;level2索引&#x27;,<br>  INDEX idx_level3 (`level3`) USING BITMAP COMMENT &#x27;level3索引&#x27;,<br>  INDEX idx_level4 (`level4`) USING BITMAP COMMENT &#x27;level4索引&#x27;,<br>  INDEX idx_level5 (`level5`) USING BITMAP COMMENT &#x27;level5索引&#x27;,<br>  INDEX idx_level6 (`level6`) USING BITMAP COMMENT &#x27;level6索引&#x27;,<br>  INDEX idx_level7 (`level7`) USING BITMAP COMMENT &#x27;level7索引&#x27;,<br>  INDEX idx_level8 (`level8`) USING BITMAP COMMENT &#x27;level8索引&#x27;<br>) ENGINE=OLAP<br>UNIQUE KEY(`model_id`,`id`, `create_time`, `site`)<br>COMMENT <span class="hljs-string">&quot;品类属性值&quot;</span><br>DISTRIBUTED BY HASH(`model_id`) BUCKETS <span class="hljs-number">300</span><br>PROPERTIES (<br><span class="hljs-string">&quot;replication_allocation&quot;</span> = <span class="hljs-string">&quot;tag.location.default: 3&quot;</span>,<br><span class="hljs-string">&quot;in_memory&quot;</span> = <span class="hljs-string">&quot;false&quot;</span>,<br><span class="hljs-string">&quot;storage_format&quot;</span> = <span class="hljs-string">&quot;V2&quot;</span><br>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><hr><h3 id="SMB-JOIN"><a href="#SMB-JOIN" class="headerlink" title="SMB JOIN"></a>SMB JOIN</h3><p>Bucket <em>Shuffle</em> Join 其实就是SMB JOIN，大表join大表的场景都是这样解决的。</p><p>SMB JOIN是sort merge bucket操作，需要进行分桶，首先会进行排序，然后根据key值合并，把相同key的数据放到同一个bucket中（按照key进行hash）。</p><p>分桶的目的其实就是把大表化成“小表”（多个桶）。</p><p>相同key的数据都在同一个桶中之后，再进行join操作，那么在联合的时候就会大幅度的减小无关项的扫描。</p><p>使用条件：</p><p>（1）两表进行分桶，桶的个数必须相等</p><p>（2）两边进行join时，join列&#x3D;&#x3D;排序列&#x3D;&#x3D;分桶列</p><hr><p><strong>Tips: Doris参数优化</strong></p><p>例如，</p><p>设置并发数 set parallel_fragment_exec_instance_num &#x3D; 8;</p><p>调高执行内存 set exec_mem_limit &#x3D; 8G;</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgdoris%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96.png"></p>]]></content>
    
    
    <categories>
      
      <category>Doris</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Doris</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作中常用的Java集合类有哪些?</title>
    <link href="/2022/06/05/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84Java%E9%9B%86%E5%90%88%E7%B1%BB%E6%9C%89%E5%93%AA%E4%BA%9B/"/>
    <url>/2022/06/05/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84Java%E9%9B%86%E5%90%88%E7%B1%BB%E6%9C%89%E5%93%AA%E4%BA%9B/</url>
    
    <content type="html"><![CDATA[<p><strong>工作中常用到的Java集合有哪些，应用场景是什么？</strong></p><p>下图是java集合的全家福，可以看到分为两大类，第一类是collection，第二类是map。下面分别介绍：其中List，Set，Queue都是Collection（集合），其每个元素都是单独的一个对象，如List<String>，Set<Integer>等，String和Integer就是单独的一个对象</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgjava%E9%9B%86%E5%90%88.png"></p><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/index.html">JAVA SE 8官方文档</a></li></ul><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img%E9%9B%86%E5%90%88%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3.png"></p><h3 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h3><p>List集合下最常见的集合类有两个：<strong>ArrayList和LinkedList</strong></p><p>在工作中，我都是无脑用<strong>ArrayList</strong>。我问了两个同事：“你们在项目中用过LinkedList吗？”他们都表示没有。</p><p>众所周知，ArrayList底层是数组，LinkedList底层是链表。数组遍历速度快，LinkedList增删元素快。</p><p>为什么在工作中一般就用ArrayList，而不用LinkedList呢？原因也很简单：</p><ul><li>在工作中，<strong>遍历的需求比增删多</strong>，即便是增加元素往往也只是从尾部插入元素，而ArrayList在尾部插入元素也是O(1)</li><li>ArrayList增删没有想象中慢，ArrayList的增删底层调用的<code>copyOf()</code>被优化过，加上现代CPU对内存可以<strong>块操作</strong>，普通大小的ArrayList增删比LinkedList更快。</li></ul><p>所以，在开发中，想到要用集合来装载元素，第一个想到的就是ArrayList。</p><p>那么来了，LinkedList用在什么地方呢？我们一般用在刷算法题上。把LinkedList当做一个先进先出的队列，LinkedList本身就实现了Queue接口</p><p>如果考虑线程安全的问题，可以看看CopyWriteOnArrayList，实际开发用得不多，但我觉得可以了解一下它的思想（CopyWriteOn），这个思想在Linux&#x2F;文件系统都有用到。</p><hr><h3 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h3><p>Set集合下最常见的集合类有三个：<strong>HashSet、TreeSet、LinkedHashSet</strong></p><p>List和Set都是集合，一般来说：<strong>如果我们需要保证集合的元素是唯一的，就应该想到用Set集合</strong></p><p>一般我们在开发中最多用到的也就是<strong>HashSet</strong>。TreeSet是可以排序的Set，一般我们需要有序，从数据库拉出来的数据就是有序的，可能往往写<code>order by id desc</code>比较多。而在开发中也很少管元素插入有序的问题，所以LinkedHashSet一般也用不上。</p><p>如果考虑线程安全的问题，可以考虑CopyOnWriteArraySet，用得就更少了（这是一个线程安全的Set，底层实际上就是CopyWriteOnArrayList)</p><p>TreeSet和LinkedHashSet更多的可能用在刷算法的时候。</p><hr><h3 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h3><p>Map集合最常见的子类也有三个：HashMap、LinkedHashMap、TreeMap</p><p>如果考虑线程安全问题，应该想到的是ConcurrentHashMap，当然了Hashtable也要有一定的了解，因为面试实在是问得太多太多了。</p><p>HashMap在实际开发中用得也非常多，只要是<code>key-value</code>结构的，一般我们就用<code>HashMap</code>。LinkedHashMap和TreeMap用的不多，原因跟HashSet和TreeSet一样。</p><p>ConcurrentHashMap在实际开发中也用得挺多，我们很多时候把ConcurrentHashMap用于<strong>本地缓存</strong>，不想每次都网络请求数据，在本地做本地缓存。监听数据的变化，如果数据有变动了，就把ConcurrentHashMap对应的值给更新了。</p><hr><h3 id="什么时候考虑线程安全"><a href="#什么时候考虑线程安全" class="headerlink" title="什么时候考虑线程安全"></a>什么时候考虑线程安全</h3><p>什么时候考虑线程安全的集合类，那当然是线程不安全的时候咯。那什么时候线程不安全？最常见的是：<strong>操作的对象是有状态的</strong></p><p>虽然说，我们经常会听到线程不安全，但在<strong>业务开发中</strong>要我们程序员处理线程不安全的地方少之又少。比如说：你在写Servlet的时候，加过<code>syn/lock</code>锁吗？应该没有吧？</p><p>因为我们的操作的对象往往是<strong>无状态</strong>的。<strong>没有共享变量被多个线程访问，自然就没有线程安全问题了</strong>。</p><p>SpringMVC是单例的，但SpringMVC都是在方法内操作数据的，每个线程进入方法都会生成栈帧，每个栈帧的数据都是线程独有的，如果不设定共享变量，不会有线程安全问题。</p><p>上面只是简单举了SpringMVC的例子（只是为了更好的理解）；</p><p>一句话总结：只要涉及到多个线程操作一个共享变量的时候，<strong>就要考虑是不是要用线程安全的集合类</strong>。</p><hr><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imglist%E9%9B%86%E5%90%88.png"></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgset%E9%9B%86%E5%90%88.png"></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgset%E9%9B%86%E5%90%88.png"></p><p>参考链接： <a href="https://www.cnblogs.com/Java3y/p/12572288.html">https://www.cnblogs.com/Java3y/p/12572288.html</a></p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA编写Scala快捷键</title>
    <link href="/2022/06/02/IDEA%E7%BC%96%E5%86%99Scala%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2022/06/02/IDEA%E7%BC%96%E5%86%99Scala%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="键入main之后，按tab键补全"><a href="#键入main之后，按tab键补全" class="headerlink" title="键入main之后，按tab键补全"></a>键入main之后，按tab键补全</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function">def <span class="hljs-title">main</span><span class="hljs-params">(args: Array[<span class="hljs-type">String</span>])</span>: Unit =</span> &#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="按住command-点击，查看源代码"><a href="#按住command-点击，查看源代码" class="headerlink" title="按住command + 点击，查看源代码"></a>按住command + 点击，查看源代码</h4><p>当然这里会显示不全，可以去官网把源码包下载下来，然后点击idea右上角的Attach Sources去做一个绑定</p><h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><p>tab操作默认整体向右👉移动</p><p>用shift+tab整体向左移</p>]]></content>
    
    
    
    <tags>
      
      <tag>Scala</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>银行成本分摊计算</title>
    <link href="/2022/06/01/%E9%93%B6%E8%A1%8C%E6%88%90%E6%9C%AC%E5%88%86%E6%91%8A%E8%AE%A1%E7%AE%97/"/>
    <url>/2022/06/01/%E9%93%B6%E8%A1%8C%E6%88%90%E6%9C%AC%E5%88%86%E6%91%8A%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<p>银行成本分摊介绍：</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img%E9%93%B6%E8%A1%8C%E6%88%90%E6%9C%AC%E5%88%86%E6%91%8A"></p>]]></content>
    
    
    <categories>
      
      <category>公司业务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公司业务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>跨境电商供应链业务</title>
    <link href="/2022/05/31/%E8%B7%A8%E5%A2%83%E7%94%B5%E5%95%86%E4%BE%9B%E5%BA%94%E9%93%BE%E4%B8%9A%E5%8A%A1/"/>
    <url>/2022/05/31/%E8%B7%A8%E5%A2%83%E7%94%B5%E5%95%86%E4%BE%9B%E5%BA%94%E9%93%BE%E4%B8%9A%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>下图为跨境电商供应链业务整理</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgeSC%E4%B8%9A%E5%8A%A1.png"></p>]]></content>
    
    
    <categories>
      
      <category>公司业务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公司业务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>书单</title>
    <link href="/2022/05/29/%E4%B9%A6%E5%8D%95/"/>
    <url>/2022/05/29/%E4%B9%A6%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<h4 id="书单推荐"><a href="#书单推荐" class="headerlink" title="书单推荐"></a>书单推荐</h4><table><thead><tr><th>书名</th><th>类型</th><th>推荐人</th><th>推荐理由</th><th>状态</th></tr></thead><tbody><tr><td>Gift of Fear</td><td>权谋书</td><td>weibo: <em>恶魔奶爸</em>_</td><td>正反都可以用的权谋书，正面是教人如何识别出人际关系操纵技巧，生活中的危险分子，防止被人陷害。反面则是可以学习到操纵人心控制他人的技巧。</td><td></td></tr><tr><td>《增广贤文》</td><td>人情练达</td><td>weibo: <em>恶魔奶爸</em>_</td><td>人情世故，工作沟通，办公室政治</td><td></td></tr><tr><td>杜拉拉升职记》</td><td>HR上班流程</td><td>weibo: <em>恶魔奶爸</em>_</td><td>你看完科特勒的市场营销和各类广告的书，背了一堆名词概念，考试过了。但你还是不知道市场部每天干什么。知道市场部每天干什么，这些教科书里的技能，你也还是用不出来。因为人很难想象自己没见过的东西。没概念，那还怎么理解工作？</td><td></td></tr><tr><td>《浮沉》</td><td>市场部工作</td><td>weibo: <em>恶魔奶爸</em>_</td><td>你会发现市场部就是整天出差到处请人来开会，开会时候顺带送礼的</td><td></td></tr><tr><td>《米娅快跑》</td><td>市场部工作</td><td>weibo: <em>恶魔奶爸</em>_</td><td>就会知道市场部就是天天写PPT，写方案，开会，做策划的，出差是有，但不是整天出差，都是市场部你就会迷惑，为什么，为什么会有这些区别？</td><td></td></tr><tr><td>《原则》</td><td>工作</td><td>weibo: <em>恶魔奶爸</em>_</td><td>本书其实讲的是管理，如何最大效率的经营公司，但很多白领和经理人推荐，认为这个是讲工作方法的。它教会了我如何打造企业文化，统一企业精神，制定企业制度，但是自己如何工作它没怎么教，普通白领从这本书里恐怕也学不到什么东西</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Scala语言入门</title>
    <link href="/2022/05/29/Scala%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/"/>
    <url>/2022/05/29/Scala%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Scala语言入门"><a href="#Scala语言入门" class="headerlink" title="Scala语言入门"></a>Scala语言入门</h1><p>Scala（发音为&#x2F;ˈskɑːlə, ˈskeɪlə&#x2F;）是一门多范式的编程语言，设计初衷是要集成面向对象编程和函数式编程的各种特性。洛桑联邦理工学院的Martin Odersky于2001年基于Funnel的工作开始设计Scala。Java平台的Scala于2003年底&#x2F;2004年初发布。</p><p>特点：</p><ul><li>同样运行在JVM上，可以与现存程序同时运行。</li><li>可直接使用Java类库。</li><li>同Java一样静态类型。</li><li>语法和Java类似，比Java更加简洁（简洁而并不是简单），表达性更强。</li><li>同时支持面向对象、函数式编程。</li><li>比Java更面向对象。</li></ul><p>关注点：</p><ul><li>类型推断、不变量、函数式编程、高级程序构造。</li><li>并发：actor模型。</li><li>和现有Java代码交互、相比Java异同和优缺。</li></ul><p>和Java关系：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">        javac               java<br><span class="hljs-string">.java</span> <span class="hljs-params">--------</span>&gt; <span class="hljs-string">.class</span> <span class="hljs-params">----------</span>&gt; run on JVM<br><span class="hljs-string">.scala</span> <span class="hljs-params">-------</span>&gt; <span class="hljs-string">.class</span> <span class="hljs-params">----------</span>&gt; run on JVM<br>        scalac              scala<br></code></pre></td></tr></table></figure><p>测试代码：<a href="https://github.com/tch0/notes/tree/Scala">Scala分支</a> </p><p>等待替换repo，还没手敲</p><p>阅读：</p><ul><li><a href="https://www.bilibili.com/video/BV1Xh411S7bP">尚硅谷大数据技术之Scala入门到精通教程</a>（本文参考）</li><li><a href="https://docs.scala-lang.org/zh-cn/cheatsheets/index.html">Scala官网语法速查</a></li><li><a href="https://docs.scala-lang.org/zh-cn/tour/tour-of-scala.html">Scala官方文档 Tour Of Scala</a></li></ul><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>Scala需要依赖Java，访问<a href="https://docs.scala-lang.org/overviews/jdk-compatibility/overview.html">这里</a>查看特定Scala版本依赖的Java版本。这里选择，最新的JDK17配合Scala2.13.6。</p><p>Windows中下载安装配置环境变量：</p><ul><li>类似于java配置<code>SCALA_HOME</code>为安装目录。</li><li>添加<code>%SCALA_HOME%\bin</code>到path环境变量。</li></ul><p>Linux中类似，可以使用包管理器，但如果依赖版本不严格一致的话，需要官网下载对应版本安装即可。</p><p>也有交互式执行环境：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">scala</span><br></code></pre></td></tr></table></figure><p>交互式执行环境中的传统艺能：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(<span class="hljs-string">&quot;hello,world!&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><p>暂时不管项目配置，还是单文件编译执行为主，项目开发肯定要以包的形式组织可以使用IntelliJ IDEA开发，使用maven或者sbt进行项目配置。</p><p>使用VSCode编辑器，安装插件Scala Syntax (official)和Scala (Mentals)。</p><p>新建文件<code>HelloScala.scala</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">object</span> HelloScala &#123; // HelloScala is <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">object</span>, not <span class="hljs-selector-tag">a</span> class, will create <span class="hljs-selector-tag">a</span> <br>    def <span class="hljs-selector-tag">main</span>(args : Array[String]) : Unit = &#123;<br>        println(&quot;hello,world!&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以使用插件CodeRunner直接快捷键运行。也可以在命令行编译为字节码后再运行：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scalac </span>HelloScala.<span class="hljs-keyword">scala</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">scala </span>helloScala<br></code></pre></td></tr></table></figure><p>或者直接运行scala源文件：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">scala</span> HelloScala.<span class="hljs-keyword">scala</span><br></code></pre></td></tr></table></figure><p>和java如出一辙。</p><p>如果编译的话会生成2个<code>.class</code>字节码文件，<code>HelloScala.class</code>和<code>HelloScala$.class</code>。都是字节码但是不能通过<code>java</code>直接运行。但对于HelloWorld这个例子来说，java源代码编译而成的字节码是可以通过<code>scala</code>命令运行的。</p><p>原因是没有引入Scala的库，添加<code>classpath</code>就可以通过java执行scala编译成的字节码了：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">java -cp %SCALA_HOME%<span class="hljs-regexp">/lib/</span>scala-library.jar; HelloScala<br></code></pre></td></tr></table></figure><p>使用<a href="http://java-decompiler.github.io/">Java Decompiler</a>反编译字节码到java源文件可以看到引入Scala库的逻辑。并且：</p><ul><li>scala源文件中的<code>HelloScala</code>对象编译后成为了一个类，但对象本身编译后就是生成的另一个类<code>HelloScala$</code>类的单例对象<code>HelloScala$.MODULE$</code>，称之为伴生对象。</li><li><code>HelloScala$</code>有一个<code>main</code>实例方法，<code>HelloScala</code>类的静态方法通过这个单例对象转调这个实例方法。完成打印。</li><li>Scala比Java更面向对象。</li></ul><h2 id="IDEA环境配置"><a href="#IDEA环境配置" class="headerlink" title="IDEA环境配置"></a>IDEA环境配置</h2><p>使用IntelliJ IDEA：</p><ul><li><p>创建Maven项目，JDK版本17。</p></li><li><p>安装插件：Scala。在IDEA里Preferences&#x2F;Plugins安装scala插件，在线下载慢的话，可以去jerkins官网下载插件到本地然后from disk安装 。</p></li><li><p>Maven项目默认用Java写，在<code>main/</code>目录下新建目录<code>scala/</code>，文件夹上右击Mark directory as, 然后将目录标记为Source Root。</p></li><li><p>这样甚至可以在同一个项目中混用Scala和Java源文件，并互相调用。</p></li><li><p>需要能够添加scala源文件，右键项目，添加框架支持(Add Framworks Support)，配置Scala SDK，选择，然后就可以右键添加Scala源文件了。</p><p>⚠️注意：到这里如果new文件还没出现scala class</p><p>🍬尝试解决方案：</p><p>  在项目的目录下，找到.idea文件下，再从里面找到modules文件夹，里面有个以.iml为后缀的文件，打开它，新增下面这段代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml">新增下面这段代码，name指的是你自己安装的scala版本，最后你再右键的时候可以发现能new出来一个Scala文件啦<br><span class="hljs-tag">&lt;<span class="hljs-name">orderEntry</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;library&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;scala-sdk-2.13.0&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;application&quot;</span> /&gt;</span><br><br>以下是整个.iml为后缀文件的参考案例：<br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">module</span> <span class="hljs-attr">org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JAVA_MODULE&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;NewModuleRootManager&quot;</span> <span class="hljs-attr">LANGUAGE_LEVEL</span>=<span class="hljs-string">&quot;JDK_1_5&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">output</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file://$MODULE_DIR$/target/classes&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">output-test</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file://$MODULE_DIR$/target/test-classes&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">content</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file://$MODULE_DIR$&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">sourceFolder</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file://$MODULE_DIR$/src/main/java&quot;</span> <span class="hljs-attr">isTestSource</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">sourceFolder</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file://$MODULE_DIR$/src/main/resources&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java-resource&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">sourceFolder</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file://$MODULE_DIR$/src/main/scala&quot;</span> <span class="hljs-attr">isTestSource</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">sourceFolder</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file://$MODULE_DIR$/src/test/java&quot;</span> <span class="hljs-attr">isTestSource</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">excludeFolder</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file://$MODULE_DIR$/target&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">content</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">orderEntry</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;jdk&quot;</span> <span class="hljs-attr">jdkName</span>=<span class="hljs-string">&quot;1.8&quot;</span> <span class="hljs-attr">jdkType</span>=<span class="hljs-string">&quot;JavaSDK&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">orderEntry</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;sourceFolder&quot;</span> <span class="hljs-attr">forTests</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">orderEntry</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;library&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;scala-sdk-2.12.10&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;application&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加包，添加Scala类，选择对象，编辑源码。</p></li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">package</span> VeryStarted<br><br>object HelloWorld &#123;<br>  def <span class="hljs-title function_">main</span>(args: <span class="hljs-built_in">Array</span>[<span class="hljs-built_in">String</span>]): Unit= &#123;<br>    <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Hello,world!&quot;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Ctrl + Shift + F10运行。</li><li>可以看到执行的命令是<code>java</code>在<code>classpath</code>中引入了Scala的<code>jar</code>包形式的库。</li><li>调用java的类库：</li></ul><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sas">package VeryStarted<br><br>object HelloWorld &#123;<br>  def mai<span class="hljs-meta">n</span>(args: <span class="hljs-keyword">Array</span>[String]): Unit= &#123;<br>    printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;Hello,world!&quot;</span>)<br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;Hello,world! from java&quot;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>语法含义：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">object</span> SingletonObject &#123; <span class="hljs-selector-tag">body</span> &#125;<br>def MethodName(ArgName: ArgType): RetType = &#123; <span class="hljs-selector-tag">body</span> &#125;<br></code></pre></td></tr></table></figure><p><code>object</code>关键字创建的伴生对象，可以理解为替代Java的<code>static</code>关键字的方式，将静态方法用单例对象的实例方法做了替代，做到了更纯粹的面向对象。</p><p>仅仅测试理解语法既可以单文件编写VSCode编译执行也可以用IDEA管理项目，影响不大。</p><p>再用一个等价的类定义来认识和区别一下Scala和Java：</p><p>java:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Integer</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-title class_">String</span> school = <span class="hljs-string">&quot;XDU&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Student</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">Integer</span> age) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">printInfo</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-title class_">Student</span>.<span class="hljs-property">school</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// psvm</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">Student</span> tch = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;tch&quot;</span>, <span class="hljs-number">20</span>);<br>        tch.<span class="hljs-title function_">printInfo</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>scala:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">package VeryStarted<br><br><span class="hljs-keyword">class</span> <span class="hljs-constructor">Student(<span class="hljs-params">name</span>: String, <span class="hljs-params">age</span>: Int)</span> &#123;<br>  def print<span class="hljs-constructor">Info()</span>: Unit = &#123;<br>    println(name + <span class="hljs-string">&quot; &quot;</span> + age + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Student</span>.</span></span>school)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 引入伴生对象，名称一致，同一个文件</span><br><span class="hljs-keyword">object</span> Student &#123;<br>  <span class="hljs-keyword">val</span> school: String = <span class="hljs-string">&quot;XDU&quot;</span><br><br>  def main(args: Array<span class="hljs-literal">[S<span class="hljs-identifier">tring</span>]</span>): Unit = &#123;<br>    <span class="hljs-keyword">val</span> tch = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Student(<span class="hljs-string">&quot;tch&quot;</span>, 20)</span><br>    tch.print<span class="hljs-constructor">Info()</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Scala库源码与API文档：</p><ul><li>官网上下载下载Scala源码，解压到Scala安装目录或任意位置。</li><li>IntelliJ IDEA进入反编译的源码后选择右上角附加源码，选择源码的<code>src/</code>目录。</li><li>安装包里面已经有了文档，没有的话可以单独下载。</li><li>Scala依赖Java，某些类型就是Java的包装，库中有一部分java源码。</li></ul><h2 id="变量与数据类型"><a href="#变量与数据类型" class="headerlink" title="变量与数据类型"></a>变量与数据类型</h2><p>注释：</p><ul><li>和java一样</li><li><code>//</code> 单行</li><li><code>/* */</code> 多行</li><li><code>/** */</code> 文档，方法或者类前面，便于<code>scaladoc</code>生成文档。</li></ul><p>变量和常量：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">var</span> <span class="hljs-keyword">name</span> [:VariableType] = value <span class="hljs-comment">// variable</span><br>val <span class="hljs-keyword">name</span> [:ConstantType] = value <span class="hljs-comment">// constant</span><br></code></pre></td></tr></table></figure><p>因为Scala的函数式编程要素，所以一个指导意见就是能用常量就不要用变量。</p><ul><li>声明变量时，类型可以省略，编译器会自动推导。</li><li>静态类型，类型经过给定或推导确定后就不能修改。</li><li>变量和常量声明时，必须有初始值。</li><li>变量可变，常量不可变。</li><li>引用类型常量，不能改变常量指向的对象，可以改变对象的字段。</li><li>不以<code>;</code>作为语句结尾，scala编译器自动识别语句结尾。</li></ul><p>标识符命名规范：</p><ul><li>字母下划线开头，后跟字母数字下划线，和C&#x2F;C++&#x2F;Java一样。</li><li>操作符开头，且只包含(+-*&#x2F;#!等)，也是有效的标识符。这样用会用什么奇怪的好处吗？答案是灵活到天顶星的运算符重载。</li><li>用反引号包括的任意字符串，即使是同39个Scala关键字同名也可以。有点奇怪的用法，尚不知道为什么。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> _abc:String = <span class="hljs-string">&quot;hello&quot;</span><br>val -+/%# = <span class="hljs-number">10</span><br>val <span class="hljs-string">`if`</span> = <span class="hljs-number">10</span><br><span class="hljs-built_in">println</span>(_abc)<br><span class="hljs-built_in">println</span>(-+/%#)<br><span class="hljs-built_in">println</span>(<span class="hljs-string">`if`</span>)<br></code></pre></td></tr></table></figure><p>关键字：</p><ul><li><code>package import class obejct trait extends with type for</code></li><li><code>private protected abstract sealed final implicit lazy override</code></li><li><code>try catch finlly throw</code></li><li><code>if else match case do while for return yield</code></li><li><code>def var val</code></li><li><code>this super</code></li><li><code>new</code></li><li><code>true false null</code></li><li>其中Java没有的关键字：<code>object trait with implicit match yield def val var</code></li></ul><p>字符串：</p><ul><li>类型：<code>String</code></li><li><code>+</code>号连接</li><li><code>*</code>字符串乘法，复制一个字符串多次</li><li><code>printf</code>格式化输出</li><li>字符串插值：<code>s&quot;xxx$&#123;varname&#125;&quot;</code>前缀<code>s</code>模板字符串，前缀<code>f</code>格式化模板字符串，通过<code>$</code>获取变量值，<code>%</code>后跟格式化字符串。</li><li>原始字符串：<code>raw&quot;rawstringcontents$&#123;var&#125;&quot;</code>，不会考虑后跟的格式化字符串。</li><li>多行字符串：<code>&quot;&quot;&quot; &quot;&quot;&quot;</code>。</li><li>输出：<code>print printf println ...</code></li></ul><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pony"><span class="hljs-meta">val</span> name: <span class="hljs-type">String</span> = <span class="hljs-string">&quot;Pyrrha&quot;</span> + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-string">&quot;Nikos&quot;</span><br><span class="hljs-meta">val</span> age = <span class="hljs-number">17</span><br>println((name + <span class="hljs-string">&quot; &quot;</span>) * <span class="hljs-number">3</span>)<br>printf(<span class="hljs-string">&quot;%s : dead in %d\n&quot;</span>, name, age)<br>print(s<span class="hljs-string">&quot;$name : dead in $&#123;age&#125;&quot;</span>)<br><span class="hljs-meta">val</span> power = <span class="hljs-number">98.9072</span><br>println(f<span class="hljs-string">&quot; : power $&#123;power&#125;%.2f.&quot;</span>)<br><br><span class="hljs-keyword">var</span> sql = s<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    |Select *</span><br><span class="hljs-string">    |from </span><br><span class="hljs-string">    |   Student</span><br><span class="hljs-string">    |Where</span><br><span class="hljs-string">    |   name = $&#123;name&#125;</span><br><span class="hljs-string">    |and</span><br><span class="hljs-string">    |   age &gt;= $&#123;age&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span>.stripMargin <span class="hljs-comment">// strip | and whitespaces before |</span><br>println(sql)<br></code></pre></td></tr></table></figure><p>输入：</p><ul><li><code>StdIn.readLine()</code></li><li><code>StdIn.readShort() StdIn.readDouble</code></li><li><code>import scala.io.StdIn</code></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(<span class="hljs-string">&quot;input name:&quot;</span>)</span></span><br>val name: String = StdIn<span class="hljs-selector-class">.readLine</span>()<br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(<span class="hljs-string">&quot;input age:&quot;</span>)</span></span><br>val age:Int = StdIn<span class="hljs-selector-class">.readInt</span>()<br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(name + <span class="hljs-string">&quot; : &quot;</span> + age)</span></span><br></code></pre></td></tr></table></figure><p>读写文件：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> scala.io.Source<br><span class="hljs-keyword">import</span> java.io.PrintWriter<br><span class="hljs-keyword">import</span> java.io.File<br><span class="hljs-keyword">object</span> FileIO &#123;<br>    def main(args: <span class="hljs-keyword">Array</span>[String]): Unit =&#123;<br>        // <span class="hljs-keyword">read</span> <span class="hljs-keyword">from</span> file<br>        Source.fromFile(&quot;FileIO.txt&quot;).<span class="hljs-keyword">foreach</span>(print)<br><br>        // <span class="hljs-keyword">write</span> <span class="hljs-keyword">to</span> file<br>        // <span class="hljs-keyword">call</span> java API <span class="hljs-keyword">to</span> <span class="hljs-keyword">write</span><br>        val writer = <span class="hljs-built_in">new</span> PrintWriter(<span class="hljs-built_in">new</span> File(&quot;WFile.txt&quot;))<br>        writer.<span class="hljs-keyword">write</span>(&quot;Nephren!&quot;)<br>        writer.<span class="hljs-keyword">close</span>()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>数据类型：</p><ul><li>java基本类型<code>char byte short int long float double boolean</code>。</li><li>java基本类型对应包装类型：<code>Charater Byte Short Integer Long Float Double Boolean</code>。</li><li>java中不是纯粹的面向对象。</li><li>Scala吸取了这一点，所有数据都是对象，都是<code>Any</code>的子类。</li><li><code>Any</code>有两个子类：<code>AnyVal</code>值类型 <code>AnyRef</code>引用类型。</li><li>数值类型都是<code>AnyVal</code>子类，和Java数值包装类型都一样，只有整数在scala中是<code>Int</code>、字符是<code>Char</code>有点区别。</li><li><code>StringOps</code>是java中<code>String</code>类增强，<code>AnyVal</code>子类。</li><li><code>Unit</code>对应java中的<code>void</code>，<code>AnyVal</code>子类。用于方法返回值的位置，表示方法无返回值，<code>Unit</code>是一个类型，只有一个单例的对象，转成字符串打印出来为<code>()</code>。</li><li><code>Void</code>不是数据类型，只是一个关键字。</li><li><code>Null</code>是一个类型，只有一个单例对象<code>null</code>就是空引用，所有引用类型<code>AnyRef</code>的子类，这个类型主要用途是与其他JVM语言互操作，几乎不在Scala代码中使用。</li><li><code>Nothing</code>所有类型的子类型，也称为底部类型。它常见的用途是发出终止信号，例如抛出异常、程序退出或无限循环。</li></ul><p>整数类型：都是有符号整数，标准补码表示。</p><ul><li><code>Byte</code> 1字节</li><li><code>Short</code> 2字节</li><li><code>Int</code> 4字节</li><li><code>Long</code> 8字节</li><li>整数赋初值超出表示范围报错。</li><li>自动类型推断，整数字面值默认类型<code>Int</code>，长整型字面值必须加<code>L</code>后缀表示。</li><li>直接向下转换会失败，需要使用强制类型转换，<code>(a + 10).toByte</code>。</li></ul><p>浮点类型：</p><ul><li><code>Float</code> IEEE 754 32位浮点数</li><li><code>Double</code> IEEE 754 64位浮点数</li><li>字面值默认<code>Double</code></li></ul><p>字符类型：</p><ul><li>同java的<code>Character</code>，2字节，UTF-16编码的字符。</li><li>字符常量：<code>&#39;&#39;</code></li><li>类型<code>Char</code></li><li>转义：<code>\t \n \r \\ \&quot; \&#39;</code>etc</li></ul><p>布尔类型：<code>true false</code></p><p>空类型：</p><ul><li><code>Unit</code> 无值，只有一个实例，用于函数返回值。</li><li><code>Null</code> 只有一个实例<code>null</code>，空引用。</li><li><code>Nothing</code> 确定没有正常的返回值，可以用Nothing来指定返回值类型。好像意思是抛异常时返回Nothing，不是特别懂。</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arduino">object NullType &#123;<br>    <span class="hljs-function">def <span class="hljs-title">main</span><span class="hljs-params">(arg : Array[<span class="hljs-type">String</span>])</span> : Unit =</span> &#123;<br>        <span class="hljs-comment">// Unit</span><br>        <span class="hljs-function">def <span class="hljs-title">f1</span><span class="hljs-params">()</span>: Unit =</span> &#123;<br>            <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;just nothing!&quot;</span>)<br>        &#125;<br>        val a = <span class="hljs-built_in">f1</span>()<br>        <span class="hljs-built_in">println</span>(a) <span class="hljs-comment">// ()</span><br><br>        <span class="hljs-comment">// null only used for AnyRef</span><br>        <span class="hljs-comment">// val n:Int = null // invalid</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>数据类型转换：</p><ul><li><p>自动类型提升：多种数据类型混合运算，自动提升到精度最大的数据类型。</p></li><li><p>高精度赋值到低精度，直接报错。</p></li><li><p>除了图中的隐式类型转换，都需要强制类型转换。</p></li><li><p><code>Byte Short Char</code>计算时会直接提升为<code>Int</code>。</p></li><li><p><code>Boolean</code>不能参与整数浮点运算，不能隐式转换为整数。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgScala_implicit_datatype_cast.jpeg"></p></li></ul><p>强制类型转换：</p><ul><li><code>toByte toInt toChar toXXXX</code></li><li><code>&#39;a&#39;.toInt</code> <code>2.7.toInt</code></li><li>数值与String的转换：<code>&quot;&quot; + n</code> <code>&quot;100&quot;.toInt</code> <code>&quot;12.3&quot;.toFloat</code> <code>12.3&quot;.toDouble.toInt</code></li><li>整数强转是二进制截取，整数高精度转低精度可能会溢出，比如<code>128.toByte</code>。</li></ul><p>Scala标准库：</p><ul><li><code>Int</code> <code>Double</code>这些数据类型对应于Java中的原始数据类型，在底层的运行时不是一个对象，但Scala提供了从这些类型到<code>scala.runtime.RichInt/RichDouble/...</code>的（低优先级）隐式类型转换（在<code>Perdef</code>中定义），从而提供了非原始类型具有的对象操作。</li><li>基本类型都是默认导入的，不需要显式导入，位于包<code>scala</code>中。还有<code>scala.Predef</code>对象也是自动导入。</li><li>其他需要导入的包：<ul><li><code>scala.collection</code>集合。</li><li><code>scala.collection.immutable</code>不可变数据结构，比如数组、列表、范围、哈希表、哈希集合。</li><li><code>scala.collection.mutable</code>可变数据结构，数组缓冲、字符串构建器、哈希表、哈希集合。</li><li><code>scala.collection.concurrent</code>可变并发数据结构，比如字典树。</li></ul></li><li><code>scala.concurrent</code>原始的并发编程。</li><li><code>scala.io</code>输入输出。</li><li><code>scala.math</code>基本数学操作。</li><li><code>scala.sys</code>操作系统交互。</li><li><code>scala.util.matching</code>正则。</li><li>标准库中的其他部分被放在独立的分开的库中。可能需要单独安装，包括：</li><li><code>scala.reflect</code>反射API。</li><li><code>scala.xml</code>xml解析、操作、序列化。</li><li><code>scala.collection.parallel</code>并行集合。</li><li><code>scala.util.parsing</code> parser的组合子，什么东西？</li><li><code>scala.swing</code>java的GUI框架Swing的封装。</li><li>定义了一些别名给常用的类，比如<code>List</code>是<code>scala.collection.immutable.List</code>的别名，也可以理解为默认导入？</li><li>其他别名可能是底层平台JVM提供的，比如<code>String</code>是<code>java.lang.String</code>的别名。</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>运算符：</p><ul><li>和Java基本相同。</li><li>算术运算：<code>+ - * / %</code> ，<code>+</code>可以用于一元正号，二元加号，还可以用作字符串加法，取模也可用于浮点数。没有自增和自减语法<code>++ --</code>。</li><li>关系运算：<code>== != &lt; &gt; &lt;= &gt;=</code></li><li>逻辑运算：<code>&amp;&amp; || !</code>， <code>&amp;&amp; ||</code>所有语言都支持短路求值，scala也不例外。</li><li>赋值运算：<code>= += -= *= /= %=</code></li><li>按位运算：<code>&amp; | ^ ~</code></li><li>移位运算：<code>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</code>，其中<code>&lt;&lt; &gt;&gt;</code>是有符号左移和右移，<code>&gt;&gt;&gt;</code>无符号右移。</li><li>scala中所有运算符本质都是对象的方法调用，拥有比C++更灵活的运算符重载。</li></ul><p>自定义运算符：</p><ul><li>Scala中运算符即是方法，任何具有单个参数的方法都可以用作<strong>中缀运算符</strong>，写作中缀表达式的写法。<code>10.+(1)</code>即是<code>10 + 1</code>。</li><li>定义时将合法的运算符（只有特殊符号构成的标识符）作为函数名称即可定义。</li></ul><p>运算符优先级：</p><ul><li>当一个表达式使用多个运算符时，将<strong>根据运算符的第一个字符来评估优先级</strong>。内置的运算符和自定义运算符都是函数，遵守同样的规则。</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">(characters not shown below)<br><span class="hljs-bullet">* </span>/ %<br>+ -<br>:<br><span class="hljs-section">= !</span><br>&lt; &gt;<br>&amp;<br>^<br>|<br>(all letters, $, _)<br></code></pre></td></tr></table></figure><ul><li>比如下面两个表示等价：</li></ul><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coq">a + b ^? c ?^ d less a ==&gt; b | <span class="hljs-type">c</span><br>((a + b) ^? (c ?^ d)) less ((a ==&gt; b) | <span class="hljs-type">c</span>)<br></code></pre></td></tr></table></figure><p>上面都是粗浅的理解，以下引用自<a href="https://www.scala-lang.org/files/archive/spec/2.13/06-expressions.html#prefix-infix-and-postfix-operations">Scala2.13标准 - 06表达式 - 12前缀中缀和后缀操作</a>一节：</p><p>词法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">PostfixExpr     ::=  InfixExpr [<span class="hljs-built_in">id</span> [<span class="hljs-built_in">nl</span>]]<br>InfixExpr       ::=  PrefixExpr<br>                  |  InfixExpr <span class="hljs-built_in">id</span> [<span class="hljs-built_in">nl</span>] InfixExpr<br>PrefixExpr      ::=  [<span class="hljs-string">&#x27;-&#x27;</span> | <span class="hljs-string">&#x27;+&#x27;</span> | <span class="hljs-string">&#x27;!&#x27;</span> | <span class="hljs-string">&#x27;~&#x27;</span>] SimpleExpr<br></code></pre></td></tr></table></figure><ul><li>可以看到前缀运算符只有<code>- + ! ~</code>含义是正负号、逻辑非、按位取反。</li><li>表达式是通过运算符和操作数构建的。</li></ul><p>前缀运算：</p><ul><li>仅有<code>+ - ! ~</code>，等价于后缀的方法调用<code>.+() .-() .!() .~()</code></li><li>前缀运算符的操作数是<strong>原子</strong>的，比如<code>-sin(x)</code>被解析为<code>-(sin(x))</code>。这不同于一般的函数，如果定义一个相同含义的<code>negate</code>函数，那么<code>negate sin(x)</code>会被解析为<code>sin</code>是操作符，而<code>negate</code>和<code>(x)</code>是它的操作数。</li></ul><p>后缀运算：</p><ul><li>后缀的运算符可以是任意的标识符，所有的<code>e op</code>被解释为<code>e.op</code>。原来还可以这样！</li></ul><p>中缀运算：</p><ul><li>一个中缀运算符可以是任意的标识符，中缀运算符</li><li>中缀运算符的优先级定义如下：递增顺序，优先级由运算符首字符确定，同一行拥有同等优先级。</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">(all letters, as defined in [chapter 1], including <span class="hljs-code">`_`</span> and <span class="hljs-code">`$`</span>)<br>|<br>^<br>&amp;<br><span class="hljs-section">= !</span><br>&lt; &gt;<br>:<br>+ -<br><span class="hljs-bullet">* </span>/ %<br>(other operator characters, as defined in [chapter 1], including Unicode categories <span class="hljs-code">`Sm`</span> and <span class="hljs-code">`So`</span>)<br></code></pre></td></tr></table></figure><ul><li>运算符的结合性由运算符的尾字符确定，以<code>:</code>结尾的字符为右结合，其他的都是左结合。后面的集合操作运算符中有例子。</li><li>优先级和结合性决定了一个表达式的语义，也即是它的组合方式。具体规则：<ul><li>多个中缀运算符同时出现，优先级更高的更显绑定到操作数。</li><li>如果有多个连续的同一优先级的中缀运算符（同一优先级结合性必定相同），那么按照结合性绑定，左结合从左往右，右结合从右往左。</li><li>后缀运算符总是比中缀运算符优先级更低。比如<code>e1 op1 e2 op2</code>总是解释为<code>(e1 op1 e2) op2</code>。</li></ul></li><li>中缀的左结合的运算符可能包含多个参数，<code>e op (e1, e2, ..., en)</code>总是被解释为<code>e.op(e1, e2, ..., en)</code>。</li><li>对于中缀表达式<code>e1 op e2</code>，如果<code>op</code>左结合那么被解释为<code>e1.op(e2)</code>，如果右结合并且是它的参数是传名参数那么被解释为<code>e2.op(e1)</code>，如果参数是值传递，那么解释为<code>&#123;val x = e2; e2.op(x)&#125;</code>，其中x是一个新名称。后面的集合操作有例子。</li><li>前面所说的前缀运算、后缀运算、中缀运算对应的运算符分别是一元前置运算符、一元后置运算符、二元后置运算符，不存在其他类型，比如三元的条件运算符。</li></ul><p>赋值运算符：</p><ul><li>赋值运算符是指以<code>=</code>结尾的运算符。除了同样以<code>=</code>开始，和<code>&gt;= &lt;= !=</code>之外。</li><li>赋值运算符在当其他的解释都非法时会有特殊对待。</li><li>比如说<code>l += r</code>，如果没有显式定义的<code>+=</code>运算符，那么会被解释为<code>l = l + r</code>。</li><li>这种重新解释发生在满足以下两个条件的情况下：<ul><li><code>l</code>没有<code>+=</code>运算符。</li><li><code>l = l + r</code>是类型正确的，通常情况下这意味着<code>l</code>是一个左值，并且<code>l + r</code>是合法的（定义了<code>+</code>或者可隐式转换为定义了<code>+</code>的类型）。</li></ul></li></ul><p>试验与总结：</p><ul><li>内置前缀运算符有<code>+ - ! ~</code>对少量内置类型提供支持，自定义一元前缀请使用<code>unary_</code>加上要定义的运算符名称，并且不要加参数列表<code>()</code>。而且这东西真的可以加参数列表，但我并没有找到用运算符形式调用的方式。</li><li>自定义一元后置运算符（即定义为空参数列表）需要引入<code>scala.language.postfixOps</code>才能使用后缀运算符形式调用。当然用函数调用形式调用总是没有语法问题的。同样去掉参数列表后就可以后置使用。</li><li>二元后置运算符，是最常用的自定义运算符。优先级上面有，结合性以是否<code>:</code>结尾确定。需要特别注意的是右结合和比如C++中重载赋值运算符是有区别的，需要了解。</li><li>Scala中内置的赋值运算符返回空<code>()</code>，所以其实是不能连续赋值的，赋值类运算符算是被特殊对待了。并且因为推崇函数式编程风格，能定义为<code>val</code>则定义为<code>val</code>也就不能连续赋值。因为变量都是引用变量，定义<code>=</code>变成了没有道理也不可能的一件事情，所以实践中也只能一条语句只做一次赋值。</li><li>Scala不能定义<code>=</code>运算符，但可以定义复合赋值，并且做了处理，某些情况下只要类设计得好定义了运算类运算符就不需要多去定义复合赋值了。所以说如果真要定义复合赋值返回值也应该返回<code>()</code>吗？也许是的。</li><li>多参数的方法其实也可以写成中缀形式，<code>e op (e1, e2, ..., en)</code>。</li><li>对于类方法来说，<strong>运算符是函数，函数也是运算符</strong>。</li></ul><p>例子：可窥见其灵活程度。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">import</span> scala.<span class="hljs-property">language</span>.<span class="hljs-property">postfixOps</span><br>object UserDefindOps &#123;<br>    def <span class="hljs-title function_">main</span>(args: <span class="hljs-built_in">Array</span>[<span class="hljs-built_in">String</span>]): Unit = &#123;<br>        val v = <span class="hljs-title function_">Vector2</span>(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>)<br>        val v2 = <span class="hljs-title function_">Vector2</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>)<br><br>        <span class="hljs-built_in">println</span>(v)<br>        <span class="hljs-comment">// prefix unary</span><br>        <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;==========================================&quot;</span>)<br>        <span class="hljs-built_in">println</span>(+v)<br>        <span class="hljs-built_in">println</span>(-v)<br>        <span class="hljs-built_in">println</span>(v.<span class="hljs-property">unary_</span>-(<span class="hljs-string">&quot;hello&quot;</span>))<br><br>        <span class="hljs-comment">// binary</span><br>        <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;==========================================&quot;</span>)<br>        <span class="hljs-built_in">println</span>(v * <span class="hljs-number">3</span>)<br>        <span class="hljs-built_in">println</span>(v * v2)<br>        <span class="hljs-built_in">println</span>(v + v2)<br>        <span class="hljs-built_in">println</span>(v - v2)<br>        <br>        <span class="hljs-comment">// postfix unary, just for test, no meaning</span><br>        <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;==========================================&quot;</span>)<br>        <span class="hljs-built_in">println</span>(v-)<br>        <span class="hljs-built_in">println</span>((v-)-)<br><br>        <span class="hljs-comment">// multiple</span><br>        <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;==========================================&quot;</span>)<br>        <span class="hljs-built_in">println</span>(v <span class="hljs-title function_">hello</span> (<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;yes&quot;</span>))<br>        <span class="hljs-built_in">println</span>(v + (<span class="hljs-number">10</span>, <span class="hljs-number">10</span>))<br>        <span class="hljs-built_in">println</span>(v - (<span class="hljs-number">10</span>, <span class="hljs-number">10</span>))<br><br>        <span class="hljs-comment">// assignment operator</span><br>        <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;==========================================&quot;</span>)<br>        var v3 = <span class="hljs-title function_">Vector2</span>(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>)<br>        <span class="hljs-built_in">println</span>(v3 *= <span class="hljs-number">3</span>) <span class="hljs-comment">// ()</span><br>        <span class="hljs-built_in">println</span>(v3) <span class="hljs-comment">// Vector2(30.0, 15.0)</span><br>        v3 /= <span class="hljs-number">3</span><br>        <span class="hljs-built_in">println</span>(v3)<br>        v3 += v2<br>        <span class="hljs-built_in">println</span>(v3)<br>        v3 += (<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)<br>        <span class="hljs-built_in">println</span>(v3)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vector2</span>(val x: Double, val y: Double) &#123;<br>    override def <span class="hljs-title function_">toString</span>(): <span class="hljs-built_in">String</span> = s<span class="hljs-string">&quot;Vector2($x, $y)&quot;</span><br>    <span class="hljs-comment">// prefix unary</span><br>    def unary_- = <span class="hljs-variable">this</span>.- <span class="hljs-comment">// call postfix -</span><br>    def unary_+ = <span class="hljs-title function_">Vector2</span>(x, y)<br>    def unary_-(<span class="hljs-built_in">str</span>: <span class="hljs-built_in">String</span>) = s<span class="hljs-string">&quot;unary - with a string parameter: $str&quot;</span> <span class="hljs-comment">// can not call this through operator format</span><br>    <span class="hljs-comment">// binary</span><br>    def +(v: Vector2) = <span class="hljs-title function_">Vector2</span>(x + v.<span class="hljs-property">x</span>, y + v.<span class="hljs-property">y</span>)<br>    def -(v: Vector2) = <span class="hljs-title function_">Vector2</span>(x - v.<span class="hljs-property">x</span>, y - v.<span class="hljs-property">y</span>)<br>    def *(v: Vector2) = x * v.<span class="hljs-property">x</span> + y * v.<span class="hljs-property">y</span> <span class="hljs-comment">// Inner product </span><br>    def *(d: Double) = <span class="hljs-title function_">Vector2</span>(d * x, d * y) <span class="hljs-comment">// multiply</span><br>    def /(d: Double) = <span class="hljs-title function_">Vector2</span>(x / d, y / d)<br>    <span class="hljs-comment">// postfix unary</span><br>    def - = <span class="hljs-title function_">Vector2</span>(-x, -y)<br>    <span class="hljs-comment">// multiple</span><br>    def <span class="hljs-title function_">hello</span>(a: <span class="hljs-built_in">String</span>, b: <span class="hljs-built_in">String</span>) = s<span class="hljs-string">&quot;$a, $b, $&#123;toString()&#125;&quot;</span><br>    def +(_x: Double, _y: Double): Vector2 = <span class="hljs-variable">this</span> + <span class="hljs-title function_">Vector2</span>(_x, _y)<br>    def -(_x: Double, _y: Double): Vector2 = <span class="hljs-title function_">Vector2</span>(x - _x, y - _y)<br>&#125;<br><br>object Vector2 &#123;<br>    def <span class="hljs-title function_">apply</span>(x: Double, y: Double) = <span class="hljs-keyword">new </span><span class="hljs-class title_">Vector2</span>(x, y)<br>&#125;<br></code></pre></td></tr></table></figure><p>实践指南：</p><ul><li>一元前缀和一元后缀运算符定义时不加参数列表，运算符形式使用。</li><li>在复杂表达式中使用一元前缀和后缀运算符使用时最好加括号表明优先级，不然在复杂表达式中编译器可能难以区分这是一元的还是二元的。至少定义了一元前置和后置<code>-</code>的类中无法像<code>a - -</code>和<code>- - a</code>这样来用。</li><li>二元运算符定义只给一个参数，运算符形式使用。</li><li>参数多于1个时不要通过运算符形式使用，但如果很清晰的话其实也无妨。</li><li>函数也是运算符，非特殊符号运算符形式使用也可以很有用，表达能力很强，比如<code>1 to 10</code>。</li><li>不要滥用，用到都搞不清谁是运算符谁是操作数就不好了。</li><li>经验尚浅，还需多实践。</li></ul><h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><p><code>if-else</code>：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">condition</span>) &#123;<br>    xxx<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">condition</span>) &#123;<br>    xxx<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    xxx<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>scala中特殊一点，<code>if-else</code>语句也有返回值，也就是说也可以作为表达式，定义为执行的最后一个语句的返回值。</li><li>可以强制要求返回<code>Unit</code>类型，此时忽略最后一个表达式的值，得到<code>()</code>。</li><li>多种返回类型的话，赋值的目标变量类型需要指定为具体公共父类，也可以自动推断。</li><li>scala中没有三元条件运算符，可以用<code>if (a) b else c</code> 替代<code>a ? b : c</code>。</li><li>嵌套条件同理。</li></ul><p><code>for</code>循环，也叫<code>for</code>推导式：</p><ul><li><p>范围遍历：<code>for(i &lt;- 1 to 10) &#123;&#125;</code>，其中<code>1 to 10</code>是<code>Int</code>一个方法调用，返回一个<code>Range</code>。</p></li><li><p>范围<code>1 to 10</code> <code>1 until 10</code>是包含右边界和不包含右边界的范围，也可以直接用<code>Range</code>类。</p></li><li><p>范围步长<code>1 to 10 by 2</code>。</p></li><li><p>范围也是一个集合，也可以遍历普通集合：<code>for(i &lt;- collection) &#123;&#125;</code></p></li><li><p>循环守卫：即循环保护式，或者叫条件判断式，循环守卫为<code>true</code></p><p>则进入循环体内部，为<code>fasle</code></p><p>则跳过，类似于<code>continue</code></p><ul><li>写法：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(i &lt;- collection if condition)</span></span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>等价于：</li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">if</span> <span class="hljs-params">(i &lt;- collection)</span> &#123;</span><br><span class="hljs-function">    <span class="hljs-title">if</span> <span class="hljs-params">(condition)</span> &#123;</span><br><span class="hljs-function">    &#125;</span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>嵌套循环同理。嵌套循环可以将条件合并到一个for中：</p><ul><li>标准写法：</li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">for</span> <span class="hljs-params">(i &lt;- <span class="hljs-number">1</span> to <span class="hljs-number">4</span>)</span> &#123;</span><br><span class="hljs-function">        <span class="hljs-title">for</span> <span class="hljs-params">(j &lt;- <span class="hljs-number">1</span> to <span class="hljs-number">5</span>)</span> &#123;</span><br><span class="hljs-function">            <span class="hljs-title">println</span><span class="hljs-params">(<span class="hljs-string">&quot;i = &quot;</span> + i + <span class="hljs-string">&quot;, j = &quot;</span> + j)</span></span><br><span class="hljs-function">        &#125;</span><br><span class="hljs-function">    &#125;</span><br></code></pre></td></tr></table></figure><ul><li>等价写法：</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">for</span> (i &lt;- <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> <span class="hljs-number">4</span>; j &lt;- <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> <span class="hljs-number">5</span>) &#123;<br>        println(<span class="hljs-string">&quot;i = &quot;</span> + i + <span class="hljs-string">&quot;, j = &quot;</span> + j)<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>典型例子，乘法表：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">for</span> (i &lt;- 1 <span class="hljs-keyword">to</span> 9; j &lt;- 1 <span class="hljs-keyword">to</span> i) &#123;<br>    <span class="hljs-built_in">print</span>(s<span class="hljs-string">&quot;<span class="hljs-variable">$j</span> * <span class="hljs-variable">$i</span> = <span class="hljs-variable">$&#123;i * j&#125;</span> \t&quot;</span>)<br>    <span class="hljs-keyword">if</span> (j == i) println()<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>循环中的引入变量，但不是循环变量：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">for</span> <span class="hljs-params">(i &lt;- <span class="hljs-number">1</span> to <span class="hljs-number">10</span>; j = <span class="hljs-number">10</span> - i)</span> &#123;</span><br><span class="hljs-function">    <span class="hljs-title">println</span><span class="hljs-params">(<span class="hljs-string">&quot;i = &quot;</span> + i + <span class="hljs-string">&quot;, j = &quot;</span> + j)</span></span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>循环条件也可以用<code>&#123;&#125;</code></p><ul><li>上面的引入变量循环等价于：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">for</span> &#123;<br>    <span class="hljs-selector-tag">i</span> &lt;- <span class="hljs-number">1</span> to <span class="hljs-number">10</span><br>    j = <span class="hljs-number">10</span> - <span class="hljs-selector-tag">i</span><br>&#125; &#123;<br>    <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;i = &quot;</span> + <span class="hljs-selector-tag">i</span> + <span class="hljs-string">&quot;, j = &quot;</span> + j)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>循环同样有返回值，返回值都是空，也就是<code>Unit</code>实例<code>()</code>。</p></li><li><p>循环中同样可以用<code>yield</code></p><p>返回，外面可以接住用来操作，循环暂停，执行完后再继续循环。就像Ruby&#x2F;Python。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">val</span> v = for (i &lt;- <span class="hljs-number">1</span> to <span class="hljs-number">10</span>) yield i * i // default implementation is Vector, Vector(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">49</span>, <span class="hljs-number">64</span>, <span class="hljs-number">81</span>, <span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure></li></ul><p><code>while</code>和<code>do while</code>：</p><ul><li>为了兼容java，不推荐使用，结果类型是<code>Unit</code>。</li><li>不可避免需要声明变量在循环外部，等同于循环内部对外部变量造成了影响，所以不推荐使用。</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-keyword">while</span> <span class="hljs-comment">(condition)</span> &#123;<br>&#125;<br><span class="hljs-keyword">do</span> &#123;<br>&#125; <span class="hljs-keyword">while</span> <span class="hljs-comment">(condition)</span><br></code></pre></td></tr></table></figure><p>循环中断：</p><ul><li><p>Scala内置控制结构去掉了<code>break continue</code>关键字，为了更好适应函数式编程，推荐使用函数式风格解决。</p></li><li><p>使用<code>breakable</code>结构来实现<code>break continue</code>功能。</p></li><li><p>循环守卫可以一定程度上替代<code>continue</code>。</p></li><li><p>可以用抛出异常捕获的方式退出循环，替代break</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">for</span> (i &lt;- <span class="hljs-number">0</span> to <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RuntimeException</span><br>        <span class="hljs-title function_ invoke__">println</span>(i)<br>    &#125;<br>&#125; <span class="hljs-keyword">catch</span> &#123;<br>    <span class="hljs-keyword">case</span> e: <span class="hljs-built_in">Exception</span> =&gt; <span class="hljs-comment">// do nothing</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可以使用Scala中的<code>Breaks</code>类中的<code>break</code></p><p>方法（只是封装了异常捕获），实现异常抛出和捕获。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import scala<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.control</span><span class="hljs-selector-class">.Breaks</span><br>Breaks<span class="hljs-selector-class">.breakable</span>(<br>    <span class="hljs-keyword">for</span> (<span class="hljs-selector-tag">i</span> &lt;- <span class="hljs-number">0</span> to <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-selector-tag">i</span> == <span class="hljs-number">3</span>)<br>            Breaks<span class="hljs-selector-class">.break</span>()<br>        <span class="hljs-built_in">println</span>(i)<br>    &#125;<br>)<br></code></pre></td></tr></table></figure></li></ul><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p>不同范式对比：</p><ul><li>面向过程：按照步骤解决问题。</li><li>面向对象：分解对象、行为、属性，通过对象关系以及行为调用解决问题。耦合低，复用性高，可维护性强。</li><li>函数式编程：面向对象和面向过程都是命令式编程，但是函数式编程不关心具体运行过程，而是关心数据之间的映射。纯粹的函数式编程语言中没有变量，所有量都是常量，计算过程就是不停的表达式求值的过程，每一段程序都有返回值。不关心底层实现，对人来说更好理解，相对地编译器处理就比较复杂。</li><li>函数式编程优点：编程效率高，函数式编程的不可变性，对于函数特定输入输出是特定的，与环境上下文等无关。函数式编程无副作用，利于并行处理，所以Scala特别利于应用于大数据处理，比如Spark，Kafka框架。</li></ul><p>函数定义：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">def <span class="hljs-built_in">func</span>(arg1: TypeOfArg1, arg2: ...): RetType = &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>函数式编程语言中，函数是一等公民（可以像对象一样赋值、作为参数返回值），可以在任何代码块中定义函数。</li><li>一般将定义在类或对象中（最外层）的函数称为方法，而定义在方法中（内层）的称为函数。广义上都是函数。</li><li>返回值用<code>return</code>返回，不写的话会使用最后一行代码作为返回值。</li><li>无返回值<code>Unit</code>时可以用<code>return</code>可以用<code>return ()</code>可以不返回。</li><li>其他时候只需要返回值是返回值类型的子类对象就行。</li></ul><p>术语说明：</p><ul><li>java中不提函数的说法，而是说类或者实例方法，不涉及一般化的函数。</li><li>函数式编程中的函数二字来源于数学上的函数，也就是映射，集合和集合之间的关系，强调数据之间的映射关系。</li><li>而编程语言中的函数，也包括scala中的函数定义都是指的一个完成特定功能的子程序（subroutine），并不等同于数学意义上的函数。</li></ul><p>函数参数：</p><ul><li><p>可变参数，类似于Java，使用数组包装。</p><ul><li><code>def f4(str:String*): Unit = &#123;&#125;</code>。</li><li>如果除了可变参数还有其他参数，需要将可变参数放在末尾。</li><li>可变参数当做数组来使用。</li></ul></li><li><p>参数默认值:</p><ul><li><code>def f5(name: String = &quot;alice&quot;): Unit = &#123;&#125;</code></li><li>和C++一样，默认参数可以不传，默认参数必须全部放在末尾。</li></ul></li><li><p>带名称传参：</p><ul><li>调用时带名称。</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart">def f6(name: <span class="hljs-built_in">String</span>, age: Int = <span class="hljs-number">20</span>, loc: <span class="hljs-built_in">String</span> = <span class="hljs-string">&quot;BeiJing&quot;</span>): Unit = &#123;<br>    println(s<span class="hljs-string">&quot;name <span class="hljs-subst">$&#123;name&#125;</span>, age <span class="hljs-subst">$&#123;age&#125;</span>, location <span class="hljs-subst">$&#123;loc&#125;</span>&quot;</span>)<br>&#125;<br>f6(<span class="hljs-string">&quot;Bob&quot;</span>)<br>f6(<span class="hljs-string">&quot;Alice&quot;</span>, loc = <span class="hljs-string">&quot;Xi&#x27;An&quot;</span>)<br>f6(<span class="hljs-string">&quot;Michael&quot;</span>, <span class="hljs-number">30</span>)<br></code></pre></td></tr></table></figure><ul><li>不给名称的就是按顺序赋值。</li><li>调用时带名参数必须位于实参列表末尾。</li><li>和默认参数一起使用会很方便，比如有多个默认参数，但只想覆盖其中一个。</li></ul></li></ul><p>函数至简原则：</p><ul><li><p>能省则省。</p></li><li><p>最后一行代码会作为返回值，可以省略<code>return</code>。</p></li><li><p>函数体只有一行代码的话，可以省略花括号。</p></li><li><p>如果返回值类型能够自动推断那么可以省略。</p></li><li><p>如果函数体中用<code>return</code>做返回，那么返回值类型必须指定。</p></li><li><p>如果声明返回<code>Unit</code>，那么函数体中使用<code>return</code>返回的值也不起作用。</p></li><li><p>如果期望是无返回值类型，那么可以省略<code>=</code>。这时候没有返回值，函数也可以叫做过程。【2.13.0已废弃，能编过不过会提示。】</p></li><li><p>无参函数如果声明时没有加<code>()</code>，调用时可以省略<code>()</code>。【如果声明时有<code>()</code>调用也可以省略，不过2.13.3废弃了。】</p></li><li><p>不关心函数名称时，函数名称和def也可以省略，去掉返回值类型，将&#x3D;修改为&#x3D;&gt;定义为匿名函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> = <span class="hljs-params">(name: <span class="hljs-type">String</span>)</span></span> =&gt; &#123; println(<span class="hljs-string">&quot;name&quot;</span>) &#125;<br></code></pre></td></tr></table></figure></li></ul><p>匿名函数：</p><ul><li><p>没有名称的函数，可以被赋值给一个量。也叫lambda表达式</p></li><li><p><code>val fun = (name: String) =&gt; &#123; println(&quot;name&quot;) &#125;</code></p></li><li><p>匿名函数定义时不能有函数的返回值类型。</p></li><li><p>简化原则：</p><ul><li>参数的类型可以省略，如果可以根据高阶函数形参自动推导。</li><li>类型省略之后如果只有一个参数，那么可以省略参数列表的<code>()</code>，<code>name =&gt; println(name)</code>。</li><li>匿名函数函数体只要一行，那么<code>&#123;&#125;</code>可以省略。</li><li>如果参数只出现一次，则参数可以省略，后面出现的参数用<code>_</code>代替，<code>println(_)</code>也是一个lambda，表示<code>name =&gt; &#123;println(name)&#125;</code>。</li><li>如果可以推断出当前传入的<code>println</code>是一个函数体，而不是函数调用语句，那么可以省略下划线。也就是省略了转调，直接将函数名称作为参数传递。</li></ul><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">def</span> <span class="hljs-function"><span class="hljs-title">f</span>(<span class="hljs-variable">func</span>: <span class="hljs-variable">String</span> =&gt; <span class="hljs-variable">Unit</span>): <span class="hljs-variable">Unit</span> = &#123;</span><br><span class="hljs-function">    <span class="hljs-title">func</span>(<span class="hljs-string">&quot;alice&quot;</span>)</span><br>&#125;<br><span class="hljs-function"><span class="hljs-title">f</span>((<span class="hljs-variable">name</span>: <span class="hljs-variable">String</span>) =&gt; &#123; <span class="hljs-title">println</span>(<span class="hljs-variable">name</span>) &#125;)</span><br><span class="hljs-function"><span class="hljs-title">f</span>((<span class="hljs-variable">name</span>) =&gt; <span class="hljs-title">println</span>(<span class="hljs-variable">name</span>))</span><br><span class="hljs-function"><span class="hljs-title">f</span>(<span class="hljs-title">println</span>(<span class="hljs-variable">_</span>))</span><br><span class="hljs-function"><span class="hljs-title">f</span>(<span class="hljs-variable">println</span>)</span><br></code></pre></td></tr></table></figure></li><li><p>例子：省得太极端就没有可读性了。</p></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">def dual<span class="hljs-constructor">Op(<span class="hljs-params">func</span>: (Int, Int)</span> =&gt; Int): Int = &#123;<br>    func(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>&#125;<br>println(dual<span class="hljs-constructor">Op((<span class="hljs-params">a</span>: Int, <span class="hljs-params">b</span>: Int)</span> =&gt; a + b))<br>println(dual<span class="hljs-constructor">Op((<span class="hljs-params">a</span>: Int, <span class="hljs-params">b</span>: Int)</span> =&gt; a - b))<br>println(dual<span class="hljs-constructor">Op((<span class="hljs-params">a</span>, <span class="hljs-params">b</span>)</span> =&gt; a - b))<br>println(dual<span class="hljs-constructor">Op(<span class="hljs-params">_</span> + <span class="hljs-params">_</span>)</span>) <span class="hljs-comment">// a + b</span><br>println(dual<span class="hljs-constructor">Op(-<span class="hljs-params">_</span> + <span class="hljs-params">_</span>)</span>) <span class="hljs-comment">// -a + b</span><br></code></pre></td></tr></table></figure><p>高阶函数：</p><ul><li>三种形式：函数作为值传递、函数作为参数、函数作为返回值。</li><li>作为值传递：经过赋值之后在底层变成一个lambda对象。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> define <span class="hljs-keyword">function</span><br>def foo(n: Int): Int = &#123;<br>    println(<span class="hljs-string">&quot;call foo&quot;</span>)<br>    n + <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-regexp">//</span> <span class="hljs-keyword">function</span> assign to value, also a object<br>val <span class="hljs-keyword">func</span> = foo _ <span class="hljs-regexp">//</span> represent the <span class="hljs-keyword">function</span> foo, not <span class="hljs-keyword">function</span> call<br>val func1: Int =&gt; Int = foo <span class="hljs-regexp">//</span> specify the type of func1<br>println(<span class="hljs-keyword">func</span>) <span class="hljs-regexp">//</span> Main$$<span class="hljs-variable">$Lambda</span><span class="hljs-variable">$674</span>/<span class="hljs-number">0</span>x000000080103c588@<span class="hljs-number">770</span>beef5<br>println(<span class="hljs-keyword">func</span> == func1) <span class="hljs-regexp">//</span> false, not a same object<br></code></pre></td></tr></table></figure><ul><li>函数作为参数，上面展示过了。可以传匿名函数、函数名称、lambda对象。</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// <span class="hljs-keyword">function</span> <span class="hljs-keyword">as</span> arguments<br>def dualEval(op: (<span class="hljs-type">Int</span>, <span class="hljs-type">Int</span>) =&gt; <span class="hljs-type">Int</span>, a: <span class="hljs-type">Int</span>, b: <span class="hljs-type">Int</span>) = &#123;<br>    op(a, b)<br>&#125;<br>def <span class="hljs-keyword">add</span>(a: <span class="hljs-type">Int</span>, b: <span class="hljs-type">Int</span>): <span class="hljs-type">Int</span> = a + b<br>println(dualEval(<span class="hljs-keyword">add</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>))<br>val mul:(<span class="hljs-type">Int</span>, <span class="hljs-type">Int</span>) =&gt; <span class="hljs-type">Int</span> = _ * _<br>println(dualEval(mul, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>))<br>println(dualEval((a, b) =&gt; a + b, <span class="hljs-number">1000</span>, <span class="hljs-number">24</span>))<br></code></pre></td></tr></table></figure><ul><li>函数作为返回值：</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// function as return value</span><br>def <span class="hljs-built_in">outerFunc</span>(): Int =&gt; Unit = &#123;<br>    def <span class="hljs-built_in">inner</span>(a: Int): Unit = &#123;<br>        <span class="hljs-built_in">println</span>(s&quot;call inner with argument $&#123;a&#125;&quot;)<br>    &#125;<br>    inner <span class="hljs-comment">// return a function</span><br>&#125;<br><span class="hljs-built_in">println</span>(outerFunc()(<span class="hljs-number">10</span>)) <span class="hljs-comment">// inner return ()</span><br></code></pre></td></tr></table></figure><ul><li>现在就可以套娃了，比如定义一个返回一个返回函数的函数的函数。</li></ul><p>高阶函数举例：</p><ul><li>使用特定操作处理数组元素，得到新数组。也就是集合处理的map（映射）操作。</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// deal with an array, get a new array</span><br><span class="hljs-comment">// map operation of array</span><br>def <span class="hljs-built_in">array</span><span class="hljs-constructor">Op(<span class="hljs-params">arr</span>: Array[Int], <span class="hljs-params">op</span>: Int =&gt; Int)</span>: Array<span class="hljs-literal">[I<span class="hljs-identifier">nt</span>]</span> = &#123;<br>    <span class="hljs-keyword">for</span> (elem &lt;- arr) yield op(elem) <span class="hljs-comment">// the whole for expression get a new array</span><br>&#125;<br><span class="hljs-keyword">val</span> arr = <span class="hljs-constructor">Array(1, 2, 3, 4)</span><br>def add<span class="hljs-constructor">One(<span class="hljs-params">elem</span>: Int)</span>: Int = elem + <span class="hljs-number">1</span><br>println(<span class="hljs-built_in">array</span><span class="hljs-constructor">Op(<span class="hljs-params">arr</span>, <span class="hljs-params">addOne</span> <span class="hljs-params">_</span>)</span>.mk<span class="hljs-constructor">String(<span class="hljs-string">&quot;, &quot;</span>)</span>) <span class="hljs-comment">// pass addOne also work</span><br>println(<span class="hljs-built_in">array</span><span class="hljs-constructor">Op(<span class="hljs-params">arr</span>, <span class="hljs-params">elem</span> =&gt; <span class="hljs-params">elem</span> <span class="hljs-operator">*</span> 2)</span>.mk<span class="hljs-constructor">String(<span class="hljs-string">&quot;, &quot;</span>)</span>)<br>println(<span class="hljs-built_in">array</span><span class="hljs-constructor">Op(<span class="hljs-params">arr</span>, <span class="hljs-params">_</span> <span class="hljs-operator">*</span> 3)</span>.mk<span class="hljs-constructor">String(<span class="hljs-string">&quot;, &quot;</span>)</span>)<br></code></pre></td></tr></table></figure><ul><li>套娃：</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">def</span> func(a: <span class="hljs-keyword">Int</span>): String =&gt; (<span class="hljs-keyword">Char</span> =&gt; <span class="hljs-keyword">Boolean</span>) = &#123;<br>    <span class="hljs-keyword">def</span> f1(s: String): <span class="hljs-keyword">Char</span> =&gt; <span class="hljs-keyword">Boolean</span> = &#123;<br>        <span class="hljs-keyword">def</span> f2(c: <span class="hljs-keyword">Char</span>): <span class="hljs-keyword">Boolean</span> = &#123; <br>            <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span> &amp;&amp; s == <span class="hljs-string">&quot;&quot;</span> &amp;&amp; c == <span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-keyword">false</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">true</span><br>        &#125;<br>        f2<br>    &#125;<br>    f1<br>&#125;<br><span class="hljs-keyword">println</span>(func(<span class="hljs-number">0</span>)(<span class="hljs-string">&quot;&quot;</span>)(<span class="hljs-string">&#x27;0&#x27;</span>)) <span class="hljs-comment">// false</span><br><span class="hljs-keyword">println</span>(func(<span class="hljs-number">1</span>)(<span class="hljs-string">&quot;hello&quot;</span>)(<span class="hljs-string">&#x27;c&#x27;</span>)) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><ul><li>上面的例子经过极致简写：只能说类型推导也太强大了。<strong>内层函数可以使用外层函数的参数</strong>。</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// simplify to anonymous function</span><br>def func1(a: Int): <span class="hljs-function"><span class="hljs-params">String</span> =&gt;</span> (<span class="hljs-function"><span class="hljs-params">Char</span> =&gt;</span> <span class="hljs-built_in">Boolean</span>) = &#123;<br>    s =&gt; <span class="hljs-function"><span class="hljs-params">c</span> =&gt;</span> !(a == <span class="hljs-number">0</span> &amp;&amp; s == <span class="hljs-string">&quot;&quot;</span> &amp;&amp; c == <span class="hljs-string">&#x27;0&#x27;</span>)<br>&#125;<br>println(func1(<span class="hljs-number">0</span>)(<span class="hljs-string">&quot;&quot;</span>)(<span class="hljs-string">&#x27;0&#x27;</span>)) <span class="hljs-comment">// false</span><br>println(func1(<span class="hljs-number">1</span>)(<span class="hljs-string">&quot;hello&quot;</span>)(<span class="hljs-string">&#x27;c&#x27;</span>)) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><ul><li>柯里化之后：</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">// Currying </span><br><span class="hljs-keyword">def</span> func2(a: <span class="hljs-keyword">Int</span>)(s: String)(c: <span class="hljs-keyword">Char</span>): <span class="hljs-keyword">Boolean</span> = !(a == <span class="hljs-number">0</span> &amp;&amp; s == <span class="hljs-string">&quot;&quot;</span> &amp;&amp; c == <span class="hljs-string">&#x27;0&#x27;</span>)<br><span class="hljs-keyword">println</span>(func2(<span class="hljs-number">0</span>)(<span class="hljs-string">&quot;&quot;</span>)(<span class="hljs-string">&#x27;0&#x27;</span>)) <span class="hljs-comment">// false</span><br><span class="hljs-keyword">println</span>(func2(<span class="hljs-number">1</span>)(<span class="hljs-string">&quot;hello&quot;</span>)(<span class="hljs-string">&#x27;c&#x27;</span>)) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><strong>函数柯里化</strong>和<strong>闭包</strong>：<strong>重点</strong>。</p><p>闭包：如果一个函数，访问到了它的外部（局部）变量的值，那么这个函数和他所处的环境，称为闭包。</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E9%97%AD%E5%8C%85_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">闭包</a>的定义：</li></ul><blockquote><p>在计算机科学中，闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是在支持<a href="https://zh.wikipedia.org/wiki/%E5%A4%B4%E7%AD%89%E5%87%BD%E6%95%B0">头等函数</a>的编程语言中实现词法绑定的一种技术。闭包在实现上是一个结构体，它存储了一个函数（通常是其入口地址）和一个关联的环境（相当于一个符号查找表）。环境里是若干对符号和值的对应关系，它既要包括约束变量（该函数内部绑定的符号），也要包括自由变量（在函数外部定义但在函数内被引用），有些函数也可能没有自由变量。闭包跟函数最大的不同在于，当捕捉闭包的时候，它的自由变量会在捕捉时被确定，这样即便脱离了捕捉时的上下文，它也能照常运行。捕捉时对于值的处理可以是值拷贝，也可以是名称引用，这通常由语言设计者决定，也可能由用户自行指定（如C++）。</p></blockquote><ul><li>因为外层调用结束返回内层函数后，经过堆栈调整(比如在C中主调或者被调清理)，外层函数的参数已经被释放了，所以内层是获取不到外层的函数参数的。为了能够将环境（函数中用到的并非该函数参数的变量和他们的值）保存下来（需要考虑释放问题，可以通过GC可以通过对象生命周期控制，GC是一个常见选择），这时会将执行的环境打一个包保存到堆里面。</li></ul><p>函数<a href="https://zh.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96">柯里化</a>（Currying）：将一个参数列表的多个参数，变成多个参数列表的过程。也就是将普通多参数函数变成高阶函数的过程。</p><ul><li>定义：</li></ul><blockquote><p>在计算机科学中，柯里化（英语：Currying），又译为卡瑞化或加里化，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。在直觉上，柯里化声称“如果你固定某些参数，你将得到接受余下参数的一个函数”。柯里化是一种处理函数中附有多个参数的方法，并在只允许单一参数的框架中使用这些函数。</p></blockquote><ul><li>scala中的柯里化函数定义：</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">// Currying </span><br><span class="hljs-keyword">def</span> add(a: <span class="hljs-keyword">Int</span>)(b: <span class="hljs-keyword">Int</span>): <span class="hljs-keyword">Int</span> = a + b<br><span class="hljs-keyword">println</span>(add(<span class="hljs-number">4</span>)(<span class="hljs-number">3</span>))<br>val addFour = add(<span class="hljs-number">4</span>) _<br><span class="hljs-comment">// val addFour: Int =&gt; int = add(4)</span><br><span class="hljs-keyword">println</span>(addFour(<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><p>递归：</p><ul><li>太常见了，不用过多介绍。</li><li>方法调用自身。</li><li>递归要有结束逻辑。</li><li>调用自身时，传递参数要有规律。</li><li>scala中递归定义函数必须声明返回值类型，因为无法通过推导获得。</li><li>纯函数式语言比如Haskell，连循环都没有，很多操作都需要通过递归来做，性能比较依赖尾递归优化。</li><li>scala中的尾递归优化例子：</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs scss">def <span class="hljs-built_in">factorial</span>(n: Int) : Int = &#123;<br>    if (n &lt; <span class="hljs-number">0</span>)<br>        return -<span class="hljs-number">1</span><br>    <span class="hljs-built_in">if</span>(n == <span class="hljs-number">0</span>)<br>        return <span class="hljs-number">1</span> <br>    <span class="hljs-built_in">factorial</span>(n-<span class="hljs-number">1</span>) * n<br>&#125;<br><span class="hljs-comment">// tail recusion implementation of factorial</span><br>def <span class="hljs-built_in">tailFact</span>(n: Int): Int = &#123;<br>    if (n &lt; <span class="hljs-number">0</span>)<br>        return -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">@annotation</span>.tailrec<br>    def loop(<span class="hljs-attribute">n</span>: Int, <span class="hljs-attribute">curRes</span>: Int): Int = &#123;<br>        if (n == <span class="hljs-number">0</span>)<br>            return curRes<br>        <span class="hljs-built_in">loop</span>(n - <span class="hljs-number">1</span>, curRes * n)<br>    &#125;<br>    <span class="hljs-built_in">loop</span>(n, <span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>控制抽象：</p><ul><li>值调用：按值传递参数，计算值后再传递。多数语言中一般函数调用都是这个方式，C++还存在引用传递。</li><li>名调用：按名称传递参数，直接用实参替换函数中使用形参的地方。能想到的只有C语言中的带参宏函数，其实并不是函数调用，预处理时直接替换。</li><li>例子：</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// pass by value</span><br>def <span class="hljs-built_in">f0</span>(a: Int): Unit = &#123;<br>    <span class="hljs-built_in">println</span>(&quot;a: &quot; + a)<br>    <span class="hljs-built_in">println</span>(&quot;a: &quot; + a)<br>&#125;<br><span class="hljs-built_in">f0</span>(<span class="hljs-number">10</span>)<br><br><span class="hljs-comment">// pass by name, argument can be a code block that return to Int</span><br>def <span class="hljs-built_in">f1</span>(a: =&gt; Int): Unit = &#123;<br>    <span class="hljs-built_in">println</span>(&quot;a: &quot; + a)<br>    <span class="hljs-built_in">println</span>(&quot;a: &quot; + a)<br>&#125;<br>def <span class="hljs-built_in">f2</span>(): Int = &#123;<br>    <span class="hljs-built_in">println</span>(&quot;call f2()&quot;)<br>    <span class="hljs-number">10</span><br>&#125;<br><span class="hljs-built_in">f1</span>(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">f1</span>(f2()) <span class="hljs-comment">// pass by name, just replace a with f2(), then will call f2() twice</span><br><span class="hljs-built_in">f1</span>(&#123;<br>    println(&quot;code block&quot;) <span class="hljs-comment">// print twice</span><br>    <span class="hljs-number">30</span><br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>应用：使用传名参数实现一个函数相当于while的功能。</li></ul><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-comment">// built-in while</span><br><span class="hljs-variable">var</span> <span class="hljs-variable">n</span> = <span class="hljs-number">10</span><br><span class="hljs-variable"><span class="hljs-keyword">while</span></span> (<span class="hljs-variable">n</span> &gt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-variable">s</span><span class="hljs-string">&quot;$n &quot;</span>)</span><br>    <span class="hljs-variable">n</span> -= <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-function"><span class="hljs-title">println</span>()</span><br><br><span class="hljs-comment">// application: self-defined while, implement a function just like while keyword</span><br><span class="hljs-variable">def</span> <span class="hljs-function"><span class="hljs-title">myWhile</span>(<span class="hljs-variable">condition</span>: =&gt; <span class="hljs-variable">Boolean</span>): (=&gt; <span class="hljs-variable">Unit</span>) =&gt; <span class="hljs-variable">Unit</span> = &#123;</span><br><span class="hljs-function">    <span class="hljs-variable">def</span> <span class="hljs-title">doLoop</span>(<span class="hljs-variable">op</span>: =&gt; <span class="hljs-variable">Unit</span>): <span class="hljs-variable">Unit</span> = &#123;</span><br><span class="hljs-function">        <span class="hljs-variable"><span class="hljs-keyword">if</span></span> (<span class="hljs-variable">condition</span>) &#123;</span><br><span class="hljs-function">            <span class="hljs-variable">op</span></span><br><span class="hljs-function">            <span class="hljs-title">myWhile</span>(<span class="hljs-variable">condition</span>)(<span class="hljs-variable">op</span>)</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-variable">doLoop</span> <span class="hljs-variable">_</span><br>&#125;<br><span class="hljs-variable">n</span> = <span class="hljs-number">10</span><br><span class="hljs-variable">myWhile</span> (<span class="hljs-variable">n</span> &gt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-variable">s</span><span class="hljs-string">&quot;$n &quot;</span>)</span><br>    <span class="hljs-variable">n</span> -= <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-function"><span class="hljs-title">println</span>()</span><br><br><span class="hljs-comment">// simplfy</span><br><span class="hljs-variable">def</span> <span class="hljs-function"><span class="hljs-title">myWhile2</span>(<span class="hljs-variable">condition</span>: =&gt; <span class="hljs-variable">Boolean</span>): (=&gt; <span class="hljs-variable">Unit</span>) =&gt; <span class="hljs-variable">Unit</span> = &#123;</span><br><span class="hljs-function">    <span class="hljs-variable">op</span> =&gt; &#123;</span><br><span class="hljs-function">        <span class="hljs-variable"><span class="hljs-keyword">if</span></span> (<span class="hljs-variable">condition</span>) &#123;</span><br><span class="hljs-function">            <span class="hljs-variable">op</span></span><br><span class="hljs-function">            <span class="hljs-title">myWhile2</span>(<span class="hljs-variable">condition</span>)(<span class="hljs-variable">op</span>)</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">n</span> = <span class="hljs-number">10</span><br><span class="hljs-variable">myWhile</span> (<span class="hljs-variable">n</span> &gt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-variable">s</span><span class="hljs-string">&quot;$n &quot;</span>)</span><br>    <span class="hljs-variable">n</span> -= <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-function"><span class="hljs-title">println</span>()</span><br><br><span class="hljs-comment">// use currying</span><br><span class="hljs-variable">def</span> <span class="hljs-function"><span class="hljs-title">myWhile3</span>(<span class="hljs-variable">condition</span>: =&gt; <span class="hljs-variable">Boolean</span>)(<span class="hljs-variable">op</span>: =&gt; <span class="hljs-variable">Unit</span>): <span class="hljs-variable">Unit</span> = &#123;</span><br><span class="hljs-function">    <span class="hljs-variable"><span class="hljs-keyword">if</span></span> (<span class="hljs-variable">condition</span>) &#123;</span><br><span class="hljs-function">        <span class="hljs-variable">op</span></span><br><span class="hljs-function">        <span class="hljs-title">myWhile3</span>(<span class="hljs-variable">condition</span>)(<span class="hljs-variable">op</span>)</span><br>    &#125;<br>&#125;<br><span class="hljs-variable">n</span> = <span class="hljs-number">10</span><br><span class="hljs-variable">myWhile3</span> (<span class="hljs-variable">n</span> &gt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-variable">s</span><span class="hljs-string">&quot;$n &quot;</span>)</span><br>    <span class="hljs-variable">n</span> -= <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-function"><span class="hljs-title">println</span>()</span><br></code></pre></td></tr></table></figure><p>惰性加载：</p><ul><li>当函数返回值被声明为<code>lazy</code>时，函数的执行将会被推迟，知道我们首次对此取值，该函数才会被执行。这种函数成为惰性函数。</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">def</span> main(args: Array[String]): Unit = &#123;<br>    <span class="hljs-comment">// just like pass by name</span><br>    lazy val result: <span class="hljs-keyword">Int</span> = sum(<span class="hljs-number">13</span>, <span class="hljs-number">47</span>)<br>    <span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;before lazy load&quot;</span>)<br>    <span class="hljs-keyword">println</span>(s<span class="hljs-string">&quot;result = $&#123;result&#125;&quot;</span>) <span class="hljs-comment">// first call sum(13, 47)</span><br>    <span class="hljs-keyword">println</span>(s<span class="hljs-string">&quot;result = $&#123;result&#125;&quot;</span>) <span class="hljs-comment">// result has been evaluated</span><br>&#125;<br><span class="hljs-keyword">def</span> sum(a: <span class="hljs-keyword">Int</span>, b: <span class="hljs-keyword">Int</span>): <span class="hljs-keyword">Int</span> = &#123;<br>    <span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;call sum&quot;</span>)<br>    a + b<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>有点像传名参数，但懒加载只是推迟求值到第一次使用时，而不是单纯替换。</li></ul><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><p>关于Scala面向对象：</p><ul><li>Scala的面向对象思想源自Java，很多概念是一致的。</li><li>语法和java不同，补充了更多功能。</li></ul><p>包：</p><ul><li><p><code>package name</code></p></li><li><p>作用：</p><ul><li>区分相同名字类，避免名称冲突。</li><li>类很多时，分模块管理。</li><li>访问权限控制。</li></ul></li><li><p>命名：包名称只能是常规的标识符（字母数字下划线，数字不能开头）。同样<code>.</code>作为不同层级分割符，整体作为包名。</p></li><li><p>命名规范：一般情况下按照如下规则命名<code>com.company.projectname.modulename</code>，视项目规定而定，只是一个名称而已。</p></li><li><p>scala中的两种包管理方式：</p><ul><li>第一种，java风格，每个源文件声明一个包，写在源文件最上方。但源文件位置不需要和包名目录层级一致，只代表逻辑层级关系，不像java一样源文件也必须按照包名目录层级关系放置。当然惯例是和java一样按照包名目录层级来放置。</li><li>第二种，用<code>&#123;&#125;</code>嵌套风格定义包：</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com &#123;<br>    // code <span class="hljs-keyword">in</span> com package<br>    <span class="hljs-keyword">object</span> <span class="hljs-keyword">Outer</span> &#123;<br>        var <span class="hljs-type">name</span> = &quot;Outer&quot;<br>    &#125;<br>    package <span class="hljs-keyword">inner</span> &#123;<br>        // code <span class="hljs-keyword">in</span> com.<span class="hljs-keyword">inner</span> package<br>        package scala &#123;<br>            // code <span class="hljs-keyword">in</span> com.innner.scala package<br>            <span class="hljs-keyword">object</span> <span class="hljs-keyword">Inner</span> &#123;<br>                def main(args: <span class="hljs-keyword">Array</span>[String]):Unit = &#123;<br>                    println(<span class="hljs-keyword">Outer</span>.name)<br>                    <span class="hljs-keyword">Outer</span>.name = &quot;Inner&quot;<br>                    println(<span class="hljs-keyword">Outer</span>.name)<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><ul><li>嵌套风格好处：<ul><li>一个源文件可以声明多个并列的最顶层的包。</li><li>子包中的类可以访问父包中的内容，无需导入。但外层是不能直接访问内层的，需要导入。</li></ul></li><li>如果单文件VsCode测试嵌套包，而不是用IDE的话，那定义了包就不能直接执行了，需要<code>scalac</code>先编译，并指定入口类运行。编译后的字节码文件和java一样会自动按照包层级关系排列。</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scalac </span>PackageManagement.<span class="hljs-keyword">scala</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">scala </span>com.inner.<span class="hljs-keyword">scala.Inner </span><br></code></pre></td></tr></table></figure></li></ul><p>包对象：</p><ul><li>为scala包定义一个同名的单例包对象，定义在包对象中的成员，作为其对应包下的所有类和对象的共享变量，可以被直接访问，无需导入。</li><li>关键字<code>package object</code>，需要和包在同一层级下。比如为<code>com.inner</code>包定义包对象的话，必须在<code>com</code>包中，定义形式<code>package obejct inner &#123; ... &#125;</code>。</li></ul><p>包的导入：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">import</span> users.<span class="hljs-literal">_</span>      <span class="hljs-comment">// 导入包 users 中的所有成员</span><br><span class="hljs-keyword">import</span> users.User   <span class="hljs-comment">// 导入类 User</span><br><span class="hljs-keyword">import</span> users.&#123;User, UserPreferences&#125;      <span class="hljs-comment">// 仅导入选择的成员</span><br><span class="hljs-keyword">import</span> users.&#123;UserPreferences =&gt; UPrefs&#125;  <span class="hljs-comment">// 导入类并且设置别名</span><br><span class="hljs-keyword">import</span> users.&#123;User =&gt; <span class="hljs-literal">_</span>, <span class="hljs-literal">_</span>&#125;               <span class="hljs-comment">// 导入出User类以外的所有users包中的内容</span><br></code></pre></td></tr></table></figure><ul><li>可以在任意位置导入（作用于代码块），可以设置别名，可以选择性导入想要导入的内容，可以屏蔽某个类。</li><li>所有scala源文件默认导入：</li></ul><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> java.lang._<br><span class="hljs-keyword">import</span> scala._<br><span class="hljs-keyword">import</span> scala.Predef._<br></code></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>类定义：</p><ul><li>回顾java中，如果是<code>public</code>向外公开的，那么必须和文件名一致，也只能有一个。不写访问修饰符则可以定义多个，包访问权限。</li><li>scala中没有<code>public</code>关键字，默认就是公有，不能加<code>public</code>，一个文件可以写多个类，不要求和文件名一致。</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[descriptor]</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">classname</span> &#123;<br>    <span class="hljs-comment">// body: fields &amp; methods</span><br><span class="hljs-string">    [descriptor]</span> var/val name: Type = _<br><span class="hljs-string">    [descriptor]</span> method(args: ArgsType): RetType = &#123;<br>        <span class="hljs-comment">// method body</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>访问修饰符可以是：<code>private</code> <code>protected</code> <code>private [pacakgeName]</code>，默认就是公有，不需要加。</li><li>成员如果需要Java Bean规范的getter和setter的话可以加<code>@scala.beans.BeanProperty</code>相当于自动创建，不需要显式写出。</li><li>成员给初值<code>_</code>会赋默认值，scala中定义变量必须赋值，可以这样做。值类型的值0，引用则是<code>null</code>。定义常量的话不能用<code>_</code>，因为只能初始化一次，编译器会提示。</li></ul><p>封装：</p><ul><li>Java的封装：私有化，提供getter和setter。</li><li>scala中考虑到Java太冗余了，脱裤子放屁一样。scala中的公有属性，底层实际为<code>private</code>，并通过get方法<code>obj.field()</code>和set方法<code>obj.field_=(value)</code>对其进行操作。所以scala不推荐设置为<code>private</code>。如果需要和其他框架互操作，必须提供Java Bean规范的getter和setter的话可以加<code>@scala.beans.BeanProperty</code>注解。</li></ul><p>访问权限：</p><ul><li>Java中<code>private protected public</code>和默认包访问权限。</li><li>scala中属性和方法默认公有，并且不提供<code>public</code>关键字。</li><li><code>private</code>私有，类内部和伴生对象内可用。</li><li><code>protected</code>保护权限，scala中比java中严格，只有同类、子类可访问，同包无法访问。【因为java中说实话有点奇怪】</li><li><code>private [pacakgeName]</code>增加包访问权限，在包内可以访问。</li></ul><p>构造器：</p><ul><li>包括主构造器和辅助构造器。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassName</span> [<span class="hljs-title">descriptor</span>] [</span>([descriptor][<span class="hljs-keyword">val</span>/<span class="hljs-keyword">var</span>] arg1: Arg1Type, [descriptor][<span class="hljs-keyword">val</span>/<span class="hljs-keyword">var</span>] arg2: ...)] &#123; <span class="hljs-comment">// main constructor, only one, like record in java</span><br>    <span class="hljs-comment">// assist constructor</span><br>    def <span class="hljs-keyword">this</span>(argsList1) &#123;<br>        <span class="hljs-keyword">this</span>(args) <span class="hljs-comment">// call main constructor</span><br>    &#125;<br>    def <span class="hljs-keyword">this</span>(argsList2) &#123; <span class="hljs-comment">// overload constrcutor</span><br>        <span class="hljs-keyword">this</span>(argsList1) <span class="hljs-comment">// can call main constructor or other constructor that call main constructor directly or indirectly</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>例子：</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">object</span> Constructor &#123;<br>    def main(args: Array[String]): <span class="hljs-built_in">Unit</span> = &#123;<br>        <span class="hljs-keyword">val</span> p: Person = new Person()<br>        p.Person() <span class="hljs-comment">// call main constructor</span><br><br>        <span class="hljs-keyword">val</span> p1 = new Person(<span class="hljs-string">&quot;alice&quot;</span>)<br>        <span class="hljs-keyword">val</span> p2 = new Person(<span class="hljs-string">&quot;bob&quot;</span>, <span class="hljs-number">25</span>)<br>        p1.Person()<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> name: String = _<br>    <span class="hljs-keyword">var</span> age: <span class="hljs-built_in">Int</span> = _<br>    println(<span class="hljs-string">&quot;call main construtor&quot;</span>)<br><br>    def <span class="hljs-keyword">this</span>(name: String) &#123;<br>        <span class="hljs-keyword">this</span>()<br>        println(<span class="hljs-string">&quot;call assist constructor 1&quot;</span>)<br>        <span class="hljs-keyword">this</span>.name = name<br>        println(s<span class="hljs-string">&quot;Person: <span class="hljs-variable">$name</span> <span class="hljs-variable">$age</span>&quot;</span>)<br>    &#125;<br><br>    def <span class="hljs-keyword">this</span>(name: String, age: <span class="hljs-built_in">Int</span>) &#123;<br>        <span class="hljs-keyword">this</span>(name)<br>        <span class="hljs-keyword">this</span>.age = age<br>        println(<span class="hljs-string">&quot;call assist constructor 2&quot;</span>)<br>        println(s<span class="hljs-string">&quot;Person: <span class="hljs-variable">$name</span> <span class="hljs-variable">$age</span>&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">// just a common method, not constructor</span><br>    def Person(): <span class="hljs-built_in">Unit</span> = &#123;<br>        println(<span class="hljs-string">&quot;call Person.Person() method&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>特点：</p><ul><li>主构造器写在类定义上，一定是构造时最先被调用的构造器，方法体就是类定义，可以在类中方法定义的同级编写逻辑，都是主构造器一部分，按顺序执行。</li><li>辅助构造器用<code>this</code>定义。</li><li>辅助构造器必须直接或者间接调用主构造器，调用其他构造必须位于第一行。</li><li>主构造器和辅助构造器是重载的方法，所以参数列表不能一致。</li><li>可以定义和类名同名方法，就是一个普通方法。</li></ul></li><li><p>主构造器中形参三种形式：不使用任何修饰，</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span><br></code></pre></td></tr></table></figure><p>修饰，</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">val</span><br></code></pre></td></tr></table></figure><p>修饰。</p><ul><li>不使用任何修饰那就是一个形参，但此时在类内都可以访问到这个变量。逻辑上不是一个成员（报错信息这么写），但是可以访问，WTF？？？</li><li>使用<code>var val</code>修饰那就是定义为类成员，分别是变量和常量，不需要也不能在类内再定义一个同名字段。调用时传入参数就直接给到该成员，不需要再显式赋值。</li><li>主构造器中的<code>var val</code>成员也可以添加访问修饰符。</li><li>不加参数列表相当于为空，<code>()</code>可以省略。</li><li>主构造器的访问修饰符添加到参数列表<code>()</code>前。</li></ul></li><li><p>实践指南：</p><ul><li>推荐使用scala风格的主构造器<code>var val</code>修饰参数的编写方法，而不要被Java毒害！</li><li>如果需要多种重载的构造器那么就添加新的的辅助构造器。</li></ul></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> name: String) &#123;<br>    <span class="hljs-keyword">var</span> age: <span class="hljs-built_in">Int</span> = _<br>    println(<span class="hljs-string">&quot;call main construtor&quot;</span>)<br><br>    def <span class="hljs-keyword">this</span>(name: String, age: <span class="hljs-built_in">Int</span>) = &#123;<br>        <span class="hljs-keyword">this</span>(name)<br>        <span class="hljs-keyword">this</span>.age = age<br>        println(<span class="hljs-string">&quot;call assist constructor 2&quot;</span>)<br>        println(s<span class="hljs-string">&quot;Person: <span class="hljs-variable">$name</span> <span class="hljs-variable">$age</span>&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">// just a common method, not constructor</span><br>    def Person(): <span class="hljs-built_in">Unit</span> = &#123;<br>        println(<span class="hljs-string">&quot;call Person.Person() method&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>继承：</p><ul><li><code>class ChildClassName[(argList1)] extends BaseClassName[(args)] &#123; body &#125;</code></li><li>子类继承父类属性和方法。</li><li>可以调用父类构造器，但感觉好像很局限，子类中只可能调用到主构造或者辅助构造中的其中一个构造器。那如果父类有多种构造方式，子类想继承也没有办法？只能是其中一种。</li><li>不考虑太多负担，按照scala惯用写法来写起来还是挺轻松的。</li></ul><p>多态：</p><ul><li>java中属性静态绑定，根据变量的引用类型确定，方法是动态绑定。</li><li>但scala中<strong>属性和方法都是动态绑定</strong>。就属性而言，其实也不应该在子类和父类中定义同名字段。</li><li>同java一样，所有实例方法都是虚方法，都可以被子类覆写。</li><li><code>override</code>关键字覆写。</li><li>scala中<strong>属性（字段）也可以被重写</strong>，加<code>override</code>关键字。</li></ul><p>抽象类：</p><ul><li><code>abstract calss ClassName</code></li><li>抽象属性：<code>val/var name: Type</code>，不给定初始值。</li><li>抽象方法：<code>def methodName(): RetType</code>，只声明不实现。</li><li>子类如果没有覆写全部父类未定义的属性和方法，那么就必须定义为抽象类。老生常谈了。</li><li>重写非抽象方法属性必须加<code>override</code>，重写抽象方法则可以不加<code>override</code>。</li><li>子类调用父类中方法使用<code>super</code>关键字。</li><li>子类重写父类抽象属性，父类抽象属性可以用<code>var</code>修饰，<code>val var</code>都可以。因为父类没有实现嘛，需要到子类中来实现。</li><li>如果是<strong>重写非抽象属性</strong>，则父类非抽象属性只支持<code>val</code>，不支持<code>var</code>。因为<code>var</code>修饰为可变量，子类继承后可以直接使用修改，没有必要重写。<code>val</code>不可变才有必要重写。</li><li>实践建议是重写就加<code>override</code>，都是很自然的东西，理解就好，不必纠结于每一个细节。</li></ul><p>匿名子类；</p><ul><li>和java如出一辙。重写所有抽象字段和方法。</li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">val</span><span class="hljs-operator">/</span>var p<span class="hljs-operator">:</span> baseClass <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">baseClass</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-operator">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>伴生对象（Companion Object）：</p><ul><li>取代<code>static</code>语义。</li><li>编译后其实会生成两个类，伴生对象是伴生类（类名为对应类后加<code>$</code>符号）的单例对象。</li><li><code>obejct</code>，名称和类一致，必须放同一个文件，前面已经说过了。</li><li>常见用法：构造器私有化，用伴生对象中的工厂方法。和静态工厂方法使用起来也没有什么区别。</li><li>伴生对象实现<code>apply</code>方法后调用时可以省略<code>.apply</code>，直接使用<code>className(args)</code>。库中很多这种用法创建实例，是一个语法糖。</li><li>测试伴生对象时就在该对象内定义<code>main</code>函数编译时会出现的奇怪的访问权限问题。可能对包含入口的伴生对象做了特殊处理，具体细节尚不清楚。最好将<code>main</code>定义在单独的伴生对象内。</li></ul><p>Trait（特征&#x2F;特质）：</p><ul><li>替代java接口的概念。但比接口更为灵活，一种实现多继承的手段。</li><li>多个类具有相同的特征时，就可以将这个特征提取出来，用继承的方式来复用。</li><li>用关键字<code>trait</code>声明。</li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">trait</span> traitName &#123;<br>    <span class="hljs-params">...</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>引入&#x2F;混入(mixin)特征：<ul><li>有父类<code>class extends baseClass with trait1 with trait2 ... &#123;&#125;</code></li><li>没有父类<code>class extends trait1 with trait2 ... &#123;&#125;</code></li></ul></li><li>其中可以定义抽象和非抽象的属性和方法。</li><li>匿名子类也可以引入特征。</li><li>特征和基类或者多个特征中重名的属性或方法需要在子类中覆写以解决冲突，最后因为动态绑定，所有使用的地方都是子类的字段或方法。属性的话需要类型一致，不然提示不兼容。方法的话参数列表不一致会视为重载而不是冲突。</li><li>如果基类和特征中的属性或方法一个是抽象的，一个非抽象，且兼容，那么可以不覆写。很直观，就是不能冲突不能二义就行。</li><li>多个特征和基类定义了同名方法的，就需要在子类重写解决冲突。其中可以调用父类和特征的方法，此时<code>super.methodName</code>指代按照顺序最后一个拥有该方法定义的特征或基类。也可以用<code>super[baseClassOrTraitName].methodName</code>直接指代某个基类的方法，注意需要是直接基类，间接基类则不行。</li><li>也就是说基类和特征基本是同等地位。</li><li>例子：</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">val</span> name: <span class="hljs-type">String</span> = <span class="hljs-string">&quot;Person&quot;</span><br>    <span class="hljs-keyword">var</span> age: <span class="hljs-type">Int</span> = <span class="hljs-number">18</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sayHi</span></span>(): <span class="hljs-type">Unit</span> = &#123;<br>        println(<span class="hljs-string">s&quot;hello from : <span class="hljs-subst">$name</span>&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Young</span> </span>&#123;<br>    <span class="hljs-comment">// abstract and non-abstract attribute</span><br>    <span class="hljs-keyword">var</span> age: <span class="hljs-type">Int</span><br>    <span class="hljs-keyword">val</span> name: <span class="hljs-type">String</span> = <span class="hljs-string">&quot;young&quot;</span><br><br>    <span class="hljs-comment">// method</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">play</span></span>(): <span class="hljs-type">Unit</span> = &#123;<br>        println(<span class="hljs-string">s&quot;young people <span class="hljs-subst">$name</span> is playing&quot;</span>)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dating</span></span>(): <span class="hljs-type">Unit</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Knowledge</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> amount: <span class="hljs-type">Int</span> = <span class="hljs-number">0</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">increase</span></span>(): <span class="hljs-type">Unit</span> = &#123;<br>        amount += <span class="hljs-number">1</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Talent</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">increase</span></span>(): <span class="hljs-type">Unit</span> = &#123;<br>        println(<span class="hljs-string">&quot;increase talent&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">with</span> <span class="hljs-title">Young</span> <span class="hljs-keyword">with</span> <span class="hljs-title">Knowledge</span> <span class="hljs-keyword">with</span> <span class="hljs-title">Talent</span></span>&#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">val</span> name: <span class="hljs-type">String</span> = <span class="hljs-string">&quot;alice&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dating</span></span>(): <span class="hljs-type">Unit</span> = &#123;<br>        println(<span class="hljs-string">s&quot;Sutdent <span class="hljs-subst">$name</span> <span class="hljs-subst">$age</span> is dating&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">study</span></span>(): <span class="hljs-type">Unit</span> = println(<span class="hljs-string">s&quot;Student <span class="hljs-subst">$name</span> is studying&quot;</span>)<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sayHi</span></span>(): <span class="hljs-type">Unit</span> = &#123;<br>        <span class="hljs-keyword">super</span>.sayHi()<br>        println(<span class="hljs-string">s&quot;hello from : student <span class="hljs-subst">$name</span>&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">increase</span></span>(): <span class="hljs-type">Unit</span> = &#123;<br>        <span class="hljs-keyword">super</span>.increase() <span class="hljs-comment">// call Talent.increase(), just the last</span><br>        println(<span class="hljs-string">s&quot;studnet <span class="hljs-subst">$name</span> knowledge increase: <span class="hljs-subst">$amount</span>&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">Trait</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> = &#123;<br>        <span class="hljs-keyword">val</span> s = <span class="hljs-keyword">new</span> <span class="hljs-type">Student</span>()<br>        s.sayHi()<br>        s.increase()<br><br>        s.study()<br>        s.increase()<br><br>        s.play()<br>        s.increase()<br><br>        s.dating()<br>        s.increase()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>特征的继承：<code>trait childTrait extends baseTrait</code></li><li>特征的<strong>菱形继承</strong>解决方式：转换为线性的继承链条，在前面的成为基类，后面的成为子类。</li><li>例子：</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Ball</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">describe</span></span>(): <span class="hljs-type">String</span> = <span class="hljs-string">&quot;ball&quot;</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">ColorBall</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Ball</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> color: <span class="hljs-type">String</span> = <span class="hljs-string">&quot;red&quot;</span><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">describe</span></span>(): <span class="hljs-type">String</span> = color + <span class="hljs-string">&quot;_&quot;</span> + <span class="hljs-keyword">super</span>.describe()<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">CategoryBall</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Ball</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> category: <span class="hljs-type">String</span> = <span class="hljs-string">&quot;foot&quot;</span><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">describe</span></span>(): <span class="hljs-type">String</span> = category + <span class="hljs-string">&quot;_&quot;</span> + <span class="hljs-keyword">super</span>.describe()<br>&#125;<br><br><span class="hljs-comment">// equals to MyFootBall -&gt; ColorBall -&gt; CategoryBall -&gt; Ball</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFootBall</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CategoryBall</span> <span class="hljs-keyword">with</span> <span class="hljs-title">ColorBall</span> </span>&#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">describe</span></span>(): <span class="hljs-type">String</span> = <span class="hljs-keyword">super</span>.describe()<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">TraitInheritance</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> = &#123;<br>        <span class="hljs-keyword">val</span> b = <span class="hljs-keyword">new</span> <span class="hljs-type">MyFootBall</span>()<br>        println(b.describe()) <span class="hljs-comment">// red_foot_ball</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>其实特征的多继承和C++的多继承已经很像了，只是名称冲突的解决方式不一样，菱形继承的解决方式也不一样，而且不能访问间接基类。</li><li>scala<strong>单继承多实现</strong>，实现体现在特征上。基类主要用于一个对象比较核心比较本质的部分上。</li><li><strong>继承特征与类的区别</strong>：特征构造时不能给参数。其他都是同样的，都可以实现多态。</li></ul><p>自身类型（self type）：</p><ul><li>可实现<strong>依赖注入</strong>的功能。</li><li>一个类或者特征指定了自身类型的话，它的对象和子类对象就会拥有这个自身类型中的所有属性和方法。</li><li>是将一个类或者特征插入到另一个类或者特征中，属性和方法都就像直接复制插入过来一样，能直接使用。但不是继承，不能用多态。</li><li>语法，在类或特征中：<code>_: SelfType =&gt;</code>，其中<code>_</code>的位置是别名定义，也可以是其他，<code>_</code>指代<code>this</code>。插入后就可以用<code>this.xxx</code>来访问自身类型中的属性和方法了。</li><li>注入进来的目的是让你能够使用，可见，提前使用应该拥有的属性和方法。最终只要自身类型和注入目标类型同时被继承就能够得到定义了。</li><li>例子：</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>(<span class="hljs-params">val name: <span class="hljs-type">String</span>, val password: <span class="hljs-type">String</span></span>)</span><br><span class="hljs-comment">// user database access object</span><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-comment">// dependency injection from external</span><br>    _: <span class="hljs-type">User</span> =&gt; <span class="hljs-comment">// self type</span><br>    <span class="hljs-comment">// simulate insert data to databse</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert</span></span>(): <span class="hljs-type">Unit</span> = &#123;<br>        println(<span class="hljs-string">s&quot;insert into db: <span class="hljs-subst">$name</span> <span class="hljs-subst">$password</span>&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">// register user</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegisterUser</span>(<span class="hljs-params">name: <span class="hljs-type">String</span>, password: <span class="hljs-type">String</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">User</span>(<span class="hljs-params">name, password</span>) <span class="hljs-keyword">with</span> <span class="hljs-title">UserDao</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">SelfType</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> = &#123;<br>        <span class="hljs-keyword">val</span> u = <span class="hljs-keyword">new</span> <span class="hljs-type">RegisterUser</span>(<span class="hljs-string">&quot;catholly&quot;</span>, <span class="hljs-string">&quot;nephren&quot;</span>)<br>        u.insert()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行时类型识别RTTI：</p><ul><li>判断类型：<code>obj.isInstanceOf[T]</code>，确切匹配的类型或者父类都返回true。</li><li>转换类型：<code>obj.asInstance[T]</code>，转换为目标类型。</li><li>获取类名：<code>classOf[T]</code>，得到类对应的<code>Class</code>对象<code>Class[T]</code>，转字符串结果是<code>class package.xxx.className</code>。</li><li>获取对象的类：<code>obj.getClass</code></li></ul><p>枚举类：</p><ul><li>继承<code>Enumeration</code>。</li><li>用<code>Value</code>类型定义枚举值。</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">WorkDay</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Enumeration</span> </span>&#123;<br>    <span class="hljs-keyword">val</span> <span class="hljs-type">MONDAY</span> = <span class="hljs-type">Value</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Monday&quot;</span>)<br>    <span class="hljs-keyword">val</span> <span class="hljs-type">TUESDAY</span> = <span class="hljs-type">Value</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;Tuesday&quot;</span>)<br>    <span class="hljs-keyword">val</span> <span class="hljs-type">THURSDAy</span> = <span class="hljs-type">Value</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;Thrusday&quot;</span>)<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">EnumClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> = &#123;<br>        println(<span class="hljs-type">WorkDay</span>.<span class="hljs-type">MONDAY</span>)<br>        println(<span class="hljs-type">WorkDay</span>.<span class="hljs-type">TUESDAY</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>应用类：</p><ul><li>继承<code>App</code>，包装了<code>main</code>方法，就不需要显式定义<code>main</code>方法了，可以直接执行。</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">TestApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">App</span> </span>&#123;<br>    println(<span class="hljs-string">&quot;hello,world!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>定义类型别名：<code>type SelfDefineType = TargetType</code>。</p><p>密封类： <code>sealed</code>，子类只能定义在同一个文件内。</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>Java集合：</p><ul><li>三大类型：列表<code>List</code>、集合<code>Set</code>、映射<code>Map</code>，有多种不同实现。</li></ul><p>Scala集合三大类型：</p><ul><li><p>序列<code>Seq</code>，集合<code>Set</code>，映射<code>Map</code>，所有集合都扩展自<code>Iterable</code>。</p></li><li><p>对于几乎所有集合类，都同时提供</p><p>可变和不可变</p><p>版本。</p><ul><li>不可变集合：<code>scala.collection.immutable</code></li><li>可变集合：<code>scala.collection.mutable</code></li><li>两个包中可能有同名的类型，需要注意区分是用的可变还是不可变版本，避免冲突和混淆。</li></ul></li><li><p>对于不可变集合，指该集合长度数量不可修改，每次修改（比如增删元素）都会返回一个新的对象，而不会修改源对象。</p></li><li><p>可变集合可以对源对象任意修改，一般也提供不可变集合相同的返回新对象的方法，但也可以用其他方法修改源对象。</p></li><li><p><strong>建议</strong>：操作集合时，不可变用操作符，可变用方法。操作符也不一定就会返回新对象，但大多是这样的，还是要具体看。</p></li><li><p>scala中集合类的定义比java要清晰不少。</p></li></ul><p>不可变集合：</p><ul><li><code>scala.collection.immutable</code>包中不可变集合关系一览： <a href="https://github.com/tch0/notes/blob/master/Images/Scala_immutable_collections_tree.jpg"><img src="https://github.com/tch0/notes/raw/master/Images/Scala_immutable_collections_tree.jpg" alt="Scala_mutable_collections_tree"></a></li><li>不可变集合没有太多好说的，集合和映射的哈希表和二叉树实现是肯定都有的，序列中分为随机访问序列（数组实现）和线性序列（链表实现），基本数据结构都有了。</li><li><code>Range</code>是范围，常用来遍历，有语法糖支持<code>1 to 10 by 2</code> <code>10 until 1 by -1</code>其实就是隐式转换加上方法调用。</li><li>scala中的<code>String</code>就是<code>java.lang.String</code>，和集合无直接关系，所以是虚箭头，是通过<code>Perdef</code>中的低优先级隐式转换来做到的。经过隐式转换为一个包装类型后就可以当做集合了。</li><li><code>Array</code>和<code>String</code>类似，在图中漏掉了。</li><li>此类包装为了兼容java在scala中非常常见，scala中很多类型就是对java类型的包装或者仅仅是别名。</li><li>scala中可能会推荐更多地使用不可变集合。能用不可变就用不可变。</li></ul><p>可变集合：</p><ul><li><code>scala.collection.mutable</code>包中可变集合关系一览：</li></ul><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgScala_mutable_collections_tree.jpeg"></p><ul><li>序列中多了<code>Buffer</code>，整体结构差不多。</li></ul><p>不可变和可变：</p><ul><li>不可变指的是对象大小不可变，但是可以修改元素的值（不能修改那创建了也没有用对吧），需要注意这一点。而如果用了<code>val</code>不变量存储，那么指向对象的地址也不可变。</li><li>不可变集合在原集合上个插入删除数据是做不到的，只能返回新的集合。</li></ul><p>泛型：</p><ul><li>集合类型大多都是支持泛型，使用泛型的语法是<code>[Type]</code>，不同于java的<code>&lt;Type&gt;</code>。</li></ul><p>不可变数组：</p><ul><li>访问元素使用<code>()</code>运算符，通过<code>apply/update</code>方法实现，源码中的实现只是抛出错误作为<strong>存根方法</strong>（stab method），具体逻辑由编译器填充。</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 1. new</span><br>val arr = new Array<span class="hljs-selector-attr">[Int]</span>(<span class="hljs-number">5</span>)<br><br><span class="hljs-comment">// 2. factory method in companion obejct</span><br>val arr1 = Array<span class="hljs-selector-attr">[Int]</span>(<span class="hljs-number">5</span>)<br>val arr2 = <span class="hljs-built_in">Array</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><br><span class="hljs-comment">// 3. traverse, range for</span><br><span class="hljs-keyword">for</span> (<span class="hljs-selector-tag">i</span> &lt;- <span class="hljs-number">0</span> until arr.length) <span class="hljs-built_in">arr</span>(i) = <span class="hljs-selector-tag">i</span><br><span class="hljs-keyword">for</span> (<span class="hljs-selector-tag">i</span> &lt;- arr.indices) <span class="hljs-built_in">print</span>(s<span class="hljs-string">&quot;$&#123;arr(i)&#125; &quot;</span>)<br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">()</span></span><br><br><span class="hljs-comment">// 4. tarverse, foreach</span><br><span class="hljs-keyword">for</span> (elem &lt;- arr) <span class="hljs-built_in">print</span>(s<span class="hljs-string">&quot;$elem &quot;</span>) <span class="hljs-comment">// elem is a val</span><br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">()</span></span><br><br><span class="hljs-comment">// 5. tarverse, use iterator</span><br>val iter = arr<span class="hljs-selector-class">.iterator</span><br>while (iter.hasNext)<br>    <span class="hljs-built_in">print</span>(s<span class="hljs-string">&quot;$&#123;iter.next()&#125; &quot;</span>)<br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">()</span></span><br><br><span class="hljs-comment">// 6. traverse, use foreach method, pass a function</span><br>arr<span class="hljs-selector-class">.foreach</span>((elem: Int) =&gt; <span class="hljs-built_in">print</span>(s<span class="hljs-string">&quot;$elem &quot;</span>))<br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">()</span></span><br><br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(arr2.mkString(<span class="hljs-string">&quot;, &quot;</span>)</span></span>) <span class="hljs-comment">// to string directly</span><br><br><span class="hljs-comment">// 7. add element, return a new array, : should toward to object</span><br>val newArr = arr :+ <span class="hljs-number">10</span> <span class="hljs-comment">//  arr.:+(10) add to end</span><br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(newArr.mkString(<span class="hljs-string">&quot;, &quot;</span>)</span></span>)<br>val newArr2 = <span class="hljs-number">20</span> +: <span class="hljs-number">10</span> +: arr :+ <span class="hljs-number">30</span> <span class="hljs-comment">// arr.+:(10).+:(20).:+(30)</span><br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(newArr2.mkString(<span class="hljs-string">&quot;, &quot;</span>)</span></span>)<br></code></pre></td></tr></table></figure><ul><li>可以看到自定义运算符可以非常灵活，规定如果运算符首尾有<code>:</code>那么<code>:</code>一定要指向对象。</li><li>下标越界当然会抛出异常，使用前应该检查。</li><li>通过<code>Predef</code>中的隐式转换为一个混入了集合相关特征的包装类型从而得以使用scala的集合相关特征，<code>Array</code>类型中并没有相关混入。</li></ul><p>可变数组：</p><ul><li>类型<code>ArrayBuffer</code>。</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 1. create</span><br>val arr: ArrayBuffer<span class="hljs-selector-attr">[Int]</span> = new ArrayBuffer<span class="hljs-selector-attr">[Int]</span>()<br>val arr1: ArrayBuffer<span class="hljs-selector-attr">[Int]</span> = <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>)<br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(arr.mkString(<span class="hljs-string">&quot;, &quot;</span>)</span></span>)<br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(arr1)</span></span> <span class="hljs-comment">// call toString ArrayBuffer(10, 20, 30)</span><br><br><span class="hljs-comment">// 2. visit</span><br><span class="hljs-function"><span class="hljs-title">arr1</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span> = <span class="hljs-number">10</span><br><span class="hljs-comment">// 3. add element to tail</span><br><span class="hljs-selector-tag">var</span> newArr = arr :+ <span class="hljs-number">15</span> :+ <span class="hljs-number">20</span> <span class="hljs-comment">// do not change arr</span><br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(newArr)</span></span><br>newArr = arr += <span class="hljs-number">15</span> <span class="hljs-comment">// modify arr itself, add to tail return itself, do notrecommand assign to other var</span><br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(arr)</span></span><br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(newArr == arr)</span></span> <span class="hljs-comment">// true</span><br><span class="hljs-comment">// 4. add to head</span><br><span class="hljs-number">77</span> +=: arr <span class="hljs-comment">// WTF?</span><br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(arr)</span></span><br><span class="hljs-comment">// 5. insert to middle</span><br>arr<span class="hljs-selector-class">.insert</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(arr)</span></span><br><span class="hljs-comment">// 6. remove element</span><br>arr<span class="hljs-selector-class">.remove</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>) <span class="hljs-comment">// startIndex, count</span><br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(arr)</span></span><br>arr -= <span class="hljs-number">15</span> <span class="hljs-comment">// remove specific element</span><br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(arr)</span></span><br><span class="hljs-comment">// 7. convert to Array</span><br>val newImmuArr: Array<span class="hljs-selector-attr">[Int]</span> = arr<span class="hljs-selector-class">.toArray</span><br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(newImmuArr.mkString(<span class="hljs-string">&quot;, &quot;</span>)</span></span>)<br><span class="hljs-comment">// 8. Array to ArryBuffer</span><br>val buffer: scala<span class="hljs-selector-class">.collection</span><span class="hljs-selector-class">.mutable</span><span class="hljs-selector-class">.Buffer</span><span class="hljs-selector-attr">[Int]</span> = newImmuArr<span class="hljs-selector-class">.toBuffer</span><br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(buffer)</span></span><br></code></pre></td></tr></table></figure><ul><li>推荐：不可变集合用运算符，可变集合直接调用对应方法。运算符容易迷惑。</li><li>更多方法查看文档和源码用到去找就行。</li><li>可变数组和不可变数组可以调用方法互相转换。</li></ul><p>二维数组：</p><ul><li>就是数组的数组。</li><li>使用<code>Array.ofDim[Type](firstDim, secondDim, ...)</code>方法。</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// create 2d array</span><br>val arr: Array<span class="hljs-selector-attr">[Array[Int]</span>] = Array<span class="hljs-selector-class">.ofDim</span><span class="hljs-selector-attr">[Int]</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-function"><span class="hljs-title">arr</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span> = <span class="hljs-number">10</span><br><span class="hljs-function"><span class="hljs-title">arr</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span> = <span class="hljs-number">100</span><br> <br><span class="hljs-comment">// traverse</span><br>arr<span class="hljs-selector-class">.foreach</span>(v =&gt; <span class="hljs-built_in">println</span>(v<span class="hljs-selector-class">.mkString</span>(<span class="hljs-string">&quot;,&quot;</span>)))<br></code></pre></td></tr></table></figure><p>不可变列表：</p><ul><li><code>List</code>，抽象类，不能直接<code>new</code>，使用伴生对象<code>apply</code>传入元素创建。</li><li><code>List</code>本身也有<code>apply</code>能随机访问（做了优化），但是不能<code>update</code>更改。</li><li><code>foreach</code>方法遍历。</li><li>支持<code>+: :+</code>首尾添加元素。</li><li><code>Nil</code>空列表，<code>::</code>添加元素到表头。</li><li>常用<code>Nil.::(elem)</code>创建列表，换一种写法就是<code>10 :: 20 :: 30 :: Nil</code>得到结果<code>List(10, 20, 30)</code>，糖是真滴多！</li><li>合并两个列表：<code>list1 ::: list2</code> 或者<code>list1 ++ list2</code>。</li></ul><p>可变列表：</p><ul><li>可变列表<code>ListBuffer</code>，和<code>ArrayBuffer</code>很像。</li><li><code>final</code>的，可以直接<code>new</code>，也可以伴生对象<code>apply</code>传入元素创建（总体来说scala中更推荐这种方式）。</li><li>方法：<code>append prepend insert remove</code></li><li>添加元素到头或尾：<code>+=: +=</code></li><li>合并：<code>++</code>得到新的列表，<code>++=</code>合并到源上。</li><li>删除元素也可以用<code>-=</code>运算符。</li><li>具体操作很多，使用时阅读文档即可。</li></ul><p>不可变集合：</p><ul><li>数据无序，不可重复。</li><li>可变和不可变都叫<code>Set</code>，需要做区分。默认<code>Set</code>定义为<code>immutable.Set</code>别名。</li><li>创建时重复数据会被去除，可用来去重。</li><li>添加元素：<code>set + elem</code></li><li>合并：<code>set1 ++ set2</code></li><li>移除元素：<code>set - elem</code></li><li>不改变源集合。</li></ul><p>可变集合：</p><ul><li>操作基于源集合做更改。</li><li>为了与不可变集合区分，<code>import scala.collection.mutable</code>并用<code>mutable.Set</code>。</li><li>不可变集合有的都有。</li><li>添加元素到源上：<code>set += elem</code> <code>add</code></li><li>删除元素：<code>set -= elem</code> <code>remove</code></li><li>合并：<code>set1 ++= set2</code></li><li>都很简单很好理解，多看文档和源码就行。</li></ul><p>不可变映射：</p><ul><li><code>Map</code>默认就是<code>immutable.Map</code>别名。</li><li>两个泛型类型。</li><li>基本元素是一个二元组。</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// create Map</span><br>val map: Map<span class="hljs-selector-attr">[String, Int]</span> = <span class="hljs-built_in">Map</span>(<span class="hljs-string">&quot;a&quot;</span> -&gt; <span class="hljs-number">13</span>, <span class="hljs-string">&quot;b&quot;</span> -&gt; <span class="hljs-number">20</span>)<br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(map)</span></span><br><span class="hljs-comment">// traverse</span><br>map<span class="hljs-selector-class">.foreach</span>((kv: (String, Int)) =&gt; <span class="hljs-built_in">println</span>(kv))<br>map<span class="hljs-selector-class">.foreach</span>(kv =&gt; <span class="hljs-built_in">println</span>(s<span class="hljs-string">&quot;$&#123;kv._1&#125; : $&#123;kv._2&#125;&quot;</span>))<br><span class="hljs-comment">// get keys and values</span><br><span class="hljs-keyword">for</span> (key &lt;- map.keys) &#123;<br>    <span class="hljs-built_in">println</span>(s<span class="hljs-string">&quot;$&#123;key&#125; : $&#123;map.get(key)&#125;&quot;</span>)<br>&#125;<br><span class="hljs-comment">// get value of given key</span><br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(map.get(<span class="hljs-string">&quot;a&quot;</span>)</span></span>.get)<br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(map.getOrElse(<span class="hljs-string">&quot;c&quot;</span>, -<span class="hljs-number">1</span>)</span></span>) <span class="hljs-comment">// avoid excption</span><br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(map(<span class="hljs-string">&quot;a&quot;</span>)</span></span>) <span class="hljs-comment">// if no such key will throw exception</span><br><span class="hljs-comment">// merge</span><br>val map2 = map ++ <span class="hljs-built_in">Map</span>(<span class="hljs-string">&quot;e&quot;</span> -&gt; <span class="hljs-number">1024</span>)<br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(map2)</span></span><br></code></pre></td></tr></table></figure><p>可变映射：</p><ul><li><code>mutable.Map</code></li><li>不可变的都支持。</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// create mutable Map</span><br>val map: mutable<span class="hljs-selector-class">.Map</span><span class="hljs-selector-attr">[String, Int]</span> = mutable<span class="hljs-selector-class">.Map</span>(<span class="hljs-string">&quot;a&quot;</span> -&gt; <span class="hljs-number">10</span>, <span class="hljs-string">&quot;b&quot;</span> -&gt; <span class="hljs-number">20</span>)<br><span class="hljs-comment">// add element</span><br>map<span class="hljs-selector-class">.put</span>(<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">30</span>)<br>map += ((<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-number">40</span>)) <span class="hljs-comment">// two () represent tuple to avoid ambiguity</span><br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(map)</span></span><br><span class="hljs-comment">// remove element</span><br>map<span class="hljs-selector-class">.remove</span>(<span class="hljs-string">&quot;a&quot;</span>)<br>map -= <span class="hljs-string">&quot;b&quot;</span> <span class="hljs-comment">// just need key</span><br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(map)</span></span><br><span class="hljs-comment">// modify element</span><br>map<span class="hljs-selector-class">.put</span>(<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">100</span>) <span class="hljs-comment">// call update, add/modify</span><br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(map)</span></span><br><span class="hljs-comment">// merge Map</span><br>map ++= <span class="hljs-built_in">Map</span>(<span class="hljs-string">&quot;a&quot;</span> -&gt; <span class="hljs-number">10</span>, <span class="hljs-string">&quot;b&quot;</span> -&gt; <span class="hljs-number">20</span>, <span class="hljs-string">&quot;c&quot;</span> -&gt; <span class="hljs-number">30</span>) <span class="hljs-comment">// add and will override</span><br><span class="hljs-function"><span class="hljs-title">println</span><span class="hljs-params">(map)</span></span><br></code></pre></td></tr></table></figure><p>元组：</p><ul><li><code>(elem1, elem2, ...)</code> 类型可以不同。</li><li>最多只能22个元素，从<code>Tuple1</code>定义到了<code>Tuple22</code>。</li><li>使用<code>_1 _2 _3 ...</code>访问。</li><li>也可以使用<code>productElement(index)</code>访问，下标从0开始。</li><li><code>-&gt;</code>创建二元组。</li><li>遍历：<code>for(elem &lt;- tuple.productIterator)</code></li><li>可以嵌套，元组的元素也可以是元组。</li></ul><p>集合通用属性和方法：</p><ul><li>线性序列才有长度<code>length</code>、所有集合类型都有大小<code>size</code>。</li><li>遍历<code>for (elem &lt;- collection)</code>、迭代器<code>for (elem &lt;- collection.iterator)</code>。</li><li>生成字符串<code>toString</code> <code>mkString</code>，像<code>Array</code>这种是隐式转换为scala集合的，<code>toString</code>是继承自<code>java.lang.Object</code>的，需要自行处理。</li><li>是否包含元素<code>contains</code>。</li></ul><p>衍生集合的方式：</p><ul><li>获取集合的头元素<code>head</code>（元素）和剩下的尾<code>tail</code>（集合）。</li><li>集合最后一个元素<code>last</code>（元素）和除去最后一个元素的初始数据<code>init</code>（集合）。</li><li>反转<code>reverse</code>。</li><li>取前后n个元素<code>take(n) takeRight(n)</code></li><li>去掉前后n个元素<code>drop(n) dropRight(n)</code></li><li>交集<code>intersect</code></li><li>并集<code>union</code>，线性序列的话已废弃用<code>concat</code>连接。</li><li>差集<code>diff</code>，得到属于自己、不属于传入参数的部分。</li><li>拉链<code>zip</code>，得到两个集合对应位置元素组合起来构成二元组的集合，大小不匹配会丢掉其中一个集合不匹配的多余部分。</li><li>滑窗<code>sliding(n, step = 1)</code>，框住特定个数元素，方便移动和操作。得到迭代器，可以用来遍历，每个迭代的元素都是一个n个元素集合。步长大于1的话最后一个窗口元素数量可能个数会少一些。</li></ul><p>集合的简单计算操作：</p><ul><li>求和<code>sum</code> 求乘积<code>product</code> 最小值<code>min</code> 最大值<code>max</code></li><li><code>maxBy(func)</code>支持传入一个函数获取元素并返回比较依据的值，比如元组默认就只会判断第一个元素，要根据第二个元素判断就返回第二个元素就行<code>xxx.maxBy(_._2)</code>。</li><li>排序<code>sorted</code>，默认从小到大排序。从大到小排序<code>sorted(Ordering[Int].reverse)</code>。</li><li>按元素排序<code>sortBy(func)</code>，指定要用来做排序的字段。也可以再传一个隐式参数逆序<code>sortBy(func)(Ordering[Int].reverse)</code></li><li>自定义比较器<code>sortWith(cmp)</code>，比如按元素升序排列<code>sortWith((a, b) =&gt; a &lt; b)</code>或者<code>sortWith(_ &lt; _)</code>，按元组元素第二个元素升序<code>sortWith(_._2 &gt; _._2)</code>。</li><li>例子：</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs processing">object Calculations &#123;<br>    def <span class="hljs-title function_">main</span>(args: <span class="hljs-built_in">Array</span>[<span class="hljs-built_in">String</span>]): Unit = &#123;<br>        <span class="hljs-comment">// calculations of collections</span><br>        val list = <span class="hljs-title function_">List</span>(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>)<br>        <br>        <span class="hljs-comment">// sum</span><br>        var sum = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> (elem &lt;- list) sum += elem<br>        <span class="hljs-built_in">println</span>(sum)<br>        <br>        <span class="hljs-built_in">println</span>(list.<span class="hljs-property">sum</span>)<br>        <span class="hljs-built_in">println</span>(list.<span class="hljs-property">product</span>)<br>        <span class="hljs-built_in">println</span>(list.<span class="hljs-property">min</span>)<br>        <span class="hljs-built_in">println</span>(list.<span class="hljs-property">max</span>)<br><br>        val list2 = <span class="hljs-title function_">List</span>((<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>), (<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">-3</span>))<br>        <span class="hljs-built_in">println</span>(list2.<span class="hljs-property">maxBy</span>((tuple: (Char, Int)) =&gt; tuple._2))<br>        <span class="hljs-built_in">println</span>(list2.<span class="hljs-property">minBy</span>(_._2))<br><br>        <span class="hljs-comment">// sort, default is ascending</span><br>        val sortedList = list.<span class="hljs-property">sorted</span><br>        <span class="hljs-built_in">println</span>(sortedList)<br>        <span class="hljs-comment">// descending</span><br>        <span class="hljs-built_in">println</span>(list.<span class="hljs-property">sorted</span>(Ordering[Int].<span class="hljs-property">reverse</span>))<br><br>        <span class="hljs-comment">// sortBy</span><br>        <span class="hljs-built_in">println</span>(list2.<span class="hljs-property">sortBy</span>(_._2))<br><br>        <span class="hljs-comment">// sortWith</span><br>        <span class="hljs-built_in">println</span>(list.<span class="hljs-property">sortWith</span>((a, b) =&gt; a &lt; b))<br>        <span class="hljs-built_in">println</span>(list2.<span class="hljs-property">sortWith</span>(_._2 &gt; _._2))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>简单操作还是太少了，不足以应对复杂的需求。</li></ul><p>集合高级计算函数：</p><ul><li>大数据的处理核心就是映射（map）和规约（reduce）。</li><li>映射操作（广义上的map）：<ul><li>过滤：自定义过滤条件，<code>filter(Elem =&gt; Boolean)</code></li><li>转化&#x2F;映射（狭义上的map）：自定义映射函数，<code>map(Elem =&gt; NewElem)</code></li><li>扁平化（flatten）：将集合中集合元素拆开，去掉里层集合，放到外层中来。<code>flatten</code></li><li>扁平化+映射：先映射，再扁平化，<code>flatMap(Elem =&gt; NewElem)</code></li><li>分组（group）：指定分组规则，<code>groupBy(Elem =&gt; Key)</code>得到一个Map，key根据传入的函数运用于集合元素得到，value是对应元素的序列。</li></ul></li><li>规约操作（广义的reduce）：<ul><li>简化&#x2F;规约（狭义的reduce）：对所有数据做一个处理，规约得到一个结果（比如连加连乘操作）。<code>reduce((CurRes, NextElem) =&gt; NextRes)</code>，传入函数有两个参数，第一个参数是第一个元素（第一次运算）和上一轮结果（后面的计算），第二个是当前元素，得到本轮结果，最后一轮的结果就是最终结果。<code>reduce</code>调用<code>reduceLeft</code>从左往右，也可以<code>reduceRight</code>从右往左（实际上是递归调用，和一般意义上的从右往左有区别，看下面例子）。</li><li>折叠（fold）：<code>fold(InitialVal)((CurRes, Elem) =&gt; NextRes)</code>相对于<code>reduce</code>来说其实就是<code>fold</code>自己给初值，从第一个开始计算，<code>reduce</code>用第一个做初值，从第二个元素开始算。<code>fold</code>调用<code>foldLeft</code>，从右往左则用<code>foldRight</code>（翻转之后再<code>foldLeft</code>）。具体逻辑还得还源码。从右往左都有点绕和难以理解，如果要使用需要特别注意。</li></ul></li><li>以上：</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">object</span> HighLevelCalculations &#123;<br>    def main(args: Array<span class="hljs-literal">[S<span class="hljs-identifier">tring</span>]</span>): Unit = &#123;<br>        <span class="hljs-keyword">val</span> <span class="hljs-built_in">list</span> = <span class="hljs-constructor">List(1, 10, 100, 3, 5, 111)</span><br>        <br>        <span class="hljs-comment">// 1. map functions</span><br>        <span class="hljs-comment">// filter</span><br>        <span class="hljs-keyword">val</span> evenList = <span class="hljs-built_in">list</span>.filter(_ % <span class="hljs-number">2</span><span class="hljs-operator"> == </span><span class="hljs-number">0</span>)<br>        println(evenList)<br><br>        <span class="hljs-comment">// map</span><br>        println(<span class="hljs-built_in">list</span>.map(_<span class="hljs-operator"> * </span><span class="hljs-number">2</span>))<br>        println(<span class="hljs-built_in">list</span>.map(x =&gt; x<span class="hljs-operator"> * </span>x))<br><br>        <span class="hljs-comment">// flatten</span><br>        <span class="hljs-keyword">val</span> nestedList: List<span class="hljs-literal">[L<span class="hljs-identifier">ist</span>[I<span class="hljs-identifier">nt</span>]</span>] = <span class="hljs-constructor">List(List(1, 2, 3)</span>, <span class="hljs-constructor">List(3, 4, 5)</span>, <span class="hljs-constructor">List(10, 100)</span>)<br>        <span class="hljs-keyword">val</span> flatList = nested<span class="hljs-constructor">List(0)</span> ::: nested<span class="hljs-constructor">List(1)</span> ::: nested<span class="hljs-constructor">List(2)</span><br>        println(flatList)<br><br>        <span class="hljs-keyword">val</span> flatList2 = nestedList.flatten<br>        println(flatList2) <span class="hljs-comment">// equals to flatList</span><br><br>        <span class="hljs-comment">// map and flatten</span><br>        <span class="hljs-comment">// example: change a string list into a word list</span><br>        <span class="hljs-keyword">val</span> strings: List<span class="hljs-literal">[S<span class="hljs-identifier">tring</span>]</span> = <span class="hljs-constructor">List(<span class="hljs-string">&quot;hello world&quot;</span>, <span class="hljs-string">&quot;hello scala&quot;</span>, <span class="hljs-string">&quot;yes no&quot;</span>)</span><br>        <span class="hljs-keyword">val</span> splitList: List<span class="hljs-literal">[A<span class="hljs-identifier">rray</span>[S<span class="hljs-identifier">tring</span>]</span>] = strings.map(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_</span>.</span></span>split(<span class="hljs-string">&quot; &quot;</span>)) <span class="hljs-comment">// divide string to words</span><br>        <span class="hljs-keyword">val</span> flattenList = splitList.flatten<br>        println(flattenList)<br><br>        <span class="hljs-comment">// merge two steps above into one</span><br>        <span class="hljs-comment">// first map then flatten</span><br>        <span class="hljs-keyword">val</span> flatMapList = strings.flat<span class="hljs-constructor">Map(<span class="hljs-params">_</span>.<span class="hljs-params">split</span>(<span class="hljs-string">&quot; &quot;</span>)</span>)<br>        println(flatMapList)<br><br>        <span class="hljs-comment">// divide elements into groups</span><br>        <span class="hljs-keyword">val</span> groupMap = <span class="hljs-built_in">list</span>.group<span class="hljs-constructor">By(<span class="hljs-params">_</span> % 2)</span> <span class="hljs-comment">// keys: 0 &amp; 1</span><br>        <span class="hljs-keyword">val</span> groupMap2 = <span class="hljs-built_in">list</span>.group<span class="hljs-constructor">By(<span class="hljs-params">data</span> =&gt; <span class="hljs-params">if</span> (<span class="hljs-params">data</span> % 2 <span class="hljs-operator">==</span> 0)</span> <span class="hljs-string">&quot;even&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;odd&quot;</span>) <span class="hljs-comment">// keys : &quot;even&quot; &amp; &quot;odd&quot;</span><br>        println(groupMap)<br>        println(groupMap2)<br><br>        <span class="hljs-keyword">val</span> worldList = <span class="hljs-constructor">List(<span class="hljs-string">&quot;China&quot;</span>, <span class="hljs-string">&quot;America&quot;</span>, <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Curry&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Japan&quot;</span>)</span><br>        println(worldList.group<span class="hljs-constructor">By(<span class="hljs-params">_</span>.<span class="hljs-params">charAt</span>(0)</span>))<br><br>        <span class="hljs-comment">// 2. reduce functions</span><br>        <span class="hljs-comment">// narrowly reduce</span><br>        println(<span class="hljs-constructor">List(1, 2, 3, 4)</span>.reduce(_ + _)) <span class="hljs-comment">// 1+2+3+4 = 10</span><br>        println(<span class="hljs-constructor">List(1, 2, 3, 4)</span>.reduce<span class="hljs-constructor">Left(<span class="hljs-params">_</span> - <span class="hljs-params">_</span>)</span>) <span class="hljs-comment">// 1-2-3-4 = -8</span><br>        println(<span class="hljs-constructor">List(1, 2, 3, 4)</span>.reduce<span class="hljs-constructor">Right(<span class="hljs-params">_</span> - <span class="hljs-params">_</span>)</span>) <span class="hljs-comment">// 1-(2-(3-4)) = -2, a little confusing</span><br><br>        <span class="hljs-comment">// fold</span><br>        println(<span class="hljs-constructor">List(1, 2, 3, 4)</span>.fold(<span class="hljs-number">0</span>)(_ + _)) <span class="hljs-comment">// 0+1+2+3+4 = 10</span><br>        println(<span class="hljs-constructor">List(1, 2, 3, 4)</span>.fold(<span class="hljs-number">10</span>)(_ + _)) <span class="hljs-comment">// 10+1+2+3+4 = 20</span><br>        println(<span class="hljs-constructor">List(1, 2, 3, 4)</span>.fold<span class="hljs-constructor">Right(10)</span>(_ - _)) <span class="hljs-comment">// 1-(2-(3-(4-10))) = 8, a little confusing</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>集合应用案例：</p><ul><li>Map的默认合并操作是用后面的同key元素覆盖前面的，如果要定制为累加他们的值可以用<code>fold</code>。</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// merging two Map will override the value of the same key</span><br><span class="hljs-comment">// custom the merging process instead of just override</span><br><span class="hljs-keyword">val</span> map1 = <span class="hljs-constructor">Map(<span class="hljs-string">&quot;a&quot;</span> -&gt; 1, <span class="hljs-string">&quot;b&quot;</span> -&gt; 3, <span class="hljs-string">&quot;c&quot;</span> -&gt; 4)</span><br><span class="hljs-keyword">val</span> map2 = <span class="hljs-keyword">mutable</span>.<span class="hljs-constructor">Map(<span class="hljs-string">&quot;a&quot;</span> -&gt; 6, <span class="hljs-string">&quot;b&quot;</span> -&gt; 2, <span class="hljs-string">&quot;c&quot;</span> -&gt; 5, <span class="hljs-string">&quot;d&quot;</span> -&gt; 10)</span><br><span class="hljs-keyword">val</span> map3 = map1.fold<span class="hljs-constructor">Left(<span class="hljs-params">map2</span>)</span>(<br>   <span class="hljs-function"> (<span class="hljs-params">mergedMap</span>, <span class="hljs-params">kv</span>) =&gt;</span> &#123;<br>        merged<span class="hljs-constructor">Map(<span class="hljs-params">kv</span>.<span class="hljs-params">_1</span>)</span> = mergedMap.get<span class="hljs-constructor">OrElse(<span class="hljs-params">kv</span>.<span class="hljs-params">_1</span>, 0)</span> + kv._2<br>        mergedMap<br>    &#125;<br>)<br>println(map3) <span class="hljs-comment">// HashMap(a -&gt; 7, b -&gt; 5, c -&gt; 9, d -&gt; 10)</span><br></code></pre></td></tr></table></figure><ul><li>经典案例：单词计数：分词，计数，取排名前三结果。</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// count words in string list, and get 3 highest frequency words</span><br>def wordCount(): <span class="hljs-type">Unit </span>= &#123;<br>    val stringList: <span class="hljs-type">List</span>[<span class="hljs-keyword">String</span>] = List(<br>        <span class="hljs-string">&quot;hello&quot;</span>,<br>        <span class="hljs-string">&quot;hello world&quot;</span>,<br>        <span class="hljs-string">&quot;hello scala&quot;</span>,<br>        <span class="hljs-string">&quot;hello spark from scala&quot;</span>,<br>        <span class="hljs-string">&quot;hello flink from scala&quot;</span><br>    )<br><br>    <span class="hljs-comment">// 1. split</span><br>    val wordList: <span class="hljs-type">List</span>[<span class="hljs-keyword">String</span>] = stringList.flatMap(<span class="hljs-literal">_</span>.split(<span class="hljs-string">&quot; &quot;</span>))<br>    println(wordList)<br><br>    <span class="hljs-comment">// 2. group same words</span><br>    val groupMap: <span class="hljs-type">Map</span>[<span class="hljs-keyword">String</span>, List[<span class="hljs-keyword">String</span>]] = wordList.groupBy(word =&gt; word)<br>    println(groupMap)<br><br>    <span class="hljs-comment">// 3. get length of the every word, to (word, length)</span><br>    val countMap: <span class="hljs-type">Map</span>[<span class="hljs-keyword">String</span>, <span class="hljs-keyword">Int</span>] = groupMap.map(kv =&gt; (kv._1, kv._2.length))<br><br>    <span class="hljs-comment">// 4. convert map to list, sort and take first 3</span><br>    val countList: <span class="hljs-type">List</span>[(<span class="hljs-keyword">String</span>, <span class="hljs-keyword">Int</span>)] = countMap.toList<br>        .sortWith(<span class="hljs-literal">_</span>._2 &gt; <span class="hljs-literal">_</span>._2)<br>        .take(<span class="hljs-number">3</span>)<br><br>    println(countList) <span class="hljs-comment">// result</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>单词计数案例扩展，每个字符串都可能出现多次并且已经统计好出现次数，解决方式，先按次数合并之后再按照上述例子处理。</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// strings has their frequency</span><br>def wordCountAdvanced(): Unit = &#123;<br>    val tupleList: List[(String, Int)] = List(<br>        (<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">1</span>),<br>        (<span class="hljs-string">&quot;hello world&quot;</span>, <span class="hljs-number">2</span>),<br>        (<span class="hljs-string">&quot;hello scala&quot;</span>, <span class="hljs-number">3</span>),<br>        (<span class="hljs-string">&quot;hello spark from scala&quot;</span>, <span class="hljs-number">1</span>),<br>        (<span class="hljs-string">&quot;hello flink from scala&quot;</span>, <span class="hljs-number">2</span>)<br>    )<br><br>    val newStringList: List[String] = tupleList.<span class="hljs-built_in">map</span>(<br>        <span class="hljs-function"><span class="hljs-params">kv</span> =&gt;</span> (kv._1.<span class="hljs-built_in">trim</span> + <span class="hljs-string">&quot; &quot;</span>) * kv._2<br>    )<br><br>    <span class="hljs-comment">// just like wordCount</span><br>    val wordCountList: List[(String, Int)] = newStringList<br>        .flatMap(_.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot; &quot;</span>))<br>        .<span class="hljs-built_in">groupBy</span>(<span class="hljs-function"><span class="hljs-params">word</span> =&gt;</span> word)<br>        .<span class="hljs-built_in">map</span>(<span class="hljs-function"><span class="hljs-params">kv</span> =&gt;</span> (kv._1, kv._2.<span class="hljs-built_in">length</span>))<br>        .toList<br>        .sortWith(_._2 &gt; _._2)<br>        .take(<span class="hljs-number">3</span>)<br><br>    println(wordCountList) <span class="hljs-comment">// result</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>当然这并不高效，更好的方式是利用上已经统计的频率信息。</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs arcade">def wordCountAdvanced2(): Unit = &#123;<br>    val tupleList: List[(String, Int)] = List(<br>        (<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">1</span>),<br>        (<span class="hljs-string">&quot;hello world&quot;</span>, <span class="hljs-number">2</span>),<br>        (<span class="hljs-string">&quot;hello scala&quot;</span>, <span class="hljs-number">3</span>),<br>        (<span class="hljs-string">&quot;hello spark from scala&quot;</span>, <span class="hljs-number">1</span>),<br>        (<span class="hljs-string">&quot;hello flink from scala&quot;</span>, <span class="hljs-number">2</span>)<br>    )<br><br>    <span class="hljs-comment">// first split based on the input frequency</span><br>    val preCountList: List[(String, Int)] = tupleList.flatMap(<br>        <span class="hljs-function"><span class="hljs-params">tuple</span> =&gt;</span> &#123;<br>            val strings: <span class="hljs-built_in">Array</span>[String] = tuple._1.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot; &quot;</span>)<br>            strings.<span class="hljs-built_in">map</span>(<span class="hljs-function"><span class="hljs-params">word</span> =&gt;</span> (word, tuple._2)) <span class="hljs-comment">// Array[(String, Int)]</span><br>        &#125;<br>    )<br><br>    <span class="hljs-comment">// group as words</span><br>    val groupedMap: <span class="hljs-built_in">Map</span>[String, List[(String, Int)]] = preCountList.<span class="hljs-built_in">groupBy</span>(_._1)<br>    println(groupedMap)<br><br>    <span class="hljs-comment">// count frequency of all words</span><br>    val countMap: <span class="hljs-built_in">Map</span>[String, Int] = groupedMap.<span class="hljs-built_in">map</span>(<br>        <span class="hljs-function"><span class="hljs-params">kv</span> =&gt;</span> (kv._1, kv._2.<span class="hljs-built_in">map</span>(_._2).<span class="hljs-built_in">sum</span>)<br>    )<br>    println(countMap)<br><br>    <span class="hljs-comment">// to list, sort and take first 3 words</span><br>    val countList = countMap.toList.sortWith(_._2 &gt; _._2).take(<span class="hljs-number">3</span>)<br>    println(countList)<br>&#125;<br></code></pre></td></tr></table></figure><p>队列：</p><ul><li>可变队列<code>mutable.Queue</code></li><li>入队<code>enqueue(Elem*)</code> 出队<code>Elem = dequeue()</code></li><li>不可变队列<code>immutable.Queue</code>，使用伴生对象创建，出队入队返回新队列。</li></ul><p>并行集合（Parllel Collection）：</p><ul><li>使用并行集合执行时会调用多个线程加速执行。</li><li>使用集合类前加一个<code>.par</code>方法。</li><li>具体细节待补。</li><li>依赖<code>scala.collection.parallel.immutable/mutable</code>，2.13版本后不再在标准库中提供，需要单独下载，暂未找到编好的jar的下载地址，从源码构造需要sbt，TODO。</li></ul><h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><p><code>match-case</code>中的模式匹配：</p><ul><li>用于替代传统C&#x2F;C++&#x2F;Java的<code>switch-case</code>结构，但补充了更多功能，拥有更强的能力。</li><li>语法：（Java中现在也支持<code>=&gt;</code>的写法了）</li></ul><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coq">value <span class="hljs-keyword">match</span> &#123;<br>    <span class="hljs-built_in">case</span> caseVal1 =&gt; returnVal1<br>    <span class="hljs-built_in">case</span> caseVal2 =&gt; returnVal2<br>    ...<br>    <span class="hljs-built_in">case</span> <span class="hljs-keyword">_</span> =&gt; defaultVal<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>每一个case条件成立才返回，否则继续往下走。</li><li><code>case</code>匹配中可以添加模式守卫，用条件判断来代替精确匹配。</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart">def abs(<span class="hljs-built_in">num</span>: Int): Int= &#123;<br>    <span class="hljs-built_in">num</span> match &#123;<br>        <span class="hljs-keyword">case</span> i <span class="hljs-keyword">if</span> i &gt;= <span class="hljs-number">0</span> =&gt; i<br>        <span class="hljs-keyword">case</span> i <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">0</span> =&gt; -i<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>模式匹配支持类型：所有类型字面量，包括字符串、字符、数字、布尔值、甚至数组列表等。</li><li>你甚至可以传入<code>Any</code>类型变量，匹配不同类型常量。</li><li>需要注意默认情况处理，<code>case _</code>也需要返回值，如果没有但是又没有匹配到，就抛出运行时错误。默认情况<code>case _</code>不强制要求通配符（只是在不需要变量的值建议这么做），也可以用<code>case abc</code>一个变量来接住，可以什么都不做，可以使用它的值。</li><li>通过指定匹配变量的类型（用特定类型变量接住），可以匹配类型而不匹配值，也可以混用。</li><li>需要注意类型匹配时由于泛型擦除，可能并不能严格匹配泛型的类型参数，编译器也会报警告。但<code>Array</code>是基本数据类型，对应于java的原生数组类型，能够匹配泛型类型参数。</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">// match type</span><br><span class="hljs-keyword">def</span> describeType(x: <span class="hljs-keyword">Any</span>) = x match &#123;<br>    <span class="hljs-keyword">case</span> i: <span class="hljs-keyword">Int</span> =&gt; <span class="hljs-string">&quot;Int &quot;</span> + i<br>    <span class="hljs-keyword">case</span> s: String =&gt; <span class="hljs-string">&quot;String &quot;</span> + s<br>    <span class="hljs-keyword">case</span> list: List[String] =&gt; <span class="hljs-string">&quot;List &quot;</span> + list<br>    <span class="hljs-keyword">case</span> array: Array[<span class="hljs-keyword">Int</span>] =&gt; <span class="hljs-string">&quot;Array[Int] &quot;</span> + array<br>    <span class="hljs-keyword">case</span> a =&gt; <span class="hljs-string">&quot;Something else &quot;</span> + a <br>&#125;<br><span class="hljs-keyword">println</span>(describeType(<span class="hljs-number">20</span>)) <span class="hljs-comment">// match</span><br><span class="hljs-keyword">println</span>(describeType(<span class="hljs-string">&quot;hello&quot;</span>)) <span class="hljs-comment">// match</span><br><span class="hljs-keyword">println</span>(describeType(List(<span class="hljs-string">&quot;hi&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>))) <span class="hljs-comment">// match</span><br><span class="hljs-keyword">println</span>(describeType(List(<span class="hljs-number">20</span>, <span class="hljs-number">30</span>))) <span class="hljs-comment">// match</span><br><span class="hljs-keyword">println</span>(describeType(Array(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>))) <span class="hljs-comment">// match</span><br><span class="hljs-keyword">println</span>(describeType(Array(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;yes&quot;</span>))) <span class="hljs-comment">// not match</span><br><span class="hljs-keyword">println</span>(describeType((<span class="hljs-number">10</span>, <span class="hljs-number">20</span>))) <span class="hljs-comment">// not match</span><br></code></pre></td></tr></table></figure><ul><li>对于数组可以定义多种匹配形式，可以定义模糊的元素类型匹配、元素数量匹配或者精确的某个数组元素值匹配，非常强大。</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">for</span> (arr &lt;- <span class="hljs-built_in">List</span>(<br>    Array(<span class="hljs-number">0</span>),<br>    Array(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>),<br>    Array(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>),<br>    Array(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>),<br>    Array(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">50</span>)<br>)) &#123;<br>    val result = arr match &#123;<br>        <span class="hljs-keyword">case</span> Array(<span class="hljs-number">0</span>) =&gt; <span class="hljs-string">&quot;0&quot;</span><br>        <span class="hljs-keyword">case</span> Array(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>) =&gt; <span class="hljs-string">&quot;Array(1, 0)&quot;</span><br>        <span class="hljs-keyword">case</span> Array(x: Int, y: Int) =&gt; s<span class="hljs-string">&quot;Array(<span class="hljs-subst">$x</span>, <span class="hljs-subst">$y</span>)&quot;</span> <span class="hljs-comment">// Array of two elements</span><br>        <span class="hljs-keyword">case</span> Array(<span class="hljs-number">0</span>, _*) =&gt; s<span class="hljs-string">&quot;an array begin with 0&quot;</span><br>        <span class="hljs-keyword">case</span> Array(x, <span class="hljs-number">1</span>, z) =&gt; s<span class="hljs-string">&quot;an array with three elements, no.2 is 1&quot;</span><br>        <span class="hljs-keyword">case</span> Array(x:<span class="hljs-built_in">String</span>, _*) =&gt; s<span class="hljs-string">&quot;array that first element is a string&quot;</span><br>        <span class="hljs-keyword">case</span> _ =&gt; <span class="hljs-string">&quot;somthing else&quot;</span><br>    &#125;<br>    println(result)<br></code></pre></td></tr></table></figure><ul><li>List匹配和Array差不多，也很灵活。还可用用集合类灵活的运算符来匹配。<ul><li>比如使用<code>::</code>运算符匹配<code>first :: second :: rest</code>，将一个列表拆成三份，第一个第二个元素和剩余元素构成的列表。</li></ul></li><li>注意模式匹配不仅可以通过返回值当做表达式来用，也可以仅执行语句类似于传统<code>switch-case</code>语句不关心返回值，也可以既执行语句同时也返回。</li><li>元组匹配：<ul><li>可以匹配n元组、匹配元素类型、匹配元素值。如果只关心某个元素，其他就可以用通配符或变量。</li><li>元组大小固定，所以不能用<code>_*</code>。</li></ul></li></ul><p>变量声明匹配：</p><ul><li>变量声明也可以是一个模式匹配的过程。</li><li>元组常用于批量赋值。</li><li><code>val (x, y) = (10, &quot;hello&quot;)</code></li><li><code>val List(first, second, _*) = List(1, 3, 4, 5)</code></li><li><code>val List(first :: second :: rest) = List(1, 2, 3, 4)</code></li></ul><p><code>for</code>推导式中也可以进行模式匹配：</p><ul><li>元组中取元素时，必须用<code>_1 _2 ...</code>，可以用元组赋值将元素赋给变量，更清晰一些。</li><li><code>for ((first, second) &lt;- tupleList)</code></li><li><code>for ((first, _) &lt;- tupleList)</code></li><li>指定特定元素的值，可以实现类似于循环守卫的功能，相当于加一层筛选。比如<code>for ((10, second) &lt;- tupleList)</code></li><li>其他匹配也同样可以用，可以关注数量、值、类型等，相当于做了筛选。</li><li>元组列表匹配、赋值匹配、<code>for</code>循环中匹配非常灵活，灵活运用可以提高代码可读性。</li></ul><p>匹配对象：</p><ul><li>对象内容匹配。</li><li>直接<code>match-case</code>中匹配对应引用变量的话语法是有问题的。编译报错信息提示：不是样例类也没有一个合法的<code>unapply/unapplySeq</code>成员实现。</li><li>要匹配对象，需要实现伴生对象<code>unapply</code>方法，用来对对象属性进行拆解以做匹配。</li></ul><p>样例类：</p><ul><li>第二种实现对象匹配的方式是样例类。</li><li><code>case class className</code>定义样例类，会直接将打包<code>apply</code>和拆包<code>unapply</code>的方法直接定义好。</li><li>样例类定义中主构造参数列表中的<code>val</code>甚至都可以省略，如果是<code>var</code>的话则不能省略，最好加上的感觉，奇奇怪怪的各种边角简化。</li></ul><p>对象匹配和样例类例子：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">object</span> MatchObject &#123;<br>    def main(args: Array<span class="hljs-literal">[S<span class="hljs-identifier">tring</span>]</span>): Unit = &#123;<br>        <span class="hljs-keyword">val</span> person = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Person(<span class="hljs-string">&quot;Alice&quot;</span>, 18)</span><br><br>        <span class="hljs-keyword">val</span> result: String = person <span class="hljs-keyword">match</span> &#123;<br>            case <span class="hljs-constructor">Person(<span class="hljs-string">&quot;Alice&quot;</span>, 18)</span> =&gt; <span class="hljs-string">&quot;Person: Alice, 18&quot;</span><br>            case<span class="hljs-function"> <span class="hljs-params">_</span> =&gt;</span> <span class="hljs-string">&quot;something else&quot;</span><br>        &#125;<br>        println(result)<br><br>        <span class="hljs-keyword">val</span> s = <span class="hljs-constructor">Student(<span class="hljs-string">&quot;Alice&quot;</span>, 18)</span><br>        <span class="hljs-keyword">val</span> result2: String = s <span class="hljs-keyword">match</span> &#123;<br>            case <span class="hljs-constructor">Student(<span class="hljs-string">&quot;Alice&quot;</span>, 18)</span> =&gt; <span class="hljs-string">&quot;Student: Alice, 18&quot;</span><br>            case<span class="hljs-function"> <span class="hljs-params">_</span> =&gt;</span> <span class="hljs-string">&quot;something else&quot;</span><br>        &#125;<br>        println(result2)<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-constructor">Person(<span class="hljs-params">val</span> <span class="hljs-params">name</span>: String, <span class="hljs-params">val</span> <span class="hljs-params">age</span>: Int)</span><br><span class="hljs-keyword">object</span> Person &#123;<br>    def apply(name: String, age: Int) = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Person(<span class="hljs-params">name</span>, <span class="hljs-params">age</span>)</span><br>    def unapply(person: Person): Option<span class="hljs-literal">[(S<span class="hljs-identifier">tring</span>, I<span class="hljs-identifier">nt</span>)]</span> = &#123;<br>        <span class="hljs-keyword">if</span> (person<span class="hljs-operator"> == </span>null) &#123; <span class="hljs-comment">// avoid null reference</span><br>            None<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-constructor">Some((<span class="hljs-params">person</span>.<span class="hljs-params">name</span>, <span class="hljs-params">person</span>.<span class="hljs-params">age</span>)</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><br>case <span class="hljs-keyword">class</span> <span class="hljs-constructor">Student(<span class="hljs-params">name</span>: String, <span class="hljs-params">age</span>: Int)</span> <span class="hljs-comment">// name and age are vals</span><br></code></pre></td></tr></table></figure><p>偏函数：</p><ul><li>偏函数是函数的一种，通过偏函数我们可以方便地对参数做更精确的检查，例如偏函数输入类型是<code>List[Int]</code>，需要第一个元素是0的集合，也可以通过模式匹配实现的。</li><li>定义：</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">val partialFuncName: PartialFunction[List[<span class="hljs-type">Int</span>], <span class="hljs-keyword">Option</span>[<span class="hljs-type">Int</span>]] = &#123;<br>    <span class="hljs-keyword">case</span> x :: y :: _ =&gt; <span class="hljs-keyword">Some</span>(y)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过一个变量定义方式定义，<code>PartialFunction</code>的泛型类型中，前者是参数类型，后者是返回值类型。函数体中用一个<code>case</code>语句来进行模式匹配。上面例子返回输入的<code>List</code>集合中的第二个元素。</li><li>一般一个偏函数只能处理输入的一部分场景，实际中往往需要定义多个偏函数用以组合使用。</li><li>例子：</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs haxe">object PartialFunctionTest &#123;<br>    def main(args: <span class="hljs-type">Array</span>[<span class="hljs-keyword">String</span>]): <span class="hljs-type">Unit </span>= &#123;<br>        val list: <span class="hljs-type">List</span>[(<span class="hljs-keyword">String</span>, <span class="hljs-keyword">Int</span>)] = List((<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">12</span>), (<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">10</span>), (<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">100</span>), (<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">5</span>))<br><br>        <span class="hljs-comment">// keep first constant and double second value of the tuple</span><br>        <span class="hljs-comment">// 1. use map</span><br>        val <span class="hljs-keyword">new</span><span class="hljs-type">List</span> = list.map(tuple =&gt; (tuple._1, tuple._2 * <span class="hljs-number">2</span>))<br>        println(<span class="hljs-keyword">new</span><span class="hljs-type">List</span>)<br><br>        <span class="hljs-comment">// 2. pattern matching</span><br>        val <span class="hljs-keyword">new</span><span class="hljs-type">List1</span> = list.map(<br>            tuple =&gt; &#123;<br>                tuple match &#123;<br>                    <span class="hljs-keyword">case</span> (x, y) =&gt; (x, y * <span class="hljs-number">2</span>)<br>                &#125;<br>            &#125;<br>        )<br>        println(<span class="hljs-keyword">new</span><span class="hljs-type">List1</span>)<br><br>        <span class="hljs-comment">// simplify to partial function</span><br>        val <span class="hljs-keyword">new</span><span class="hljs-type">List2</span> = list.map &#123;<br>            <span class="hljs-keyword">case</span> (x, y) =&gt; (x, y * <span class="hljs-number">2</span>) <span class="hljs-comment">// this is a partial function</span><br>        &#125;<br>        println(<span class="hljs-keyword">new</span><span class="hljs-type">List2</span>)<br><br>        <span class="hljs-comment">// application of partial function</span><br>        <span class="hljs-comment">// get absolute value, deal with: negative, 0, positive</span><br>        val positiveAbs: <span class="hljs-type">PartialFunction</span>[<span class="hljs-keyword">Int</span>, <span class="hljs-keyword">Int</span>] = &#123;<br>            <span class="hljs-keyword">case</span> x <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">0</span> =&gt; x<br>        &#125;<br>        val negativeAbs: <span class="hljs-type">PartialFunction</span>[<span class="hljs-keyword">Int</span>, <span class="hljs-keyword">Int</span>] = &#123;<br>            <span class="hljs-keyword">case</span> x <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> =&gt; -x<br>        &#125;<br>        val zeroAbs: <span class="hljs-type">PartialFunction</span>[<span class="hljs-keyword">Int</span>, <span class="hljs-keyword">Int</span>] = &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span> =&gt; <span class="hljs-number">0</span><br>        &#125;<br><br>        <span class="hljs-comment">// combine a function with three partial functions</span><br>        def abs(x: <span class="hljs-type">Int</span>): <span class="hljs-type">Int </span>= (positiveAbs orElse negativeAbs orElse zeroAbs) (x)<br>        println(abs(<span class="hljs-number">-13</span>))<br>        println(abs(<span class="hljs-number">30</span>))<br>        println(abs(<span class="hljs-number">0</span>))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>scala异常处理整体上的语法和底层处理细节和java非常类似。</p><p>Java异常处理：</p><ul><li>用<code>try</code>语句包围要捕获异常的块，多个不同<code>catch</code>块用于捕获不同的异常，<code>finally</code>块中是捕获异常与否都会执行的逻辑。</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs abnf">try &#123;<br>    int a <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>    int b <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>    int c <span class="hljs-operator">=</span> a / b<span class="hljs-comment">;</span><br>&#125; catch (ArithmeticException e) &#123;<br>    e.printStackTrace()<span class="hljs-comment">;</span><br>&#125; catch (Exception e) &#123;<br>    e.printStackTrace()<span class="hljs-comment">;</span><br>&#125; finally &#123;<br>    System.out.println(<span class="hljs-string">&quot;finally&quot;</span>)<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>scala异常处理：</p><ul><li><code>try</code>包围要捕获异常的内容，<code>catch</code>仅仅是关键字，将捕获异常的所有逻辑包围在<code>catch</code>块中。<code>finally</code>块和java一样都会执行，一般用于对象的清理工作。</li><li>scala中没有编译期异常，所有异常都是运行时处理。</li><li>scala中也是用<code>throw</code>关键字抛出异常，所有异常都是<code>Throwable</code>的子类，<code>throw</code>表达式是有类型的，就是<code>Nothing</code>。<code>Nothing</code>主要用在一个函数总是不能正常工作，总是抛出异常的时候用作返回值类型。</li><li>java中用了<code>throws</code>关键字声明此方法可能引发的异常信息，在scala中对应地使用<code>@throws[ExceptionList]</code>注解来声明，用法差不多。</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs processing">object Exceptionstest &#123;<br>    def <span class="hljs-title function_">main</span>(args: <span class="hljs-built_in">Array</span>[<span class="hljs-built_in">String</span>]): Unit = &#123;<br>        <span class="hljs-comment">// test of exceptions</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            val n = <span class="hljs-number">10</span> / <span class="hljs-number">0</span><br>        &#125; <span class="hljs-keyword">catch</span> &#123;<br>            <span class="hljs-keyword">case</span> e: ArithmeticException =&gt; &#123;<br>                <span class="hljs-built_in">println</span>(s<span class="hljs-string">&quot;ArithmeticException raised.&quot;</span>)<br>            &#125;<br>            <span class="hljs-keyword">case</span> e: Exception =&gt; &#123;<br>                <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Normal Exceptions raised.&quot;</span>)<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;finally&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h2><p>前面说了很多了，编译器做隐式转换的时机：</p><ul><li>编译器第一次编译失败时，会在当前环境中查找能让代码编译通过的方法，将类型隐式转换，尝试二次编译。</li></ul><p>隐式函数：</p><ul><li>函数定义前加上<code>implicit</code>声明为隐式转换函数。</li><li>当编译错误时，编译器会尝试在当前作用域范围查找能调用对应功能的转换规则，这个过程由编译器完成，称之为隐式转换或者自动转换。</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fortran">// convert <span class="hljs-built_in">Int</span> to MyRichInt<br><span class="hljs-keyword">implicit</span> def convert(arg: <span class="hljs-built_in">Int</span>): MyRichInt = &#123;<br>    new MyRickInt(arg)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在当前作用域定义时需要在使用前定义才能找到。</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs fortran">object  ImplicitConversion &#123;<br>    def main(args: Array[String]): <span class="hljs-keyword">Unit</span> = &#123;<br>        <span class="hljs-keyword">implicit</span> def convert(num: <span class="hljs-built_in">Int</span>): MyRichInt = new MyRichInt(num)<br><br>        println(<span class="hljs-number">12.</span>myMax(<span class="hljs-number">15</span>)) // will <span class="hljs-keyword">call</span> convert implicitly<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> MyRichInt(val self: <span class="hljs-built_in">Int</span>) &#123;<br>    // self define compare method<br>    def myMax(n: <span class="hljs-built_in">Int</span>): <span class="hljs-built_in">Int</span> = <span class="hljs-keyword">if</span> (n &lt; self) self <span class="hljs-keyword">else</span> n<br>    def myMin(n: <span class="hljs-built_in">Int</span>): <span class="hljs-built_in">Int</span> = <span class="hljs-keyword">if</span> (n &gt; self) self <span class="hljs-keyword">else</span> n<br>&#125;<br></code></pre></td></tr></table></figure><p>隐式参数：</p><ul><li>普通方法或者函数中的参数可以通过<code>implicit</code>关键字声明为隐式参数，调用方法时，如果传入了，那么以传入参数为准。如果没有传入，编译器会在当前作用域寻找复合条件的隐式值。例子：集合排序方法的排序规则就是隐式参数。</li><li>隐式值：<ul><li>同一个作用域，相同类型隐式值只能有一个。</li><li>编译器按照隐式参数的类型去寻找对应隐式值，与隐式值名称无关。</li><li>隐式参数优先于默认参数。（也就是说隐式参数和默认参数可以同时存在，加上默认参数之后其实就相当于两个不同优先级的默认参数）</li></ul></li><li>隐式参数有一个很淦的点：<ul><li>如果参数列表中只有一个隐式参数，无论这个隐式参数是否提供默认参数，那么如果要用这个隐式参数就应该<strong>将调用隐式参数的参数列表连同括号一起省略掉</strong>。如果调用时又想加括号可以在函数定义的隐式参数列表前加一个空参数列表<code>()</code>，那么<code>()</code>将使用隐式参数，<code>()()</code>将使用默认参数（如果有，没有肯定编不过），<code>()(arg)</code>使用传入参数。</li><li>也就是说一个隐式参数时通过是否加括号可以区分隐式参数、默认参数、传入参数三种情况。</li><li>那么如果多参数情况下：隐式参数、默认参数、普通参数排列组合在一个参数列表中混用会怎么样呢？没有试验过，不要这么用，思考这些东西搞什么哦！</li><li>具体要不要加这个柯里化的空参数列表，那看习惯就行。不加可能更好一点，加了可能有点让人费解。</li></ul></li><li>可以进一步简写隐式参数，在参数列表中直接去掉，在函数中直接使用<code>implicity[Type]</code>（<code>Predef</code>中定义的）。但这时就不能传参数了，有什么用啊？相当于一个在自己作用域范围内起作用的全局量？</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs fortran">object ImplicitArgments &#123;<br>    def main(args: Array[String]): <span class="hljs-keyword">Unit</span> = &#123;<br>        <span class="hljs-keyword">implicit</span> val str: String = <span class="hljs-string">&quot;Alice from implicit argument&quot;</span><br>        <br>        def sayHello()(<span class="hljs-keyword">implicit</span> <span class="hljs-keyword">name</span>: String = <span class="hljs-string">&quot;Alice from default argument&quot;</span>): <span class="hljs-keyword">Unit</span> = &#123;<br>            println(s<span class="hljs-string">&quot;hello $name&quot;</span>)<br>        &#125;<br><br>        sayHello() // <span class="hljs-keyword">implicit</span><br>        sayHello()() // <span class="hljs-keyword">default</span><br>        sayHello()(<span class="hljs-string">&quot;Alice from normal argument&quot;</span>) // normal<br><br>        def sayHi(<span class="hljs-keyword">implicit</span> <span class="hljs-keyword">name</span>: String = <span class="hljs-string">&quot;Alice from default argument&quot;</span>): <span class="hljs-keyword">Unit</span> = &#123;<br>            println(s<span class="hljs-string">&quot;hi $name&quot;</span>)<br>        &#125;<br><br>        sayHi // <span class="hljs-keyword">implicit</span><br>        sayHi() // <span class="hljs-keyword">default</span><br>        sayHi(<span class="hljs-string">&quot;Alice from normal argument&quot;</span>) // normal<br><br>        def sayBye() = &#123;<br>            println(s<span class="hljs-string">&quot;bye $&#123;implicitly[String]&#125;&quot;</span>)<br>        &#125;<br><br>        sayBye()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>隐式类：</p><ul><li>scala2.10之后提供了隐式类，使用<code>implicit</code>声明为隐式类。将类的构造方法声明为隐式转换函数。</li><li>也就是说如果编译通不过，就可能将数据直接传给构造转换为对应的类。</li><li>隐式函数的一个扩展。</li><li>说明：<ul><li>所带构造参数有且只能有一个。</li><li>隐式类必须被定义在类或者伴生对象或者包对象中，隐式类不能是顶层的。</li></ul></li><li>同一个作用域定义隐式转换函数和隐式类会冲突，定义一个就行。</li></ul><p>隐式解析机制的作用域：</p><ul><li>首先在<strong>当前代码作用域下</strong>查找隐式实体（隐式方法、隐式类、隐式对象）。</li><li>如果第一条规查找隐式对象失败，会继续在<strong>隐式参数的类型的作用域</strong>中查找。</li><li>类型的作用域是指该类型相关联的全部伴生对象以及该类型所在包的包对象。</li></ul><p>作用：</p><ul><li>隐式函数和隐式类可以用于扩充类的功能，常用语比如内建类<code>Int Double String</code>这种。</li><li>隐式参数相当于就是一种更高优先级的默认参数。用于多个函数需要同一个默认参数时，就不用每个函数定义时都写一次默认值了。为了简洁无所不用其极啊真是。</li></ul><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型：</p><ul><li><code>[TypeList]</code>，定义和使用都是。</li><li>常用于集合类型中用于支持不同元素类型。</li><li>和java一样通过类型擦除&#x2F;擦拭法来实现。</li><li>定义时可以用<code>+-</code>表示协变和逆变，不加则是不变。</li></ul><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyList</span>[+T] &#123;&#125; <span class="hljs-comment">// 协变</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyList</span>[-T] &#123;&#125; <span class="hljs-comment">// 逆变</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyList</span>[T] &#123;&#125; <span class="hljs-comment">// 不变</span><br></code></pre></td></tr></table></figure><p>协变和逆变：</p><ul><li>比如Son和Father是父子关系，Son是子类。<ul><li>协变（Covariance）：<code>MyList[Son]</code>是<code>MyList[Father]</code>的子类，协同变化。</li><li>逆变（Contravariance）：<code>MyList[Son]</code>是<code>MyList[Father]</code>的父类，逆向变化。</li><li>不变（Invariant）：<code>MyList[Father] MyList[Son]</code>没有父子关系。</li></ul></li><li>还需要深入了解。</li></ul><p>泛型上下限：</p><ul><li>泛型上限：<code>class MyList[T &lt;: Type]</code>，可以传入<code>Type</code>自身或者子类。</li><li>泛型下限：<code>class MyList[T &gt;: Type]</code>，可以传入<code>Type</code>自身或者父类。</li><li>对传入的泛型进行限定。</li></ul><p>上下文限定：</p><ul><li><code>def f[A : B](a: A) = println(a)</code>等同于<code>def f[A](a: A)(implicit arg: B[A])</code></li><li>是将泛型和隐式转换结合的产物，使用上下文限定（前者）后，方法内无法使用隐式参数名调用隐式参数，需要通过<code>implicitly[Ordering[A]]</code>获取隐式变量。</li><li>了解即可，可能基本不会用到。</li></ul><h2 id="Style-Guide"><a href="#Style-Guide" class="headerlink" title="Style Guide"></a>Style Guide</h2><p><a href="https://docs.scala-lang.org/style/index.html">官方的Style Guide</a>中的一些建议：</p><ul><li>缩进鼓励为2个，当然我上面都是用的4个。Scala中很多时候嵌套层次会很深，也鼓励这样做，模式匹配、匿名函数、循环、条件等各种嵌套，层次深了之后4空格可能会比较折磨。</li><li>一个表达式一行放不下要换行时，语义上不会产生歧义就行，比如一个运算符放在末尾将其必需的操作数换到下一行。</li><li>多参数函数调用需要换行书写时，将第一个参数放到第二行并缩进2个空格书写，而不是第一个参数放到第一行，然后缩进到对齐（典型java风格）。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> right!<br>val myLongFieldNameWithNoRealPoint =<br>  foo(<br>    someVeryLongFieldName,<br>    andAnotherVeryLongFieldName,<br>    <span class="hljs-string">&quot;this is a string&quot;</span>,<br>    <span class="hljs-number">3.1415</span>)<br><br><span class="hljs-regexp">//</span> wrong!<br>val myLongFieldNameWithNoRealPoint = foo(someVeryLongFieldName,<br>                                         andAnotherVeryLongFieldName,<br>                                         <span class="hljs-string">&quot;this is a string&quot;</span>,<br>                                         <span class="hljs-number">3.1415</span>)<br></code></pre></td></tr></table></figure><ul><li>仅介绍第一页的内容，也没有空去看完，以后真写得多了再去看。</li></ul><h2 id="sbt"><a href="#sbt" class="headerlink" title="sbt"></a>sbt</h2><p>上面已经简单介绍了IDEA使用Maven项目编写Scala的配置，但学习scala，官方的构建工具sbt还是必须要了解一下的。</p><p>关于SBT：</p><ul><li>SBT是Scala的构建工具，全称Simple Build Tool，类似于 Maven 或 Gradle。</li><li><a href="https://docs.scala-lang.org/getting-started/sbt-track/getting-started-with-scala-and-sbt-on-the-command-line.html">GETTING STARTED WITH SCALA AND SBT ON THE COMMAND LINE</a></li><li><a href="https://www.scala-sbt.org/1.x/docs/index.html">sbt Reference Manual</a> 要使用sbt，阅读完第一章Getting Started with sbt是必要的。下面的内容皆是第一章翻译。</li></ul><p>特性：</p><ul><li>简单项目零配置。</li><li>用Scala源码管理项目构建。</li><li>精确的重编译，节省时间。</li><li>使用Coursier的库管理器。</li><li>支持Scala和Java的混合项目。</li><li>等等等，具体就不列了，总之一个大型项目构建系统该有的东西。</li></ul><p>安装：</p><ul><li>sbt依赖Java，确保已经安装了JDK1.8或以上版本。</li><li>下载压缩包或者安装包，这里的版本是1.5.5。</li><li>解压或者安装。</li><li>配置环境变量<code>SBT_HOME</code>，并添加<code>%SBT_HOME%\bin</code>到path环境变量，安装包的话会自动配置。</li></ul><h3 id="通过案例入门sbt"><a href="#通过案例入门sbt" class="headerlink" title="通过案例入门sbt"></a>通过案例入门sbt</h3><p>创建一个项目hello作为例子：</p><ul><li>windows上没有的命令按照含义操作即可。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> foo-build</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> foo-build</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">touch</span> build.sbt</span><br></code></pre></td></tr></table></figure><p>开始sbt shell：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">$ sbt<br>[info] Updated <span class="hljs-keyword">file</span> <span class="hljs-regexp">/tmp/</span>foo-build<span class="hljs-regexp">/project/</span>build.properties: set sbt.version to <span class="hljs-number">1.1</span>.<span class="hljs-number">4</span><br>[info] Loading <span class="hljs-keyword">project</span> definition <span class="hljs-keyword">from</span> <span class="hljs-regexp">/tmp/</span>foo-build/<span class="hljs-keyword">project</span><br>[info] Loading settings <span class="hljs-keyword">from</span> build.sbt ...<br>[info] Set current <span class="hljs-keyword">project</span> to foo-build (in build <span class="hljs-keyword">file</span>:<span class="hljs-regexp">/tmp/</span>foo-build/)<br>[info] sbt server started at local:<span class="hljs-comment">///Users/eed3si9n/.sbt/1.0/server/abc4fb6c89985a00fd95/sock</span><br>sbt:foo-build&gt;<br></code></pre></td></tr></table></figure><ul><li>第一次初始化时间会很长。</li><li>退出shell：</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sbt:foo-build&gt; <span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><ul><li>编译：</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">sb</span><span class="hljs-variable">t:foo</span>-build&gt; compile<br></code></pre></td></tr></table></figure><ul><li>sbt shell中Tab可以补全。</li></ul><p>对修改重新编译：</p><ul><li>在<code>compile</code>命令（或其他命令同理）前加一个<code>~</code>前缀，会进入等待状态，当项目发生修改是会自动重新编译。当然退出这个状态后就不会了。</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">sb</span><span class="hljs-variable">t:foo</span>-build&gt; ~compile<br>[success] Total time: <span class="hljs-number">0</span> s, completed May <span class="hljs-number">6</span>, <span class="hljs-number">2018</span> <span class="hljs-number">3</span>:<span class="hljs-number">52</span>:<span class="hljs-number">08</span> PM<br><span class="hljs-number">1</span>. Waiting <span class="hljs-keyword">for</span> <span class="hljs-keyword">source</span> <span class="hljs-keyword">changes</span>... (press enter <span class="hljs-keyword">to</span> interrupt)<br></code></pre></td></tr></table></figure><p>创建源文件：</p><ul><li>执行<code>~compile</code>并保持，创建目录<code>src/main/scala/example</code>新建源文件保存就能看到编译过程了。</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// src/main/scala/example/Hello.scala</span><br><span class="hljs-keyword">package</span> example<br><br><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">App</span> </span>&#123;<br>  println(<span class="hljs-string">&quot;Hello&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>sbt shell常用操作：</p><ul><li><code>help</code>帮助。</li><li><code>help run</code>具体条目的帮助。</li><li><code>run</code>运行程序。</li><li>上下箭头切换已执行命令。</li><li><code>scalaVersion</code> scala版本。</li></ul><p>配置修改：</p><ul><li>切换当前项目的scala版本：<code>set ThisBuild / scalaVersion := &quot;2.13.6&quot;</code>。</li><li><code>session save</code>保存配置到<code>build.sbt</code>，此时其中就会多出<code>ThisBuild / scalaVersion := &quot;2.13.6&quot;</code>。</li><li>编辑<code>build.sbt</code>：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">ThisBuild / scalaVersion := <span class="hljs-string">&quot;2.13.6&quot;</span><br>ThisBuild / organization := <span class="hljs-string">&quot;com.example&quot;</span><br><br>lazy val hello = (project in file(<span class="hljs-string">&quot;.&quot;</span>))<br>  .settings(<br>    name := <span class="hljs-string">&quot;Hello&quot;</span><br>  )<br></code></pre></td></tr></table></figure><ul><li>重新加载配置<code>reload</code>。</li></ul><p>测试：</p><ul><li>添加ScalaTest到依赖</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmake">ThisBuild / scalaVersion := <span class="hljs-string">&quot;2.13.6&quot;</span><br>ThisBuild / organization := <span class="hljs-string">&quot;com.example&quot;</span><br><br>lazy val hello = (<span class="hljs-keyword">project</span> in <span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;.&quot;</span>))<br>  .settings(<br>    name := <span class="hljs-string">&quot;Hello&quot;</span>,<br>    libraryDependencies += <span class="hljs-string">&quot;org.scalatest&quot;</span> %% <span class="hljs-string">&quot;scalatest&quot;</span> % <span class="hljs-string">&quot;3.2.7&quot;</span> % <span class="hljs-keyword">Test</span>,<br>  )<br></code></pre></td></tr></table></figure><ul><li>执行测试：<code>test</code>。</li><li>后续继续运行追加的测试：<code>~testQuick</code></li></ul><p>编写测试：<code>src/test/scala/HelloSpec.scala</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// src/test/scala/HelloSpec.scala</span><br><span class="hljs-keyword">import</span> org.scalatest.funsuite._<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloSpec</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AnyFunSuite</span> </span>&#123;<br>  test(<span class="hljs-string">&quot;Hello should start with H&quot;</span>) &#123;<br>    assert(<span class="hljs-string">&quot;hello&quot;</span>.startsWith(<span class="hljs-string">&quot;H&quot;</span>))<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试结果当然是失败</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sbt:Hello&gt; test<br>[<span class="hljs-built_in">info</span>] HelloSpec:<br>[<span class="hljs-built_in">info</span>] - Hello should start with H *** FAILED ***<br>[<span class="hljs-built_in">info</span>]   <span class="hljs-string">&quot;hello&quot;</span> did <span class="hljs-keyword">not</span> start with <span class="hljs-string">&quot;H&quot;</span> (HelloSpec.scala:5)<br>[<span class="hljs-built_in">info</span>] <span class="hljs-built_in">Run</span> completed <span class="hljs-keyword">in</span> 214 milliseconds.<br>[<span class="hljs-built_in">info</span>] Total number of tests run: 1<br>[<span class="hljs-built_in">info</span>] Suites: completed 1, aborted 0<br>[<span class="hljs-built_in">info</span>] Tests: succeeded 0, failed 1, canceled 0, ignored 0, pending 0<br>[<span class="hljs-built_in">info</span>] *** 1 TEST FAILED ***<br>[<span class="hljs-built_in">error</span>] Failed tests:<br>[<span class="hljs-built_in">error</span>]         HelloSpec<br>[<span class="hljs-built_in">error</span>] (Test / test) sbt.TestsFailedException: Tests unsuccessful<br>[<span class="hljs-built_in">error</span>] Total time: 0 s, completed 2021年9月27日 下午11:58:01<br></code></pre></td></tr></table></figure><ul><li>改一下源码再测试就能通过了：</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// src/test/scala/HelloSpec.scala</span><br><span class="hljs-keyword">import</span> org.scalatest.funsuite._<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloSpec</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AnyFunSuite</span> </span>&#123;<br>  test(<span class="hljs-string">&quot;Hello should start with H&quot;</span>) &#123;<br>    assert(<span class="hljs-string">&quot;Hello&quot;</span>.startsWith(<span class="hljs-string">&quot;H&quot;</span>))<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加库依赖：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-comment">// build.sbt</span><br>ThisBuild / scalaVersion := <span class="hljs-string">&quot;2.13.6&quot;</span><br>ThisBuild / organization := <span class="hljs-string">&quot;com.example&quot;</span><br><br>lazy val hello = (project <span class="hljs-keyword">in</span> <span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;.&quot;</span>))<br>  .settings(<br>    name := <span class="hljs-string">&quot;Hello&quot;</span>,<br>    libraryDependencies += <span class="hljs-string">&quot;com.typesafe.play&quot;</span> %% <span class="hljs-string">&quot;play-json&quot;</span> % <span class="hljs-string">&quot;2.9.2&quot;</span>,<br>    libraryDependencies += <span class="hljs-string">&quot;com.eed3si9n&quot;</span> %% <span class="hljs-string">&quot;gigahorse-okhttp&quot;</span> % <span class="hljs-string">&quot;0.5.0&quot;</span>,<br>    libraryDependencies += <span class="hljs-string">&quot;org.scalatest&quot;</span> %% <span class="hljs-string">&quot;scalatest&quot;</span> % <span class="hljs-string">&quot;3.2.7&quot;</span> % Test,<br>  )<br></code></pre></td></tr></table></figure><p>使用REPL（Read-Eval-Print Loop）：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">sb</span><span class="hljs-variable">t:Hello</span>&gt; console<br></code></pre></td></tr></table></figure><ul><li>在scala的REPL环境中粘贴：<code>:paste</code>。</li><li>退出：<code>:q</code></li></ul><p>修改<code>build.sbt</code>创建一个子项目：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cmake">ThisBuild / scalaVersion := <span class="hljs-string">&quot;2.13.6&quot;</span><br>ThisBuild / organization := <span class="hljs-string">&quot;com.example&quot;</span><br><br>lazy val hello = (<span class="hljs-keyword">project</span> in <span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;.&quot;</span>))<br>  .settings(<br>    name := <span class="hljs-string">&quot;Hello&quot;</span>,<br>    libraryDependencies += <span class="hljs-string">&quot;com.eed3si9n&quot;</span> %% <span class="hljs-string">&quot;gigahorse-okhttp&quot;</span> % <span class="hljs-string">&quot;0.5.0&quot;</span>,<br>    libraryDependencies += <span class="hljs-string">&quot;org.scalatest&quot;</span> %% <span class="hljs-string">&quot;scalatest&quot;</span> % <span class="hljs-string">&quot;3.2.7&quot;</span> % <span class="hljs-keyword">Test</span>,<br>  )<br><br>lazy val helloCore = (<span class="hljs-keyword">project</span> in <span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;core&quot;</span>))<br>  .settings(<br>    name := <span class="hljs-string">&quot;Hello Core&quot;</span>,<br>  )<br></code></pre></td></tr></table></figure><ul><li><code>reload</code>时会自动创建目录<code>core/</code>。</li><li>列出所有子项目：<code>projects</code></li><li>编译子项目：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">helloCore/compile<br></code></pre></td></tr></table></figure><ul><li>子项目添加依赖：</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cmake">ThisBuild / scalaVersion := <span class="hljs-string">&quot;2.13.6&quot;</span><br>ThisBuild / organization := <span class="hljs-string">&quot;com.example&quot;</span><br><br>val scalaTest = <span class="hljs-string">&quot;org.scalatest&quot;</span> %% <span class="hljs-string">&quot;scalatest&quot;</span> % <span class="hljs-string">&quot;3.2.7&quot;</span><br><br>lazy val hello = (<span class="hljs-keyword">project</span> in <span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;.&quot;</span>))<br>  .settings(<br>    name := <span class="hljs-string">&quot;Hello&quot;</span>,<br>    libraryDependencies += <span class="hljs-string">&quot;com.eed3si9n&quot;</span> %% <span class="hljs-string">&quot;gigahorse-okhttp&quot;</span> % <span class="hljs-string">&quot;0.5.0&quot;</span>,<br>    libraryDependencies += scalaTest % <span class="hljs-keyword">Test</span>,<br>  )<br><br>lazy val helloCore = (<span class="hljs-keyword">project</span> in <span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;core&quot;</span>))<br>  .settings(<br>    name := <span class="hljs-string">&quot;Hello Core&quot;</span>,<br>    libraryDependencies += scalaTest % <span class="hljs-keyword">Test</span>,<br>  )<br></code></pre></td></tr></table></figure><p>广播命令、添加依赖：</p><ul><li>设置<code>.aggregate(...)</code>，这样发送到<code>hello</code>的命令都会被广播到<code>helloCore</code></li><li>使用<code>.dependsOn(...)</code>可以设置依赖，下面的设置使<code>hello</code>依赖于<code>helloCore</code></li><li>将Gigahorse的依赖移到<code>helloCore</code>。</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cmake">ThisBuild / scalaVersion := <span class="hljs-string">&quot;2.13.6&quot;</span><br>ThisBuild / organization := <span class="hljs-string">&quot;com.example&quot;</span><br><br>val scalaTest = <span class="hljs-string">&quot;org.scalatest&quot;</span> %% <span class="hljs-string">&quot;scalatest&quot;</span> % <span class="hljs-string">&quot;3.2.7&quot;</span><br>val gigahorse = <span class="hljs-string">&quot;com.eed3si9n&quot;</span> %% <span class="hljs-string">&quot;gigahorse-okhttp&quot;</span> % <span class="hljs-string">&quot;0.5.0&quot;</span><br><br>lazy val hello = (<span class="hljs-keyword">project</span> in <span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;.&quot;</span>))<br>  .aggregate(helloCore)<br>  .dependsOn(helloCore)<br>  .settings(<br>    name := <span class="hljs-string">&quot;Hello&quot;</span>,<br>    libraryDependencies += scalaTest % <span class="hljs-keyword">Test</span>,<br>  )<br><br>lazy val helloCore = (<span class="hljs-keyword">project</span> in <span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;core&quot;</span>))<br>  .settings(<br>    name := <span class="hljs-string">&quot;Hello Core&quot;</span>,<br>    libraryDependencies += scalaTest % <span class="hljs-keyword">Test</span>,<br>    libraryDependencies += gigahorse,<br>  )<br></code></pre></td></tr></table></figure><p>使用Play JSON解析JSON：</p><ul><li>添加依赖。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css">ThisBuild / scalaVersion := <span class="hljs-string">&quot;2.13.6&quot;</span><br>ThisBuild / organization := <span class="hljs-string">&quot;com.example&quot;</span><br><br>val scalaTest = <span class="hljs-string">&quot;org.scalatest&quot;</span> %% <span class="hljs-string">&quot;scalatest&quot;</span> % <span class="hljs-string">&quot;3.2.7&quot;</span><br>val gigahorse = <span class="hljs-string">&quot;com.eed3si9n&quot;</span> %% <span class="hljs-string">&quot;gigahorse-okhttp&quot;</span> % <span class="hljs-string">&quot;0.5.0&quot;</span><br>val playJson  = <span class="hljs-string">&quot;com.typesafe.play&quot;</span> %% <span class="hljs-string">&quot;play-json&quot;</span> % <span class="hljs-string">&quot;2.9.2&quot;</span><br><br>lazy val hello = (project in <span class="hljs-built_in">file</span>(<span class="hljs-string">&quot;.&quot;</span>))<br>  .<span class="hljs-built_in">aggregate</span>(helloCore)<br>  .<span class="hljs-built_in">dependsOn</span>(helloCore)<br>  .<span class="hljs-built_in">settings</span>(<br>    name := <span class="hljs-string">&quot;Hello&quot;</span>,<br>    libraryDependencies += scalaTest % Test,<br>  )<br><br>lazy val helloCore = (project in <span class="hljs-built_in">file</span>(<span class="hljs-string">&quot;core&quot;</span>))<br>  .<span class="hljs-built_in">settings</span>(<br>    name := <span class="hljs-string">&quot;Hello Core&quot;</span>,<br>    libraryDependencies ++= <span class="hljs-built_in">Seq</span>(gigahorse, playJson),<br>    libraryDependencies += scalaTest % Test,<br>  )<br></code></pre></td></tr></table></figure><ul><li>重载，添加文件：<code>core/src/main/scala/example/core/Weather.scala</code></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// core/src/main/scala/example/core/Weather.scala</span><br>package example.core<br><br>import gigahorse._, support.okhttp.Gigahorse<br>import scala.concurrent._, duration._<br>import play.api.libs.json._<br><br><span class="hljs-keyword">object</span> Weather &#123;<br>  <span class="hljs-keyword">lazy</span> <span class="hljs-keyword">val</span> http = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Gigahorse</span>.</span></span>http(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Gigahorse</span>.</span></span>config)<br><br>  def weather: Future<span class="hljs-literal">[S<span class="hljs-identifier">tring</span>]</span> = &#123;<br>    <span class="hljs-keyword">val</span> baseUrl = <span class="hljs-string">&quot;https://www.metaweather.com/api/location&quot;</span><br>    <span class="hljs-keyword">val</span> locUrl = baseUrl + <span class="hljs-string">&quot;/search/&quot;</span><br>    <span class="hljs-keyword">val</span> weatherUrl = baseUrl + <span class="hljs-string">&quot;/%s/&quot;</span><br>    <span class="hljs-keyword">val</span> rLoc = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Gigahorse</span>.</span></span>url(locUrl).get.<br>      add<span class="hljs-constructor">QueryString(<span class="hljs-string">&quot;query&quot;</span> -&gt; <span class="hljs-string">&quot;New York&quot;</span>)</span><br>    import <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ExecutionContext</span>.</span><span class="hljs-module"><span class="hljs-identifier">Implicits</span>.</span></span>global<br>    <span class="hljs-keyword">for</span> &#123;<br>      loc &lt;- http.run(rLoc, parse)<br>      woeid = (loc \ <span class="hljs-number">0</span>  \ <span class="hljs-string">&quot;woeid&quot;</span>).get<br>      rWeather = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Gigahorse</span>.</span></span>url(weatherUrl format woeid).get<br>      weather &lt;- http.run(rWeather, parse)<br>    &#125; yield (weather \\ <span class="hljs-string">&quot;weather_state_name&quot;</span>)(<span class="hljs-number">0</span>).<span class="hljs-keyword">as</span><span class="hljs-literal">[S<span class="hljs-identifier">tring</span>]</span>.toLowerCase<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> def parse = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Gigahorse</span>.</span></span>asString andThen <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Json</span>.</span></span>parse<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>修改<code>src/main/scala/example/Hello.scala</code>:</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> example<br><br><span class="hljs-keyword">import</span> scala.concurrent._, duration._<br><span class="hljs-keyword">import</span> core.<span class="hljs-type">Weather</span><br><br><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">App</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> w = <span class="hljs-type">Await</span>.result(<span class="hljs-type">Weather</span>.weather, <span class="hljs-number">10.</span>seconds)<br>  println(<span class="hljs-string">s&quot;Hello! The weather in New York is <span class="hljs-subst">$w</span>.&quot;</span>)<br>  <span class="hljs-type">Weather</span>.http.close()<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>运行：<code>run</code></li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">sbt:Hello&gt; <span class="hljs-built_in">run</span><br>[info] <span class="hljs-built_in">running</span> example.Hello<br>Hello! The weather <span class="hljs-keyword">in</span> New York <span class="hljs-keyword">is</span> light cloud.<br>[success] Total <span class="hljs-built_in">time</span>: <span class="hljs-number">5</span> s, completed <span class="hljs-number">2021</span>年<span class="hljs-number">9</span>月<span class="hljs-number">28</span>日 上午<span class="hljs-number">10</span>:<span class="hljs-number">29</span>:<span class="hljs-number">57</span><br></code></pre></td></tr></table></figure><p>添加sbt-native-packager插件：</p><ul><li>创建<code>project/plugins.sbt</code></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">addSbtPlugin</span><span class="hljs-params">(<span class="hljs-string">&quot;com.typesafe.sbt&quot;</span> % <span class="hljs-string">&quot;sbt-native-packager&quot;</span> % <span class="hljs-string">&quot;1.3.4&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><ul><li>修改<code>build.sbt</code>对<code>Hello</code>项目添加<code>.enablePlugins(JavaAppPackaging)</code></li><li>重载，本地没有执行成功，所以下面的<code>dist</code>命令也就不能用。</li></ul><p>重载并创建.zip分发包：<code>dist</code></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sbt:Hello&gt; dist<br>[info] Wrote <span class="hljs-regexp">/tmp/</span>foo-build<span class="hljs-regexp">/target/</span>scala-<span class="hljs-number">2.12</span>/hello_2.<span class="hljs-number">12</span>-<span class="hljs-number">0.1</span>.<span class="hljs-number">0</span>-SNAPSHOT.pom<br>[info] Wrote <span class="hljs-regexp">/tmp/</span>foo-build<span class="hljs-regexp">/core/</span>target<span class="hljs-regexp">/scala-2.12/</span>hello-core_2.<span class="hljs-number">12</span>-<span class="hljs-number">0.1</span>.<span class="hljs-number">0</span>-SNAPSHOT.pom<br>[info] Your <span class="hljs-keyword">package</span> is ready in <span class="hljs-regexp">/tmp/</span>foo-build<span class="hljs-regexp">/target/u</span>niversal/hello-<span class="hljs-number">0.1</span>.<span class="hljs-number">0</span>-SNAPSHOT.zip<br></code></pre></td></tr></table></figure><p>应用容器化：</p><ul><li><code>Docker/publishLocal</code></li><li>运行容器化后的应用：<code>docker run hello:0.1.0-SNAPSHOT</code></li></ul><p>设置应用版本：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css">// build<span class="hljs-selector-class">.sbt</span><br>ThisBuild / version      := <span class="hljs-string">&quot;0.1.0&quot;</span><br>ThisBuild / scalaVersion := <span class="hljs-string">&quot;2.13.6&quot;</span><br>ThisBuild / organization := <span class="hljs-string">&quot;com.example&quot;</span><br><br>val scalaTest = <span class="hljs-string">&quot;org.scalatest&quot;</span> %% <span class="hljs-string">&quot;scalatest&quot;</span> % <span class="hljs-string">&quot;3.2.7&quot;</span><br>val gigahorse = <span class="hljs-string">&quot;com.eed3si9n&quot;</span> %% <span class="hljs-string">&quot;gigahorse-okhttp&quot;</span> % <span class="hljs-string">&quot;0.5.0&quot;</span><br>val playJson  = <span class="hljs-string">&quot;com.typesafe.play&quot;</span> %% <span class="hljs-string">&quot;play-json&quot;</span> % <span class="hljs-string">&quot;2.9.2&quot;</span><br><br>lazy val hello = (project in <span class="hljs-built_in">file</span>(<span class="hljs-string">&quot;.&quot;</span>))<br>  .<span class="hljs-built_in">aggregate</span>(helloCore)<br>  .<span class="hljs-built_in">dependsOn</span>(helloCore)<br>  .<span class="hljs-built_in">enablePlugins</span>(JavaAppPackaging)<br>  .<span class="hljs-built_in">settings</span>(<br>    name := <span class="hljs-string">&quot;Hello&quot;</span>,<br>    libraryDependencies += scalaTest % Test,<br>  )<br><br>lazy val helloCore = (project in <span class="hljs-built_in">file</span>(<span class="hljs-string">&quot;core&quot;</span>))<br>  .<span class="hljs-built_in">settings</span>(<br>    name := <span class="hljs-string">&quot;Hello Core&quot;</span>,<br>    libraryDependencies ++= <span class="hljs-built_in">Seq</span>(gigahorse, playJson),<br>    libraryDependencies += scalaTest % Test,<br>  )<br></code></pre></td></tr></table></figure><p>临时切换Scala版本：</p><ul><li><code>++2.12.14</code></li></ul><p>在Bash中直接运行sbt的命令：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">sbt <span class="hljs-built_in">clean</span> <span class="hljs-string">&quot;testOnly HelloSpec&quot;</span><br></code></pre></td></tr></table></figure><ul><li>这样程序运行起来会慢一些。</li><li>连续的开发的话，推荐使用sbt shell或者连续测试比如<code>~testQuick</code>。</li></ul><p><code>new</code>命令：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">$ sbt <span class="hljs-keyword">new</span> scala/scala-seed.g8<br>....<br>A minimal Scala <span class="hljs-keyword">project</span>.<br><br>name [My Something <span class="hljs-keyword">Project</span>]: hello<br><br>Template applied in ./hello<br></code></pre></td></tr></table></figure><ul><li>会创建一个简单的项目，要求输入项目名时输入<code>hello</code>，会在<code>hello/</code>下创建一个新项目。</li></ul><h3 id="sbt使用"><a href="#sbt使用" class="headerlink" title="sbt使用"></a>sbt使用</h3><p>项目的目录结构：</p><ul><li>base directory是包含项目的目录，这里称为项目根目录。</li><li>sbt使用和Maven一样的源码结构，源文件路径都是基于项目根目录的相对路径。</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stata">src/<br>  main/<br>    resources/<br>       &lt;files to <span class="hljs-keyword">include</span> <span class="hljs-keyword">in</span> main jar here&gt;<br>    <span class="hljs-keyword">scala</span>/<br>       &lt;main <span class="hljs-keyword">Scala</span> sources&gt;<br>    <span class="hljs-keyword">scala</span>-2.12/<br>       &lt;main <span class="hljs-keyword">Scala</span> 2.12 specific sources&gt;<br>    java/<br>       &lt;main Java sources&gt;<br>  <span class="hljs-keyword">test</span>/<br>    resources<br>       &lt;files to <span class="hljs-keyword">include</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">test</span> jar here&gt;<br>    <span class="hljs-keyword">scala</span>/<br>       &lt;<span class="hljs-keyword">test</span> <span class="hljs-keyword">Scala</span> sources&gt;<br>    <span class="hljs-keyword">scala</span>-2.12/<br>       &lt;<span class="hljs-keyword">test</span> <span class="hljs-keyword">Scala</span> 2.12 specific sources&gt;<br>    java/<br>       &lt;<span class="hljs-keyword">test</span> Java sources&gt;<br></code></pre></td></tr></table></figure><ul><li>其他<code>src/</code>中的目录会被忽略，所有隐藏目录都会被忽略。</li><li>源码可以被放在根目录的<code>hello/app.scala</code>，对小项目是可行的。然而一般来说，人们倾向于将项目放在<code>src/main/</code>下面来保证事情能够有条理地进行。如果你自行管理定制了项目的构建的话，自定义源码的位置也是可行的。</li><li>sbt的构建定义文件：<code>build.sbt</code></li><li>除此之外，<code>project</code>目录中的<code>.scala</code>文件可以定义项目帮助文件和一次性的插件。</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">build.sbt<br><span class="hljs-keyword">project</span>/<br>  <span class="hljs-keyword">Dependencies</span>.scala<br></code></pre></td></tr></table></figure><ul><li>生成文件：<code>.class</code>，生成的<code>jar</code>，其他文件和文档等会被默认输出到<code>target</code>目录。</li><li>一般生成文件应该要排除在版本控制之外，在<code>.gitignore</code>中添加：</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">target</span>/<br></code></pre></td></tr></table></figure><p>运行：</p><ul><li>运行sbt shell：<code>sbt</code>无参数运行，进入sbt的提示符，有tab补全和执行历史。</li><li>编译：<code>compile</code></li><li>运行：<code>run</code></li><li>不进入sbt shell直接运行sbt命令：用<code>&quot;&quot;</code>包起来表示是一个命令，相对来说会慢一些。</li></ul><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">sbt <span class="hljs-built_in">clean</span> compile <span class="hljs-string">&quot;testOnly TestA TestB&quot;</span><br></code></pre></td></tr></table></figure><ul><li>会一次执行<code>clean compile testOnly</code>，<code>TestA TestB</code>是传给<code>testOnly</code>的参数。</li><li>保存文件时自动重编译运行测试：<code>~testQuick</code>。</li><li>命令加上<code>~</code>后会进入循环模式，保存文件都会自动运行。回车退出。</li><li>常用命令：</li></ul><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td>clean</td><td>Deletes all generated files (in the target directory).</td></tr><tr><td>compile</td><td>Compiles the main sources (in src&#x2F;main&#x2F;scala and src&#x2F;main&#x2F;java directories).</td></tr><tr><td>test</td><td>Compiles and runs all tests.</td></tr><tr><td>console</td><td>Starts the Scala interpreter with a classpath including the compiled sources and all dependencies. To return to sbt, type :quit, Ctrl+D (Unix), or Ctrl+Z (Windows).</td></tr><tr><td>run argument*</td><td>Runs the main class for the project in the same virtual machine as sbt.</td></tr><tr><td>package</td><td>Creates a jar file containing the files in src&#x2F;main&#x2F;resources and the classes compiled from src&#x2F;main&#x2F;scala and src&#x2F;main&#x2F;java.</td></tr><tr><td>help command</td><td>Displays detailed help for the specified command. If no command is provided, displays brief descriptions of all commands.</td></tr><tr><td>reload</td><td>Reloads the build definition (build.sbt, project&#x2F;<em>.scala, project&#x2F;</em>.sbt files). Needed if you change the build definition.</td></tr></tbody></table><h3 id="build-sbt"><a href="#build-sbt" class="headerlink" title="build.sbt"></a>build.sbt</h3><p><code>build.sbt</code>构建定义：</p><ul><li>指定sbt版本，这样就使用不同版本的sbt构建同一个项目了。如果指定的版本不可用，那么会自动下载。</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sbt</span>.version=<span class="hljs-number">1</span>.<span class="hljs-number">5</span>.<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><ul><li>构建定义（build definition）：</li><li>包含了一系列项目（<a href="https://www.scala-sbt.org/1.x/api/sbt/Project.html">Scala中的Project类型</a>），项目这个名词有一定的模糊性，所以其中的一个个项目一般将之称为子项目。</li><li>在<code>build.sbt</code>中可以定义一个在当前目录中的子项目：</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake">lazy val root = (<span class="hljs-keyword">project</span> in <span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;.&quot;</span>))<br>  .settings(<br>    name := <span class="hljs-string">&quot;Hello&quot;</span>,<br>    scalaVersion := <span class="hljs-string">&quot;2.12.7&quot;</span><br>  )<br></code></pre></td></tr></table></figure><ul><li>项目的名称在<code>.setting</code>方法中用一个键值对定义，key是<code>name</code>，值是一个字符串表示项目名称。</li><li><code>build.sbt</code>定义所有的子项目，包含一些的键值对称为<code>setting</code>表达式，使用一门build.sbt DSL（本质上其实就是Scala）来定义项目。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">ThisBuild / organization := <span class="hljs-string">&quot;com.example&quot;</span><br>ThisBuild / scalaVersion := <span class="hljs-string">&quot;2.12.14&quot;</span><br>ThisBuild / version      := <span class="hljs-string">&quot;0.1.0-SNAPSHOT&quot;</span><br><br>lazy val root = (project in file(<span class="hljs-string">&quot;.&quot;</span>))<br>  .settings(<br>    name := <span class="hljs-string">&quot;hello&quot;</span><br>  )<br></code></pre></td></tr></table></figure><ul><li><p>看一看这门DSL的定义：</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgScala_sbt_dsl_setting_expression.png"></p><p>每一个都叫做一个setting expression，其中的一些又被叫做task expression。</p></li><li><p>一个setting expression包含三部分：</p><ol><li>左边是key。</li><li>操作符，这个例子中是<code>:=</code></li><li>右边是setting body。</li></ol></li><li><p>一个key的类型是<code>sbt.SettingKey[T] sbt.TaskKey[T] sbt.InputKey[T]</code>其中一者的实例，T是期望的值类型。</p></li><li><p>比如<code>name</code>就绑定到了<code>SettingKey[String]</code>类型，给个其他类型比如整数的话就会编译错误。</p></li><li><p>在<code>build.sbt</code>中可以穿插<code>val</code> <code>lazy val</code> <code>def</code>，但是不能有顶层<code>object class</code>定义。</p></li></ul><p>expression的key：</p><ul><li>三种类型：<ul><li><code>SettingKey[T]</code> 值仅在加载子项目时计算一次，然后保持。</li><li><code>TaskKey[T]</code> 值被称为一个任务（task），每次都会重新计算（何时？），存在潜在的副作用。</li><li><code>InputKey[T]</code> 值是有命令行输入作为参数的任务，细节见<a href="https://www.scala-sbt.org/1.x/docs/Input-Tasks.html">Input Tasks</a>。</li></ul></li><li>内建的keys就是<code>sbt.Keys</code>单例伴生对象的域。<code>build.sbt</code>隐式导入<code>import sbt.Keys._</code>，<code>sbt.Keys.name</code>就是<code>name</code>，所以其实就是对这些字段做赋值。</li><li>自定义key：使用各自的方法<code>settingKey taskKey inputKey</code>，每个方法需要一个value的类型和描述。key的名称就是被赋值到的引用变量名称。</li><li>定义一个自定义key，名称是<code>hello</code>，类型是<code>TaskKey</code>，对应值类型是<code>Unit</code>：</li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">lazy</span> <span class="hljs-keyword">val</span> hello <span class="hljs-operator">=</span> taskKey[Unit](<span class="hljs-string">&quot;An example task&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>所有这种定义都在设置前被求值，无论定义在文件什么位置。</li><li>一般来说，使用<code>lazy val</code>而不是<code>val</code>来避免初始化顺序导致的问题。</li><li>Task和Setting区别：<ul><li>Task是任务，比如<code>compile</code> <code>package</code>都是<code>sbt.Keys</code>中的域，同时也是sbt shell中可执行的命令。应该返回<code>Unit</code>或者返回和这个任务相关的值，比如<code>package</code>是<code>TaskKey[File]</code>值是其创建的jar文件。</li><li>每一次开始一个任务，比如sbt shell中执行<code>compile</code>，sbt都会重新跑（仅）一次这个任务相关的所有任务。</li><li>而Setting仅仅只是一个朴素的设置项。</li></ul></li></ul><p>定义任务和设置：</p><ul><li>使用<code>:=</code>可以将一个设置或者一项计算任务赋值。设置只会在记载项目时计算一次，任务则会在每次执行这个任务被执行时重新执行。</li><li>新建一个任务：</li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">lazy</span> <span class="hljs-keyword">val</span> hello <span class="hljs-operator">=</span> taskKey[Unit](<span class="hljs-string">&quot;An example task&quot;</span>)<br><br><span class="hljs-keyword">lazy</span> <span class="hljs-keyword">val</span> root <span class="hljs-operator">=</span> (project <span class="hljs-keyword">in</span> file(<span class="hljs-string">&quot;.&quot;</span>))<br>  .settings(<br>    hello <span class="hljs-operator">:=</span> &#123; println(<span class="hljs-string">&quot;Hello!&quot;</span>) &#125;<br>  )<br></code></pre></td></tr></table></figure><ul><li>任务也在<code>.settings</code>中被赋值。</li><li>每次在sbt shell中执行<code>hello</code>都会执行其中<code>println</code>语句。</li><li>定义设置的话已经说过。</li><li>从类型系统的视角来看，对任务赋值得到一个<code>Setting[Task[T]]</code>，对设置赋值得到<code>Setting[T]</code>。<code>T Task[T]</code>的区别有一层隐含的含义：一个设置不能依赖于一个任务。因为设置仅记载是求值一次不会每次都重新运行。</li></ul><p>sbt shell中的key：</p><ul><li>sbt shell中可以输入任何任务名称都会运行该任务，因为这个任务名称是key。运行该任务但并不会显示运行结果值（也就是返回值，类型就是<code>taskKey[T]</code>中的<code>T</code>），要显示结果值，应该使用<code>show &lt;task name&gt;</code>而不是单纯的<code>&lt;task name&gt;</code>。</li><li>如果输入设置的key的话，会显示设置的值。</li><li>要知道一个key的更多信息，可以使用<code>inspect &lt;keyname&gt;</code>。某些信息现在看起来可能不知道含义，但最顶上有类型和简要描述。</li></ul><p>在<code>build.sbt</code>中导入信息：</p><ul><li>比如：</li></ul><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> sbt._<br><span class="hljs-keyword">import</span> Keys._<br></code></pre></td></tr></table></figure><ul><li>中间不能有空行。</li><li>如果有自动插件（<a href="https://www.scala-sbt.org/1.x/api/sbt/AutoPlugin.html"><code>sbt.AutoPlugin</code></a>，可以从其派生实现自己的插件），那么在其中的<code>autoImport</code>单例对象下的名称会被自动导入。</li></ul><p>Bare .sbt build definition：</p><ul><li>也就是裸的构建定义，设置可以被直接写到<code>.sbt</code>而不是项目的<code>.setting(...)</code>调用下，称之为bare style。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">ThisBuild / version := <span class="hljs-string">&quot;1.0&quot;</span><br>ThisBuild / scalaVersion := <span class="hljs-string">&quot;2.12.14&quot;</span><br></code></pre></td></tr></table></figure><ul><li>这种语法推荐用来写在<code>ThisBuild</code>作用域下的设置和添加插件。后续会有作用域和插件的说明。</li></ul><p>添加库依赖：</p><ul><li>为了能够依赖第三方库，有两种方式：</li><li>一是将jar文件直接放在<code>lib/</code>（未管理的依赖）目录下，第二种是添加管理的依赖，通过在<code>.setting(..)</code>调用中对<code>libraryDependencies</code>key做<code>+=</code>操作做到。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go">val derby = <span class="hljs-string">&quot;org.apache.derby&quot;</span> %% <span class="hljs-string">&quot;derby&quot;</span> % <span class="hljs-string">&quot;10.4.1.3&quot;</span><br><br>ThisBuild / organization := <span class="hljs-string">&quot;com.example&quot;</span><br>ThisBuild / scalaVersion := <span class="hljs-string">&quot;2.12.14&quot;</span><br>ThisBuild / version      := <span class="hljs-string">&quot;0.1.0-SNAPSHOT&quot;</span><br><br>lazy val root = (project in file(<span class="hljs-string">&quot;.&quot;</span>))<br>  .settings(<br>    name := <span class="hljs-string">&quot;Hello&quot;</span>,<br>    libraryDependencies += derby<br>  )<br></code></pre></td></tr></table></figure><ul><li>包含包的组织、包名、和包的版本。可以定义变量来复用。<code>%</code>运算符被用来从字符串构建一个模块ID。</li></ul><h3 id="多项目构建"><a href="#多项目构建" class="headerlink" title="多项目构建"></a>多项目构建</h3><p>多个项目定义：</p><ul><li>在一次构建中编译多个相关联的子项目是很有用的，特别是其间存在依赖，想更改他们所有的时候。</li><li>每个子项目都有自己的目录，构建时都会生成自己的jar文件，</li><li>项目使用<code>lazy val</code>定义一个<a href="https://www.scala-sbt.org/1.x/api/sbt/Project.html">sbt.Project</a>来实现。</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">lazy val util = (<span class="hljs-keyword">project</span> in <span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;util&quot;</span>))<br><br>lazy val core = (<span class="hljs-keyword">project</span> in <span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;core&quot;</span>))<br></code></pre></td></tr></table></figure><ul><li>这个<code>val</code>的不变量名称被用做子项目的ID（也即是项目名称），在sbt shell中也用来指代一个子项目。</li><li>后面的<code>in file()</code>调用指定他们的base directory是可选的，目录名就是他们的名称。</li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">lazy</span> <span class="hljs-keyword">val</span> util <span class="hljs-operator">=</span> project<br><br><span class="hljs-keyword">lazy</span> <span class="hljs-keyword">val</span> core <span class="hljs-operator">=</span> project<br></code></pre></td></tr></table></figure><p>公共设置；</p><ul><li>为了分离出跨子项目的设置，可以将其定义在<code>ThisBuild</code>范围下。<code>ThisBuild</code>表现的像一个普通的子项目名称一样使用，其下用来定义默认值。</li><li>如果定义了多个子项目，并且子项目下没有定义比如<code>scalaVersion</code>这个key，就会查找<code>ThisBuild / scalaVersion</code>。</li><li>这样定义的限制是右边的值只能是纯粹的值或者在<code>Global</code>&#x2F;<code>ThisBuild</code>下的设置。</li><li>子项目范围下没有默认值。</li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">ThisBuild <span class="hljs-operator">/</span> organization <span class="hljs-operator">:=</span> <span class="hljs-string">&quot;com.example&quot;</span><br>ThisBuild <span class="hljs-operator">/</span> version      <span class="hljs-operator">:=</span> <span class="hljs-string">&quot;0.1.0-SNAPSHOT&quot;</span><br>ThisBuild <span class="hljs-operator">/</span> scalaVersion <span class="hljs-operator">:=</span> <span class="hljs-string">&quot;2.12.14&quot;</span><br><br><span class="hljs-keyword">lazy</span> <span class="hljs-keyword">val</span> core <span class="hljs-operator">=</span> (project <span class="hljs-keyword">in</span> file(<span class="hljs-string">&quot;core&quot;</span>))<br>  .settings(<br>    <span class="hljs-comment">// other settings</span><br>  )<br><br><span class="hljs-keyword">lazy</span> <span class="hljs-keyword">val</span> util <span class="hljs-operator">=</span> (project <span class="hljs-keyword">in</span> file(<span class="hljs-string">&quot;util&quot;</span>))<br>  .settings(<br>    <span class="hljs-comment">// other settings</span><br>  )<br></code></pre></td></tr></table></figure><ul><li>重载后，现在<code>versoin</code>和其他的设置在所有子项目中都会生效。</li></ul><p>另一种定义公共设置的方式：</p><ul><li>将默认设置放在<code>commonSettings</code>下，然后添加到所有子项目中<code>.setting()</code>调用中。</li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">lazy</span> <span class="hljs-keyword">val</span> commonSettings <span class="hljs-operator">=</span> Seq(<br>  target <span class="hljs-operator">:=</span> &#123; baseDirectory.value <span class="hljs-operator">/</span> <span class="hljs-string">&quot;target2&quot;</span> &#125;<br>)<br><br><span class="hljs-keyword">lazy</span> <span class="hljs-keyword">val</span> core <span class="hljs-operator">=</span> (project <span class="hljs-keyword">in</span> file(<span class="hljs-string">&quot;core&quot;</span>))<br>  .settings(<br>    commonSettings,<br>    <span class="hljs-comment">// other settings</span><br>  )<br><br><span class="hljs-keyword">lazy</span> <span class="hljs-keyword">val</span> util <span class="hljs-operator">=</span> (project <span class="hljs-keyword">in</span> file(<span class="hljs-string">&quot;util&quot;</span>))<br>  .settings(<br>    commonSettings,<br>    <span class="hljs-comment">// other settings</span><br>  )<br></code></pre></td></tr></table></figure><p>项目间依赖：</p><ul><li>项目间可以完全独立，也通常可能会有某种方式的依赖。</li><li>有两种方式的依赖：aggregate and classpath，用<code>.aggregate .dependsOn</code>定义。</li><li>聚合用来广播命令，类路径依赖则是指项目之间存在依赖关系。</li></ul><p>聚合（Aggregation）：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmake">lazy val root = (<span class="hljs-keyword">project</span> in <span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;.&quot;</span>))<br>  .aggregate(util, core)<br><br>lazy val util = (<span class="hljs-keyword">project</span> in <span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;util&quot;</span>))<br><br>lazy val core = (<span class="hljs-keyword">project</span> in <span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;core&quot;</span>))<br></code></pre></td></tr></table></figure><ul><li>这种方式在聚合项目上运行任务时会同样在它聚合的所有子项目上运行。</li><li>比如上面的子项目定义，编译<code>root</code>是会同时编译<code>util core</code>。</li><li>通过在做聚合的项目中定义设置可以修改这种默认行为：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">lazy val root = (project <span class="hljs-keyword">in</span> <span class="hljs-built_in">file</span>(<span class="hljs-string">&quot;.&quot;</span>))<br>  <span class="hljs-selector-class">.aggregate</span>(util, core)<br>  <span class="hljs-selector-class">.settings</span>(<br>    update / aggregate := false<br>  )<br><br><span class="hljs-selector-attr">[...]</span><br></code></pre></td></tr></table></figure><ul><li>上面设置表示在root项目上执行<code>update</code>是就不会在被聚合的子项目上执行。<code>update / aggregate</code>是update作用域下的key。</li></ul><p>类路径依赖：</p><ul><li>一个项目可能依赖另一个项目的代码，通过<code>.dependsOn(proj1, proj2, ...)</code>方法调用来定义。依赖之后就会被添加到classpth，从而能够导入。</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">lazy</span> <span class="hljs-keyword">val</span> core = project.depends<span class="hljs-constructor">On(<span class="hljs-params">util</span>)</span><br></code></pre></td></tr></table></figure><ul><li>现在在<code>core</code>中就可以调用<code>util</code>中的代码了。这同样也确定了代码编译顺序必然是先<code>util</code>后<code>core</code>。</li><li><code>core dependsOn(util)</code>意味着<code>core</code>的编译配置依赖<code>util</code>，也可以显式通过<code>dependsOn(util % &quot;compile-&gt;compile&quot;)</code>这种方式来指定，<code>compile-&gt;compile</code>中的<code>-&gt;</code>意味着依赖。因此如果是<code>&quot;test-&gt;compile&quot;</code>就以为着<code>core</code>的<code>test</code>配置依赖<code>util</code>的<code>compile</code>配置。可以忽略后面的<code>-&gt;config</code>部分意味着就是<code>-&gt;comile</code>。</li><li>一个比较有用的定义是<code>test-&gt;test</code>意味着测试<code>core</code>是先测试<code>util</code>。</li><li>可以用分好分隔：<code>dependsOn(util % &quot;test-&gt;test;compile-&gt;compile&quot;)</code>。</li></ul><p>项目间依赖：</p><ul><li><p>在大项目中，会有许多文件，持续监视文件修改并重新编译将会消耗大量磁盘和IO资源。</p></li><li><p>sbt使用</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">trackInternalDependencies</span><br></code></pre></td></tr></table></figure><p>和</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">exportToInternal</span><br></code></pre></td></tr></table></figure><p>设置用来控制执行</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">compile</span><br></code></pre></td></tr></table></figure><p>任务时是否触发独立子项目的编译。两个key都接受三个输入：</p><ul><li><code>TrackLevel.NoTracking</code></li><li><code>TrackLevel.TrackIfMissing</code></li><li><code>TrackLevel.TrackAlways</code> 默认是这一项。</li><li>含义显而易见。</li></ul></li><li><p><code>trackInternalDependencies</code>设置如果是<code>TrackLevel.TrackIfMissing</code>，那么sbt将不会尝试自动编译项目间依赖，除非输出目录中的<code>*.class</code>文件缺失了（或者<code>exportJars</code>时jar文件缺失了）。</p></li><li><p>当被设置为<code>TrackLevel.NoTracking</code>，项目将依赖将被跳过。但是classpth仍然会被添加，依赖图也会显示他们还是依赖的。这么做的目的是为了减小检查文件修改的IO负担。</p></li><li><p>设置方法：</p></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake">ThisBuild / trackInternalDependencies := TrackLevel.TrackIfMissing<br>ThisBuild / exportJars := <span class="hljs-keyword">true</span><br><br>lazy val root = (<span class="hljs-keyword">project</span> in <span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;.&quot;</span>))<br>  .aggregate(....)<br></code></pre></td></tr></table></figure><ul><li><code>exportToInternal</code>设置允许依赖于当前项目的子项目跳过内部追踪。用在一个子项目上，用在当前不关心的依赖于其他项目的子项目，当其他项目发生修改重新编译，它也不会重新编译。</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">lazy val dontTrackMe = (project <span class="hljs-keyword">in</span> <span class="hljs-built_in">file</span>(<span class="hljs-string">&quot;dontTrackMe&quot;</span>))<br>  <span class="hljs-selector-class">.settings</span>(<br>    exportToInternal := TrackLevel<span class="hljs-selector-class">.NoTracking</span><br>  )<br></code></pre></td></tr></table></figure><ul><li><code>trackInternalDependencies</code>和<code>exportToInternal</code>，比如当前修改项目时A，A依赖B，C依赖A，那么前者是针对B也就是当前项目依赖的那些子项目，后者针对C也就是依赖当前项目的子项目。这是我的理解，应该是这个样子！</li><li>如果没理解错的话，项目的依赖关系（指classpth，会调用的那种依赖）应该是一棵树，而不会有环图。</li></ul><p>默认的根项目：</p><ul><li>如果没有为最顶层目录<code>.</code>定义项目，那么sbt会创建一个默认的然后在构建时聚合所有子项目。</li></ul><p>与项目的交互：</p><ul><li><code>projects</code>列出所有子项目。</li><li><code>proejct</code>列出当前项目，<code>project &lt;projectname&gt;</code>切换项目。运行一个任务比如<code>compile</code>时是针对当前项目。</li><li>也可以通过指定项目名称来在某个项目上运行任务：<code>subProjectID / &lt;taskname&gt;</code>。</li></ul><p>公共代码：</p><ul><li><code>.sbt</code>文件之间的定义是不共享的。</li><li>为了能够在不同<code>.sbt</code>之间共享代码，需要在根目录的<code>project/</code>下面（子目录中的是没有用的，会被忽略，只有根目录中的才会有效）定义一个或多个scala文件。后续会详述。</li></ul><p>子项目中的<code>.sbt</code>文件：</p><ul><li>所有的<code>.sbt</code>文件都会被合并到一个整体的构建（build）中来，但是只在他们自己的范围内起作用。定义不会被共享。</li><li>比如顶层<code>hello</code>目录中初始化<code>sbt</code>，<code>.</code>定义根项目<code>hello</code>，<code>hello/foo/ hello/bar</code>分别定义项目foo和bar并且有自己的<code>build.sbt</code>并把项目定义在了其中，其中定义了自己的不同版本。</li><li>那么执行<code>show version</code>的结果就是这样的：</li></ul><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs excel">&gt; show version<br>[<span class="hljs-built_in">info</span>] hello-foo/*<span class="hljs-symbol">:ve</span>rsion<br>[<span class="hljs-built_in">info</span>]  <span class="hljs-number">0.7</span><br>[<span class="hljs-built_in">info</span>] hello-bar/*<span class="hljs-symbol">:ve</span>rsion<br>[<span class="hljs-built_in">info</span>]  <span class="hljs-number">0.9</span><br>[<span class="hljs-built_in">info</span>] hello/*<span class="hljs-symbol">:ve</span>rsion<br>[<span class="hljs-built_in">info</span>]  <span class="hljs-number">0.5</span><br></code></pre></td></tr></table></figure><ul><li>所有的<code>build.sbt</code>都是整个构建的一部分，但都有自己的作用范围。</li><li>可以分开定义，也可以合起来定义<code>build.sbt</code>，项目很多时都定义在根目录中可能就太复杂了，定义在子目录找起来好像又挺麻烦。</li><li>风格选择：<ul><li>子项目的设置在子项目的<code>.sbt</code>中定义，根<code>build.sbt</code>中只定义最小的项目声明，形如：<code>lazy val foo = (project in file(&quot;foo&quot;))</code>不修改任何设置。</li><li>推荐是将所有项目定义全都放在根目录中的<code>build.sbt</code>，保持项目定义在一个文件中。</li><li>都可以，这完全取决于你。</li></ul></li></ul><h3 id="任务图"><a href="#任务图" class="headerlink" title="任务图"></a>任务图</h3><p>任务图：</p><ul><li>除了将设置视作一个个键值对，更好的比喻其实是以有向无环图（DAG）。边的方向表示<strong>在之前发生</strong>，称之为任务图（Task Graph） 。</li><li>Setting&#x2F;Task expression就是前面的在<code>.setting(...)</code>中定义了设置或者任务的表达式。</li></ul><p>任务间依赖：</p><ul><li>使用一个特殊的<code>.value</code>方法调用来解释任务之间的依赖。</li><li>直到非常熟悉<code>hello.sbt</code>之前，都推荐将<code>.value</code>调用放在task定义块中最上方。</li><li>除了使用一个不变量赋值的方式，也可以使用内联的<code>.value</code>调用，更加间接，也不用去想变量名。</li><li><code>.value</code>调用会在进入task body之前被求值，这是需要非常注意的。</li><li>测试：</li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">lazy</span> <span class="hljs-keyword">val</span> hi <span class="hljs-operator">=</span> taskKey[Unit](<span class="hljs-string">&quot;An example task for dependency&quot;</span>)<br><br><span class="hljs-keyword">lazy</span> <span class="hljs-keyword">val</span> hello <span class="hljs-operator">=</span> (project <span class="hljs-keyword">in</span> file(<span class="hljs-string">&quot;.&quot;</span>))<br>  .aggregate(helloCore)<br>  .dependsOn(helloCore)<br>  <span class="hljs-comment">// .enablePlugins(JavaAppPackaging)</span><br>  .settings(<br>    name <span class="hljs-operator">:=</span> <span class="hljs-string">&quot;Hello&quot;</span>,<br>    libraryDependencies <span class="hljs-operator">+=</span> scalaTest <span class="hljs-operator">%</span> Test,<br>    hi <span class="hljs-operator">:=</span> &#123;<br>      <span class="hljs-keyword">val</span> ur <span class="hljs-operator">=</span> update.value <span class="hljs-comment">// streams task happens-before hi</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-keyword">val</span> x <span class="hljs-operator">=</span> clean.value <span class="hljs-comment">// clean task happens-before hi</span><br>      &#125;<br>    &#125;<br>  )<br></code></pre></td></tr></table></figure><ul><li>此时任务<code>hi</code>就会依赖于任务<code>update</code>和<code>clean</code>，并且这两个任务是在进入<code>hi</code>任务体前执行的，且不确定两者先后顺序，可先可后可并行。</li><li>在任务体中调用<code>.value</code>仅用来表明任务之间的依赖关系。</li><li>先编译项目，执行<code>hi</code>后会发现<code>target/scala-2.13/clsses/</code>被清除，就是因为执行了<code>clean</code>任务。</li><li>查看任务间依赖：在<code>Dependencies:</code>后可以看到。</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">inspect hi</span><br></code></pre></td></tr></table></figure><ul><li>执行<code>inspect tree compile</code>会看到<code>compile</code>命令的依赖树，什么含义暂时不知。</li><li>sbt中的构建任务依赖是自动的而不是显式定义的，如果通过<code>.value</code>定义了，那么会造成任务间依赖。</li></ul><p>任务依赖设置：</p><ul><li>在任务体定义中调用设置的<code>.value</code>就行。</li><li>但设置是不能依赖任务的，因为设置只在重载时执行一次，而任务一直都可以执行。</li></ul><p>设置依赖设置：</p><ul><li>可以将设置看做仅在记加载是执行一次的任务，所以设置也可以依赖设置。</li><li>同样其中调用<code>.value</code>就可以依赖，并且执行时求值：</li><li>一个实际的例子：当Scala版本是2.11时讲将<code>Compile / scalaSource</code>定义到一个不同的目录。</li></ul><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs coq">Compile / scalaSource := &#123;<br>  val old = (Compile / scalaSource).value<br>  scalaBinaryVersion.value <span class="hljs-keyword">match</span> &#123;<br>    <span class="hljs-built_in">case</span> <span class="hljs-string">&quot;2.11&quot;</span> =&gt; baseDirectory.value / <span class="hljs-string">&quot;src-2.11&quot;</span> / <span class="hljs-string">&quot;main&quot;</span> / <span class="hljs-string">&quot;scala&quot;</span><br>    <span class="hljs-built_in">case</span> <span class="hljs-keyword">_</span>      =&gt; old<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再看<code>build.sbt</code>DSL：</p><ul><li>构建了一个设置和任务的有向无环图。</li><li>设置表达式编码了设置、任务以及他们之间的依赖。</li><li>这种结构在Make&#x2F;Ant&#x2F;Rake等构建工具中很常见。</li><li>基于流的编程，减少了重复过程，好处：</li><li>一个任务仅仅只会执行一次，即使它被多个任务所依赖比如<code>Compile / compile</code>。</li><li>基于任务图，任务引擎会安排不相关的任务并行执行。</li><li>关注点分离和灵活性，任务图让用户可以将任务以不同的方式连接到一起，sbt和各种插件可以提供各种各样的特性比如库依赖管理等。</li></ul><p>总结：</p><ul><li>核心就是任务图，任务之间的关系是一个有向无环图。</li><li><code>hello.sbt</code>是一个设计来面向依赖编程（dependency-oriented programming）的DSL，或者叫基于流（flow）的编程。就像Makefile。语法就像Scala，但并不等同于Scala，语义上是有区别的。</li><li>基于流的编程的核心是：减少重复过程、并行处理和定制化。</li></ul><h3 id="更多内容"><a href="#更多内容" class="headerlink" title="更多内容"></a>更多内容</h3><p>更多内容就不翻译了，官网上第一章也有中文翻译。需要时再去阅读，现阶段感觉都用不到，真写项目了再看不迟。</p><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><p>TODO</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结：</p><ul><li>看起来是一门静态类型语言，提供了很其强大的类型推导，可以一定程度上实现隐式静态类型，但写起来如果高度依赖类型推导的话会和动态类型一样简洁，仅需提供少量必须的类型，只是有点牺牲可读性。</li><li>函数式编程很有趣。</li><li>语法糖太太太多了，虽然看起来更简洁了，但是读起来不一定更简单，学起来心智负担也更大。</li><li>运算符非常灵活，目前遇到过的运算符最灵活的语言。</li><li>并发编程还没有学，TODO。</li><li>Scala语法确实有点太强大了，当然软件工程的东西都是tradeoff，写起来爽用起来复杂学起来难。</li></ul><p>Scala是我目前学过的最舒服的语言，很多特点简直太棒了，如果此生只能选一门语言的话，那我可能真会选这门刚学了几天的语言。吸引我的点：</p><ul><li>函数式编程，和集合的映射推导结合起来很有用。</li><li>类型推导，像动态语言用起来的感觉，但也有编译期类型检查，再加上隐式类型转换，真我全都要。</li><li>各种能简则简的语法糖，初看可能很诧异，习惯之后只能说去**的java，简洁而不简单。</li><li>运算符重载，容易被滥用，但用得好会使代码进一步简化，当然各式各样的运算符会进一步增加读代码的难度。</li><li>更加纯粹的面向对象，万物皆是对象。</li></ul>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Scala</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据中台-结束语_数据中台从哪里来，要到哪里去？</title>
    <link href="/2022/05/28/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-%E7%BB%93%E6%9D%9F%E8%AF%AD_%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E4%BB%8E%E5%93%AA%E9%87%8C%E6%9D%A5%EF%BC%8C%E8%A6%81%E5%88%B0%E5%93%AA%E9%87%8C%E5%8E%BB%EF%BC%9F/"/>
    <url>/2022/05/28/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-%E7%BB%93%E6%9D%9F%E8%AF%AD_%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E4%BB%8E%E5%93%AA%E9%87%8C%E6%9D%A5%EF%BC%8C%E8%A6%81%E5%88%B0%E5%93%AA%E9%87%8C%E5%8E%BB%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="585cd98feaff9cd7fe2517c0003dfe31c4d3e3085062a2552cd4a234332c99b1"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数据中台</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据中台-15_数据中台在网易电商业务的最佳实践</title>
    <link href="/2022/05/28/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-15_%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E5%9C%A8%E7%BD%91%E6%98%93%E7%94%B5%E5%95%86%E4%B8%9A%E5%8A%A1%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <url>/2022/05/28/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-15_%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E5%9C%A8%E7%BD%91%E6%98%93%E7%94%B5%E5%95%86%E4%B8%9A%E5%8A%A1%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5e6c4ee31711c58038495476050c3ef103934b2462a7d60b32e85a72f94a1cd7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数据中台</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据中台-14_数据被加工后，你还要学会使用和管理数据</title>
    <link href="/2022/05/28/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-14-%E6%95%B0%E6%8D%AE%E8%A2%AB%E5%8A%A0%E5%B7%A5%E5%90%8E%EF%BC%8C%E4%BD%A0%E8%BF%98%E8%A6%81%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8%E5%92%8C%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE/"/>
    <url>/2022/05/28/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-14-%E6%95%B0%E6%8D%AE%E8%A2%AB%E5%8A%A0%E5%B7%A5%E5%90%8E%EF%BC%8C%E4%BD%A0%E8%BF%98%E8%A6%81%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8%E5%92%8C%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="03d164c8ae3299209bbeb07c1852db488e6af4f97c1b67689156ba0175e8b097"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数据中台</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据中台-13_数据研发就只是写代码吗？</title>
    <link href="/2022/05/28/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-13_%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B0%B1%E5%8F%AA%E6%98%AF%E5%86%99%E4%BB%A3%E7%A0%81%E5%90%97%EF%BC%9F/"/>
    <url>/2022/05/28/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-13_%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B0%B1%E5%8F%AA%E6%98%AF%E5%86%99%E4%BB%A3%E7%A0%81%E5%90%97%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="56e8c4866f6315c00ff631f2c15be76c09958dc0bfc94bbec75c5fe1c9410eb4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数据中台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据中台</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据中台-12_数据的台子搭完了，但你还得想好戏该怎么唱</title>
    <link href="/2022/05/28/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-12-%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%B0%E5%AD%90%E6%90%AD%E5%AE%8C%E4%BA%86%EF%BC%8C%E4%BD%86%E4%BD%A0%E8%BF%98%E5%BE%97%E6%83%B3%E5%A5%BD%E6%88%8F%E8%AF%A5%E6%80%8E%E4%B9%88%E5%94%B1/"/>
    <url>/2022/05/28/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-12-%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%B0%E5%AD%90%E6%90%AD%E5%AE%8C%E4%BA%86%EF%BC%8C%E4%BD%86%E4%BD%A0%E8%BF%98%E5%BE%97%E6%83%B3%E5%A5%BD%E6%88%8F%E8%AF%A5%E6%80%8E%E4%B9%88%E5%94%B1/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3e55e1fef324b77991599eeceefdb2577865a48d1765c3908c0cf44f51bbd617"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数据中台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据中台</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据中台-11_怎么一劳永逸地解决数据安全问题</title>
    <link href="/2022/05/28/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-11-%E6%80%8E%E4%B9%88%E4%B8%80%E5%8A%B3%E6%B0%B8%E9%80%B8%E5%9C%B0%E8%A7%A3%E5%86%B3%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/28/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-11-%E6%80%8E%E4%B9%88%E4%B8%80%E5%8A%B3%E6%B0%B8%E9%80%B8%E5%9C%B0%E8%A7%A3%E5%86%B3%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c16b4ce7fe7f0a0234e457d433f61659351157b68c04b05ad858fbbdca0bc636"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数据中台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据中台</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo-Fluid主题-页面美化效果实现</title>
    <link href="/2022/05/28/hexo-Fluid%E4%B8%BB%E9%A2%98-%E9%A1%B5%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/05/28/hexo-Fluid%E4%B8%BB%E9%A2%98-%E9%A1%B5%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="添加鼠标点击爱心效果"><a href="#添加鼠标点击爱心效果" class="headerlink" title="添加鼠标点击爱心效果"></a>添加鼠标点击爱心效果</h3><p>在 \themes\fluid\source\js （其中fluid为你主题的文件夹名，即在自己的主题中进行操作）下新建文件 love.js，在 love.js 文件中添加以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">!<span class="hljs-keyword">function</span>(<span class="hljs-params">e,t,a</span>)&#123;<span class="hljs-keyword">function</span> <span class="hljs-title function_">n</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">c</span>(<span class="hljs-string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),<span class="hljs-title function_">o</span>(),<span class="hljs-title function_">r</span>()&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">r</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> e=<span class="hljs-number">0</span>;e&lt;d.<span class="hljs-property">length</span>;e++)d[e].<span class="hljs-property">alpha</span>&lt;=<span class="hljs-number">0</span>?(t.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(d[e].<span class="hljs-property">el</span>),d.<span class="hljs-title function_">splice</span>(e,<span class="hljs-number">1</span>)):(d[e].<span class="hljs-property">y</span>--,d[e].<span class="hljs-property">scale</span>+=<span class="hljs-number">.004</span>,d[e].<span class="hljs-property">alpha</span>-=<span class="hljs-number">.013</span>,d[e].<span class="hljs-property">el</span>.<span class="hljs-property">style</span>.<span class="hljs-property">cssText</span>=<span class="hljs-string">&quot;left:&quot;</span>+d[e].<span class="hljs-property">x</span>+<span class="hljs-string">&quot;px;top:&quot;</span>+d[e].<span class="hljs-property">y</span>+<span class="hljs-string">&quot;px;opacity:&quot;</span>+d[e].<span class="hljs-property">alpha</span>+<span class="hljs-string">&quot;;transform:scale(&quot;</span>+d[e].<span class="hljs-property">scale</span>+<span class="hljs-string">&quot;,&quot;</span>+d[e].<span class="hljs-property">scale</span>+<span class="hljs-string">&quot;) rotate(45deg);background:&quot;</span>+d[e].<span class="hljs-property">color</span>+<span class="hljs-string">&quot;;z-index:99999&quot;</span>);<span class="hljs-title function_">requestAnimationFrame</span>(r)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">o</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">var</span> t=<span class="hljs-string">&quot;function&quot;</span>==<span class="hljs-keyword">typeof</span> e.<span class="hljs-property">onclick</span>&amp;&amp;e.<span class="hljs-property">onclick</span>;e.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;t&amp;&amp;<span class="hljs-title function_">t</span>(),<span class="hljs-title function_">i</span>(e)&#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">i</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">var</span> a=t.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);a.<span class="hljs-property">className</span>=<span class="hljs-string">&quot;heart&quot;</span>,d.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">el</span>:a,<span class="hljs-attr">x</span>:e.<span class="hljs-property">clientX</span>-<span class="hljs-number">5</span>,<span class="hljs-attr">y</span>:e.<span class="hljs-property">clientY</span>-<span class="hljs-number">5</span>,<span class="hljs-attr">scale</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">alpha</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">color</span>:<span class="hljs-title function_">s</span>()&#125;),t.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(a)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">var</span> a=t.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;style&quot;</span>);a.<span class="hljs-property">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>;<span class="hljs-keyword">try</span>&#123;a.<span class="hljs-title function_">appendChild</span>(t.<span class="hljs-title function_">createTextNode</span>(e))&#125;<span class="hljs-keyword">catch</span>(t)&#123;a.<span class="hljs-property">styleSheet</span>.<span class="hljs-property">cssText</span>=e&#125;t.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;head&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(a)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">s</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span><span class="hljs-string">&quot;rgb(&quot;</span>+~~(<span class="hljs-number">255</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())+<span class="hljs-string">&quot;,&quot;</span>+~~(<span class="hljs-number">255</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())+<span class="hljs-string">&quot;,&quot;</span>+~~(<span class="hljs-number">255</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())+<span class="hljs-string">&quot;)&quot;</span>&#125;<span class="hljs-keyword">var</span> d=[];e.<span class="hljs-property">requestAnimationFrame</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span> e.<span class="hljs-property">requestAnimationFrame</span>||e.<span class="hljs-property">webkitRequestAnimationFrame</span>||e.<span class="hljs-property">mozRequestAnimationFrame</span>||e.<span class="hljs-property">oRequestAnimationFrame</span>||e.<span class="hljs-property">msRequestAnimationFrame</span>||<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-built_in">setTimeout</span>(e,<span class="hljs-number">1e3</span>/<span class="hljs-number">60</span>)&#125;&#125;(),<span class="hljs-title function_">n</span>()&#125;(<span class="hljs-variable language_">window</span>,<span class="hljs-variable language_">document</span>);<br></code></pre></td></tr></table></figure><p>在 \themes\fluid\layout\layout.ejs 文件末尾添加以下代码：</p><p>在</html>标签后面加，完成后，点击鼠标时就可以看见效果了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/love.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="添加鼠标点击显示文字效果"><a href="#添加鼠标点击显示文字效果" class="headerlink" title="添加鼠标点击显示文字效果"></a>添加鼠标点击显示文字效果</h3><p>在 &#x2F;themes&#x2F;fluid&#x2F;source&#x2F;js 下新建文件 click_show_text.js，在 click_show_text.js 文件中添加以下代码：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> a_idx = <span class="hljs-number">0</span>;<br>jQuery(document).ready(<span class="hljs-keyword">function</span>(<span class="hljs-params">$</span>) &#123;<br>    $(<span class="hljs-string">&quot;body&quot;</span>).click(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span><br>        (<span class="hljs-string">&quot;富强&quot;</span>, <span class="hljs-string">&quot;民主&quot;</span>, <span class="hljs-string">&quot;文明&quot;</span>, <span class="hljs-string">&quot;和谐&quot;</span>, <span class="hljs-string">&quot;自由&quot;</span>, <span class="hljs-string">&quot;平等&quot;</span>, <span class="hljs-string">&quot;公正&quot;</span>, <span class="hljs-string">&quot;法治&quot;</span>, <span class="hljs-string">&quot;爱国&quot;</span>, <span class="hljs-string">&quot;敬业&quot;</span>, <span class="hljs-string">&quot;诚信&quot;</span>, <span class="hljs-string">&quot;友善&quot;</span>);<br>        <span class="hljs-keyword">var</span> <span class="hljs-symbol">$i</span> = $(<span class="hljs-string">&quot;&lt;span/&gt;&quot;</span>).<span class="hljs-built_in">text</span>(a[a_idx]);<br>        a_idx = (a_idx + <span class="hljs-number">1</span>) % a.<span class="hljs-built_in">length</span>;<br>        <span class="hljs-keyword">var</span> x = e.pageX,<br>        y = e.pageY;<br>        <span class="hljs-symbol">$i</span>.css(&#123;<br>            <span class="hljs-string">&quot;z-index&quot;</span>: <span class="hljs-number">5</span>,<br>            <span class="hljs-string">&quot;top&quot;</span>: y - <span class="hljs-number">20</span>,<br>            <span class="hljs-string">&quot;left&quot;</span>: x,<br>            <span class="hljs-string">&quot;position&quot;</span>: <span class="hljs-string">&quot;absolute&quot;</span>,<br>            <span class="hljs-string">&quot;font-weight&quot;</span>: <span class="hljs-string">&quot;bold&quot;</span>,<br>            <span class="hljs-string">&quot;color&quot;</span>: <span class="hljs-string">&quot;#FF0000&quot;</span><br>        &#125;);<br>        $(<span class="hljs-string">&quot;body&quot;</span>).append(<span class="hljs-symbol">$i</span>);<br>        <span class="hljs-symbol">$i</span>.animate(&#123;<br>            <span class="hljs-string">&quot;top&quot;</span>: y - <span class="hljs-number">180</span>,<br>            <span class="hljs-string">&quot;opacity&quot;</span>: <span class="hljs-number">0</span><br>        &#125;,<br><span class="hljs-number">3000</span>,<br><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-symbol">$i</span>.remove();<br>&#125;);<br>    &#125;);<br>    setTimeout(<span class="hljs-string">&#x27;delay()&#x27;</span>, <span class="hljs-number">2000</span>);<br>&#125;);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">delay</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&quot;.buryit&quot;</span>).removeAttr(<span class="hljs-string">&quot;onclick&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>文字可以任意替换成自己的。<br>如果想要每次点击显示的文字为不同颜色，可以将其中 color 值进行如下更改：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">&quot;color&quot;</span>: <span class="hljs-string">&quot;rgb(&quot;</span> + ~~(<span class="hljs-number">255</span> * Math.<span class="hljs-built_in">random</span>()) + <span class="hljs-string">&quot;,&quot;</span> + ~~(<span class="hljs-number">255</span> * Math.<span class="hljs-built_in">random</span>()) + <span class="hljs-string">&quot;,&quot;</span> + ~~(<span class="hljs-number">255</span> * Math.<span class="hljs-built_in">random</span>()) + <span class="hljs-string">&quot;)&quot;</span><br></code></pre></td></tr></table></figure><p>然后在 \themes\fluid\layout\layout.ejs 文件末尾添加以下代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--单击显示文字--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/click_show_text.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后就可以看见效果了。</p><h3 id="自定义鼠标指针样式"><a href="#自定义鼠标指针样式" class="headerlink" title="自定义鼠标指针样式"></a>自定义鼠标指针样式</h3><p>在 \themes\fluid\source\less_base.less 文件 body 样式里写入如下代码：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">cursor</span>: url(<span class="hljs-string">https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.1.6/images/mouse.cur</span>),auto;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">@theme_background</span>;<br>    ......<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p>鼠标指针可以用 Axialis CursorWorkshop 这个软件自己制作，不同主题具体放的文件有所不同，确保在博客主体 body 的 CSS 文件中即可，其中的鼠标指针链接可替换成自己的，首先尝试加载<a href="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.1.6/images/mouse.cur">https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.1.6/images/mouse.cur</a> ，如果该文件不存在或由于其他原因无效，那么 auto 会被使用，也就是自动默认效果，图片格式为.ico、.ani、.cur，建议使用.cur，如果使用.ani或者其他格式无效，原因是浏览器兼容问题，请阅读<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Basic_User_Interface/Using_URL_values_for_the_cursor_property">参考文档</a>。</p><h3 id="浏览器网页标题动态改变"><a href="#浏览器网页标题动态改变" class="headerlink" title="浏览器网页标题动态改变"></a>浏览器网页标题动态改变</h3><p>当用户访问你的博客时点击到了其他网页，我们可以改变一下网页标题，呼唤用户回来，首先在目录 \themes\fluid\source\js 下新建一个 FunnyTitle.js 文件，在里面填写如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 浏览器标题</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">OriginTitle</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span>;<br><span class="hljs-keyword">var</span> titleTime;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;visibilitychange&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">hidden</span>) &#123;<br>        $(<span class="hljs-string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;href&#x27;</span>, <span class="hljs-string">&quot;/funny.ico&quot;</span>);<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;╭(°A°`)╮ 页面崩溃啦 ~&#x27;</span>;<br>        <span class="hljs-built_in">clearTimeout</span>(titleTime);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        $(<span class="hljs-string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;href&#x27;</span>, <span class="hljs-string">&quot;/favicon.ico&quot;</span>);<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;(ฅ&gt;ω&lt;*ฅ) 噫又好啦 ~&#x27;</span> + <span class="hljs-title class_">OriginTitle</span>;<br>        titleTime = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-title class_">OriginTitle</span>;<br>        &#125;, <span class="hljs-number">2000</span>);<br>    &#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>其中 funny.ico 是用户切换到其他标签后你网站的图标，favicon.ico 是正常图标，然后在 \themes\fluid\layout\layout.ejs 文件中添加如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--浏览器搞笑标题--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/FunnyTitle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>之后就可以去试试效果了。</p><h4 id="背景添加动态线条效果"><a href="#背景添加动态线条效果" class="headerlink" title="背景添加动态线条效果"></a>背景添加动态线条效果</h4><p>在 \Hexo\themes\fluid\layout\layout.ejs 文件中添加如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--动态线条背景--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">color</span>=<span class="hljs-string">&quot;220,220,220&quot;</span> <span class="hljs-attr">opacity</span>=<span class="hljs-string">&#x27;0.7&#x27;</span> <span class="hljs-attr">zIndex</span>=<span class="hljs-string">&quot;-2&quot;</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>其中：</p><p>color：表示线条颜色，三个数字分别为(R,G,B)，默认：（0,0,0）<br>opacity：表示线条透明度（0~1），默认：0.5<br>count：表示线条的总数量，默认：150<br>zIndex：表示背景的z-index属性，css属性用于控制所在层的位置，默认：-1</p><p>之后就可以看见效果了。</p><p>更多参考：</p><p><a href="https://tothefor.com/DragonOne/325206433.html">https://tothefor.com/DragonOne/325206433.html</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-05-遇到的人/看到的事/读过的书/走过的路</title>
    <link href="/2022/05/27/2022-05-%E9%81%87%E5%88%B0%E7%9A%84%E4%BA%BA-%E7%9C%8B%E5%88%B0%E7%9A%84%E4%BA%8B-%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6-%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF/"/>
    <url>/2022/05/27/2022-05-%E9%81%87%E5%88%B0%E7%9A%84%E4%BA%BA-%E7%9C%8B%E5%88%B0%E7%9A%84%E4%BA%8B-%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6-%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h4 id="先看到，才能做到"><a href="#先看到，才能做到" class="headerlink" title="先看到，才能做到"></a>先看到，才能做到</h4><p>最近看到奶爸微博上有篇说的特别好，</p><p>优秀的文艺作品会加强一个人的精神力量，会塑造人的坚强的心灵，会提升一个人的生活技能，尤其是在做人模版和为人处世这些世俗技巧方面。</p><p>比如鲁迅对底层低级小人物的各种刻画和描写，在警醒我不要沦为这种小人。</p><p>孔子喜欢讲君子之风，小人做派。</p><p>但问题是君子之风，小人做派又是什么？</p><p>人的学习一定要通过模仿，具象化的直观呈现，有样学样，才能学得会，学得快。</p><p>人的学习没有办法抽象，也没有办法通过演绎推理来学习。</p><p>即，只是学习知识，技巧，方法，看上去好像懂了，实际上还是不懂，这就是我们常说的，懂了很多道理依然过不好一生。</p><p>很多时候都印证了只有看到了，才能做到。个人成长需要有个好的model。</p><p>比如说，我最近的项目组新进了个技术大佬，有什么技术问题被卡住了，我通常会小窗他，有一次遇到了Doris数据库的一个bug，刚开始我不知道这是doris这个开源软件的本身的bug，后来在大神和我自己的共同努力下，定位应该是doris本身出了问题。</p><p>大佬后面就去doris的Github官网去提了issue，提交完了把链接顺手丢给了我。我点进去赫然看见的是大佬contributor的标记，要知道在Apache开源项目有</p><p>contributor的tag标记有多厉害呢，就是在计算机行业说出去能够让人哇塞的存在。</p><p>大佬丢链接的debug聊天记录📝，看到周围的role model，就是会想着哪天也能拥有contributor tag</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220527235104.png"></p><p>这其实也是先看到，然后做到。模仿优秀人的学习路径，成长路径是比较快的学习方式。</p><p>可能未来教育孩子的最好方式，就是言传声教，让孩子有样学样，从小开拓眼界。</p><p>最近听播客，从零道一，主要是访谈各个优秀大学在读或毕业的计算机学生，其中第一期王浩然就有提到，从交大到卡内基梅隆，这一路看得见的是这个行业最顶尖的那些人在做什么，是眼界的开阔。</p><p>看见光，接近光，最后成为光。</p><h4 id="在考虑自己硕士论文的研究方向"><a href="#在考虑自己硕士论文的研究方向" class="headerlink" title="在考虑自己硕士论文的研究方向"></a>在考虑自己硕士论文的研究方向</h4><p>另外一个题外话是，第二期王尧提到机器学习，深度学习运用在医疗领域的一个idea，是说可以根据机器学习和深度学习做预诊断系统，大家都知道，医院专家号挂号非常难，这个预诊断可以通过你的描述，给你做相应的诊断，比如多大的概率患什么样的病，推荐用什么药物，这可以极大节约挂专家号等位的成本，特别是对白领来说。</p><p>最近上海的疫情加上妈妈👩最近的身体不适，让我切身感觉到医疗才能真真切切的帮到具体的人。就在考虑我研究生的方向要不要研究医疗和计算机融合的方向</p><h4 id="Bionic-Reading"><a href="#Bionic-Reading" class="headerlink" title="Bionic Reading"></a>Bionic Reading</h4><p>最近还在木遥微博中发现了一个黑科技，就是Bionic Reading，就是把英文文章的单词前一部分加粗，让大脑自动补全剩下的单词，会大大提高阅读的速度。我尝试了两句话的阅读，发现真的很神奇。读右边的句子真的会快很多。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220528005442.png"></p><p>另外比较好奇会不会是只对我们这些英语不是母语的人，会有阅读速度的提高。对英语母语的人是不是影响不大。于是去问了下外教老师。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220528005737.png"></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220528005808.png"></p><p>没想到对母语人士也是kind of crazy.</p>]]></content>
    
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL Data to Doris(通过ODBC创建Doris的MySQL外部表)</title>
    <link href="/2022/05/27/MySQL-Data-to-Doris-%E9%80%9A%E8%BF%87ODBC%E5%88%9B%E5%BB%BADoris%E7%9A%84MySQL%E5%A4%96%E9%83%A8%E8%A1%A8/"/>
    <url>/2022/05/27/MySQL-Data-to-Doris-%E9%80%9A%E8%BF%87ODBC%E5%88%9B%E5%BB%BADoris%E7%9A%84MySQL%E5%A4%96%E9%83%A8%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p><strong>注意!!!ODBC版本过新会导致Doris BE服务宕机，目前测试下来 8.0.26及 8.0.28版本均有问题，降为 8.0.11后未出现问题，其余版本请自行测试！</strong></p><p><strong>1.安装ODBC驱动</strong><br>首先我们安装unixODBC驱动</p><blockquote><p>sudo wget <a href="ftp://ftp.unixodbc.org/pub/unixODBC/unixODBC-2.3.4.tar.gz">ftp://ftp.unixodbc.org/pub/unixODBC/unixODBC-2.3.4.tar.gz</a><br>tar -xvzf unixODBC-2.3.4.tar.gz<br>cd unixODBC-2.3.4&#x2F;<br>sudo .&#x2F;configure –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;unixODBC-2.3.7 –includedir&#x3D;&#x2F;usr&#x2F;include –libdir&#x3D;&#x2F;usr&#x2F;lib -bindir&#x3D;&#x2F;usr&#x2F;bin –sysconfdir&#x3D;&#x2F;etc<br>make<br>sudo make install</p></blockquote><p>安装成功后，unixODBC所需的头文件都被安装到了&#x2F;usr&#x2F;inlucde下，编译好的库文件安装到了&#x2F;usr&#x2F;lib下，与unixODBC相关的可执行文件安装到了&#x2F;usr&#x2F;bin下，配置文件放到了&#x2F;etc下。</p><p>验证安装是否成功<br>odbcinst -j</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgWeChat1bbf57433c7979412defcdcd21307146.png"></p><p><strong>2.安装Mysql ODBC驱动</strong></p><p>从mysql 站点下载对应的驱动</p><p><a href="https://dev.mysql.com/downloads/connector/odbc/">https://dev.mysql.com/downloads/connector/odbc/</a></p><p>mysql-connector-odbc-8.0.11-linux-glibc2.12-x86-64bit.tar.gz</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> zxvf mysql-connector-odbc-<span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">11</span>-linux-glibc2.<span class="hljs-number">12</span>-x86-<span class="hljs-number">64</span>bit.tar.gz<br><span class="hljs-attribute">mv</span> mysql-connector-odbc-<span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">11</span>-linux-glibc2.<span class="hljs-number">12</span>-x86-<span class="hljs-number">64</span>bit mysql-connectort-odbc-<span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">11</span><br></code></pre></td></tr></table></figure><p><strong>注册Mysql驱动，进入mysql-connectort-odbc-8.0.11&#x2F;bin路径下</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">./myodbc-installer -a -d -<span class="hljs-built_in">n</span> <span class="hljs-string">&quot;MySQL ODBC 8.0.11 Unicode Driver&quot;</span> -<span class="hljs-built_in">t</span> <span class="hljs-string">&quot;Driver=/opt/software/mysql-connector-odbc-8.0.11/lib/libmyodbc8w.so&quot;</span><br>./myodbc-installer -a -d -<span class="hljs-built_in">n</span> <span class="hljs-string">&quot;MySQL ODBC 8.0.11 ANSI Driver&quot;</span> -<span class="hljs-built_in">t</span> <span class="hljs-string">&quot;Driver=/opt/software/mysql-connector-odbc-8.0.11/lib/libmyodbc8a.so&quot;</span><br></code></pre></td></tr></table></figure><p><strong>然后查看是否注册成功</strong><br><code>./myodbc-installer -d -l</code></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220527225051.png"></p><p><strong>3.验证通过ODBC访问Mysql</strong></p><p>去配置ODBC访问Mysql的参数</p><p>编辑&#x2F;etc&#x2F;odbc.ini文件，加入下面的内容，将信息替换成你自己的</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysql]</span><br><span class="hljs-attr">Description</span> = Data source MySQL<br><span class="hljs-attr">Driver</span> = MySQL ODBC <span class="hljs-number">8.0</span>.<span class="hljs-number">28</span> Unicode Driver<br><span class="hljs-attr">Server</span> = localhost<br><span class="hljs-attr">Host</span> = localhost<br><span class="hljs-attr">Database</span> = test_db<br><span class="hljs-attr">Port</span> = <span class="hljs-number">3306</span><br><span class="hljs-attr">User</span> = test_user<br><span class="hljs-attr">Password</span> = <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>然后我们通过：</p><p>isql -v mysql测试能否通过ODBC连接Mysql</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img20220527225217.png"></p><p><strong>4.在BE节点的conf&#x2F;odbcinst.ini，添加我们的刚才注册的8.0.11的ODBC驱动</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[MySQL ODBC 8.0.11]</span><br><span class="hljs-attr">Description</span> = ODBC for MySQL<br><span class="hljs-attr">Driver</span>=/opt/software/mysql-connector-odbc-<span class="hljs-number">8.0</span>.<span class="hljs-number">11</span>/lib/libmyodbc8w.so<br><span class="hljs-attr">FileUsage</span> = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>5.在Doris创建外部表</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> test.external_ods_esc_goods;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> test.external_ods_esc_goods (<br>  id <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>  goods_id <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;商品ID&#x27;</span>,<br>  expire_date datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;有效期截止日&#x27;</span>,<br>  spu_outer_id <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;外部商品ID&#x27;</span>,<br>  company_id <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;公司ID&#x27;</span>,<br>  outer_id <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;平台ID&#x27;</span>,<br>  update_time datetime  <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>  creator <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;创建人&#x27;</span>,<br>  modifier <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;修改人&#x27;</span>,<br>  create_time datetime  <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;创建时间&#x27;</span><br>)ENGINE=ODBC<br>PROPERTIES (<br>&quot;host&quot;=&quot;xx.xxx.xx.xx&quot;,<br>&quot;port&quot;=&quot;3307&quot;,<br>&quot;user&quot;=&quot;test&quot;,<br>&quot;password&quot;=&quot;123456&quot;,<br>&quot;database&quot;=&quot;test&quot;,<br>&quot;table&quot;=&quot;goods&quot;,<br>&quot;driver&quot;=&quot;MySQL ODBC 8.0.11 Unicode Driver&quot;,<br>&quot;odbc_type&quot;=&quot;mysql&quot;<br>);<br></code></pre></td></tr></table></figure><p>或者创建外部resource</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#drop RESOURCE isc_mysql_odbc_goods_oc;</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">EXTERNAL</span> RESOURCE isc_mysql_odbc_goods_oc<br>PROPERTIES (<br>&quot;type&quot; = &quot;odbc_catalog&quot;,<br>&quot;host&quot;=&quot;xx.xx.xx.xx&quot;,<br>&quot;port&quot;=&quot;3306&quot;,<br>&quot;user&quot;=&quot;xxxx&quot;,<br>&quot;password&quot;=&quot;xxxxxx&quot;,<br>&quot;driver&quot;=&quot;MySQL ODBC 8.0 Unicode Driver&quot;,<br>&quot;odbc_type&quot;=&quot;mysql&quot;<br>);<br><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> test.external_ods_esc_goods;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> test.external_ods_esc_goods (<br>  id <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>  goods_id <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;商品ID&#x27;</span>,<br>  expire_date datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;有效期截止日&#x27;</span>,<br>  spu_outer_id <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;外部商品ID&#x27;</span>,<br>  company_id <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;公司ID&#x27;</span>,<br>  outer_id <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;平台ID&#x27;</span>,<br>  update_time datetime  <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>  creator <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;创建人&#x27;</span>,<br>  modifier <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;修改人&#x27;</span>,<br>  create_time datetime  <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;创建时间&#x27;</span><br>)ENGINE=ODBC<br>PROPERTIES (<br>&quot;odbc_catalog_resource&quot; = &quot;isc_mysql_odbc&quot;,<br>&quot;database&quot; = &quot;test&quot;,<br>&quot;table&quot; = &quot;goods&quot;<br>);<br></code></pre></td></tr></table></figure><p>验证查询</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test.external_ods_esc_goods<br></code></pre></td></tr></table></figure><p><strong>6.创建Doris表</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> ods.ods_esc_goods;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> ods.ods_esc_goods (<br>id <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>goods_id <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;商品ID&#x27;</span>,<br>expire_date datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;有效期截止日&#x27;</span>,<br>spu_outer_id <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;外部商品ID&#x27;</span>,<br>company_id <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;公司ID&#x27;</span>,<br>outer_id <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;平台ID&#x27;</span>,<br>update_time datetime  <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>creator <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;创建人&#x27;</span>,<br>modifier <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;修改人&#x27;</span>,<br>create_time datetime  <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br><span class="hljs-keyword">INDEX</span> INDEX_GOODS_ID (goods_id),<br><span class="hljs-keyword">INDEX</span> INDEX_COM_ID (company_id) ,<br><span class="hljs-keyword">INDEX</span> INDEX_SPU_OUTER_ID (spu_outer_id)<br>)<br><span class="hljs-keyword">UNIQUE</span> KEY (id,goods_id)<br><span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;商品扩展信息表&#x27;</span><br>DISTRIBUTED <span class="hljs-keyword">BY</span> HASH(id) BUCKETS <span class="hljs-number">1</span><br>PROPERTIES<br>(<br>&quot;replication_num&quot; = &quot;3&quot;<br>);<br><br></code></pre></td></tr></table></figure><p><strong>7.从外部表同步数据到Doris</strong></p><blockquote><p>insert into ods.ods_esc_goods<br>select * from test.external_ods_esc_goods</p></blockquote><p>查看doris是否有数据</p><p><code>select * from ods.ods_esc_goods</code></p>]]></content>
    
    
    <categories>
      
      <category>Doris</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Doris</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql Data to Doris by streamload</title>
    <link href="/2022/05/27/Mysql-Data-to-Doris-by-streamload/"/>
    <url>/2022/05/27/Mysql-Data-to-Doris-by-streamload/</url>
    
    <content type="html"><![CDATA[<p><strong>导出mysql数据到csv文件</strong></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">mysql -e &quot;<span class="hljs-keyword">select</span> tracking_number,order_created_time <span class="hljs-keyword">from</span> datamart.t_wide_table_waybill <span class="hljs-keyword">where</span> waybill_submit_time &gt;= <span class="hljs-string">&#x27;2021-04-01&#x27;</span> <span class="hljs-keyword">and</span> waybill_submit_time &lt; <span class="hljs-string">&#x27;2021-07-01&#x27;</span><span class="hljs-string">&quot; &gt; /opt/tmpdata/wide_table_6.csv</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">tar -zcvf <span class="hljs-regexp">/opt/</span>tmpdata<span class="hljs-regexp">/wide_table_6.csv.tar.gz /</span>opt<span class="hljs-regexp">/tmpdata/</span>wide_table_6.csv<br><br></code></pre></td></tr></table></figure><p><strong>XFTP将压缩文件传输到Doris集群任一台机器A</strong></p><p>xftp的传输速度要远快于scp，scp只有700KB&#x2F;s，XFTP稳定在2.7MB&#x2F;s，另外传输之前可以先tar压缩，数据可以压缩到原大小的20%以下</p><p><strong>在A机器上解压文件</strong></p><p><code>tar -zvf /opt/tmpdata/wide_table_6.csv.tar.gz</code></p><p><strong>Doris streamload方式导入数据时对数据文件的大小限制为10G，若数据文件&gt;10G,则可按10G来切分</strong></p><p><code>split -b 10240m wide_table_6.csv after_split_wide_table_6.csv</code></p><p>用Streamload方式导入数据,直接导入到具体BE节点</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl --location-trusted -u root: -T <span class="hljs-regexp">/data/</span>tmpdata<span class="hljs-regexp">/after_split_wide_table_6.csv -H &quot;label:wide_table_001&quot; -H &quot;max_filter_ratio:1&quot;http:/</span><span class="hljs-regexp">/10.63.40.54:8040/</span>api<span class="hljs-regexp">/dwd/</span>dwd_spk_t_wide_table_waybill/_stream_load<br></code></pre></td></tr></table></figure><p><strong>由FE节点来分配</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl --location-trusted -u root: -T <span class="hljs-regexp">/data/</span>tmpdata<span class="hljs-regexp">/after_split_wide_table_6.csv -H &quot;label:wide_table_001&quot; -H &quot;max_filter_ratio:1&quot;http:/</span><span class="hljs-regexp">/10.63.40.20:8030/</span>api<span class="hljs-regexp">/dwd/</span>dwd_spk_t_wide_table_waybill/_stream_load<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Doris</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Doris</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Doris-Unique模型标记删除</title>
    <link href="/2022/05/27/Doris-Unique%E6%A8%A1%E5%9E%8B%E6%A0%87%E8%AE%B0%E5%88%A0%E9%99%A4/"/>
    <url>/2022/05/27/Doris-Unique%E6%A8%A1%E5%9E%8B%E6%A0%87%E8%AE%B0%E5%88%A0%E9%99%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="指定sequence-type类型"><a href="#指定sequence-type类型" class="headerlink" title="指定sequence_type类型"></a>指定sequence_type类型</h3><p>目前只支持bigint和date两种</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> ods.ods_esc_system_oct_buyer_one_sale_goods      <span class="hljs-keyword">ENABLE</span> FEATURE &quot;SEQUENCE_LOAD&quot; <span class="hljs-keyword">WITH</span> PROPERTIES (&quot;function_column.sequence_type&quot; = &quot;bigint&quot;);<br></code></pre></td></tr></table></figure><p><strong>显示隐藏列</strong></p><p><code>SET show_hidden_columns=&#39;true&#39;;</code></p><p>查看标记删除功能有没生效，当出现有__DORIS_DELETE_SIGN__列，即为生效</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgWeChat3f59fb18328f3dd6235077e0ace81e6c.png"></p><p>若要将数据标记删除，则将<code>__DORIS_DELETE_SIGN__</code>列赋值为1即可</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test.<span class="hljs-symbol">`doris_delete_test`</span><br>(a<br>,b<br>,c<br>,__DORIS_DELETE_SIGN__<br>)<br><span class="hljs-keyword">select</span> <br><span class="hljs-string">&quot;1&quot;</span><br>,<span class="hljs-string">&quot;3&quot;</span><br>,<span class="hljs-string">&quot;3&quot;</span><br>,<span class="hljs-string">&quot;1&quot;</span>  __DORIS_DELETE_SIGN__<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Doris</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Doris</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flink作业从checkpoint恢复启动</title>
    <link href="/2022/05/27/Flink%E4%BD%9C%E4%B8%9A%E4%BB%8Echeckpoint%E6%81%A2%E5%A4%8D%E5%90%AF%E5%8A%A8/"/>
    <url>/2022/05/27/Flink%E4%BD%9C%E4%B8%9A%E4%BB%8Echeckpoint%E6%81%A2%E5%A4%8D%E5%90%AF%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="Flink作业故障重启"><a href="#Flink作业故障重启" class="headerlink" title="Flink作业故障重启"></a>Flink作业故障重启</h3><p>flink是高可用大数据计算框架，在程序中断后支持断点续传</p><p>这里人为kill掉程序，测试断点续传</p><p><strong>kill部署 在yarn上的Flink作业代码如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># 需要传入applicationid</span><br>yarn application --list | grep <span class="hljs-variable">$1</span> &gt; /home/appman/realtime_warehouse/flink-job.txt<br><br><span class="hljs-built_in">cat</span> /app/tmp/flink-job.txt | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> line<br><br><span class="hljs-keyword">do</span><br><br>  <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$line</span> == *<span class="hljs-string">&quot;Apache Flink&quot;</span>* ]]<br><br>  <span class="hljs-keyword">then</span><br><br>    array=(<span class="hljs-variable">$&#123;line//&#x27;\t&#x27;/ &#125;</span>)<br><br>    application_id=<span class="hljs-variable">$&#123;array[0]&#125;</span><br><br>    yarn application --<span class="hljs-built_in">kill</span> <span class="hljs-variable">$application_id</span><br><br>    hadoop fs -<span class="hljs-built_in">rm</span> -r -skipTrash /user/appman/.flink/<span class="hljs-variable">$application_id</span><br><br>    <span class="hljs-built_in">rm</span> -f /app/tmp/flink-job.txt<br><br>  <span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure><p><strong>在hdfs上找到checkpoint目录，找到最近可用的chk目录，点进去有_metadata就可以恢复程序</strong></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgWeChat66c38674c9516b8990fd6a7e2726c12b.png"></p><p><strong>flink从checkpoint启动命令如下：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flink</span> run -m yarn-cluster -s hdfs:///ns/flink/checkpoints/kafka-to-doris-esc-buyer/<span class="hljs-number">033</span>b26776f576c08f74b4b5368f5ae24/chk-<span class="hljs-number">825377</span> -ys <span class="hljs-number">1</span> -ynm esc-buyer-hk-kafka2doris -yD taskmanager.memory.managed.fraction=<span class="hljs-number">0</span>.<span class="hljs-number">1</span> -yjm <span class="hljs-number">1024</span> -ytm <span class="hljs-number">2048</span> -c com.itiaoling.app.ods.Kafka2Doris -z esc-buyer-hk-kafka2doris -d /home/appman/realtime_warehouse/jar/Analysis-<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.jar -spring.profiles.active pro -sourceSinkType <span class="hljs-number">2</span> -businessType <span class="hljs-number">3</span> -tableName buyer_kafkatodoris_batch<br><br></code></pre></td></tr></table></figure><p>当是无效checkpoint，flink作业将一直处在<strong>INITIALIZING</strong>状态</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgWeChat6160ae35c3db6f09befafecfdf98581d.png"></p>]]></content>
    
    
    <categories>
      
      <category>Flink</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Doris副本数修改</title>
    <link href="/2022/05/27/Doris%E5%89%AF%E6%9C%AC%E6%95%B0%E4%BF%AE%E6%94%B9/"/>
    <url>/2022/05/27/Doris%E5%89%AF%E6%9C%AC%E6%95%B0%E4%BF%AE%E6%94%B9/</url>
    
    <content type="html"><![CDATA[<h3 id="修改历史的分区副本"><a href="#修改历史的分区副本" class="headerlink" title="修改历史的分区副本"></a>修改历史的分区副本</h3><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">ALTER TABLE ods.order_purchase_order<br>MODIFY PARTITION (<br><span class="hljs-built_in">p2021_05,</span><br><span class="hljs-built_in">p_2020_12,</span><br><span class="hljs-built_in">p2022_18,</span><br><span class="hljs-built_in">p2022_19,</span><br><span class="hljs-built_in">p2022_20,</span><br><span class="hljs-built_in">p2022_21,</span><br><span class="hljs-built_in">p2022_22,</span><br>p2022_23<br>)SET(<span class="hljs-string">&quot;replication_num&quot;</span>=<span class="hljs-string">&quot;3&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>历史分区副本数修改后，新增的副本数据会逐渐同步完成。</p><h3 id="修改默认副本数量-新建分区副本数默认使用此值"><a href="#修改默认副本数量-新建分区副本数默认使用此值" class="headerlink" title="修改默认副本数量, 新建分区副本数默认使用此值"></a>修改默认副本数量, 新建分区副本数默认使用此值</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> ods.order_purchase_order <span class="hljs-keyword">SET</span> (&quot;default.replication_num&quot; = &quot;3&quot;);<br><br></code></pre></td></tr></table></figure><h3 id="修改动态分区副本数量"><a href="#修改动态分区副本数量" class="headerlink" title="修改动态分区副本数量"></a>修改动态分区副本数量</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> ods.order_purchase_order <span class="hljs-keyword">set</span> (&quot;dynamic_partition.replication_allocation&quot; = &quot;tag.location.default: 3&quot;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Doris</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Doris</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Doris表创建动态分区</title>
    <link href="/2022/05/27/Doris%E8%A1%A8%E5%88%86%E5%8C%BA/"/>
    <url>/2022/05/27/Doris%E8%A1%A8%E5%88%86%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="Doris创建动态分区表"><a href="#Doris创建动态分区表" class="headerlink" title="Doris创建动态分区表"></a>Doris创建动态分区表</h3><p>动态分区仅仅支持range分区</p><p>DDL建表语句如下：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">CREATE TABLE dwd.`dwd_cdc_t_fin_trade_record_detail` (<br> `trade_id` varchar(<span class="hljs-number">200</span>) NULL COMMENT <span class="hljs-string">&quot;流水号&quot;</span>,<br> `merchant_code` varchar(<span class="hljs-number">200</span>) <span class="hljs-literal">NOT</span> NULL COMMENT <span class="hljs-string">&quot;&quot;</span>,<br> `order_no_business` varchar(<span class="hljs-number">800</span>) NULL COMMENT <span class="hljs-string">&quot;订单业务字段(包材费时存包材号，仓储费时存批次号,操作费存冻结记录id)&quot;</span>,<br> `trade_date` date NULL COMMENT <span class="hljs-string">&quot;变动时间&quot;</span>,<br> `trade_type` int(<span class="hljs-number">11</span>) NULL COMMENT <span class="hljs-string">&quot;交易类型,1-线下充值,2-操作费,3-仓储费,4-包材,5调账,6线上充值,7贴标服务费,8-退仓存储费&quot;</span>,<br> `cost_name` varchar(<span class="hljs-number">200</span>) NULL COMMENT <span class="hljs-string">&quot;费用名称&quot;</span>,<br> `merchant_name` varchar(<span class="hljs-number">400</span>) NULL COMMENT <span class="hljs-string">&quot;卖家名称&quot;</span>,<br> `source` varchar(<span class="hljs-number">200</span>) NULL COMMENT <span class="hljs-string">&quot;来源&quot;</span>,<br> `trade_amount` decimal(<span class="hljs-number">20</span>, <span class="hljs-number">2</span>) NULL COMMENT <span class="hljs-string">&quot;变动金额(充值未正，扣费为负)&quot;</span>,<br> `currency_code` varchar(<span class="hljs-number">40</span>) NULL COMMENT <span class="hljs-string">&quot;&quot;</span>,<br> `packing_material_name` varchar(<span class="hljs-number">1020</span>) <span class="hljs-literal">NOT</span> NULL COMMENT <span class="hljs-string">&quot;包材名称&quot;</span>,<br> `is_active` int(<span class="hljs-number">11</span>) NULL COMMENT <span class="hljs-string">&quot;数据是否已被逻辑删除,0是已删除，1是未删除&quot;</span>,<br> `etl_time` datetime NULL COMMENT <span class="hljs-string">&quot;跑批日期&quot;</span><br>) ENGINE=OLAP<br>DUPLICATE KEY(`trade_id`,`merchant_code`)<br>COMMENT <span class="hljs-string">&quot;商户余额变动流水表&quot;</span><br>PARTITION BY RANGE(`trade_date`)()<br>DISTRIBUTED BY HASH(`merchant_code`) BUCKETS <span class="hljs-number">3</span><br>PROPERTIES (<br><span class="hljs-string">&quot;replication_allocation&quot;</span> = <span class="hljs-string">&quot;tag.location.default: 3&quot;</span>,<br><span class="hljs-string">&quot;dynamic_partition.enable&quot;</span> = <span class="hljs-string">&quot;true&quot;</span>,<br><span class="hljs-string">&quot;dynamic_partition.time_unit&quot;</span> = <span class="hljs-string">&quot;MONTH&quot;</span>,<br><span class="hljs-string">&quot;dynamic_partition.time_zone&quot;</span> = <span class="hljs-string">&quot;Asia/Shanghai&quot;</span>,<br><span class="hljs-string">&quot;dynamic_partition.start&quot;</span> = <span class="hljs-string">&quot;-2147483648&quot;</span>,<br><span class="hljs-string">&quot;dynamic_partition.end&quot;</span> = <span class="hljs-string">&quot;2&quot;</span>,<br><span class="hljs-string">&quot;dynamic_partition.prefix&quot;</span> = <span class="hljs-string">&quot;p&quot;</span>,<br><span class="hljs-string">&quot;dynamic_partition.replication_allocation&quot;</span> = <span class="hljs-string">&quot;tag.location.default: 3&quot;</span>,<br><span class="hljs-string">&quot;dynamic_partition.buckets&quot;</span> = <span class="hljs-string">&quot;4&quot;</span>,<br><span class="hljs-string">&quot;dynamic_partition.create_history_partition&quot;</span> = <span class="hljs-string">&quot;true&quot;</span>,<br><span class="hljs-string">&quot;dynamic_partition.history_partition_num&quot;</span> = <span class="hljs-string">&quot;24&quot;</span>,<br><span class="hljs-string">&quot;dynamic_partition.hot_partition_num&quot;</span> = <span class="hljs-string">&quot;0&quot;</span>,<br><span class="hljs-string">&quot;dynamic_partition.reserved_history_periods&quot;</span> = <span class="hljs-string">&quot;NULL&quot;</span>,<br><span class="hljs-string">&quot;dynamic_partition.start_day_of_month&quot;</span> = <span class="hljs-string">&quot;1&quot;</span>,<br><span class="hljs-string">&quot;in_memory&quot;</span> = <span class="hljs-string">&quot;false&quot;</span>,<br><span class="hljs-string">&quot;storage_format&quot;</span> = <span class="hljs-string">&quot;V2&quot;</span><br>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ul><li><p>PARTITION BY RANGE(<code>trade_date</code>)()  根据trade_date字段做分区</p></li><li><p>“dynamic_partition.enable” &#x3D; “true” 开启动态分区</p></li><li><p>“dynamic_partition.start” &#x3D; “-2147483648”, 系统会根据今天的时间去建分区，如果这里设置为0，则历史的数据（trade_date&lt;今天的日期）不会被插入到表中。想做历史数据的迁移，可以将其设置为负值。</p></li><li><p>doris默认会建立未来分区</p></li></ul><h3 id="Doris历史分区不够怎么办"><a href="#Doris历史分区不够怎么办" class="headerlink" title="Doris历史分区不够怎么办"></a>Doris历史分区不够怎么办</h3><p>新增历史分区</p><figure class="highlight plaintext"><figcaption><span>TABLE ods.ods_esc_system_oct_buyer_one_sale_goods SET ("dynamic_partition.enable" </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ALTER">ALTER TABLE ods.ods_esc_system_oct_buyer_one_sale_goods ADD PARTITION p202108 VALUES[(&#x27;2020-01-01 00:00:00&#x27;), (&#x27;2021-09-01 00:00:00&#x27;));<br><br>ALTER TABLE ods.ods_esc_system_oct_buyer_one_sale_goods ADD PARTITION p202109 VALUES[(&#x27;2021-09-01 00:00:00&#x27;), (&#x27;2021-10-01 00:00:00&#x27;));<br><br>ALTER TABLE ods.ods_esc_system_oct_buyer_one_sale_goods SET (&quot;dynamic_partition.enable&quot; = &quot;true&quot;)<br></code></pre></td></tr></table></figure><p>然后可以查看分区信息</p><p><code>show partitions from ods_esc_system_oct_buyer_one_sale_goods</code></p><p>查看分区表信息</p><p><code>SHOW DYNAMIC PARTITION TABLES;</code></p><h3 id="分区数据做替换"><a href="#分区数据做替换" class="headerlink" title="分区数据做替换"></a>分区数据做替换</h3><p>当某个分区数据需要做修改时，可以通过临时分区做替换，临时分区过后会自动删除</p><p>– 1.创建临时分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> dwd.`dwd_cdc_t_fin_trade_record_detail` <br><span class="hljs-keyword">ADD</span> TEMPORARY <span class="hljs-keyword">PARTITION</span> today <br><span class="hljs-keyword">VALUES</span> [(&quot;$[yyyy-MM-dd]&quot;), (&quot;2022-02-01&quot;))<br>;<br></code></pre></td></tr></table></figure><p>– 2.数据插入临时分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> dolphinscheduler.`demo01` TEMPORARY <span class="hljs-keyword">PARTITION</span>(today) (<br>create_date,col1,col2<br>)<br><span class="hljs-keyword">SELECT</span> create_date,col1,col2<br><span class="hljs-keyword">FROM</span> dolphinscheduler.demo02 <br><span class="hljs-keyword">WHERE</span> create_date <span class="hljs-operator">&gt;=</span> <span class="hljs-number">20220101</span> <span class="hljs-keyword">and</span> create_date <span class="hljs-operator">&lt;</span> <span class="hljs-number">20220201</span><br>;<br></code></pre></td></tr></table></figure><p>– 3.临时分区替换正式分区，替换完成后临时分区自动删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> dolphinscheduler.`demo01` <br>REPLACE <span class="hljs-keyword">PARTITION</span> (p_202201) <br><span class="hljs-keyword">WITH</span> TEMPORARY <span class="hljs-keyword">PARTITION</span> (today)<br>;<br></code></pre></td></tr></table></figure><p>– 4.查询临时分区 SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> dolphinscheduler.`demo01`<br>TEMPORARY <span class="hljs-keyword">PARTITION</span> today<br>;<br></code></pre></td></tr></table></figure><hr><h4 id="List分区，不支持动态分区"><a href="#List分区，不支持动态分区" class="headerlink" title="List分区，不支持动态分区"></a>List分区，不支持动态分区</h4><p>DDL建表语句如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> ods.`ods_esc_buyer_goods_ebay_compatibility_model` (<br>    `id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;id&#x27;</span>,<br>    `create_time` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;create_time&#x27;</span>,<br>    `category_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;ebayid&#x27;</span>,<br>    `site` <span class="hljs-type">varchar</span>(<span class="hljs-number">1020</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;站点&#x27;</span>,<br>    `model_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;车型id&#x27;</span>,<br>    `esc_category_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;esc品类id&#x27;</span>,<br>    `<span class="hljs-keyword">version</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;版本号&#x27;</span>,<br>    `update_type` <span class="hljs-type">int</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;更新类型&#x27;</span>,<br>    `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;update_time&#x27;</span>,<br>    `deleted` tinyint(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;删除标记&#x27;</span>,<br>    `is_deleted_flg` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> &quot;0&quot; <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;是否被系統物理刪 0：未被物理删，1：系统已删除&#x27;</span>,<br>    `ts_ms` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> &quot;0&quot; <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;数据拉取时间&#x27;</span>,<br>    <span class="hljs-keyword">INDEX</span> idx_site (`site`) <span class="hljs-keyword">USING</span> BITMAP <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;站点索引&#x27;</span>,<br>    <span class="hljs-keyword">INDEX</span> idx_category_id (`category_id`) <span class="hljs-keyword">USING</span> BITMAP <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;品类索引&#x27;</span>,<br>    <span class="hljs-keyword">INDEX</span> idx_model_id (`model_id`) <span class="hljs-keyword">USING</span> BITMAP <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;车型id索引&#x27;</span><br>) ENGINE=OLAP<br><span class="hljs-keyword">UNIQUE</span> KEY (id,create_time,category_id,site)<br><span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;品类车型关联表&#x27;</span><br><span class="hljs-keyword">PARTITION BY List</span> ( category_id,site )()<br>DISTRIBUTED <span class="hljs-keyword">BY</span> HASH(id) BUCKETS <span class="hljs-number">10</span><br>PROPERTIES (<br>&quot;function_column.sequence_type&quot; = &quot;bigint&quot;,<br>&quot;replication_num&quot; = &quot;3&quot;,<br>&quot;in_memory&quot; = &quot;false&quot;,<br>&quot;storage_format&quot; = &quot;V2&quot;<br>);<br></code></pre></td></tr></table></figure><p>也可以指定List</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lisp">PARTITION BY LIST(`id`, `city`)<br>(<br>        <span class="hljs-name">PARTITION</span> `p1_city` VALUES IN ((<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;Beijing&quot;</span>), (<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;Shanghai&quot;</span>)),<br>        PARTITION `p2_city` VALUES IN ((<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;Beijing&quot;</span>), (<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;Shanghai&quot;</span>)),<br>        PARTITION `p3_city` VALUES IN ((<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;Beijing&quot;</span>), (<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;Shanghai&quot;</span>))<br>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Doris</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Doris</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据中台-10_数据服务难道就是对外提供个API吗?</title>
    <link href="/2022/05/27/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-10-%E6%95%B0%E6%8D%AE%E6%9C%8D%E5%8A%A1%E9%9A%BE%E9%81%93%E5%B0%B1%E6%98%AF%E5%AF%B9%E5%A4%96%E6%8F%90%E4%BE%9B%E4%B8%AAAPI%E5%90%97/"/>
    <url>/2022/05/27/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-10-%E6%95%B0%E6%8D%AE%E6%9C%8D%E5%8A%A1%E9%9A%BE%E9%81%93%E5%B0%B1%E6%98%AF%E5%AF%B9%E5%A4%96%E6%8F%90%E4%BE%9B%E4%B8%AAAPI%E5%90%97/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6a596b0ff1dc90184d4e4a179fd6ab088907edaab52ec43ab7871db98e62edbd"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数据中台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据中台</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL错误Illegal mix of collations (utf8mb4_unicode_ci,IMPLICIT) and (utf8mb4_general_ci,IMPLICIT)解决方法</title>
    <link href="/2022/05/27/MySQL%E9%94%99%E8%AF%AFIllegal-mix-of-collations-utf8mb4-unicode-ci-IMPLICIT-and-utf8mb4-general-ci-IMPLICIT-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2022/05/27/MySQL%E9%94%99%E8%AF%AFIllegal-mix-of-collations-utf8mb4-unicode-ci-IMPLICIT-and-utf8mb4-general-ci-IMPLICIT-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="现象描述"><a href="#现象描述" class="headerlink" title="现象描述"></a>现象描述</h3><p>在执行SQL语句中有比较两个表的字段时，出现Illegal mix of collations (utf8_unicode_ci,IMPLICIT) and (utf8_general_ci,IMPLICIT)错误。意思是遇到的编码错误。</p><p>表a是utf8_unicode_ci，而表b是utf8_general_ci。同样是uft-8编码，不知道这样细分的意义。我的两张表是用Navicat分别从两个xlsx文件中导入的，自动就成了这样。下面说一下解决方法。</p><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>  如果数据已导入，又不想修改，可以改一下SQL语句，让其在比较字符串时先转换一下：</p><figure class="highlight plaintext"><figcaption><span>b.* from a,b where a.pid</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 原主句：select">修改后语句：select b.* from a,b where a.pid=CONVERT(b.pid USING utf8) COLLATE utf8_unicode_ci <br></code></pre></td></tr></table></figure><p>两个表的编码一致了，就可以比较了。</p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>如果想保持SQL语句不变，且以后可能还会经常处理这类问题，那么，就考虑一步到位，即，把数据库编码设置好，并且把已导入的数据进行转换。</p><p>先将编码设置一致：将 表a和表b的 （ collations 或者 校对规则）的编码的方式统一为 utf8_general_ci</p><p>然后将已有数据进行转换<br><code>alter table b convert to character set utf8 collate utf8_general_ci</code></p><p>另外说一句查看数据库编码的方式：</p><p><code>show variables like &#39;character%&#39;;</code></p><p>从以上信息可知数据库的编码为latin1，需要修改为gbk或者是utf8；其中<br>    character_set_client为客户端编码方式；<br>    character_set_connection为建立连接使用的编码；<br>    character_set_database数据库的编码；<br>    character_set_results结果集的编码；<br>    character_set_server数据库服务器的编码；<br>    只要保证以上四个采用的编码方式一样，就不会出现乱码问题。<br>    另一个查看数据库编码的命令：</p><p><code>show variables like &#39;character%&#39;;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据中台-09_数据服务到底解决了什么问题？</title>
    <link href="/2022/05/27/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-09_%E6%95%B0%E6%8D%AE%E6%9C%8D%E5%8A%A1%E5%88%B0%E5%BA%95%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F/"/>
    <url>/2022/05/27/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-09_%E6%95%B0%E6%8D%AE%E6%9C%8D%E5%8A%A1%E5%88%B0%E5%BA%95%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4129869c8cbcdd75a167505d574c0b102834cc51c8cd49585a3bf698515c180f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数据中台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据中台</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次Flinkcdc调参</title>
    <link href="/2022/05/26/%E8%AE%B0%E4%B8%80%E6%AC%A1Flinkcdc%E8%B0%83%E5%8F%82/"/>
    <url>/2022/05/26/%E8%AE%B0%E4%B8%80%E6%AC%A1Flinkcdc%E8%B0%83%E5%8F%82/</url>
    
    <content type="html"><![CDATA[<h3 id="场景描述："><a href="#场景描述：" class="headerlink" title="场景描述："></a>场景描述：</h3><p>利用Flinkcdc从mysql中抓取数据到kafka，再写到doris数据库里</p><p>mysql表结构如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> TABLE <span class="hljs-symbol">`goods_aspects_relation_detail`</span> (<br>  <span class="hljs-symbol">`id`</span> varchar(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`GOODS_UID`</span> varchar(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;商品ID&#x27;</span>,<br>  <span class="hljs-symbol">`COM_UID`</span> varchar(<span class="hljs-number">32</span>) DEFAULT <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;公司&#x27;</span>,<br>  <span class="hljs-symbol">`site`</span> varchar(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;站点&#x27;</span>,<br>  <span class="hljs-symbol">`out_category_id`</span> varchar(<span class="hljs-number">32</span>) DEFAULT <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;品类id&#x27;</span>,<br>  <span class="hljs-symbol">`localized_aspect_name`</span> varchar(<span class="hljs-number">82</span>) DEFAULT <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;名称&#x27;</span>,<br>  <span class="hljs-symbol">`localized_aspect_values`</span> varchar(<span class="hljs-number">512</span>) DEFAULT <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;值&#x27;</span>,<br>  <span class="hljs-symbol">`aspect_data_type`</span> varchar(<span class="hljs-number">32</span>) DEFAULT <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;数据类型&#x27;</span>,<br>  <span class="hljs-symbol">`aspect_enabled_for_variations`</span> tinyint(<span class="hljs-number">1</span>) DEFAULT <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`aspect_format`</span> varchar(<span class="hljs-number">32</span>) DEFAULT <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;格式&#x27;</span>,<br>  <span class="hljs-symbol">`aspect_max_length`</span> bigint(<span class="hljs-number">20</span>) DEFAULT <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;最大长度&#x27;</span>,<br>  <span class="hljs-symbol">`aspect_mode`</span> varchar(<span class="hljs-number">32</span>) DEFAULT <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;功能&#x27;</span>,<br>  <span class="hljs-symbol">`aspect_required`</span> tinyint(<span class="hljs-number">1</span>) DEFAULT <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;是否必须&#x27;</span>,<br>  <span class="hljs-symbol">`aspect_usage`</span> varchar(<span class="hljs-number">32</span>) DEFAULT <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;使用&#x27;</span>,<br>  <span class="hljs-symbol">`expected_required_by_date`</span> varchar(<span class="hljs-number">32</span>) DEFAULT <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`item_to_aspect_cardinality`</span> varchar(<span class="hljs-number">32</span>) DEFAULT <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`aspect_applicable_to`</span> varchar(<span class="hljs-number">255</span>) DEFAULT <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`aspect_values`</span> longtext,<br>  <span class="hljs-symbol">`is_active`</span> tinyint(<span class="hljs-number">1</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;1&#x27;</span> COMMENT <span class="hljs-string">&#x27; 数据是否已被逻辑删除,0 已删除，1 未删除&#x27;</span>,<br>  <span class="hljs-symbol">`creator`</span> varchar(<span class="hljs-number">32</span>) DEFAULT <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;创建人&#x27;</span>,<br>  <span class="hljs-symbol">`modifier`</span> varchar(<span class="hljs-number">32</span>) DEFAULT <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;修改人&#x27;</span>,<br>  <span class="hljs-symbol">`create_time`</span> datetime DEFAULT <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  <span class="hljs-symbol">`modify_time`</span> datetime DEFAULT <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-symbol">`id`</span>) <span class="hljs-keyword">USING</span> BTREE,<br>  <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`GOODS_UID_site_out_category_id_com_id`</span> (<span class="hljs-symbol">`GOODS_UID`</span>,<span class="hljs-symbol">`site`</span>,<span class="hljs-symbol">`out_category_id`</span>,<span class="hljs-symbol">`COM_UID`</span>) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=<span class="hljs-string">&#x27;商品Aspect明细表&#x27;</span><br></code></pre></td></tr></table></figure><p>其中<code>aspect_values</code> longtext，字段超大，估计塞了一篇网文还持续连载的那种🤮</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">--通过下列语句查表空间和记录数，以及每行数据的大小</span><br><span class="hljs-keyword">select</span> TABLE_ROWS, concat(round(sum(DATA_LENGTH/<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span>), <span class="hljs-number">2</span>),<span class="hljs-string">&#x27;GB&#x27;</span>) <span class="hljs-keyword">as</span> totalSize<br>, concat(round(sum(DATA_LENGTH/<span class="hljs-number">1024</span>), <span class="hljs-number">2</span>)/TABLE_ROWS,<span class="hljs-string">&#x27;KB&#x27;</span>) <span class="hljs-keyword">as</span> recordSize <br><span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">TABLES</span> <br><span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;isc_goods&#x27;</span> <br><span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;goods_aspects_relation_detail&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/img%E8%A1%A8%E7%A9%BA%E9%97%B4%E5%A4%A7%E5%B0%8F.png"></p><p>可以看到整张表占6.04GB, 其中aspect_values大字段就占5.8G，最大的字段长度是800+K</p><h3 id="Debug过程"><a href="#Debug过程" class="headerlink" title="Debug过程"></a>Debug过程</h3><p>flinkcdc任务提交在yarn集群上，没有看到任何报错信息（可能本身写的代码输出信息比较少），以至于在taskmanager上没看到任何报错信息，但是kafka的topic就是不生成。</p><p>尝试将source来的data打印print出来，这时候发现报错信息了</p><p><strong>1.首先找到yarn上刚提交的applicationid</strong></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgyarnapplicationid.png"></p><p><strong>2.找到对应的applicationid后点击进去，可以追踪到ApplicationMaster</strong></p><table><thead><tr><th align="right">Tracking URL:</th><th>[ApplicationMaster]</th></tr></thead></table><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgapplicationdetail.png"></p><p><strong>3.点击对应的ApplicationMaster进来后的界面</strong></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgapplicationMaster.png"></p><p><strong>4.查看日志输出,发现是GC overhead limit exceeded，也就是超出了taskmanager的指定内存了</strong></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgGC_limited.png"></p><p><strong>5.尝试将ytm参数，也就是在提交运行flink任务的时候的taskmanager的内存提高到8G <code>-ytm 2048</code></strong></p><p>发现可以正常生成kafka topic，至此mysql -&gt; kafka这一层可以正常work</p><p><strong>6.在kafka sink到doris这一环节中</strong></p><p>由于配置的dorisBatchSize: 5000，报JVM heap内存溢出，暂时将其调整为dorisBatchSize: 2000，报错消失。</p><hr><p><strong>后续可以尝试调整参数：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">#CDC</span> Connectors <span class="hljs-keyword">for</span> Apache Flink<br><br>scan<span class="hljs-selector-class">.incremental</span><span class="hljs-selector-class">.snapshot</span><span class="hljs-selector-class">.enabled</span>: true <br>scan<span class="hljs-selector-class">.incremental</span><span class="hljs-selector-class">.snapshot</span><span class="hljs-selector-class">.chunk</span><span class="hljs-selector-class">.size</span>: <span class="hljs-number">100</span><br>scan<span class="hljs-selector-class">.snapshot</span><span class="hljs-selector-class">.fetch</span><span class="hljs-selector-class">.size</span>: <span class="hljs-number">100</span><br>debezium<span class="hljs-selector-class">.min</span><span class="hljs-selector-class">.row</span><span class="hljs-selector-class">.count</span><span class="hljs-selector-class">.to</span><span class="hljs-selector-class">.stream</span><span class="hljs-selector-class">.result</span>: <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>个人理解下来是减小每次拉取的数量，这是在内存不足的情况下可以尝试减小fetch size，chunk size的大小数量。但是我这内存充足就没进行相应的调优</p><p>参考官网：<a href="https://ververica.github.io/flink-cdc-connectors/master/content/connectors/mysql-cdc.html#">https://ververica.github.io/flink-cdc-connectors/master/content/connectors/mysql-cdc.html#</a></p><p>还可以调整并行度和slot数量观察数据抽取速度</p>]]></content>
    
    
    <categories>
      
      <category>Flink</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flink作业调度参数详解</title>
    <link href="/2022/05/26/Flink%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/05/26/Flink%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>本篇文章介绍Flink作业调度命令，以及调度参数的解释</p><h3 id="flink-yarn-cluster-模式"><a href="#flink-yarn-cluster-模式" class="headerlink" title="flink yarn-cluster 模式"></a>flink yarn-cluster 模式</h3><figure class="highlight plaintext"><figcaption><span>是否使用分离模式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs -d,–detached">-m,–jobmanager 指定提交的jobmanager<br>-yat,–yarnapplicationType 设置yarn应用的类型<br>-yD &lt;property=value&gt; 使用给定属性的值<br>-yd,–yarndetached 使用yarn分离模式<br>-yh,–yarnhelp yarn session的帮助<br>-yid,–yarnapplicationId 挂到正在运行的yarnsession上<br>-yj,–yarnjar Flink jar文件的路径<br>-yjm,–yarnjobManagerMemory jobmanager的内存(单位M)<br>-ynl,–yarnnodeLabel 指定 YARN 应用程序 YARN 节点标签<br>-ynm,–yarnname 自定义yarn应用名称<br>-yq,–yarnquery 显示yarn的可用资源<br>-yqu,–yarnqueue 指定yarn队列<br>-ys,–yarnslots 指定每个taskmanager的slots数<br>-yt,–yarnship 在指定目录中传输文件<br>-ytm,–yarntaskManagerMemory 每个taskmanager的内存<br>-yz,–yarnzookeeperNamespace 用来创建ha的zk子路径的命名空间<br>-z,–zookeeperNamespace 用来创建ha的zk子路径的命名空间<br></code></pre></td></tr></table></figure><p>举个最近项目中实际用到的例子</p><figure class="highlight plaintext"><figcaption><span>run \</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs flink">-m yarn-cluster \<br>-ys $&#123;slot_count&#125; \<br>-ynm $&#123;yarn_app_name&#125; \<br>-yD taskmanager.memory.managed.fraction=0.2 \<br>-yjm $&#123;yarnjobManagerMemory&#125; \<br>-ytm $&#123;yarntaskManagerMemory&#125; \<br>-c com.itiaoling.app.ods.Kafka2Doris \<br>-z $&#123;zookeeperNamespace&#125; \<br>-d /home/appman/realtime_warehouse/jar/Analysis-1.0.jar \<br>-spring.profiles.active pro \<br>-sourceSinkType $&#123;SourceSinkEnum&#125; \<br>-businessType $&#123;BusinessTypeEnum&#125; \<br>-tableName $&#123;tableName&#125;<br><br>flink run -m yarn-cluster -ys 1 -ynm esc_goods_oc_test-mysql2kafka -yD taskmanager.memory.managed.fraction=0.2 -yjm 1024 -ytm 8192 -c com.itiaoling.app.ods.MySqlToKafka -z mysql2kafka_goods_test -d /home/appman/realtime_warehouse/jar/Analysis-2.2.jar -spring.profiles.active pro -sourceSinkType 1 -businessType 3 -tableName isc_goods_oc1_batch<br></code></pre></td></tr></table></figure><p>以上运行的jar包为Analysis-2.2.jar，</p><p>类为com.itiaoling.app.ods.MySqlToKafka，</p><p>给了1个slot</p><p>其中为类代码中接受的参数</p><p>-spring.profiles.active pro -sourceSinkType 1 -businessType 3 -tableName isc_goods_oc1_batch</p><p>taskmanager的内存指定为了8192MB&#x3D;8G</p><h3 id="本地（local）模式，仅开发使用"><a href="#本地（local）模式，仅开发使用" class="headerlink" title="本地（local）模式，仅开发使用"></a>本地（local）模式，仅开发使用</h3><p>一般可以使用这种模式进行远程debug</p><p>直接在IDEA上运行代码</p><h3 id="standalone"><a href="#standalone" class="headerlink" title="standalone"></a>standalone</h3><ol><li>flink run 前台运行</li></ol><p><code>/opt/flink/bin/flink run -p 1 -c com.test.TestLocal ./flink-streaming-report-forms-1.0-SNAPSHOT-jar-with-dependencies.jar</code></p><ol start="2"><li>flink run后台运行</li></ol><p>因上面代码是直接print出来，使用后台模式会报错，这边修改代码，直接写入hdfs，再使用后台模式提交</p><p><code># 通过 -d 表示后台执行 /opt/flink/bin/flink run -p 1 -c com.test.TestLocal -d ./flink-streaming-report-forms-1.0-SNAPSHOT-jar-with-dependencies.jar </code></p><p>flink run命令执行模板：flink run [option] <jar-file> <arguments></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">-c,<span class="hljs-attr">--class</span> &lt;classname&gt; : 需要指定的main方法的类<br><br>-C,<span class="hljs-attr">--classpath</span> &lt;url&gt; : 向每个用户代码添加url，他是通过UrlClassLoader加载。url需要指定文件的schema如（file:<span class="hljs-comment">//）</span><br><br>-d,<span class="hljs-attr">--detached</span> : 在后台运行<br><br>-<span class="hljs-selector-tag">p</span>,<span class="hljs-attr">--parallelism</span> &lt;parallelism&gt; : job需要指定env的并行度，这个一般都需要设置。<br><br>-<span class="hljs-selector-tag">q</span>,<span class="hljs-attr">--sysoutLogging</span> : 禁止logging输出作为标准输出。<br><br>-s,<span class="hljs-attr">--fromSavepoint</span> &lt;savepointPath&gt; : 基于savepoint保存下来的路径，进行恢复。<br><br>-sas,<span class="hljs-attr">--shutdownOnAttachedExit</span> : 如果是前台的方式提交，当客户端中断，集群执行的job任务也会shutdown。<br></code></pre></td></tr></table></figure><hr><h3 id="tips"><a href="#tips" class="headerlink" title="tips:"></a>tips:</h3><p>flink的slots与yarn 中的container以及cores之间的关系</p><p>flink-conf.yaml中有关slots的配置</p><p><code>taskmanager.numberOfTaskSlots: 2 每个taskmanager中的slots数量，在具体应用时，可以将 slot 数量配置为机器的 CPU 核心数，尽量避免不同任务之间对 CPU 的竞争。</code></p><p>在yarn中提交一个flink任务，container数量计算方式如下：</p><p>container.num &#x3D; taskmanager.num &#x3D; ( parallelism.default &#x2F; taskmanager.numberOfTaskSlots </p><p>举个例子：</p><p>parallelism.default &#x3D; 2 ，taskmanager.numberOfTaskSlots &#x3D; 1</p><p>提交作业后，还需要1个JobManager，所以总共需要</p><p>container为3 &#x3D; 1(AppMaster + JobManger) +2 (parallelism.default &#x2F; taskmanager.numberOfTaskSlots ) </p><p>Flink 中每一个 worker(也就是 TaskManager)都是一个JVM进程，它可以启动多个独立的线程，来并行执行多个子任务（subtask）</p>]]></content>
    
    
    <categories>
      
      <category>Flink</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据中台-08_交付速度和质量问题解决了，老板说还得“省”</title>
    <link href="/2022/05/26/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0_08-%E4%BA%A4%E4%BB%98%E9%80%9F%E5%BA%A6%E5%92%8C%E8%B4%A8%E9%87%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E4%BA%86%EF%BC%8C%E8%80%81%E6%9D%BF%E8%AF%B4%E8%BF%98%E5%BE%97%E2%80%9C%E7%9C%81%E2%80%9D/"/>
    <url>/2022/05/26/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0_08-%E4%BA%A4%E4%BB%98%E9%80%9F%E5%BA%A6%E5%92%8C%E8%B4%A8%E9%87%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E4%BA%86%EF%BC%8C%E8%80%81%E6%9D%BF%E8%AF%B4%E8%BF%98%E5%BE%97%E2%80%9C%E7%9C%81%E2%80%9D/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="060bed63bd61f32c380af8cde8b759f36e8c3ba472d2bba23eecdb4201e8a37d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数据中台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据中台</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据中台-07_同事老打脸说数据有问题，该怎么彻底解决</title>
    <link href="/2022/05/26/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-07_%E5%90%8C%E4%BA%8B%E8%80%81%E6%89%93%E8%84%B8%E8%AF%B4%E6%95%B0%E6%8D%AE%E6%9C%89%E9%97%AE%E9%A2%98%EF%BC%8C%E8%AF%A5%E6%80%8E%E4%B9%88%E5%BD%BB%E5%BA%95%E8%A7%A3%E5%86%B3/"/>
    <url>/2022/05/26/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-07_%E5%90%8C%E4%BA%8B%E8%80%81%E6%89%93%E8%84%B8%E8%AF%B4%E6%95%B0%E6%8D%AE%E6%9C%89%E9%97%AE%E9%A2%98%EF%BC%8C%E8%AF%A5%E6%80%8E%E4%B9%88%E5%BD%BB%E5%BA%95%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2566ed51be768fde909884170459075fa6e7c2eddb4fb2594543657cfe9e61d4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数据中台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据中台</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据中台-06_数据模型无法复用，归根结底还是设计问题</title>
    <link href="/2022/05/25/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-06_%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E6%97%A0%E6%B3%95%E5%A4%8D%E7%94%A8%EF%BC%8C%E5%BD%92%E6%A0%B9%E7%BB%93%E5%BA%95%E8%BF%98%E6%98%AF%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/25/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-06_%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E6%97%A0%E6%B3%95%E5%A4%8D%E7%94%A8%EF%BC%8C%E5%BD%92%E6%A0%B9%E7%BB%93%E5%BA%95%E8%BF%98%E6%98%AF%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7527c42f5bb60d00815c726169d3186b73a6d4820e976ac93cf58f08cfab69f6"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数据中台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据中台</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据中台-05_如何统一管理纷繁杂乱的数据指标？</title>
    <link href="/2022/05/25/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-05_%E5%A6%82%E4%BD%95%E7%BB%9F%E4%B8%80%E7%AE%A1%E7%90%86%E7%BA%B7%E7%B9%81%E6%9D%82%E4%B9%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8C%87%E6%A0%87%EF%BC%9F/"/>
    <url>/2022/05/25/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-05_%E5%A6%82%E4%BD%95%E7%BB%9F%E4%B8%80%E7%AE%A1%E7%90%86%E7%BA%B7%E7%B9%81%E6%9D%82%E4%B9%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8C%87%E6%A0%87%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5221dfb471a856e3125c977d8d60bf0706678295eacb4cdd559c33ec6679e5bb"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数据中台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据中台</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据中台-04_元数据中心的关键目标和技术实现方案</title>
    <link href="/2022/05/25/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-04_%E5%85%83%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83%E7%9A%84%E5%85%B3%E9%94%AE%E7%9B%AE%E6%A0%87%E5%92%8C%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/"/>
    <url>/2022/05/25/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-04_%E5%85%83%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83%E7%9A%84%E5%85%B3%E9%94%AE%E7%9B%AE%E6%A0%87%E5%92%8C%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4502d45896f32d839e21712e544920eb45014f98c22c257b7938c4f48ce426b3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数据中台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据中台</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据中台-03_数据中台建设三板斧：方法论、组织和技术</title>
    <link href="/2022/05/25/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-03_%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E5%BB%BA%E8%AE%BE%E4%B8%89%E6%9D%BF%E6%96%A7%EF%BC%9A%E6%96%B9%E6%B3%95%E8%AE%BA%E3%80%81%E7%BB%84%E7%BB%87%E5%92%8C%E6%8A%80%E6%9C%AF/"/>
    <url>/2022/05/25/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-03_%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E5%BB%BA%E8%AE%BE%E4%B8%89%E6%9D%BF%E6%96%A7%EF%BC%9A%E6%96%B9%E6%B3%95%E8%AE%BA%E3%80%81%E7%BB%84%E7%BB%87%E5%92%8C%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0c8ecd7ab646855e4e0866292182b316444610e13aee0835afbc37efe440549b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数据中台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据中台</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据中台-02_关键抉择-到底什么样的企业应该建数据中台？</title>
    <link href="/2022/05/25/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-02_%E5%85%B3%E9%94%AE%E6%8A%89%E6%8B%A9-%E5%88%B0%E5%BA%95%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BC%81%E4%B8%9A%E5%BA%94%E8%AF%A5%E5%BB%BA%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%EF%BC%9F/"/>
    <url>/2022/05/25/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-02_%E5%85%B3%E9%94%AE%E6%8A%89%E6%8B%A9-%E5%88%B0%E5%BA%95%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BC%81%E4%B8%9A%E5%BA%94%E8%AF%A5%E5%BB%BA%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4383bc25c8c6ef5fd73b8c2fd3b8ea740e5a22bdfc1b414e8ffdf44465a90b30"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数据中台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据中台</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据中台-01-前因后果-为什么说数据中台是大数据的下一站？</title>
    <link href="/2022/05/24/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-01-%E5%89%8D%E5%9B%A0%E5%90%8E%E6%9E%9C-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E6%98%AF%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%8B%E4%B8%80%E7%AB%99%EF%BC%9F/"/>
    <url>/2022/05/24/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0-01-%E5%89%8D%E5%9B%A0%E5%90%8E%E6%9E%9C-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E6%98%AF%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%8B%E4%B8%80%E7%AB%99%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b67c8246cdbc6ef6a80af65ff755911c1834f6f02caf98141bd6ce2c64b6f8ac"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数据中台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据中台</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决hexo博客标签页配置问题</title>
    <link href="/2022/05/24/%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E6%A0%87%E7%AD%BE%E9%A1%B5%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/24/%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E6%A0%87%E7%AD%BE%E9%A1%B5%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>本文介绍hexo博客搭建标签页, 并且找了网上各种解决标签页部署404问题，最后终于找到有效的解决解决方案</p><h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><p>利用hexo新建一个页面。输入以下命令。</p><p><code>hexo new page tags</code></p><h3 id="修改页面头部"><a href="#修改页面头部" class="headerlink" title="修改页面头部"></a>修改页面头部</h3><p>在根目录下的<code>source</code> 文件夹中找到 <code>tags</code> 文件夹，并打开里面的index.md文件。</p><p>在根目录下的<code>source</code> 文件夹中找到 <code>tags</code> 文件夹，并打开里面的index.md文件。<br>在头部里面添加以下代码：</p><p><code>layout: tags  //此databases可以任取，但为方便管理，推荐这样取名。并且需要记住此名称，因为后面还需要用到。</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">title</span>: tags<br><span class="hljs-attribute">date</span>: <span class="hljs-number">2022</span>-<span class="hljs-number">05</span>-<span class="hljs-number">24</span> <span class="hljs-number">00</span>:<span class="hljs-number">55</span>:<span class="hljs-number">21</span><br><span class="hljs-attribute">type</span>: tags<br><span class="hljs-attribute">layout</span>: tags<br></code></pre></td></tr></table></figure><h3 id="主题配置文件"><a href="#主题配置文件" class="headerlink" title="主题配置文件"></a>主题配置文件</h3><p>在配置文件里面，根目录的配置文件。找到类似的代码的地方。如：友链页、自定义页、关于页、标签页、分类页、归档页等写配置的地方。不一定和这个一模一样的，找到类似的代码的地方即可</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sas">menu:<br>    - &#123; <span class="hljs-keyword">key</span>: <span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-keyword">link</span>: <span class="hljs-string">&quot;/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;<br>    - &#123; <span class="hljs-keyword">key</span>: <span class="hljs-string">&quot;archive&quot;</span>, <span class="hljs-keyword">link</span>: <span class="hljs-string">&quot;/archives/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;<br>    - &#123; <span class="hljs-keyword">key</span>: <span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-keyword">link</span>: <span class="hljs-string">&quot;/categories/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;<br>    - &#123; <span class="hljs-keyword">key</span>: <span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-keyword">link</span>: <span class="hljs-string">&quot;/tags/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;<br>    - &#123; <span class="hljs-keyword">key</span>: <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-keyword">link</span>: <span class="hljs-string">&quot;/about/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span> &#125;<br>    #- &#123; <span class="hljs-keyword">key</span>: <span class="hljs-string">&quot;links&quot;</span>, <span class="hljs-keyword">link</span>: <span class="hljs-string">&quot;/links/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-link-fill&quot;</span> &#125;<br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dts"><br><span class="hljs-meta">#---------------------------</span><br><span class="hljs-meta"># 标签页</span><br><span class="hljs-meta"># Tag Page</span><br><span class="hljs-meta">#---------------------------</span><br><span class="hljs-symbol">tag:</span><br><span class="hljs-symbol">  enable:</span> true<br><span class="hljs-symbol">  banner_img:</span> <span class="hljs-keyword">/img/</span>default.png<br><span class="hljs-symbol">  banner_img_height:</span> <span class="hljs-number">80</span><br><span class="hljs-symbol">  banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><span class="hljs-symbol">  tagcloud:</span><br><span class="hljs-symbol">    min_font:</span> <span class="hljs-number">15</span><br><span class="hljs-symbol">    max_font:</span> <span class="hljs-number">30</span><br><span class="hljs-symbol">    unit:</span> px<br><span class="hljs-symbol">    start_color:</span> <span class="hljs-string">&quot;#BBBBEE&quot;</span><br><span class="hljs-symbol">    end_color:</span> <span class="hljs-string">&quot;#337ab7&quot;</span><br></code></pre></td></tr></table></figure><h3 id="确定ejs文件"><a href="#确定ejs文件" class="headerlink" title="确定ejs文件"></a>确定ejs文件</h3><p>这也是最重要的一步。添加文件。在主题目录（themes文件夹）下，打开自己的主题文件夹，找到 layout 文件夹，如果有tags.ejs即可，没有则，需要复制about.ejs 文件（根据自行的配置，找对应的文件）一份，并将其命名为 tags.ejs （名称即在第四步中的那个名称）。</p><p>然后修改，其实就只是修改了第三行的代码，其他的都没有改变。将第三行代码原来的 about 改为了 tags 而已。这个名称就是第四步里面的名称。</p><h3 id="文章加入标签"><a href="#文章加入标签" class="headerlink" title="文章加入标签"></a>文章加入标签</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: 解决hexo博客标签页配置问题<br>date: 2022<span class="hljs-string">-05</span><span class="hljs-string">-24</span> 07:52:43<br><span class="hljs-keyword">tags:</span> hexo<br></code></pre></td></tr></table></figure><hr><p>以上为建立标签页的步骤，至此正常来说标签页就已经搭建完成可以正常使用。</p><p>但我的博客Fluid主题就是报页面不存在，不过应该跟主题没关系。</p><p>尝试过各种方案并且删除tags文件夹再重建后，依然不行。以下是亲测有效的解决方案</p><h2 id="解决标签页访问404问题"><a href="#解决标签页访问404问题" class="headerlink" title="解决标签页访问404问题"></a>解决标签页访问404问题</h2><h4 id="探索过程"><a href="#探索过程" class="headerlink" title="探索过程"></a>探索过程</h4><p>hexo s上去可以正常显示标签页，但是hexo g和hexo d部署上去就不能正常显示。</p><p>至此开始搜索hexo本地预览跟部署服务器不一致怎么解决。</p><p>搜索到可以查看提交到GitHub的repository，结果发现提交的是Tags文件夹，博客的url访问尝试改成Tags则可以正常访问。而我创建的tags文件夹。于是考虑提交git时候是不是自动转成大写了。</p><p>结果检索发现Git配置默认忽略了大小写</p><p>检查hexo生成的<code>.deploy_git</code>文件夹内的文件名确实是大写的，而使用<code>hexo d</code>提交到github上之后的目录还是小写，这是因为git默认是忽略大小写的！.deploy_git是隐藏文件夹。mac本 command + shit + ，即可展示隐藏文件夹。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgdeposit_git.png"></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ol><li>删除<code>.deploy_git</code>目录</li><li>再次运行<code>hexo d</code>提交，hexo会重置git仓库，并重新生成所有文件!</li><li>打开github查看，问题解决！</li></ol><p>可以使用下面语句设置git大小写敏感，防止下次出现这样的问题：</p><p><code>git config core.ignorecase false</code></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgignorecase.png"></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Doris数据模型</title>
    <link href="/2022/05/23/Doris%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/05/23/Doris%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>本文介绍Doris的三种模型及其使用场景</p><p>Doris 的数据模型主要分为3类:</p><table><thead><tr><th>模型</th><th align="left">关键字</th><th>特点</th></tr></thead><tbody><tr><td>明细模型</td><td align="left">DUPLICATE KEY</td><td>默认模型</td></tr><tr><td>聚合模型</td><td align="left">AGGREGATE KEY</td><td>按照AGGREGATE KEY指定的字段进行聚合</td></tr><tr><td>更新模型</td><td align="left">UNIQUE KEY</td><td>按照UNIQUE KEY指定的字段为唯一键，如果重复则覆盖</td></tr></tbody></table><hr><h2 id="Duplicate-明细模型"><a href="#Duplicate-明细模型" class="headerlink" title="Duplicate 明细模型"></a>Duplicate 明细模型</h2><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-number">1.</span>需要保留原始的数据<span class="hljs-comment">(例如，原始的日志，操作记录等)</span><br><span class="hljs-number">2.</span>分析方式不固定，因为查询方式很灵活，所以传统的预聚合方式难以命中<br><span class="hljs-number">3.</span>数据更新不频繁，产生后就不太会发生变化<br><span class="hljs-number">4.</span>唯一健需要很多个字段组合在一起<br></code></pre></td></tr></table></figure><h3 id="模型原理"><a href="#模型原理" class="headerlink" title="模型原理"></a>模型原理</h3><p>Doris根据明细模型制定的key维护排序列，表中的数据会按照排序列进行排序存储</p><p>在查询中，如果有相关排序列的过滤条件时，Doris能够快速地过滤数据，降低整个查询的时间。 DUPLICATE KEY更贴切的名称应该为 “Sorted Column</p><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><p>创建表的默认数据模型就是明细模型，当导入Doris明细模型表中完全相同的两行数据时，Doris会认为是两行数据。</p><p>在使用过程中，将关联或者过滤字段放在DUPLICATE KEY里，这里注意DUPLICATE KEY必须按照顺序依次排在建表语句前面，否则会报错。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> demo_esc_commerce_config;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> demo_esc_commerce_config (<br>id <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;主键id&#x27;</span>,<br>commerce_model tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;贸易模式&#x27;</span>,<br>country_code <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;所在地区&#x27;</span>,<br>entity_id <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;关联贸易主体id&#x27;</span>,<br>currency_code <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;结算币种&#x27;</span>,<br>status tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;状态&#x27;</span>,<br><span class="hljs-keyword">INDEX</span> idx_country_code (country_code)<br>)<br>DUPLICATE KEY (id,commerce_model,country_code)<br><span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;贸易配置表&#x27;</span><br>DISTRIBUTED <span class="hljs-keyword">BY</span> HASH(id,commerce_model) BUCKETS <span class="hljs-number">1</span><br>PROPERTIES<br>(<br>  &quot;replication_num&quot; = &quot;3&quot;<br>);<br></code></pre></td></tr></table></figure><hr><h2 id="聚合模型"><a href="#聚合模型" class="headerlink" title="聚合模型"></a>聚合模型</h2><h3 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h3><p>在数据分析领域中，有很多场景需要对数据进行统计和汇总</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">1.</span>业务看指标基本都是汇总数据，例如<span class="hljs-built_in">sum</span>，<span class="hljs-built_in">count</span>等类型查询<br><span class="hljs-number">2.</span>不需要查询明细数据<br><span class="hljs-number">3.</span>原始数据不会被频繁更新，只会追加新数据<br></code></pre></td></tr></table></figure><h3 id="模型原理-1"><a href="#模型原理-1" class="headerlink" title="模型原理"></a>模型原理</h3><p>Doris会将指标按照相同的维度进行聚合。当多条数据具有相同的维度时，Doris会把指标根据sum，max，min等类型进行聚合。这个是建表时候指定的。</p><p>从而能够减少查询时所需要的处理的数据量，提升查询的效率。</p><p>数据举例：</p><table><thead><tr><th>date</th><th>country</th><th>Pv</th></tr></thead><tbody><tr><td>2022-05-23</td><td>CHN</td><td>1</td></tr><tr><td>2022-05-23</td><td>CHN</td><td>2</td></tr><tr><td>2022-05-23</td><td>USA</td><td>3</td></tr></tbody></table><p>在Doris的聚合模型的表中，存储内容会从三条数据变两条数据</p><table><thead><tr><th>date</th><th>country</th><th>Pv</th></tr></thead><tbody><tr><td>2022-05-23</td><td>CHN</td><td>3</td></tr><tr><td>2022-05-23</td><td>USA</td><td>3</td></tr></tbody></table><h3 id="使用案例-1"><a href="#使用案例-1" class="headerlink" title="使用案例"></a>使用案例</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> demo_aggregate;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> demo_esc_commerce_config (<br><span class="hljs-type">date</span> <span class="hljs-type">date</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;日期&#x27;</span>,<br>country <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;国家&#x27;</span>,<br>pv bitint sum <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;page views&#x27;</span>,<br><span class="hljs-keyword">INDEX</span> idx_country_code (country_code)<br>)<br><span class="hljs-keyword">AGGREGATE</span> KEY (<span class="hljs-type">date</span>,country)<br>DISTRIBUTED <span class="hljs-keyword">BY</span> HASH(country) BUCKETS <span class="hljs-number">1</span><br>PROPERTIES<br>(<br>  &quot;replication_num&quot; = &quot;3&quot;<br>);<br></code></pre></td></tr></table></figure><p>聚合模型目前支持的聚合函数有SUM，MIN，MAX，REPLACE</p><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h4><p>在 Doris 的聚合模型中，count(*) 这种查询的开销<strong>非常大</strong>。</p><p>在 count(<em>) 查询中，Doris 必须扫描所有的 AGGREGATE KEY 列（这里就是</em> <em>user_id</em> <em>和</em> <em>date</em>），并且聚合后，才能得到语意正确的结果。当聚合列非常多时，count(*) 查询需要扫描大量的数据。</p><p>因此，当业务上有频繁的 count(*) 查询时，我们建议用户通过增加一个**值恒为 1 的，聚合类型为 SUM 的列来模拟 count(*)**。如刚才的例子中的表结构，我们修改如下：</p><p>增加一个 count 列，并且导入数据中，该列值<strong>恒为 1</strong>。则 select count(<em>) from table; 的结果等价于 select sum(count) from table;。而后者的查询效率将远高于前者。不过这种方式也有使用限制，就是用户需要自行保证，不会重复导入 AGGREGATE KEY 列都相同的行。否则，select sum(count) from table; 只能表述原始导入的行数，而不是 select count(</em>) from table; 的语义。</p><p>另一种方式，就是 <strong>将如上的</strong> <strong>count</strong> <strong>列的聚合类型改为 REPLACE，且依然值恒为 1</strong>。那么 select sum(count) from table; 和 select count(*) from table; 的结果将是一致的。并且这种方式，没有导入重复行的限制。</p><hr><h2 id="更新模型"><a href="#更新模型" class="headerlink" title="更新模型"></a>更新模型</h2><h3 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h3><p>在有些分析场景中，分析的数据经常会发生变化。对于这些分析场景的需求，可以使用Doris的更新模型UNIQUE KEY来实现。</p><p>以下是一些适用更新模型的场景：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.已经写入的数据有大量的更新需求<br>2.需要进行实时数据分析<br>3.需要保证端到端的一致性（即保证不会重复插入）<br></code></pre></td></tr></table></figure><h3 id="模型原理-2"><a href="#模型原理-2" class="headerlink" title="模型原理"></a>模型原理</h3><p>Doris存储内部会给每一个批次导入数据分配一个版本号，在查询的时候对于主键相同的两条数据，会根据版本的大小进行返回，版本大的被返回，版本小的不会被返回。</p><table><thead><tr><th>ID</th><th>value</th><th>_version</th></tr></thead><tbody><tr><td>1</td><td>100</td><td>1</td></tr><tr><td>1</td><td>101</td><td>2</td></tr><tr><td>2</td><td>100</td><td>3</td></tr><tr><td>2</td><td>103</td><td>4</td></tr></tbody></table><p>那么用户能够看到的数据如下：</p><table><thead><tr><th>ID</th><th>value</th></tr></thead><tbody><tr><td>1</td><td>100</td></tr><tr><td>2</td><td>102</td></tr></tbody></table><p>通过这种机制，Doris可以支持对于频繁更新数据的分析</p><h3 id="使用案例-2"><a href="#使用案例-2" class="headerlink" title="使用案例"></a>使用案例</h3><p>例如订单分析场景中，经常会有根据订单状态进行的统计分析需求。</p><p>因为订单状态经常改表，而create_time和order_id不会改变，并且经常会在查询中作为过滤条件。所以可以将create_time和order_id两个列作为这个表的主键（UNIQUE KEY定义）</p><p>以下是建表例子：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> ods.ods_esc_usr_company_business_country;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> ods.ods_esc_usr_company_business_country (<br>  id <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;id&#x27;</span>,<br>  company_id <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;公司id&#x27;</span>,<br>  country_code <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;国家编码&#x27;</span>,<br>  country_name <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;国家名称&#x27;</span>,<br>  creator <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;创建人&#x27;</span>,<br>  modifier <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;修改人&#x27;</span>,<br>  create_time datetime  <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  update_time datetime  <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;更新时间&#x27;</span><br>)<br><span class="hljs-keyword">UNIQUE</span> KEY (id,company_id)<br><span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;已开通代销资质国家&#x27;</span><br>DISTRIBUTED <span class="hljs-keyword">BY</span> HASH(id,company_id) BUCKETS <span class="hljs-number">1</span><br>PROPERTIES<br>(<br>&quot;replication_num&quot; = &quot;3&quot;<br>);<br><br></code></pre></td></tr></table></figure><h4 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips:"></a>Tips:</h4><p>如果业务对实时性的要求是分钟级别，那么每分钟导入一次更新数据即可，不需要秒级的导入。</p><h3 id="数据模型的选择建议"><a href="#数据模型的选择建议" class="headerlink" title="数据模型的选择建议"></a>数据模型的选择建议</h3><p>因为数据模型在建表时就已经确定，且<strong>无法修改</strong>。所以，选择一个合适的数据模型<strong>非常重要</strong>。</p><ol><li><p>Aggregate 模型可以通过预聚合，极大地降低聚合查询时所需扫描的数据量和查询的计算量，非常适合有固定模式的报表类查询场景。但是该模型对 count(*) 查询很不友好，同时因为固定了 Value 列上的聚合方式，在进行其他类型的聚合查询时，需要考虑语意正确性。</p></li><li><p>Unique 模型针对需要唯一主键约束的场景，可以保证主键唯一性约束。但是<strong>无法利用 ROLLUP 等预聚合带来的查询优势</strong>（因为本质是 REPLACE，没有 SUM 这种聚合方式）。</p></li><li><p>Duplicate 适合任意维度的 Ad-hoc 查询。虽然同样无法利用预聚合的特性，但是不受聚合模型的约束，可以发挥列存模型的优势（只读取相关列，而不需要读取所有 Key 列）。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Doris</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Doris</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客使用手册</title>
    <link href="/2022/05/23/hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <url>/2022/05/23/hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<p>本文介绍利用hexo写博客的常用命令和功能</p><p>包括创建博客，预览文章，部署博客，文章加密，更换主题，免费图床</p><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><h4 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h4><p>在博客目录下输入以下命令时，会默认使用post布局，然后自动在<code>source\_posts</code>目录生成一个文章名.md文件：</p><p><code>hexo n 文章名 # 例如 hexo n hexo博客使用手册</code></p><p>另外如果在_config.yml配置文件中将有设置文章的目录post_asset_folder: true</p><p>则上述命令还会创建同名文件夹</p><p>当然你还可以指定布局：</p><p><code>$ hexo n [layout_name] draft1</code></p><p>该命令创建了一个使用特定布局的名为draft1的文章。</p><p>打开之前创建的text1.md文件，我们可以看到文章开头包含以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">text1</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-05-23 13:29:36</span><br><span class="hljs-attr">tags:</span> <span class="hljs-string">hexo</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">blog</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>你显示的内容可能未必与我一样，不必担心, 这是可以自定义的。只需要知道，上面的内容在hexo被称作<strong>Front-matter，实际上就是该文章的一些变量，用于实现一些特定的功能</strong>。比如使<code>author: yuting</code>，那么渲染后的文章中将显示文章作者为<code>yuting</code>。</p><p>如何自定义布局呢？实际上，布局是一个markdown文件，它们保存在<code>scaffolds/</code>目录下，可以看到hexo自带的三种布局其实就是三个<code>.md</code>文件：</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgscaffolds.png"></p><p>而每一个文件中的内容实际只包含一个Front-matter。</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgscanfolds_post.png"></p><p>因此，你可以在这里修改布局或者建立新的布局，然后创建文章时使用这些布局。</p><h4 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h4><p>使用<code>hexo n draft draft1</code>命令将在<code>source\</code>目录下创建<code>_drafts</code>目录，并生成一个<code>draft1.md</code>文件。</p><p>当你编辑完草稿后，可以把文章推送到<code>_posts</code>目录下，通过下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo publish &lt;file_name&gt;<br></code></pre></td></tr></table></figure><p>可以使用<code>hexo --draft</code>命令可以查看已有草稿。</p><h4 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h4><p>以下将介绍一些markdown语法。由于markdown在不同平台的实现略有不用，因此下面的内容只会介绍hexo默认支持的语法。此外，由于主题不同，不同机器显示效果也有会一定差异。</p><p>以下是本人操作的环境：</p><p>编辑器：typora（可以自行去下载）</p><p>hexo主题：Fluid</p><p>操作系统：mac</p><h5 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h5><p><code>![]() 小括号（）里添加图片链接 []添加图片名称，也可以不写</code></p><h5 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h5><p><code>##### 标题 #一个表示一级标题，注意文字和#之间有空格</code></p><h5 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h5><p><code>**加粗** </code></p><h5 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h5><p><code>``` ```</code></p><h5 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;480&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;320&quot;</span> <span class="hljs-attr">controls</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">video_path</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="引用区块"><a href="#引用区块" class="headerlink" title="引用区块"></a>引用区块</h5><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">这也是引用</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">引用<span class="hljs-number">1</span></span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">饮用<span class="hljs-number">2</span></span><br></code></pre></td></tr></table></figure><h3 id="预览文章"><a href="#预览文章" class="headerlink" title="预览文章"></a>预览文章</h3><p>编写好markdown文章后接下来就需要渲染、生成静态文件，启动本地端口查看效果了。</p><p>启动本地端口命令：<code>hexo server</code>或 <code>hexo s</code></p><p>生成静态文件之后，便要启动本地端口。然后localhost:4000</p><p>删除静态文件命令：<code>hexo clean</code></p><p>生成静态文件命令：<code>hexo generate</code>或 <code>hexo g</code></p><p>部署静态文件命令：<code>hexo d</code></p><h3 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h3><p><strong>安装hexo-blog-encrypt插件</strong></p><p><code>在hexo目录下 npm install hexo-blog-encrypt</code></p><p>在<code>/Hexo/_config.yml</code>文件中添加内容:</p><p>encrypt: </p><p>​     enable:true</p><p><strong>使用插件</strong></p><p>在想要使用加密功能的Blog头部加上对应文字</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---    </span><br><span class="hljs-attr">password:</span> <span class="hljs-string">smile</span>   <br><span class="hljs-attr">abstract:</span> <span class="hljs-string">Welcome</span> <span class="hljs-string">to</span> <span class="hljs-string">my</span> <span class="hljs-string">blog,</span> <span class="hljs-string">enter</span> <span class="hljs-string">password</span> <span class="hljs-string">to</span> <span class="hljs-string">read.</span> <br><span class="hljs-attr">message:</span> <span class="hljs-string">密码输入框上描述性内容</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><ul><li>password: 该Blog使用的密码</li><li>abstract: Blog摘要文字（少量）</li><li>message: 密码框上的描述性文字</li></ul><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>以fluid主题举例子</p><p>1.在GitHub上克隆你喜欢的hexo主题到本地博客的根目录的theme文件夹下</p><p>  获取最新版本</p><p>  方式1⃣️：</p><p>  Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令：</p><p><code>npm install --save hexo-theme-fluid</code></p><p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题_config.yml内容复制过去</p><p>当同时存在 <code>_config.fluid.yml</code>和<code>_config.yml</code>时，_config.yml配置无效</p><p>  方式2⃣️：（我博客目前是这种方法）</p><p> 下载 <a href="https://https//github.com/fluid-dev/hexo-theme-fluid/releases">最新 release 版本</a>解压到 themes 目录，并将解压出的文件夹重命名为 <code>fluid</code></p><p>2.指定主题</p><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><p>参考fluid主题操作手册 <a href="https://hexo.fluid-dev.com/">https://hexo.fluid-dev.com/</a></p><p>Fluid 是基于 Hexo 的一款 Material Design 风格的主题，由</p><p> <a href="https://github.com/fluid-dev">Fluid-dev</a>负责开发与维护。</p><p>主题 GitHub: <a href="https://github.com/fluid-dev/hexo-theme-fluid"></a></p><p>预览网站：<a href="https://hexo.fluid-dev.com/">Fluid’s blog</a>,   <a href="https://zkqiang.cn/">zkqiang’s blog</a></p><h3 id="免费图床"><a href="#免费图床" class="headerlink" title="免费图床"></a>免费图床</h3><p>在尝试通过 Coding 持续集成自动将 GitHub 仓库实时同步到 Coding 仓库 失败后，果断采用 PicGo + GitHub 搭建个人图床工具，并且成功了。呜呜呜</p><p>Coding 持续集成我一直构建失败</p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgCoding_%E6%9E%84%E5%BB%BA%E5%A4%B1%E8%B4%A5.png"></p><p>Coding构建可以参考：<a href="https://hexo.fluid-dev.com/posts/coding-imagehost/">Coding构建</a>   ,我就不做介绍了，我都没构建成功😩</p><h5 id="PicGo-GitHub-搭建个人图床工具"><a href="#PicGo-GitHub-搭建个人图床工具" class="headerlink" title="PicGo + GitHub 搭建个人图床工具"></a>PicGo + GitHub 搭建个人图床工具</h5><p><strong>1.Github仓库设置</strong></p><p>流程：新建 public 仓库 -&gt; 创建 token -&gt; 复制 token 备用</p><p>​    <strong>新建 public 仓库 ：</strong></p><p>​    点击 git 主页右上角的 <code>+</code> 创建 <code>New repository</code>；</p><p>​    填写仓库信息，例如我就创建了一个 <code>PicGo</code> 的仓库。这里注意，仓库得设置为 <code>Public</code> 因为后面通过客户端访问算是外部访问，因此无法访问 <code>Private</code> ，这样的话图片传上来之后只能存储不能显示。所以要设置为 <code>Public</code>。</p><p>​    <strong>创建 token并复制保存</strong></p><p>此时仓库已经建立，点击右上角头像，然后进入设置；</p><p>在页面最下找到 <code>Developer settings</code>，点击进入；</p><p><code>Personal access tokens</code> 创建 <code>token</code>；</p><p>填 description（也是随心填），勾选复选框 repo ，接着到页面底部 <code>Generate token</code> 就完成了；</p><p>然后复制生成一串字符 token，这个 token 只出现一次，所以要保存一下（我一般记在微信收藏）。</p><p><strong>2.PicGo 客户端配置</strong></p><p><strong>下载&amp;安装</strong>  <a href="https://github.com/Molunerfinn/PicGo">PicGo</a></p><p><strong>配置</strong></p><p>仓库名      即你的仓库名<br>分支名      默认 master<br>Token      就是刚刚复制的那一串字符<br>存储路径 这个可以填也可以不填，填了的话图片就上传到 git 中 data 这个文件夹<br>域名         <code>https://raw.githubusercontent.com/yefcion/cloudimg/master</code></p><p>域名要改一下 格式 <code>https://raw.githubusercontent.com/[username]/[仓库名]/master</code></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgPicGo_setting.png"></p><p>然后点确定就可以了。</p><p>然后关于上传的快捷键设置。默认的是 Mac 按键，推荐改成 <code>Ctrl + alt +c</code>。</p><p>综上，操作完成。</p><p>本方案唯一缺点，不能私人。但是考虑到 GitHub 上传的图在列表里没法预览，应该没人会闲着没事翻记录。。</p><p>​     </p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客从win8迁移到mac</title>
    <link href="/2022/05/22/hexo%E5%8D%9A%E5%AE%A2%E4%BB%8Ewin8%E8%BF%81%E7%A7%BB%E5%88%B0mac/"/>
    <url>/2022/05/22/hexo%E5%8D%9A%E5%AE%A2%E4%BB%8Ewin8%E8%BF%81%E7%A7%BB%E5%88%B0mac/</url>
    
    <content type="html"><![CDATA[<p>本文介绍：如何从hexo博客从win8迁移到mac</p><p>最近换电脑，然后看到同组大佬的hexo博客已经写到130+，在大佬的刺激下准备把之前荒废的博客重新打理起来。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><strong>1.安装brew</strong></p><p><code>/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</code></p><p>请输入序号：输入1即可</p><p>安装完成后关闭终端界面</p><p>查看是否安装完成</p><p><code>brew --version</code></p><p><img src="https://raw.githubusercontent.com/YUTING0907/PicGo/main/imgbrew_version.png"></p><p><strong>2.安装git和node.js</strong></p><p><code>brew install git </code></p><p><code>brew install node</code></p><p><strong>3. 安装hexo</strong></p><p>建立博客的根目录</p><p><code>mkdir blog #这里目录名字自己任意取名</code> </p><p>在根目录下安装hexo</p><p><code>npm install -g hexo</code></p><p>安装完成后会生成blog&#x2F;node_modules文件夹和 blog&#x2F;package-lock.json、package.json文件（这两文件不存在的话会导致hexo s、hexo g、hexo d等hexo命令失效，当时我是误删了这两文件一度怀疑人生）</p><h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><p><strong>4.初始化hexo</strong></p><p>环境准备完毕之后初始化hexo</p><p><code>cd blog </code></p><p><code>hexo init</code></p><p><code>hexo s #部署到本地localhost预览 </code></p><p>访问localhost:4000查看是否成功初始化</p><p><strong>5. 生成ssh密钥</strong></p><p><code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot; #github注册邮箱</code></p><p>运行后进入.ssh文件夹:</p><p><code>cd ～/.ssh</code></p><p>查看id_rsa.pub文件，复制里面的所有内容</p><p><code>cat id_rsa.pub</code></p><p>网页打开github设置：<strong>setting -》 ssh and gpg keys</strong>，添加新的ssh key，把刚才复制的内容粘贴进去。</p><p>保存后，邮箱会收到一封验证邮件，记得通过验证。</p><h3 id="文件迁移"><a href="#文件迁移" class="headerlink" title="文件迁移"></a>文件迁移</h3><p><strong>6.文件配置转移</strong></p><p>将win8里博客根目录下的：</p><p>_config.yml,</p><p>scaffolds,</p><p>source,</p><p>themes</p><p>复制并覆盖到mac博客根目录下。</p><p><strong>🌟关于如何windows如何传输文件到mac</strong></p><p>同一网络下。</p><p>windows：文件夹属性 -&gt; 共享 -&gt; 共享（得到网路路径）</p><p>mac：访达 -&gt; 连接服务器 -&gt; 输入smb:&#x2F;&#x2F;网络路径</p><p><strong>7.测试博客是否成功迁移</strong></p><ul><li>使用hexo s、hexo g、hexo d测试，无报错即成功。</li></ul><p><strong>问题1: 当输入hexo g时可能会出现</strong></p><p><code>Enter passphrase for key ‘/Users/mac/.ssh/id_rsa </code></p><ul><li><p>这里就是要输入密码，每次输入密码比较麻烦</p></li><li><p>在终端输入<code>ssh-add ~/.ssh/id_rsa</code> 然后输入本机密码之后</p></li></ul><p>​        会出现<code>Identity added: /Users/tingyu/.ssh/id_rsa (这里会显示github注册邮箱)</code>，之后hexo部署都不需要输入密码了</p><p><strong>问题2: spawn failed</strong></p><p>多系统混合编写导致的问题</p><p><code>cd进.deploy_git文件夹，输入git config –global core.autocrlf false</code></p><p>参考链接：<a href="https://blog.csdn.net/soyawww/article/details/118147820">https://blog.csdn.net/soyawww/article/details/118147820</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-应用-实现2048</title>
    <link href="/2019/12/28/python%E5%AE%9E%E7%8E%B02048/"/>
    <url>/2019/12/28/python%E5%AE%9E%E7%8E%B02048/</url>
    
    <content type="html"><![CDATA[<hr><p>本篇文章是利用python 实现2048小游戏<br>目的：为了提高自己的编程思路</p><p>环境：win8+python3.6+curses模块 Pycharm<br>适用人群：python入门+想用python做点事情的朋友们</p><p>大家可能都玩过2048，我记得那时候还蛮火的。不过那个时候我还没有接触编程，根本想不到自己今天还会写代码。。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><strong>游戏规则</strong>：玩家通过 w s a d 控制数字移动方向，达成 2048 这个数字即获胜。</p><p>每次可以选择一个方向移动，数字便会朝这个方向移动，如果遇到相同数字就相加，遇到不同数字或者边界就停止移动。同时会在空白的地方生成 2 或者 4 的随机数字。通过不断相撞、相加，最后达成 2048 这个数字。</p><p><strong>编程思路：</strong></p><p><strong>1.首先想象一下游戏的几个状态：</strong></p><p>状态1：初始化状态(也就是刚开始游戏）<br>状态2：游戏中(Game ing……)<br>状态3：你赢了(Win)<br>状态4：你输了(Game Over)</p><p><strong>2.用户行为</strong></p><p>用户通过行为(action)改变来完成一个游戏状态到另一个游戏状态的该表，比如用户上移，下移，左移，右移，重置和退出。</p><p><strong>3.由一个状态转化到另一个状态</strong></p><p>分析一下从一个状态到下一个状态的所有可能性：<br>1.当上一个状态是初始化(Init)状态时，下一个状态肯定是游戏中(Game ing…)的状态。</p><p>2.当上一个状态为游戏中(Game ing…)的状态时，下一个状态要根据用户的输入来判断，如用户输入Restart,则下一个状态返回为初始化状态(Init)，如用户输入Exit的时候，下一个状态转换为退出游戏(Exit),</p><p>用户还可以上下左右移动，这时候下一个状态可能是你输了(Game Over)或者你赢了(Win)，再或者继续游戏。</p><p>3.当上一个状态为你输了(Game Over)，用户输入Restart，下一个状态可能为初始化(Init)状态，用户输入Exit的时候，下一个状态转换为退出游戏(Exit)。</p><p>4.当上一个状态为你赢了(Win)，用户输入Restart，下一个状态可能为初始化(Init)状态，用户输入Exit的时候，下一个状态转换为退出游戏(Exit)。</p><p>其中3和4神似，可以合并起来得到not_game的功能。</p><p>上述文字用图表示如下：</p><p>! [ 图片来自实验楼] ( <a href="http://m.qpic.cn/psc?/V10c1VbY1Y4Fvm/3pY6KhS62k*1Vm7UATlxq*dT9N4M9SFdcoa2exyDwTjMQRzdwgQxzI3eywPjhcCPWMtBAbo8u2e.zNSVqh5WGr9RvKTwx9YMevj37h84A.s!/b&amp;bo=ZgKCAQAAAAADF9U!&amp;rf=viewer_4&amp;t=5">http://m.qpic.cn/psc?/V10c1VbY1Y4Fvm/3pY6KhS62k*1Vm7UATlxq*dT9N4M9SFdcoa2exyDwTjMQRzdwgQxzI3eywPjhcCPWMtBAbo8u2e.zNSVqh5WGr9RvKTwx9YMevj37h84A.s!/b&amp;bo=ZgKCAQAAAAADF9U!&amp;rf=viewer_4&amp;t=5</a> )</p><p><strong>另外除非用户按代表退出的按键(Exit)或者游戏被玩死了,否则游戏一直被挂起。</strong></p><p>根据以上分析，下面可以初略的搭建程序大致的框架：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">stdscr</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>():<br>        <span class="hljs-comment"># 重置游戏棋盘</span><br>        game_field.reset()<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Game&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">game</span>():<br>        <span class="hljs-comment"># 画出 GameOver 或者 Win 的界面</span><br>        game_field.draw(stdscr)<br>        <span class="hljs-comment"># 读取用户输入得到action，判断是重启游戏还是结束游戏</span><br>        action = get_user_action(stdscr)<br><br>        <span class="hljs-keyword">if</span> action ==<span class="hljs-string">&#x27;Restart&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Init&#x27;</span><br>        <span class="hljs-keyword">if</span> action==<span class="hljs-string">&#x27;Exit&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Exit&#x27;</span><br>        <span class="hljs-keyword">if</span> game_field.move(action):<br>            <span class="hljs-keyword">if</span> game_field.is_win():<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Win&#x27;</span><br>            <span class="hljs-keyword">if</span> game_field.is_gameover():<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Gameover&#x27;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Game&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">not_game</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-comment"># 画出 GameOver 或者 Win 的界面</span><br>        game_field.draw(stdscr)<br>        <span class="hljs-comment"># 读取用户输入得到action，判断是重启游戏还是结束游戏</span><br>        action = get_user_action(stdscr)<br>        responses = defaultdict(<span class="hljs-keyword">lambda</span>:state)<br>        responses[<span class="hljs-string">&#x27;Restart&#x27;</span>], responses[<span class="hljs-string">&#x27;Exit&#x27;</span>] = <span class="hljs-string">&#x27;Init&#x27;</span>,<span class="hljs-string">&#x27;Exit&#x27;</span><br>        <span class="hljs-keyword">return</span> responses[action]<br><br><span class="hljs-comment"># 游戏盘的四种状态</span><br>    state_actions=&#123;<br>        <span class="hljs-string">&#x27;Init&#x27;</span>:init,<br>        <span class="hljs-string">&#x27;Win&#x27;</span>:<span class="hljs-keyword">lambda</span>:not_game(<span class="hljs-string">&#x27;Win&#x27;</span>),<br>        <span class="hljs-string">&#x27;Gameover&#x27;</span>:<span class="hljs-keyword">lambda</span>:not_game(<span class="hljs-string">&#x27;Gameover&#x27;</span>),<br>        <span class="hljs-string">&#x27;Game&#x27;</span>:game<br>    &#125;<br><br>    game_field = GameField(win=<span class="hljs-number">2048</span>)<br>    state = <span class="hljs-string">&#x27;Init&#x27;</span><br>    <span class="hljs-keyword">while</span> state!=<span class="hljs-string">&#x27;Exit&#x27;</span>:<br>        state = state_actions[state]()<br></code></pre></td></tr></table></figure><p>4.丰富框架<br>大体的骨架搭好了，下面让它完善起来。</p><p>分为两类：<br>第一类，把它叫做通用工具类。</p><p>这两个操作主要是用户在操作游戏之后对棋盘状态的变化以及修改，拥有这两个函数能够节省不少的代码量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">transpose</span>(<span class="hljs-params">field</span>):<br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">list</span>(row) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(*field)]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">invert</span>(<span class="hljs-params">field</span>):<br>    <span class="hljs-keyword">return</span> [row[::-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> field]<br></code></pre></td></tr></table></figure><p>如下为用户输入函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">actions = [<span class="hljs-string">&#x27;Up&#x27;</span>, <span class="hljs-string">&#x27;Left&#x27;</span>, <span class="hljs-string">&#x27;Down&#x27;</span>, <span class="hljs-string">&#x27;Right&#x27;</span>, <span class="hljs-string">&#x27;Restart&#x27;</span>, <span class="hljs-string">&#x27;Exit&#x27;</span>]<br><span class="hljs-comment"># 分别用 W（上），A（左），S（下），D（右），R（重置），Q（退出），进行输入来操作游戏，这里考虑到大写锁定键锁定的情况：</span><br>letter_codes = [<span class="hljs-built_in">ord</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;WASDRQwasdrq&#x27;</span>]<br>actions_dict = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(letter_codes, actions*<span class="hljs-number">2</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user_action</span>(<span class="hljs-params">keyboard</span>):<br>    char = <span class="hljs-string">&#x27;N&#x27;</span><br>    <span class="hljs-comment">#阻塞＋循环，直到获得用户有效输入才返回对应行为：</span><br>    <span class="hljs-keyword">while</span> char <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> actions_dict:<br>        char = keyboard.getch()<br>    <span class="hljs-keyword">return</span> actions_dict[char]<br></code></pre></td></tr></table></figure><p>第二大类：棋盘类<br>包含重置棋盘、棋盘走一步、判断输赢、绘制游戏界面、随机生成一个 2 或者 4、判断能否移动的功能。</p><p>重置棋盘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#重置棋盘</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reset</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">if</span> self.score&gt;self.highscore:<br>        self.highscore = self.score<br>    self.score = <span class="hljs-number">0</span><br>    self.field = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.width)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.height)]<br>    self.spawn()<br>    self.spawn()<br></code></pre></td></tr></table></figure><p>棋盘走一步</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">self,direction</span>):<br>    <span class="hljs-comment">#一行相左合并</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">move_row_left</span>(<span class="hljs-params">row</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">tighten</span>(<span class="hljs-params">row</span>): <span class="hljs-comment">#把零散的非零单元挤到一块</span><br>            new_row = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> row <span class="hljs-keyword">if</span> i!=<span class="hljs-number">0</span>]<br>            new_row+=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(row)-<span class="hljs-built_in">len</span>(new_row))]<br>            <span class="hljs-keyword">return</span> new_row<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">row</span>):<br>            pair=<span class="hljs-literal">False</span><br>            new_row=[]<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(row)):<br>                <span class="hljs-keyword">if</span> pair:<br>                    <span class="hljs-comment"># 合并后，加入乘 2 后的元素在 0 元素后面</span><br>                    new_row.append(<span class="hljs-number">2</span>*row[i])<br>                    self.score+=<span class="hljs-number">2</span>*row[i]<br>                    pair=<span class="hljs-literal">False</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">if</span> i+<span class="hljs-number">1</span>&lt;<span class="hljs-built_in">len</span>(row) <span class="hljs-keyword">and</span> row[i]==row[i+<span class="hljs-number">1</span>]:<br>                        pair=<span class="hljs-literal">True</span><br>                        <span class="hljs-comment"># 不能合并，新列表中加入该元素</span><br>                        new_row.append(<span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">else</span>:<br>                        new_row.append(row[i])<br>            <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(new_row)==<span class="hljs-built_in">len</span>(row)<br>            <span class="hljs-keyword">return</span> new_row<br>        <span class="hljs-comment"># 先挤到一块再合并再挤到一块</span><br>        <span class="hljs-keyword">return</span> tighten(merge(tighten(row)))<br><br>    <span class="hljs-comment"># 创建 moves 字典，把不同的棋盘操作作为不同的 key，对应不同的方法函数</span><br>    moves=&#123;&#125;<br>    moves[<span class="hljs-string">&#x27;Left&#x27;</span>] = <span class="hljs-keyword">lambda</span> filed:[move_row_left(row) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> filed]<br>    moves[<span class="hljs-string">&#x27;Right&#x27;</span>] = <span class="hljs-keyword">lambda</span> filed:invert(moves[<span class="hljs-string">&#x27;Left&#x27;</span>](invert(filed)))<br>    moves[<span class="hljs-string">&#x27;Up&#x27;</span>] = <span class="hljs-keyword">lambda</span> field:transpose(moves[<span class="hljs-string">&#x27;Left&#x27;</span>](transpose(field)))<br>    moves[<span class="hljs-string">&#x27;Down&#x27;</span>] = <span class="hljs-keyword">lambda</span> field:transpose((moves[<span class="hljs-string">&#x27;Right&#x27;</span>](transpose(field))))<br><br>    <span class="hljs-keyword">if</span> direction <span class="hljs-keyword">in</span> moves:<br>        <span class="hljs-keyword">if</span> self.move_is_possible(direction):<br>            self.field = moves[direction](self.field)<br>            <span class="hljs-comment">#生成一个随机2或者4</span><br>            self.spawn()<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>判断输赢</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 判断输赢</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_win</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">any</span>(<span class="hljs-built_in">any</span>(i&gt;=self.win_value <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> row) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> self.field)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_gameover</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">any</span>(self.move_is_possible(move) <span class="hljs-keyword">for</span> move <span class="hljs-keyword">in</span> actions)<br></code></pre></td></tr></table></figure><p>绘制游戏界面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params">self, screen</span>):<br>     help_string1 = <span class="hljs-string">&#x27;(W)Up (S)Down (A)Left (D)Right&#x27;</span><br>     help_string2 = <span class="hljs-string">&#x27;     (R)Restart (Q)Exit&#x27;</span><br>     gameover_string = <span class="hljs-string">&#x27;           GAME OVER&#x27;</span><br>     win_string = <span class="hljs-string">&#x27;          YOU WIN!&#x27;</span><br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">cast</span>(<span class="hljs-params">string</span>):<br>         screen.addstr(string+<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>     <span class="hljs-comment"># 绘制水平分割线</span><br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_hor_separator</span>():<br>         line = <span class="hljs-string">&#x27;+&#x27;</span>+(<span class="hljs-string">&#x27;+------&#x27;</span> * self.width + <span class="hljs-string">&#x27;+&#x27;</span>)[<span class="hljs-number">1</span>:]<br>         <span class="hljs-comment"># defaultdict传入为函数时，可以实现value为某个常量，使用lambda可以使得代码更为简洁</span><br>         separator = defaultdict(<span class="hljs-keyword">lambda</span>: line)<br>         <span class="hljs-comment">#hasattr(object, name) 判断object对象中是否存在name属性</span><br>         <span class="hljs-comment"># python中的函数是一种对象，它有属于对象的属性。函数还可以自定义自己的属性。注意，属性是和对象相关的，和作用域无关。</span><br>         <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(draw_hor_separator,<span class="hljs-string">&#x27;counter&#x27;</span>):<br>             draw_hor_separator.counter=<span class="hljs-number">0</span><br>         cast(separator[draw_hor_separator.counter])<br>         draw_hor_separator.counter+=<span class="hljs-number">1</span><br><br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_row</span>(<span class="hljs-params">row</span>):<br>         cast(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-string">&#x27;|&#123;: ^5&#125; &#x27;</span>.<span class="hljs-built_in">format</span>(num) <span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;|      &#x27;</span> <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> row) + <span class="hljs-string">&#x27;|&#x27;</span>)<br><br>     screen.clear()<br><br>     cast(<span class="hljs-string">&#x27;SCORE: &#x27;</span> + <span class="hljs-built_in">str</span>(self.score))<br>     <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> != self.highscore:<br>         cast(<span class="hljs-string">&#x27;HGHSCORE: &#x27;</span> + <span class="hljs-built_in">str</span>(self.highscore))<br><br>     <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> self.field:<br>         draw_hor_separator()<br>         draw_row(row)<br>     draw_hor_separator()<br><br>     <span class="hljs-keyword">if</span> self.is_win():<br>         cast(win_string)<br>     <span class="hljs-keyword">else</span>:<br>         <span class="hljs-keyword">if</span> self.is_gameover():<br>             cast(gameover_string)<br>         <span class="hljs-keyword">else</span>:<br>             cast(help_string1)<br>     cast(help_string2)<br><br></code></pre></td></tr></table></figure><p>随机生成一个 2 或者 4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">spawn</span>(<span class="hljs-params">self</span>):<br>    new_element = <span class="hljs-number">4</span> <span class="hljs-keyword">if</span> randrange(<span class="hljs-number">100</span>) &gt; <span class="hljs-number">89</span> <span class="hljs-keyword">else</span> <span class="hljs-number">2</span><br>    (i, j) = choice([(i, j) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.width) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.height) <span class="hljs-keyword">if</span> self.field[i][j] == <span class="hljs-number">0</span>])<br>    self.field[i][j] = new_element<br></code></pre></td></tr></table></figure><p>判断能否移动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 判断是否能移动</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">move_is_possible</span>(<span class="hljs-params">self, dictions</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">row_is_left_moveable</span>(<span class="hljs-params">row</span>):<br>            <span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">i</span>):<br>                <span class="hljs-comment"># 当左边有空位（0），右边有数字时，可以向左移动</span><br>                <span class="hljs-keyword">if</span> row[i] == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> row[i + <span class="hljs-number">1</span>] != <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>                <span class="hljs-comment"># 当左边有一个数和右边的数相等时，可以向左合并</span><br>                <span class="hljs-keyword">if</span> row[i] != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> row[i + <span class="hljs-number">1</span>] == row[i]:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">any</span>(change(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(row) - <span class="hljs-number">1</span>))<br><br>        check = &#123;&#125;<br>        <span class="hljs-comment"># 判断矩阵每一行有没有可以左移动的元素</span><br>        check[<span class="hljs-string">&#x27;Left&#x27;</span>] = <span class="hljs-keyword">lambda</span> field: <span class="hljs-built_in">any</span>(row_is_left_moveable(row) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> field)<br>        <span class="hljs-comment"># 判断矩阵每一行有没有可以右移动的元素。这里只用进行判断，所以矩阵变换之后，不用再变换复原</span><br>        check[<span class="hljs-string">&#x27;Right&#x27;</span>] = <span class="hljs-keyword">lambda</span> field: check[<span class="hljs-string">&#x27;Left&#x27;</span>](invert(field))<br><br>        check[<span class="hljs-string">&#x27;Up&#x27;</span>] = <span class="hljs-keyword">lambda</span> field: check[<span class="hljs-string">&#x27;Left&#x27;</span>](transpose(field))<br><br>        check[<span class="hljs-string">&#x27;Down&#x27;</span>] = <span class="hljs-keyword">lambda</span> field: check[<span class="hljs-string">&#x27;Right&#x27;</span>](transpose(field))<br><br>        <span class="hljs-keyword">if</span> dictions <span class="hljs-keyword">in</span> check:<br>            <span class="hljs-keyword">return</span> check[dictions](self.field)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br></code></pre></td></tr></table></figure><p>附录：</p><ul><li>附所有源代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!user/bin/env/python3</span><br><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randrange, choice<br><span class="hljs-keyword">import</span> curses<br><br>actions = [<span class="hljs-string">&#x27;Up&#x27;</span>, <span class="hljs-string">&#x27;Left&#x27;</span>, <span class="hljs-string">&#x27;Down&#x27;</span>, <span class="hljs-string">&#x27;Right&#x27;</span>, <span class="hljs-string">&#x27;Restart&#x27;</span>, <span class="hljs-string">&#x27;Exit&#x27;</span>]<br><span class="hljs-comment"># 分别用 W（上），A（左），S（下），D（右），R（重置），Q（退出），进行输入来操作游戏，这里考虑到大写锁定键锁定的情况：</span><br>letter_codes = [<span class="hljs-built_in">ord</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;WASDRQwasdrq&#x27;</span>]<br>actions_dict = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(letter_codes, actions*<span class="hljs-number">2</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user_action</span>(<span class="hljs-params">keyboard</span>):<br>    char = <span class="hljs-string">&#x27;N&#x27;</span><br>    <span class="hljs-comment">#阻塞＋循环，直到获得用户有效输入才返回对应行为：</span><br>    <span class="hljs-keyword">while</span> char <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> actions_dict:<br>        char = keyboard.getch()<br>    <span class="hljs-keyword">return</span> actions_dict[char]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">transpose</span>(<span class="hljs-params">field</span>):<br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">list</span>(row) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(*field)]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">invert</span>(<span class="hljs-params">field</span>):<br>    <span class="hljs-keyword">return</span> [row[::-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> field]<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GameField</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,height=<span class="hljs-number">4</span>, width=<span class="hljs-number">4</span>, win=<span class="hljs-number">2048</span></span>):<br>        self.height = height<br>        self.width = width<br>        self.win_value =win <span class="hljs-comment">#过关分数</span><br>        self.score = <span class="hljs-number">0</span>      <span class="hljs-comment">#当前分数</span><br>        self.highscore =<span class="hljs-number">0</span>   <span class="hljs-comment">#最高分数</span><br>        self.reset()        <span class="hljs-comment">#棋盘重置</span><br><br>    <span class="hljs-comment">#重置棋盘</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reset</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.score&gt;self.highscore:<br>            self.highscore = self.score<br>        self.score = <span class="hljs-number">0</span><br>        self.field = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.width)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.height)]<br>        self.spawn()<br>        self.spawn()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">self,direction</span>):<br>        <span class="hljs-comment">#一行相左合并</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">move_row_left</span>(<span class="hljs-params">row</span>):<br>            <span class="hljs-keyword">def</span> <span class="hljs-title function_">tighten</span>(<span class="hljs-params">row</span>): <span class="hljs-comment">#把零散的非零单元挤到一块</span><br>                new_row = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> row <span class="hljs-keyword">if</span> i!=<span class="hljs-number">0</span>]<br>                new_row+=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(row)-<span class="hljs-built_in">len</span>(new_row))]<br>                <span class="hljs-keyword">return</span> new_row<br>            <span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">row</span>):<br>                pair=<span class="hljs-literal">False</span><br>                new_row=[]<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(row)):<br>                    <span class="hljs-keyword">if</span> pair:<br>                        <span class="hljs-comment"># 合并后，加入乘 2 后的元素在 0 元素后面</span><br>                        new_row.append(<span class="hljs-number">2</span>*row[i])<br>                        self.score+=<span class="hljs-number">2</span>*row[i]<br>                        pair=<span class="hljs-literal">False</span><br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-keyword">if</span> i+<span class="hljs-number">1</span>&lt;<span class="hljs-built_in">len</span>(row) <span class="hljs-keyword">and</span> row[i]==row[i+<span class="hljs-number">1</span>]:<br>                            pair=<span class="hljs-literal">True</span><br>                            <span class="hljs-comment"># 不能合并，新列表中加入该元素</span><br>                            new_row.append(<span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">else</span>:<br>                            new_row.append(row[i])<br>                <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(new_row)==<span class="hljs-built_in">len</span>(row)<br>                <span class="hljs-keyword">return</span> new_row<br>            <span class="hljs-comment"># 先挤到一块再合并再挤到一块</span><br>            <span class="hljs-keyword">return</span> tighten(merge(tighten(row)))<br><br>        <span class="hljs-comment"># 创建 moves 字典，把不同的棋盘操作作为不同的 key，对应不同的方法函数</span><br>        moves=&#123;&#125;<br>        moves[<span class="hljs-string">&#x27;Left&#x27;</span>] = <span class="hljs-keyword">lambda</span> filed:[move_row_left(row) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> filed]<br>        moves[<span class="hljs-string">&#x27;Right&#x27;</span>] = <span class="hljs-keyword">lambda</span> filed:invert(moves[<span class="hljs-string">&#x27;Left&#x27;</span>](invert(filed)))<br>        moves[<span class="hljs-string">&#x27;Up&#x27;</span>] = <span class="hljs-keyword">lambda</span> field:transpose(moves[<span class="hljs-string">&#x27;Left&#x27;</span>](transpose(field)))<br>        moves[<span class="hljs-string">&#x27;Down&#x27;</span>] = <span class="hljs-keyword">lambda</span> field:transpose((moves[<span class="hljs-string">&#x27;Right&#x27;</span>](transpose(field))))<br><br>        <span class="hljs-keyword">if</span> direction <span class="hljs-keyword">in</span> moves:<br>            <span class="hljs-keyword">if</span> self.move_is_possible(direction):<br>                self.field = moves[direction](self.field)<br>                <span class="hljs-comment">#生成一个随机2或者4</span><br>                self.spawn()<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-comment"># 判断输赢</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_win</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">any</span>(<span class="hljs-built_in">any</span>(i&gt;=self.win_value <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> row) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> self.field)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_gameover</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">any</span>(self.move_is_possible(move) <span class="hljs-keyword">for</span> move <span class="hljs-keyword">in</span> actions)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params">self, screen</span>):<br>        help_string1 = <span class="hljs-string">&#x27;(W)Up (S)Down (A)Left (D)Right&#x27;</span><br>        help_string2 = <span class="hljs-string">&#x27;     (R)Restart (Q)Exit&#x27;</span><br>        gameover_string = <span class="hljs-string">&#x27;           GAME OVER&#x27;</span><br>        win_string = <span class="hljs-string">&#x27;          YOU WIN!&#x27;</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">cast</span>(<span class="hljs-params">string</span>):<br>            screen.addstr(string+<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>        <span class="hljs-comment"># 绘制水平分割线</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_hor_separator</span>():<br>            line = <span class="hljs-string">&#x27;+&#x27;</span>+(<span class="hljs-string">&#x27;+------&#x27;</span> * self.width + <span class="hljs-string">&#x27;+&#x27;</span>)[<span class="hljs-number">1</span>:]<br>            <span class="hljs-comment"># defaultdict传入为函数时，可以实现value为某个常量，使用lambda可以使得代码更为简洁</span><br>            separator = defaultdict(<span class="hljs-keyword">lambda</span>: line)<br>            <span class="hljs-comment">#hasattr(object, name) 判断object对象中是否存在name属性</span><br>            <span class="hljs-comment"># python中的函数是一种对象，它有属于对象的属性。函数还可以自定义自己的属性。注意，属性是和对象相关的，和作用域无关。</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(draw_hor_separator,<span class="hljs-string">&#x27;counter&#x27;</span>):<br>                draw_hor_separator.counter=<span class="hljs-number">0</span><br>            cast(separator[draw_hor_separator.counter])<br>            draw_hor_separator.counter+=<span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_row</span>(<span class="hljs-params">row</span>):<br>            cast(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-string">&#x27;|&#123;: ^5&#125; &#x27;</span>.<span class="hljs-built_in">format</span>(num) <span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;|      &#x27;</span> <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> row) + <span class="hljs-string">&#x27;|&#x27;</span>)<br><br>        screen.clear()<br><br>        cast(<span class="hljs-string">&#x27;SCORE: &#x27;</span> + <span class="hljs-built_in">str</span>(self.score))<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> != self.highscore:<br>            cast(<span class="hljs-string">&#x27;HGHSCORE: &#x27;</span> + <span class="hljs-built_in">str</span>(self.highscore))<br><br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> self.field:<br>            draw_hor_separator()<br>            draw_row(row)<br>        draw_hor_separator()<br><br>        <span class="hljs-keyword">if</span> self.is_win():<br>            cast(win_string)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> self.is_gameover():<br>                cast(gameover_string)<br>            <span class="hljs-keyword">else</span>:<br>                cast(help_string1)<br>        cast(help_string2)<br><br>    <span class="hljs-comment"># 随机生成一个 2 或者 4</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">spawn</span>(<span class="hljs-params">self</span>):<br>        new_element = <span class="hljs-number">4</span> <span class="hljs-keyword">if</span> randrange(<span class="hljs-number">100</span>) &gt; <span class="hljs-number">89</span> <span class="hljs-keyword">else</span> <span class="hljs-number">2</span><br>        (i, j) = choice([(i, j) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.width) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.height) <span class="hljs-keyword">if</span> self.field[i][j] == <span class="hljs-number">0</span>])<br>        self.field[i][j] = new_element<br><br>    <span class="hljs-comment"># 判断是否能移动</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">move_is_possible</span>(<span class="hljs-params">self, dictions</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">row_is_left_moveable</span>(<span class="hljs-params">row</span>):<br>            <span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">i</span>):<br>                <span class="hljs-comment"># 当左边有空位（0），右边有数字时，可以向左移动</span><br>                <span class="hljs-keyword">if</span> row[i] == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> row[i + <span class="hljs-number">1</span>] != <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>                <span class="hljs-comment"># 当左边有一个数和右边的数相等时，可以向左合并</span><br>                <span class="hljs-keyword">if</span> row[i] != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> row[i + <span class="hljs-number">1</span>] == row[i]:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">any</span>(change(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(row) - <span class="hljs-number">1</span>))<br><br>        check = &#123;&#125;<br>        <span class="hljs-comment"># 判断矩阵每一行有没有可以左移动的元素</span><br>        check[<span class="hljs-string">&#x27;Left&#x27;</span>] = <span class="hljs-keyword">lambda</span> field: <span class="hljs-built_in">any</span>(row_is_left_moveable(row) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> field)<br>        <span class="hljs-comment"># 判断矩阵每一行有没有可以右移动的元素。这里只用进行判断，所以矩阵变换之后，不用再变换复原</span><br>        check[<span class="hljs-string">&#x27;Right&#x27;</span>] = <span class="hljs-keyword">lambda</span> field: check[<span class="hljs-string">&#x27;Left&#x27;</span>](invert(field))<br><br>        check[<span class="hljs-string">&#x27;Up&#x27;</span>] = <span class="hljs-keyword">lambda</span> field: check[<span class="hljs-string">&#x27;Left&#x27;</span>](transpose(field))<br><br>        check[<span class="hljs-string">&#x27;Down&#x27;</span>] = <span class="hljs-keyword">lambda</span> field: check[<span class="hljs-string">&#x27;Right&#x27;</span>](transpose(field))<br><br>        <span class="hljs-keyword">if</span> dictions <span class="hljs-keyword">in</span> check:<br>            <span class="hljs-keyword">return</span> check[dictions](self.field)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">stdscr</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>():<br>        <span class="hljs-comment"># 重置游戏棋盘</span><br>        game_field.reset()<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Game&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">game</span>():<br>        <span class="hljs-comment"># 画出 GameOver 或者 Win 的界面</span><br>        game_field.draw(stdscr)<br>        <span class="hljs-comment"># 读取用户输入得到action，判断是重启游戏还是结束游戏</span><br>        action = get_user_action(stdscr)<br><br>        <span class="hljs-keyword">if</span> action ==<span class="hljs-string">&#x27;Restart&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Init&#x27;</span><br>        <span class="hljs-keyword">if</span> action==<span class="hljs-string">&#x27;Exit&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Exit&#x27;</span><br>        <span class="hljs-keyword">if</span> game_field.move(action):<br>            <span class="hljs-keyword">if</span> game_field.is_win():<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Win&#x27;</span><br>            <span class="hljs-keyword">if</span> game_field.is_gameover():<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Gameover&#x27;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Game&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">not_game</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-comment"># 画出 GameOver 或者 Win 的界面</span><br>        game_field.draw(stdscr)<br>        <span class="hljs-comment"># 读取用户输入得到action，判断是重启游戏还是结束游戏</span><br>        action = get_user_action(stdscr)<br>        responses = defaultdict(<span class="hljs-keyword">lambda</span>:state)<br>        responses[<span class="hljs-string">&#x27;Restart&#x27;</span>], responses[<span class="hljs-string">&#x27;Exit&#x27;</span>] = <span class="hljs-string">&#x27;Init&#x27;</span>,<span class="hljs-string">&#x27;Exit&#x27;</span><br>        <span class="hljs-keyword">return</span> responses[action]<br><br><span class="hljs-comment"># 游戏盘的四种状态</span><br>    state_actions=&#123;<br>        <span class="hljs-string">&#x27;Init&#x27;</span>:init,<br>        <span class="hljs-string">&#x27;Win&#x27;</span>:<span class="hljs-keyword">lambda</span>:not_game(<span class="hljs-string">&#x27;Win&#x27;</span>),<br>        <span class="hljs-string">&#x27;Gameover&#x27;</span>:<span class="hljs-keyword">lambda</span>:not_game(<span class="hljs-string">&#x27;Gameover&#x27;</span>),<br>        <span class="hljs-string">&#x27;Game&#x27;</span>:game<br>    &#125;<br><br>    curses.use_default_colors()<br><br>    game_field = GameField(win=<span class="hljs-number">2048</span>)<br>    state = <span class="hljs-string">&#x27;Init&#x27;</span><br>    <span class="hljs-keyword">while</span> state!=<span class="hljs-string">&#x27;Exit&#x27;</span>:<br>        state = state_actions[state]()<br><br>curses.wrapper(main)<br></code></pre></td></tr></table></figure><ul><li>curses包的安装：<br>问题：windows系统如果直接用pip install下载会报错<br>解决办法：<br>去网址下载<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#curses">http://www.lfd.uci.edu/~gohlke/pythonlibs/#curses</a>(如果点击下载出现file not find，请fq下载)</li></ul><p>在下载目录运行如下命令：<br>pip install –upgrade curses-2.2+utf8-cp36-cp36m-win_amd64.whl</p><ul><li>可视化游戏网址：<a href="https://play2048.co/">https://play2048.co/</a></li></ul><hr><iframe src="https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html " style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>参加市北-GMIS 2019的感悟</title>
    <link href="/2019/07/20/%E5%8F%82%E5%8A%A0%E5%B8%82%E5%8C%97-GMIS%202019%E7%9A%84%E6%84%9F%E6%82%9F/"/>
    <url>/2019/07/20/%E5%8F%82%E5%8A%A0%E5%B8%82%E5%8C%97-GMIS%202019%E7%9A%84%E6%84%9F%E6%82%9F/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>市北-GMIS-2019全球数据智能峰会</strong>，由机器之心主办，上海市市北高新技术服务业园区承办。 </p><p> 大会以【拥抱数智经济，赋能产业生态】为主题，共进行24场主题演讲、2个主论坛、2个圆桌论坛、4个session、1场AI画展，举行了为期2天的行业峰会。不仅带来联邦学习、认知智能、AutoML等前瞻技术，同时关注技术的落地工程运用。</p><p><strong>1day AM：主论坛-Data That Empowers</strong><br>[外链图片转存失败(img-BZe2nmqa-1563797092570)(<a href="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/hcNHN.1Ba57CNGmcrIvPH*7obf64Bf2lB5dkBTgDCHc!/b/dL4AAAAAAAAA&amp;bo=*gc4BAAAAAARF.U!&amp;rf=viewer_4&amp;t=5)%5D">http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/hcNHN.1Ba57CNGmcrIvPH*7obf64Bf2lB5dkBTgDCHc!/b/dL4AAAAAAAAA&amp;bo=*gc4BAAAAAARF.U!&amp;rf=viewer_4&amp;t=5)]</a></p><p><strong>1day PM： 2个session</strong></p><ul><li>Session1:前沿研究与技术趋势</li><li>Session2:数据智能落地项目与发展启示</li></ul><p>[外链图片转存失败(img-2Me63GjJ-1563797125923)(<a href="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/8mK4OkX..1hzROHhRLQEQd4LWkQqSJIy.dW9vcjIlmU!/b/dFIBAAAAAAAA&amp;bo=cwY4BAAAAAARF2k!&amp;rf=viewer_4&amp;t=5)%5D">http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/8mK4OkX..1hzROHhRLQEQd4LWkQqSJIy.dW9vcjIlmU!/b/dFIBAAAAAAAA&amp;bo=cwY4BAAAAAARF2k!&amp;rf=viewer_4&amp;t=5)]</a></p><p><strong>2day AM：主论坛-Data That Empowers</strong></p><p><strong>2day PM： 2个session</strong></p><ul><li>Session1：数据思维与工程实践</li><li>Session2：智能应用与产业生态</li></ul><hr><h2 id="正文：参加峰会的笔记"><a href="#正文：参加峰会的笔记" class="headerlink" title="正文：参加峰会的笔记"></a>正文：参加峰会的笔记</h2><h2 id="【POWER-AI】"><a href="#【POWER-AI】" class="headerlink" title="【POWER AI】"></a>【POWER AI】</h2><p>  <em><strong>[空间信息技术及在大数据中的应用]（中科院院士王建宇分享）</strong></em></p><p>现在的空间信息技术</p><ul><li>王建宇院士对曾经的报道称美国的卫星的分辨率可以达到将地面报纸的标题看清的新闻进行了辟谣。</li><li>虽然不能看清报纸，但是全球顶尖卫星可以做到0.1m的分辨率，也就是说可以清晰的识别车辆行人、建筑。人的运动轨迹也能一览无遗。</li></ul><p> 空间信息技术可以做以下用途：</p><ul><li>卫星监控的图像可以用来分析人口密度，从而反映出城市发展的模式</li><li>对军事打击的评估</li><li>分析高光谱、叶绿素、蛋白氮等的含量预测农作物的产量</li><li>农场主可以足不出户的观察农作物的涨势，并且可以及时发现病虫害</li></ul><p>展望：技术转换成落地应用还需一段时间</p><hr><h2 id="【AI-for-Smarter-Enterprises】（Hans-Uszkoreit-欧洲科学院院士、德国人工智能研究中心-DFKI-科学董事-）"><a href="#【AI-for-Smarter-Enterprises】（Hans-Uszkoreit-欧洲科学院院士、德国人工智能研究中心-DFKI-科学董事-）" class="headerlink" title="【AI for Smarter Enterprises】（Hans Uszkoreit 欧洲科学院院士、德国人工智能研究中心(DFKI)科学董事 ）"></a>【AI for Smarter Enterprises】（Hans Uszkoreit 欧洲科学院院士、德国人工智能研究中心(DFKI)科学董事 ）</h2><ul><li><p><strong>两种不同类型的学习系统</strong><br> Systems based on knowledge 学习知识<br>Systems based on behaviour   学习行为</p></li><li><p><strong>两种不同类型的学习系统的区别</strong></p></li></ul><p> [谷歌的机器学习翻译系统并不能理解你的语句，但却能够完成翻译工作，这是因为它的算法从大量数据中学习人类的翻译方法，从而让阅读的人类可以理解翻译后的内容。」</p><p>[现在的自动驾驶系统,它并不了解交通法规，但能够通过多次的训练，让它获得自动驾驶的能力]</p><p>不管是谷歌翻译器还是自动驾驶系统，它们都不是了解了规则，他们学习的是行为，而非知识。</p><p><strong>「想要实现超越人类的 AI 能力，我们要在基于知识、基于规则和机器学习系统中找到交叉的部分，真正的超级 AI 是超越人类的，但仍然不是人类形式的智能——它不会是伊隆·马斯克所说的超级智能。」</strong></p><p><strong>AI研究会经过4个阶段：</strong></p><p><em><strong>第一是  启发式系统 Heuristic Systems<br>第二是  基于知识的系统 Knowledge-Based Systems<br>第三是  学习系统 Learning Systems<br>第四是 认知系统 Cognitive Systems</strong></em><br>[外链图片转存失败(img-wEVoZ71H-1565490762322)(<a href="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/tHS5INhlTE.E*EA1lAa7b24LfO.SPqJEvDBULjGGws8!/b/dEgBAAAAAAAA&amp;bo=PAY4BAAAAAARFyY!&amp;rf=viewer_4&amp;t=5)%5D">http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/tHS5INhlTE.E*EA1lAa7b24LfO.SPqJEvDBULjGGws8!/b/dEgBAAAAAAAA&amp;bo=PAY4BAAAAAARFyY!&amp;rf=viewer_4&amp;t=5)]</a></p><p>[目前我们正处于第三阶段中，我们开发了例如神经网络、深度学习这样的学习系统，现阶段面临的挑战就是如何把这些就是整合起来建立认知系统。]</p><p>「商业决策需要思考大量不同来源的内容。世界是动态变化的，我们不能简单地使用过去知识训练过的算法来对现在的问题进行决策，总会有意外发生，所以这里需要人类把关。」</p><hr><h2 id="【不要让机器假装智能】（李航-字节跳动科技有限公司人工智能实验室总监、IEEE会士、ACM杰出科学家"><a href="#【不要让机器假装智能】（李航-字节跳动科技有限公司人工智能实验室总监、IEEE会士、ACM杰出科学家" class="headerlink" title="【不要让机器假装智能】（李航 字节跳动科技有限公司人工智能实验室总监、IEEE会士、ACM杰出科学家)"></a>【不要让机器假装智能】（李航 字节跳动科技有限公司人工智能实验室总监、IEEE会士、ACM杰出科学家)</h2><p>这次峰会主要是去看李航老师和吴恩达老师的，想必大家都知道李航老师的《统计学习方法》、吴恩达老师的《机器学习》和《深度学习》课程。在业内基本大家都看过的课程和书籍。</p><p><strong>对话机器人领域</strong><br>李航老师说在对话机器人领域，实现开放式对话仍然面临巨大挑战，现在对话机器人还只能做到一问一答式的对话。</p><p>对话是两个人需要交流感情，交换信息，在真实的对话场景中，聊天不断被终止，设置、恢复。要做到真正的像人一样去定义任务、产生任务、完成任务，这涉及到人工智能的方方面面，是非常具有挑战性的问题。</p><p>结合在字节跳动与华为对话系统的开发经验，李航老师总结了设计对话系统的四条规则：</p><ul><li>1.要能够在一个场景中自封闭，让用户不论怎么说，能够完成一件事情、一个功能。</li><li>2.机器不可能 100% 理解，失败的时候，一定要能比较自然地应对。</li><li>3.对话不仅仅是语言的问题，也包括情感和文化因素，需要加入社交因素让对话更富情感。</li><li>4.不要让系统装智能。</li></ul><p>李航老师还提到一句话那就是优雅的失败，虽然现阶段对话机器人还做不到那么智能，但有的时候机器的不智能并不是一种缺陷，还反而更显可爱。</p><hr><h2 id="【人工智能多模态的未来】-贾佳亚-香港中文大学终身教授、腾讯优图实验室杰出科学家"><a href="#【人工智能多模态的未来】-贾佳亚-香港中文大学终身教授、腾讯优图实验室杰出科学家" class="headerlink" title="【人工智能多模态的未来】(贾佳亚 香港中文大学终身教授、腾讯优图实验室杰出科学家)"></a>【人工智能多模态的未来】(贾佳亚 香港中文大学终身教授、腾讯优图实验室杰出科学家)</h2><p>当我们对机器人是说，请给我拿桌子上左边的那个瓶子。机器人要做哪些事情。<br>首先需要识别语音、识别图像、再需要3D建模、分析结构化信息。<br>对于人类来说非常简单的一个问题，对于机器人来说却是非常难完成的。AI 解决这个问题需要语言模型、三维建模、自动导航、图像分析等多种能力。</p><p>在多模态 AI 方面，腾讯正在开发一套手语翻译器。</p><hr><hr><iframe src="https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html " style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>]]></content>
    
    
    
    <tags>
      
      <tag>峰会</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python -笔记 -内部类&amp;日期格式</title>
    <link href="/2019/04/13/Python%20-%E7%AC%94%E8%AE%B0%20-%E5%86%85%E9%83%A8%E7%B1%BB&amp;%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F/"/>
    <url>/2019/04/13/Python%20-%E7%AC%94%E8%AE%B0%20-%E5%86%85%E9%83%A8%E7%B1%BB&amp;%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<hr><p><strong>本文适用对象：</strong></p><p>python初级打怪～</p><p>本文介绍两个python的小知识点，内部类和日期格式转换</p><hr><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a><strong>内部类</strong></h3><p>内部类顾名思义就是类内部包含的类，就叫内部类</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>: <span class="hljs-comment">#外部类</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Door</span>: <span class="hljs-comment"># 内部类</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>            print(<span class="hljs-string">&quot;open door&quot;</span>)<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Wheel</span>:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>            print(<span class="hljs-string">&quot;car run&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ ==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    car = Car() <span class="hljs-comment">#实例化外部类</span><br>    backDoor = Car.Door()  <span class="hljs-comment"># 实例化内部类 第一种方法</span><br>    frontDoor = car.Door()  <span class="hljs-comment"># 因为car已经实例化外部类，再次实例化Car的内部类 第二种方法</span><br>    backDoor.open()<br>    frontDoor.open()<br></code></pre></td></tr></table></figure><p>以上代码列举了调用内部类的两种方法<br>第一种调用内部类的方法是：<br><strong>通过外部类直接调用，不实例化外部类。</strong><br>第二种调用内部类的方法是：<br><strong>通过外部类的实例化对象调用</strong></p><hr><h4 id="日期格式："><a href="#日期格式：" class="headerlink" title="日期格式："></a><strong>日期格式：</strong></h4><p>字符格式转换成日期格式</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas">import datetime<br>datetime.datetime.strp<span class="hljs-meta">time</span>(<span class="hljs-string">&#x27;2019-04-13&#x27;</span>, <span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)<br>＃<span class="hljs-keyword">output</span>：2019-04-1３ 00:00:00<br></code></pre></td></tr></table></figure><p>六天后的时间</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import datetime<br>now = datetime<span class="hljs-selector-class">.datetime</span><span class="hljs-selector-class">.strptime</span>(<span class="hljs-string">&#x27;2019-04-13&#x27;</span>, <span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)<br>times = <span class="hljs-string">&#x27;2019-04-13&#x27;</span><br>endnow = now+datetime<span class="hljs-selector-class">.timedelta</span>(days=<span class="hljs-number">6</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(endnow)</span></span><br>＃output：<span class="hljs-number">2019</span>-<span class="hljs-number">04</span>-<span class="hljs-number">19</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><p>时间转换成字符串</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import datetime<br>now = datetime<span class="hljs-selector-class">.datetime</span><span class="hljs-selector-class">.strptime</span>(<span class="hljs-string">&#x27;2019-04-13&#x27;</span>, <span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)<br>times = <span class="hljs-string">&#x27;2019-04-13&#x27;</span><br>endnow = now+datetime<span class="hljs-selector-class">.timedelta</span>(days=<span class="hljs-number">6</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(endnow.strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)</span></span>)<br>＃output：<span class="hljs-number">2019</span>-<span class="hljs-number">04</span>-<span class="hljs-number">19</span><br></code></pre></td></tr></table></figure><hr><iframe src="https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html " style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python -笔记 -单例模式(Singleton)实现</title>
    <link href="/2019/04/13/Python%20-%E7%AC%94%E8%AE%B0%20-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F(Singleton)%E5%AE%9E%E7%8E%B0/"/>
    <url>/2019/04/13/Python%20-%E7%AC%94%E8%AE%B0%20-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F(Singleton)%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<hr><p><strong>本文适用对象：</strong></p><p>python正在进阶的人儿~<br>高级 Python 语法，涉及装饰器</p><hr><p>  不管是编写类还是函数都是变量之间的传来传去，最简单粗暴的方式就是全局变量。确实在很多场景下用全局变量很方便。不过如果代码规模增大，并且有多个文件的时候，全局变量就会变得比较混乱。你可能不知道在哪个文件中定义了相同类型甚至重名的全局变量，造成悲剧。</p><p>这里介绍一种设计模式，<strong>单例模式</strong></p><h3 id="What"><a href="#What" class="headerlink" title="What"></a><strong>What</strong></h3><p><strong>单例模式是什么？</strong>单例是一种设计模式，应用该模式的类只会生成一个实例。</p><p>单例模式保证了在程序的不同位置都可以且仅可以取到同一个对象实例：如果实例不存在，会创建一个实例；如果已存在就会返回这个实例。因为单例是一个类，所以你也可以为其提供相应的操作方法，以便于对这个实例进行管理。</p><h3 id="Why"><a href="#Why" class="headerlink" title="Why"></a><strong>Why</strong></h3><p><strong>那么为什么要用单例设计模式呢？</strong><br>举个例子来说，比如你开发一款游戏软件，游戏中需要有“场景管理器”这样一种东西，用来管理游戏场景的切换、资源载入、网络连接等等任务。这个管理器需要有多种方法和属性，在代码中很多地方会被调用，且被调用的必须是同一个管理器，否则既容易产生冲突，也会浪费资源。这种情况下，单例模式就是一个很好的实现方法。</p><h3 id="How"><a href="#How" class="headerlink" title="How"></a><strong>How</strong></h3><p>怎么实现单例设计模式？<br>下面提供３种实现方法：</p><ul><li>使用函数装饰器实现单例</li><li>使用类装饰器实现单例</li><li>使用 <strong>new</strong> 关键字实现单例</li></ul><h4 id="使用函数装饰器实现单例："><a href="#使用函数装饰器实现单例：" class="headerlink" title="使用函数装饰器实现单例："></a><strong>使用函数装饰器实现单例</strong>：</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">def singleton(cls):<br>    _instance = &#123;&#125;<br><br>    def inner():<br>        <span class="hljs-keyword">if</span> cls <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> _instance:<br>            _instance[cls] = cls()<br>        <span class="hljs-keyword">return</span> _instance[cls]<br><br>    <span class="hljs-keyword">return</span> inner<br><br>@singleton<br><span class="hljs-keyword">class</span> <span class="hljs-symbol">Cla</span>(<span class="hljs-symbol">object</span>):<br>    <span class="hljs-symbol">def</span> <span class="hljs-symbol">__init__</span>(<span class="hljs-symbol">self</span>):<br>        <span class="hljs-symbol">pass</span><br><br><span class="hljs-symbol">cls1</span> = <span class="hljs-symbol">Cla</span>()<br><span class="hljs-symbol">cls2</span> = <span class="hljs-symbol">Cla</span>()<br><span class="hljs-symbol">print</span>(<span class="hljs-symbol">id</span>(<span class="hljs-symbol">cls1</span>) == <span class="hljs-symbol">id</span>(<span class="hljs-symbol">cls2</span>))<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>在 Python 中，id 关键字可用来查看对象在内存中的存放位置，这里 cls1 和 cls2 的 id 值相同，说明他们指向了同一个对象。</p><p>代码的设计思路是使用<strong>不可变的类地址</strong>作为键，其<strong>实例</strong>作为值。每次创造实例时，首先查看该类是否存在实例。存在的话直接返回该实例即可，否则新建一个实例并存放在字典中。</p><h4 id="使用类装饰器实现单例"><a href="#使用类装饰器实现单例" class="headerlink" title="使用类装饰器实现单例"></a><strong>使用类装饰器实现单例</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, cls</span>):<br>        self._cls = cls<br>        self._instance = &#123;&#125;<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-keyword">if</span> self._cls <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self._instance:<br>            self._instance[self._cls] = self._cls()<br>        <span class="hljs-keyword">return</span> self._instance[self._cls]<br><br><span class="hljs-meta">@Singleton</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cla1</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>cls1 = Cla1()<br>cls2 = Cla1()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(cls1)==<span class="hljs-built_in">id</span>(cls2))<br></code></pre></td></tr></table></figure><p>使用 类装饰器实现单例的原理和 函数装饰器 实现的原理相似<br>－－－－－－－－－－－－－－－－－－－－－－<br><strong>补充：装饰器</strong><br>简单地说：他们是修改其他函数的功能的函数<br>他们有助于让我们的代码更简短，也更Pythonic（Python范儿）</p><p>首先在理解装饰器之前我们要先理解，<strong>从函数中返回函数</strong>，<strong>将函数作为参数传给另一个函数</strong>这两个概念。<br><strong>１.从函数中返回函数</strong><br>举个例子：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">hi</span>(<span class="hljs-params">name=<span class="hljs-string">&quot;yasoob&quot;</span></span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>():<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;now you are in the greet() function&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">welcome</span>():<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;now you are in the welcome() function&quot;</span><br><br>    <span class="hljs-keyword">if</span> name == <span class="hljs-string">&quot;yasoob&quot;</span>:<br>        <span class="hljs-keyword">return</span> greet<br>    <span class="hljs-symbol">else:</span><br>        <span class="hljs-keyword">return</span> welcome<br><br>a = hi()<br>print(a)<br><br><span class="hljs-comment">#outputs: &lt;function hi.&lt;locals&gt;.greet at 0x000000B36FE96488&gt;</span><br><br><span class="hljs-comment">#上面清晰地展示了`a`现在指向到hi()函数中的greet()函数</span><br><span class="hljs-comment">#现在试试这个</span><br><span class="hljs-comment">#outputs: now you are in the greet() function</span><br><br></code></pre></td></tr></table></figure><p>再次看看这个代码。在 if&#x2F;else 语句中我们返回 greet 和 welcome，而不是 greet() 和 welcome()。为什么那样？这是因为当你把一对小括号放在后面，这个函数就会执行；<br>然而如果你不放括号在它后面，那它可以被到处传递，并且可以赋值给别的变量而不去执行它。<br>当我们写下 a &#x3D; hi()，hi() 会被执行，而由于 name 参数默认是 yasoob，所以函数 greet 被返回了。如果我们把语句改为 a &#x3D; hi(name &#x3D; “ali”)，那么 welcome 函数将被返回。我们还可以打印出 hi()()，这会输出 now you are in the greet() function。</p><p><strong>２.将函数作为参数传给另一个函数</strong></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">def</span> <span class="hljs-function"><span class="hljs-title">hi</span>():</span><br><span class="hljs-function">    <span class="hljs-title">print</span>(<span class="hljs-string">&#x27;Hello Big data industry!!!!!&#x27;</span>)</span><br><br><span class="hljs-variable">def</span> <span class="hljs-function"><span class="hljs-title">dosomethingBeforehi</span>(<span class="hljs-variable">func</span>):</span><br><span class="hljs-function">    <span class="hljs-title">print</span>(<span class="hljs-string">&quot;I am echo!!!!!!&quot;</span>)</span><br>    <span class="hljs-function"><span class="hljs-title">func</span>()</span><br><br><span class="hljs-function"><span class="hljs-title">dosomethingBeforehi</span>(<span class="hljs-variable">hi</span>)</span><br></code></pre></td></tr></table></figure><p>现在你已经具备所有必需知识，来进一步学习装饰器真正是什么了。装饰器让你在一个函数的前后去执行代码。<br><strong>你的第一个装饰器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">a_new_decorator</span>(<span class="hljs-params">a_func</span>):<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapTheFunction</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am doing some boring work before executing a_func()&quot;</span>)<br> <br>        a_func()<br> <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am doing some boring work after executing a_func()&quot;</span>)<br> <br>    <span class="hljs-keyword">return</span> wrapTheFunction<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">a_function_requiring_decoration</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am the function which needs some decoration to remove my foul smell&quot;</span>)<br><br>a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration)<br><span class="hljs-comment">#now a_function_requiring_decoration is wrapped by wrapTheFunction()</span><br> <br>a_function_requiring_decoration()<br><span class="hljs-comment">#outputs:I am doing some boring work before executing a_func()</span><br><span class="hljs-comment">#        I am the function which needs some decoration to remove my foul smell</span><br><span class="hljs-comment">#        I am doing some boring work after executing a_func()</span><br></code></pre></td></tr></table></figure><p>现在你也许疑惑，我们在代码里并没有使用 @ 符号？那只是一个简短的方式来生成一个被装饰的函数。这里是我们如何使用 @ 来运行之前的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">a_new_decorator</span>(<span class="hljs-params">a_func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapTheFunction</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am doing some boring work before executing a_func()&quot;</span>)<br><br>        a_func()<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am doing some boring work after executing a_func()&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> wrapTheFunction<br><span class="hljs-meta">@a_new_decorator</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">a_function_requiring_decoration</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;Hey you! Decorate me!&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am the function which needs some decoration to &quot;</span><br>          <span class="hljs-string">&quot;remove my foul smell&quot;</span>)<br><br>a_function_requiring_decoration()<br><span class="hljs-comment"># outputs: I am doing some boring work before executing a_func()</span><br><span class="hljs-comment">#         I am the function which needs some decoration to remove my foul smell</span><br><span class="hljs-comment">#         I am doing some boring work after executing a_func()</span><br></code></pre></td></tr></table></figure><p>蓝本规范:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator_name</span>(<span class="hljs-params">f</span>):<br><span class="hljs-meta">    @wraps(<span class="hljs-params">f</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorated</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> can_run:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Function will not run&quot;</span><br>        <span class="hljs-keyword">return</span> f(*args, **kwargs)<br>    <span class="hljs-keyword">return</span> decorated<br> <br><span class="hljs-meta">@decorator_name</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-keyword">return</span>(<span class="hljs-string">&quot;Function is running&quot;</span>)<br> <br>can_run = <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(func())<br><span class="hljs-comment"># Output: Function is running</span><br> <br>can_run = <span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(func())<br><span class="hljs-comment"># Output: Function will not run</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>@wraps接受一个函数来进行装饰，并加入了复制函数名称、注释文档、参数列表等等的功能。这可以让我们在装饰器里面访问在装饰之前的函数的属性</p><p>－－－－－－－－－－－－－－－－－－－－－－</p><h4 id="使用-new-关键字实现单例"><a href="#使用-new-关键字实现单例" class="headerlink" title="使用 new 关键字实现单例"></a><strong>使用 <strong>new</strong> 关键字实现单例</strong></h4><p>在说这个实现之前，首先我们需要知道Python 中一个类和一个实例是通过哪些方法以怎样的顺序被创造的。</p><p>简单来说，<strong>元类(metaclass)</strong> 可以通过方法 <strong>metaclass</strong> 创造了类(class)，而**类(class)**通过方法 <strong>new</strong> 创造了实例(instance)。</p><p>元类可以理解成类的爸爸，在python世界，拥有一个永恒的道，那就是“type”。type就是道。如此广袤无垠的python生态圈，都是由type产生出来的。在这里有一句很太极生两仪，两仪生四象，四象生八卦的话帮助理解python生态圈～</p><p><strong>道生一，一生二，二生三，三生万物。</strong><br>－道 即是 type<br>－一 即是 metaclass(元类，或者叫类生成器)<br>－二 即是 class(类，或者叫实例生成器)<br>－三 即是 instance(实例)<br>－万物 即是 实例的各种属性与方法，我们平常使用python时，调用的就是它们。</p><p>在单例模式应用中，在创造类的过程中或者创造实例的过程中稍加控制达到最后产生的实例都是一个对象的目的。</p><p>使用 <strong>new</strong> 方法在创造实例时进行干预，达到实现单例模式的目的</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">class</span> <span class="hljs-function"><span class="hljs-title">Singleton</span>(<span class="hljs-variable"><span class="hljs-class">object</span></span>):</span><br><span class="hljs-function">    <span class="hljs-variable">_instance</span> = <span class="hljs-variable">None</span></span><br><span class="hljs-function">    <span class="hljs-variable">def</span> <span class="hljs-title">__new__</span>(<span class="hljs-variable">cls</span>):</span><br><span class="hljs-function">        <span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-variable">cls._instance</span> <span class="hljs-variable">is</span> <span class="hljs-variable">None</span>:</span><br><span class="hljs-function">            <span class="hljs-variable">cls._instance</span> = <span class="hljs-variable"><span class="hljs-class">object</span>.__new__</span>(<span class="hljs-variable">cls</span>)</span><br>        <span class="hljs-variable">return</span> <span class="hljs-variable">cls._instance</span><br>    <span class="hljs-variable">def</span> <span class="hljs-function"><span class="hljs-title">__init__</span>(<span class="hljs-variable">self</span>):</span><br><span class="hljs-function">        <span class="hljs-variable">pass</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-variable">single</span> = <span class="hljs-title">Singleton</span>()</span><br><span class="hljs-variable">single2</span> = <span class="hljs-function"><span class="hljs-title">Singleton</span>()</span><br><span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-title">id</span>(<span class="hljs-variable">single</span>)==<span class="hljs-title">id</span>(<span class="hljs-variable">single2</span>))</span><br></code></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h4><p>１.什么是单例模式？<br>单例是一种设计模式，应用该模式的类只会生成一个实例。<br>２.为什么要用单例模式？<br>举例：一款游戏软件只能有一个控制面板<br>３.怎么实现单例模式？<br>　函数装饰器实现单例<br>　类装饰器实现单例<br>　<strong>new</strong> 关键字实现单例</p><hr><p>参考：<br><a href="https://blog.csdn.net/qq_40523737/article/details/81107089">Python单例模式(Singleton)的N种实现</a><br><a href="http://python.jobbole.com/88795/">两句话掌握 Python 最难知识点——元类</a><br><a href="http://www.runoob.com/w3cnote/python-func-decorators.html">Python 函数装饰器</a></p><hr><iframe src="https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html " style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Machine Learning-笔记 -XGBoost教程</title>
    <link href="/2019/03/31/Machine-Learning-%E7%AC%94%E8%AE%B0-XGBoost%E6%95%99%E7%A8%8B/"/>
    <url>/2019/03/31/Machine-Learning-%E7%AC%94%E8%AE%B0-XGBoost%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="【1】前言"><a href="#【1】前言" class="headerlink" title="【1】前言"></a>【1】前言</h3><ul><li>XGBoost, 全名(eXtreme Gradient Boosting)，Kaggle大杀器，在数据挖掘比赛上，Everybody knows it！！！</li><li>XGBoost作者：陈天奇（华盛顿大学）</li><li>XGBoost前身:XGBoost是Boosting算法的其中一种,是在GBDT的基础上进行改进，使之更强大，适用于更大范围.</li><li>算法发布时间在2014年</li></ul><hr><p>本文适用对象：<br>1.了解决策树族群：决策森林，Adaboost，GBDT等<br>2.了解bagging，boosting<br>3.准备在机器学习道路上越走越远的朋友<br>4.高能数学预警：泰勒公式、梯度下降法了解一下下，但是我是不愿意看这些深奥的数学公式。</p><p>链接：<br><a href="https://github.com/YUTING0907/Markdown_pic/blob/master/xgboost/BoostedTree.pdf">【天奇大神PPT传送门】</a></p><hr><h3 id="【2】算法原理简述"><a href="#【2】算法原理简述" class="headerlink" title="【2】算法原理简述"></a>【2】算法原理简述</h3><h5 id="1-Review-of-key-concepts-of-supervised-learning-监督学习到底在学什么"><a href="#1-Review-of-key-concepts-of-supervised-learning-监督学习到底在学什么" class="headerlink" title="(1)Review of key concepts of supervised learning | 监督学习到底在学什么"></a><strong>(1)Review of key concepts of supervised learning | 监督学习到底在学什么</strong></h5><ul><li>label(标签)<br>根据带有标签的数据学习出一套规则，给另外没有标签的测试集打上标签。</li><li>假设函数(Hypothesis)</li><li>目标函数（Objective Function）&#x3D; 损失函数(Cost Function) + 正则化（Regularization）</li><li>minimize Objective Function 最小化目标函数</li></ul><p>在监督学习算法学习的过程中，其实就是最小化目标函数的过程，找到让目标函数最小化的一组参数。其中：</p><ul><li>损失函数表示模型对训练数据的拟合程度，loss越小，代表模型预测的越准.</li><li>正则化项衡量模型的复杂度，regularization越小，代表模型模型的复杂度越低。</li><li>目标函数越小，代表模型越好</li></ul><h5 id="2-Regression-Tree-and-Ensemble-决策树在做什么"><a href="#2-Regression-Tree-and-Ensemble-决策树在做什么" class="headerlink" title="(2) Regression Tree and Ensemble | 决策树在做什么"></a><strong>(2) Regression Tree and Ensemble | 决策树在做什么</strong></h5><ul><li>一种模仿人类做决定的思维方式构建的算法</li><li>信息增益（Information Gain）：决定分裂节点，主要是为了减少损失loss</li><li>最大深度：会影响模型复杂度</li><li>树的剪枝：主要为了减少模型复杂度，而复杂度被‘树枝的数量’影响</li><li>回归树不止用于做回归，还可以做分类、排序等，主要依赖于目标函数的定义</li></ul><h5 id="3-Gradient-Boosting-How-do-we-learn"><a href="#3-Gradient-Boosting-How-do-we-learn" class="headerlink" title="(3) Gradient Boosting(How do we learn)"></a><strong>(3) Gradient Boosting(How do we learn)</strong></h5><p>XGBoost 与前身 GBDT比较优势在于</p><ul><li><strong>1.损失函数</strong>：GBDT是一阶，XGB是二阶泰勒展开</li><li><strong>2.XGB的损失函数可以自定义</strong></li><li><strong>3.XGB加入正则</strong>：XGB的目标函数进行了优化，有正则项，减少过拟合，控制模型复杂度</li><li><strong>4.XGB运行速度快</strong>：决策树的学习最耗时的一个步骤就是对特征的值进行排序,在进行节点的分裂的时候，需要计算每个特征的增益。Xgboost在训练之前，预先对数据进行了排序，然后保存为block结构，后面的迭代中重复使用这个结构，大大减小计算量。各个特征的增益计算就可以开多线程进行。</li><li><strong>5.内置交叉验证</strong>: 允许每轮boosting迭代中用交叉检验，以便获取最优 Boosting_n_round 迭代次数，可利用网格搜索grid search和交叉检验cross validation进行调参。</li><li><strong>6.预剪枝：</strong><br>GBDT：分裂到负损失，分裂停止;<br> XGB：一直分裂到指定的最大深度（max_depth），然后回过头剪枝。如某个点之后不再正值，去除这个分裂。优点是，当一个负损失(-2)后存在一个正损失(+10)，(-2+10&#x3D;8&gt;0)求和为正，保留这个分裂。</li></ul><h3 id="【3】参数说明"><a href="#【3】参数说明" class="headerlink" title="【3】参数说明"></a>【3】参数说明</h3><p>  XGBoost的参数多到让人发指，下面只列举部分常用参数，所有参数的官方说明文档，请点击<a href="https://xgboost.readthedocs.io/en/latest/parameter.html">官方文档说明</a><br>  XGBoost的参数可以归为3类：</p><h5 id="1-General-parameters-通用参数"><a href="#1-General-parameters-通用参数" class="headerlink" title="(1) General parameters 通用参数"></a><strong>(1) General parameters 通用参数</strong></h5><p>该参数控制在提升（boosting）过程中使用哪种booster，常用的booster有树模型（tree）和线性模型（linear model）</p><ul><li><strong>booster [default&#x3D;gbtree]</strong><br> 有两种模型可以选择gbtree和gblinear。gbtree使用基于树的模型进行提升计算，gblinear使用线性模型进行提升计算。缺省值为gbtree</li><li><strong>silent [default&#x3D;0]</strong><br>取0时表示打印出运行时信息，取1时表示以缄默方式运行，不打印运行时的信息。缺省值为0</li><li><strong>nthread</strong> [default to maximum number of threads available if not set] <ul><li>XGBoost运行时的线程数。缺省值是当前系统可以获得的最大线程数。</li><li>如果你希望以最大速度运行，建议不设置这个参数，模型将自动获得最大线程</li></ul></li><li><strong>num_pbuffer</strong> [set automatically by xgboost, no need to be set by user]<br>size of prediction buffer, normally set to number of training instances. The buffers are used to save the prediction results of last boosting step.</li><li><strong>num_feature</strong> [set automatically by xgboost, no need to be set by user]<br>  boosting过程中用到的特征维数，设置为特征个数。XGBoost 会自动设置，不需要手工设置</li></ul><h5 id="2-Booster-parameters参数"><a href="#2-Booster-parameters参数" class="headerlink" title="(2) Booster parameters参数"></a><strong>(2) Booster parameters参数</strong></h5><ul><li><strong>Parameters for Tree Booster</strong><br> - <strong>eta [default&#x3D;0.3]</strong><br>     - 为了防止过拟合，更新过程中用到的收缩步长。在每次提升计算之后，算法会直接获得新特征的权重。 eta通过缩减特征的权重使提升计算过程更加保守。<br> 通常最后设置eta为0.01~0.2<br>     - 取值范围为：[0,1]<ul><li><strong>gamma [default&#x3D;0]</strong><br>  - minimum loss reduction required to make a further partition on a leaf node of the tree. the larger, the more conservative the algorithm will be <strong>；</strong><br>  - range: [0,∞] <strong>；</strong><br>   -  模型在默认情况下，对于一个节点的划分只有在其loss function 得到结果大于0的情况下才进行，而gamma 给定了所需的最低loss function的值 <strong>；</strong><br>     - gamma值使得算法更conservation，且其值依赖于loss function ，在模型中应该进行调参 <strong>。</strong></li><li><strong>max_depth [default&#x3D;6]</strong><br>  - 树的最大深度。缺省值为6 <strong>；</strong><br>  - 取值范围为：[1,∞] <strong>；</strong><br>  - 指树的最大深度 <strong>；</strong><br>  - 树的深度越大，则对数据的拟合程度越高（过拟合程度也越高）。即该参数也是控制过拟合 <strong>；</strong><br>   - 建议通过交叉验证（xgb.cv ) 进行调参 <strong>；</strong><br>  通常取值：3-10 <strong>；</strong></li><li><strong>min_child_weight [default&#x3D;1]</strong><br>-  孩子节点中最小的样本权重和。如果一个叶子节点的样本权重和小于min_child_weight则拆分过程结束。在现行回归模型中，这个参数是指建立每个模型所需要的最小样本数。该成熟越大算法越conservative。即调大这个参数能够控制过拟合 <strong>;</strong><ul><li>取值范围为: [0,∞]</li></ul></li><li><strong>max_delta_step [default&#x3D;0]</strong> <ul><li>如果取值为0，那么意味着无限制。如果取为正数，则其使得xgboost更新过程更加保守。</li><li>取值范围为：[0,∞]</li><li>通常不需要设置这个值，但在使用logistics 回归时，若类别极度不平衡，则调整该参数可能有效果</li></ul></li><li>subsample [default&#x3D;1] <ul><li>用于训练模型的子样本占整个样本集合的比例。如果设置为0.5则意味着XGBoost将随机的从整个样本集合中抽取出50%的子样本建立树模型，这能够防止过拟合。</li><li>取值范围为：(0,1]</li></ul></li><li>colsample_bytree [default&#x3D;1]<br>  在建立树时对特征随机采样的比例。缺省值为1</li><li>colsample_bylevel[default&#x3D;1]<br> 通常不使用，因为subsample和colsample_bytree已经可以起到相同的作用了</li></ul></li><li><strong>Parameters for Linear Booster and Tweedie Regression</strong><ul><li><strong>lambda [default&#x3D;0]</strong><br>  L2 正则的惩罚系数<br>  用于处理XGBoost的正则化部分。通常不使用，但可以用来降低过拟合</li><li><strong>alpha [default&#x3D;0]</strong><br>  L1 正则的惩罚系数<br>  当数据维度极高时可以使用，使得算法运行更快。</li><li><strong>lambda_bias</strong><br>  在偏置上的L2正则。缺省值为0（在L1上没有偏置项的正则，因为L1时偏置不重要）</li></ul></li></ul><h5 id="3-Learning-Task-parameters"><a href="#3-Learning-Task-parameters" class="headerlink" title="(3) Learning Task parameters"></a><strong>(3) Learning Task parameters</strong></h5><ul><li><p><strong>objective [ default&#x3D;reg:linear ]</strong></p><ul><li>“reg:linear” –线性回归。</li><li>“reg:logistic” –逻辑回归。</li><li>“binary:logistic” –二分类的逻辑回归问题，输出为概率。</li><li>“binary:logitraw” –二分类的逻辑回归问题，输出的结果为wTx。</li><li>“count:poisson” –计数问题的poisson回归，输出结果为poisson分布。<br>   在poisson回归中，max_delta_step的缺省值为0.7。(used to safeguard optimization)</li><li>“multi:softmax” –让XGBoost采用softmax目标函数处理多分类问题，同时需要设置参数num_class（类别个数）</li><li>“multi:softprob” –和softmax一样，但是输出的是ndata * nclass的向量，可以将该向量reshape成ndata行nclass列的矩阵。每行数据表示样本所属于每个类别的概率。</li><li>“rank:pairwise” –set XGBoost to do ranking task by minimizing the pairwise loss</li></ul></li><li><p><strong>base_score [ default&#x3D;0.5 ]</strong><br>the initial prediction score of all instances, global bias</p></li><li><p><strong>eval_metric [ default according to objective ]</strong><br>  校验数据所需要的评价指标，不同的目标函数将会有缺省的评价指标（rmse for regression, and error for classification, mean average precision for ranking）</p><ul><li>“rmse”: root mean square error</li><li>“logloss”: negative log-likelihood</li><li>“error”: Binary classification error rate. It is calculated as #(wrong cases)&#x2F;#(all cases). For the predictions, the evaluation will regard the instances with prediction value larger than 0.5 as positive instances, and the others as negative instances.</li><li>“merror”: Multiclass classification error rate. It is calculated as #(wrong cases)&#x2F;#(all cases).</li><li>“mlogloss”: Multiclass logloss</li><li>“auc”: Area under the curve for ranking evaluation</li><li>“ndcg”:Normalized Discounted Cumulative Gain</li><li>“map”:Mean average precision</li></ul></li><li><p><strong>seed [ default&#x3D;0 ]</strong><br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/aOr8BZHt*q6uyFpj2aEFCLoBAyu*6MYDD*iL8zMnsK8!/b/dDQBAAAAAAAA&bo=ZQEYAQAAAAADF08!&rf=viewer_4&t=5"></p></li></ul><hr><h3 id="【4】代码实现：python"><a href="#【4】代码实现：python" class="headerlink" title="【4】代码实现：python"></a>【4】代码实现：python</h3><h5 id="1-API接口说明"><a href="#1-API接口说明" class="headerlink" title="(1)API接口说明"></a><strong>(1)API接口说明</strong></h5><p>目前为止，xgb model 有两个接口</p><ul><li>import xgboost </li><li>from xgboost import XGBClassifier</li></ul><h5 id="2-XGBoost调参"><a href="#2-XGBoost调参" class="headerlink" title="(2) XGBoost调参"></a><strong>(2) XGBoost调参</strong></h5><ul><li>方法一：直接调参，调用 xgboost包 的 XGBClassifier()<br>可以对其参数进行手动修改，default参数如下<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/TLeI9lRonq7NAgF68hz5M8bI.ExHoesibyN39nBmL2w!/b/dL8AAAAAAAAA&bo=PQJ0AAAAAAADF3k!&rf=viewer_4&t=5"></li><li>方法二： 随机调参。<br>使用 xgb.cv，这里同样可以使用KFold()</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">from sklearn.cross_validation import KFold<br>kf = <span class="hljs-constructor">KFold(<span class="hljs-params">len</span>(<span class="hljs-params">train_feat</span>)</span>, n_folds=<span class="hljs-number">5</span>, shuffle=True, random_state=<span class="hljs-number">520</span>)<br><span class="hljs-keyword">for</span> i, (train_index, test_index) <span class="hljs-keyword">in</span> enumerate(kf):<br>        # 将测试集均分 取一份当测试集<br>xgb_train = xgb.<span class="hljs-constructor">DMatrix(<span class="hljs-params">train_feat</span>[<span class="hljs-params">predictors</span>].<span class="hljs-params">iloc</span>[<span class="hljs-params">train_index</span>], <span class="hljs-params">train_feat</span>[<span class="hljs-params">label</span>].<span class="hljs-params">iloc</span>[<span class="hljs-params">train_index</span>])</span><br>xgb_eval = xgb.<span class="hljs-constructor">DMatrix(<span class="hljs-params">train_feat</span>[<span class="hljs-params">predictors</span>].<span class="hljs-params">iloc</span>[<span class="hljs-params">test_index</span>], <span class="hljs-params">train_feat</span>[<span class="hljs-params">label</span>].<span class="hljs-params">iloc</span>[<span class="hljs-params">test_index</span>])</span><br>print(<span class="hljs-string">&quot;..........开始第&#123;&#125;轮训练&quot;</span>.format(i))<br></code></pre></td></tr></table></figure><p>注: xgb.cv()这里的cv()函数是进行了k折叠交叉验证，它不是一个参数搜索功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> xgboost <span class="hljs-keyword">as</span> xgb<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> ggplot <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score, f1_score, precision_score, recall_score, classification_report, confusion_matrix,mean_squared_error<br><br>train_path = <span class="hljs-string">&#x27;D:/Pywork/Titanic/train.csv&#x27;</span><br>test_path = <span class="hljs-string">&#x27;D:/Pywork/Titanic/test.csv&#x27;</span><br>train = pd.read_csv(train_path)<br>test = pd.read_csv(test_path)<br><br><br>best_param = <span class="hljs-built_in">list</span>()<br>best_logloss = np.Inf<br>best_logloss_index = <span class="hljs-number">0</span><br>X_hote = pd.get_dummies(X_train)<br><span class="hljs-built_in">print</span>(X_hote.info())<br>dtrain = xgb.DMatrix(X_hote, y_train)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>    xgb_params = &#123;<br>        <span class="hljs-string">&#x27;objective&#x27;</span>: <span class="hljs-string">&quot;binary:logistic&quot;</span>,<br>        <span class="hljs-string">&#x27;max_depth&#x27;</span>: np.random.randint(<span class="hljs-number">6</span>, <span class="hljs-number">11</span>), <span class="hljs-comment"># 构建树的深度，越大越容易过拟合</span><br>        <span class="hljs-string">&#x27;eta&#x27;</span>: np.random.uniform(<span class="hljs-number">.01</span>, <span class="hljs-number">.3</span>), <span class="hljs-comment"># 如同学习率</span><br>        <span class="hljs-string">&#x27;gamma&#x27;</span>: np.random.uniform(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.2</span>),<span class="hljs-comment"># gamma最小损失调节范围</span><br>        <span class="hljs-string">&#x27;subsample&#x27;</span>: np.random.uniform(<span class="hljs-number">.6</span>, <span class="hljs-number">.9</span>), <span class="hljs-comment"># 随机采样训练样本</span><br>        <span class="hljs-string">&#x27;colsample_bytree&#x27;</span>: np.random.uniform(<span class="hljs-number">.5</span>, <span class="hljs-number">.8</span>), <span class="hljs-comment"># 生成树时进行的列采样</span><br>        <span class="hljs-string">&#x27;min_child_weight&#x27;</span>: np.random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">41</span>),<br>        <span class="hljs-string">&#x27;max_delta_step&#x27;</span>: np.random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>),<br>        <span class="hljs-string">&#x27;silent&#x27;</span>: <span class="hljs-number">1</span><br>    &#125;<br>    cv_nfold = <span class="hljs-number">5</span><br>    cv_nround = <span class="hljs-number">50</span><br>    bst_cv1 = xgb.cv(params=xgb_params,  <span class="hljs-comment"># 这是一个字典，里面包含着训练中的参数关键字和对应的值</span><br>                     dtrain=dtrain, <span class="hljs-comment"># 训练的数据</span><br>                     num_boost_round=cv_nround, <span class="hljs-comment"># 这是指提升迭代的个数</span><br>                      <span class="hljs-comment"># evals  这是一个列表，用于对训练过程中进行评估列表中的元素 evals = [(dtrain,’train’)]</span><br>                     <span class="hljs-comment"># feval,自定义评估函数</span><br>                     <span class="hljs-comment"># verbose_eval(可以输入布尔型或数值型)，也要求evals 里至少有 一个元素。</span><br>                     <span class="hljs-comment"># 如果为True ,则对evals中元素的评估结果会输出在结果中；如果输入数字，假设为5，则每隔5个迭代输出一次</span><br>                     nfold=cv_nfold,<br>                     seed=<span class="hljs-number">0</span>,<br>                     metrics=[<span class="hljs-string">&quot;auc&quot;</span>, <span class="hljs-string">&quot;rmse&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-string">&quot;logloss&quot;</span>],<br>                     maximize=<span class="hljs-literal">False</span>, <span class="hljs-comment"># 是否对评估函数进行最大化</span><br>                     early_stopping_rounds=<span class="hljs-number">10</span>,<br>                     verbose_eval=<span class="hljs-literal">None</span>,<br>                     )<br><br>    min_logloss = <span class="hljs-built_in">min</span>(bst_cv1[<span class="hljs-string">&#x27;test-logloss-mean&#x27;</span>])<br>    min_logloss_index = bst_cv1.index[bst_cv1[<span class="hljs-string">&#x27;test-logloss-mean&#x27;</span>] == <span class="hljs-built_in">min</span>(bst_cv1[<span class="hljs-string">&#x27;test-logloss-mean&#x27;</span>])][<span class="hljs-number">0</span>]<br><br>    <span class="hljs-keyword">if</span> min_logloss &lt; best_logloss:<br>        best_logloss = min_logloss<br>        best_logloss_index = min_logloss_index<br>        best_param = xgb_params<br><br>nround = best_logloss_index<br><span class="hljs-built_in">print</span>(best_logloss)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;best_round = %d&#x27;</span> % (nround))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;best_param : ------------------------------&#x27;</span>)<br><span class="hljs-built_in">print</span>(best_param)  <span class="hljs-comment"># 显示最佳参数组合，到后面真正的模型要用</span><br>plt.figure()<br>plt.plot(bst_cv1[<span class="hljs-string">&#x27;train-logloss-mean&#x27;</span>], <span class="hljs-string">&#x27;g&#x27;</span>, label=<span class="hljs-string">&#x27;train&#x27;</span>)<br>plt.plot(bst_cv1[<span class="hljs-string">&#x27;test-logloss-mean&#x27;</span>], <span class="hljs-string">&#x27;r&#x27;</span>, label=<span class="hljs-string">&#x27;test&#x27;</span>)<br><span class="hljs-built_in">print</span>(plt.show())<br></code></pre></td></tr></table></figure><ul><li>方法三：使用 gridsearch 和 cross validation</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from sklearn<span class="hljs-selector-class">.grid_search</span> import GridSearchCV<br>params = &#123;<span class="hljs-string">&#x27;max_depth&#x27;</span>:<span class="hljs-selector-attr">[i for i in range(2,7)]</span>,<span class="hljs-string">&#x27;n_estimators&#x27;</span>:<span class="hljs-selector-attr">[j for j in range(100,1100,200)]</span>,<span class="hljs-string">&#x27;learning_rate&#x27;</span>:<span class="hljs-selector-attr">[0.05,0.1,0.25,0.5,0.1]</span><br>         &#125;<br>xgbc_best = <span class="hljs-built_in">XGBClassifier</span>()<br>gs = <span class="hljs-built_in">GridSearchCV</span>(xgbc_best,params,n_jobs=-<span class="hljs-number">1</span>,cv=<span class="hljs-number">5</span>,verbose=<span class="hljs-number">1</span>)<br>gs<span class="hljs-selector-class">.fit</span>(X_train,y_train)<br></code></pre></td></tr></table></figure><h5 id="3-绘制-train-x2F-test-的-auc-x2F-rmse-x2F-error"><a href="#3-绘制-train-x2F-test-的-auc-x2F-rmse-x2F-error" class="headerlink" title="(3) 绘制 train&#x2F;test 的 auc&#x2F;rmse&#x2F;error"></a><strong>(3) 绘制 train&#x2F;test 的 auc&#x2F;rmse&#x2F;error</strong></h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros">def xgb_plot(input, output):<br>    history = input<br>    train_history = history.iloc[:, 8:16].assign(id=[i+1 <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> history.index])<br>    train_history[<span class="hljs-string">&#x27;Class&#x27;</span>] = <span class="hljs-string">&#x27;train&#x27;</span><br>    test_history = history.iloc[:, 0:8].assign(id=[i+1 <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> history.index])<br>    test_history[<span class="hljs-string">&#x27;Class&#x27;</span>] = <span class="hljs-string">&#x27;test&#x27;</span><br>    train_history.columns = [<span class="hljs-string">&quot;auc_mean&quot;</span>, <span class="hljs-string">&quot;auc_std&quot;</span>, <span class="hljs-string">&quot;error_mean&quot;</span>, <span class="hljs-string">&quot;error_std&quot;</span>, <span class="hljs-string">&quot;logloss_mean&quot;</span>, <span class="hljs-string">&quot;logloss_std&quot;</span>, <span class="hljs-string">&quot;rmse_mean&quot;</span>, <span class="hljs-string">&quot;rmse_std&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;Class&quot;</span>]<br>    test_history.columns = [<span class="hljs-string">&quot;auc_mean&quot;</span>, <span class="hljs-string">&quot;auc_std&quot;</span>, <span class="hljs-string">&quot;error_mean&quot;</span>, <span class="hljs-string">&quot;error_std&quot;</span>, <span class="hljs-string">&quot;logloss_mean&quot;</span>, <span class="hljs-string">&quot;logloss_std&quot;</span>, <span class="hljs-string">&quot;rmse_mean&quot;</span>, <span class="hljs-string">&quot;rmse_std&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;Class&quot;</span>]<br>    his = pd.concat([train_history, test_history])<br><br>    <span class="hljs-keyword">if</span> output == <span class="hljs-string">&quot;auc&quot;</span>:<br>        his[<span class="hljs-string">&#x27;y_min_auc&#x27;</span>] = his[<span class="hljs-string">&#x27;auc_mean&#x27;</span>]-his[<span class="hljs-string">&#x27;auc_std&#x27;</span>]<br>        his[<span class="hljs-string">&#x27;y_man_auc&#x27;</span>] = his[<span class="hljs-string">&#x27;auc_mean&#x27;</span>]+his[<span class="hljs-string">&#x27;auc_std&#x27;</span>]<br>        auc = ggplot(his, aes(<span class="hljs-attribute">x</span>=<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-attribute">y</span>=<span class="hljs-string">&#x27;auc_mean&#x27;</span>, <span class="hljs-attribute">ymin</span>=<span class="hljs-string">&#x27;y_min_auc&#x27;</span>, <span class="hljs-attribute">ymax</span>=<span class="hljs-string">&#x27;y_man_auc&#x27;</span>, <span class="hljs-attribute">fill</span>=<span class="hljs-string">&#x27;Class&#x27;</span>))+geom_line()+geom_ribbon(alpha=0.5)+labs(x=&quot;nround&quot;,y=&#x27;&#x27;,title = <span class="hljs-string">&quot;XGB Cross Validation AUC&quot;</span>)<br>        return auc<br>    <span class="hljs-keyword">if</span> output == <span class="hljs-string">&quot;rmse&quot;</span>:<br>        his[<span class="hljs-string">&#x27;y_min_rmse&#x27;</span>] = his[<span class="hljs-string">&#x27;rmse_mean&#x27;</span>] - his[<span class="hljs-string">&#x27;rmse_std&#x27;</span>]<br>        his[<span class="hljs-string">&#x27;y_man_rmse&#x27;</span>] = his[<span class="hljs-string">&#x27;rmse_mean&#x27;</span>] + his[<span class="hljs-string">&#x27;rmse_std&#x27;</span>]<br>        rmse = ggplot(his, aes(<span class="hljs-attribute">x</span>=<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-attribute">y</span>=<span class="hljs-string">&#x27;rmse_mean&#x27;</span>, <span class="hljs-attribute">ymin</span>=<span class="hljs-string">&#x27;y_min_rmse&#x27;</span>, <span class="hljs-attribute">ymax</span>=<span class="hljs-string">&#x27;y_man_rmse&#x27;</span>, <span class="hljs-attribute">fill</span>=<span class="hljs-string">&#x27;Class&#x27;</span>)) + geom_line() + geom_ribbon(<span class="hljs-attribute">alpha</span>=0.5) + labs(<span class="hljs-attribute">x</span>=<span class="hljs-string">&quot;nround&quot;</span>, <span class="hljs-attribute">y</span>=<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-attribute">title</span>=<span class="hljs-string">&quot;XGB Cross Validation RMSE&quot;</span>)<br>        return (rmse)<br>    <span class="hljs-keyword">if</span> output == <span class="hljs-string">&quot;error&quot;</span>:<br>        his[<span class="hljs-string">&#x27;y_min_error&#x27;</span>] = his[<span class="hljs-string">&#x27;error_mean&#x27;</span>] - his[<span class="hljs-string">&#x27;error_std&#x27;</span>]<br>        his[<span class="hljs-string">&#x27;y_man_error&#x27;</span>] = his[<span class="hljs-string">&#x27;error_mean&#x27;</span>] + his[<span class="hljs-string">&#x27;error_std&#x27;</span>]<br>        <span class="hljs-built_in">error</span> = ggplot(his, aes(<span class="hljs-attribute">x</span>=<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-attribute">y</span>=<span class="hljs-string">&#x27;error_mean&#x27;</span>, <span class="hljs-attribute">ymin</span>=<span class="hljs-string">&#x27;y_min_error&#x27;</span>, <span class="hljs-attribute">ymax</span>=<span class="hljs-string">&#x27;y_man_error&#x27;</span>, <span class="hljs-attribute">fill</span>=<span class="hljs-string">&#x27;Class&#x27;</span>)) + geom_line() + geom_ribbon(<span class="hljs-attribute">alpha</span>=0.5) + labs(<span class="hljs-attribute">x</span>=<span class="hljs-string">&quot;nround&quot;</span>, <span class="hljs-attribute">y</span>=<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-attribute">title</span>=<span class="hljs-string">&quot;XGB Cross Validation ERROR&quot;</span>)<br>        return (error)<br></code></pre></td></tr></table></figure><ul><li>横坐标是迭代次数</li><li>train曲线和test曲线的相差程度，可以侧面反映模型复杂度，检验是否过拟合</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">xgb_plot</span><span class="hljs-params">(bst_cv1, <span class="hljs-string">&#x27;auc&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/y8Dm0rNkvvoO4EXLCTQT*qSCvZwyBYPBvkZweT7h6ok!/b/dL4AAAAAAAAA&bo=EgQ3AgAAAAADFxE!&rf=viewer_4&t=5"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">xgb_plot</span><span class="hljs-params">(bst_cv1,<span class="hljs-string">&#x27;rmse&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/0lHqHpsTCuA8173eyPQ7KXVLsk6NQI*DZPFBixu8APk!/b/dDYBAAAAAAAA&bo=HARvAgAAAAADF0c!&rf=viewer_4&t=5"></p><h5 id="4-建模，进行预测，打印评估指标"><a href="#4-建模，进行预测，打印评估指标" class="headerlink" title="(4) 建模，进行预测，打印评估指标"></a><strong>(4) 建模，进行预测，打印评估指标</strong></h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"># 利用上面调参结果： best_param<br><br>md_1 = xgb.train(best_param, dtrain, num_boost_round=nround)<br>dtest = xgb.<span class="hljs-constructor">DMatrix(X_test)</span><br>xgbc_y_predict = <span class="hljs-literal">[<span class="hljs-number">1</span> <span class="hljs-identifier">if</span> <span class="hljs-identifier">value</span> &gt;= <span class="hljs-number">0.5</span> <span class="hljs-identifier">else</span> <span class="hljs-number">0</span> <span class="hljs-identifier">for</span> <span class="hljs-identifier">value</span> <span class="hljs-identifier">in</span> <span class="hljs-identifier">md_1</span>.<span class="hljs-identifier">predict</span>(<span class="hljs-identifier">dtest</span>)]</span><br><br>accuracy = accuracy<span class="hljs-constructor">_score(<span class="hljs-params">y_test</span>, <span class="hljs-params">xgbc_y_predict</span> )</span><br>f1_score = f1<span class="hljs-constructor">_score(<span class="hljs-params">y_test</span>,<span class="hljs-params">predictions</span>)</span><br>print(<span class="hljs-string">&quot;Accuracy: %.2f%%&quot;</span> %(accuracy<span class="hljs-operator"> * </span><span class="hljs-number">100.0</span>))<br>print(<span class="hljs-string">&quot;F1 Score: %.2f%%&quot;</span> %(f1_score<span class="hljs-operator"> * </span><span class="hljs-number">100.0</span>))<br><br># save model<br>md_1.save<span class="hljs-constructor">_model(&#x27;<span class="hljs-params">xgb</span>.<span class="hljs-params">model</span>&#x27;)</span><br></code></pre></td></tr></table></figure><ul><li>方法二： 使用 XGBClassifier()</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">md_2 = <span class="hljs-constructor">XGBClassifier(<span class="hljs-operator">**</span><span class="hljs-params">best_param</span>)</span>                   # <span class="hljs-number">2</span>个*号，允许直接填入字典格式的param<br>md_2.fit(X_train, y_train)  <br><br>ypred = md_2.predict(X_test)<br>predictions = <span class="hljs-literal">[<span class="hljs-identifier">round</span>(<span class="hljs-identifier">value</span>) <span class="hljs-identifier">for</span> <span class="hljs-identifier">value</span> <span class="hljs-identifier">in</span> <span class="hljs-identifier">ypred</span>]</span><br><br># 打印评估指标<br>MSE = mean<span class="hljs-constructor">_squared_error(<span class="hljs-params">y_test</span>, <span class="hljs-params">predictions</span>)</span><br>print(<span class="hljs-string">&quot;MSE: %.2f%%&quot;</span> % (MSE<span class="hljs-operator"> * </span><span class="hljs-number">100.0</span>))  <br>accuracy = accuracy<span class="hljs-constructor">_score(<span class="hljs-params">y_test</span>, <span class="hljs-params">predictions</span>)</span><br>print(<span class="hljs-string">&quot;Accuracy: %.2f%%&quot;</span> % (accuracy<span class="hljs-operator"> * </span><span class="hljs-number">100.0</span>))<br>f1_score = f1<span class="hljs-constructor">_score(<span class="hljs-params">y_test</span>, <span class="hljs-params">predictions</span>)</span><br>print(<span class="hljs-string">&quot;F1 Score: %.2f%%&quot;</span> % (f1_score<span class="hljs-operator"> * </span><span class="hljs-number">100.0</span>))<br></code></pre></td></tr></table></figure><h5 id="5-绘制Importance排序图"><a href="#5-绘制Importance排序图" class="headerlink" title="(5) 绘制Importance排序图"></a><strong>(5) 绘制Importance排序图</strong></h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ax</span> = xgb.plot_importance(md_1, height=<span class="hljs-number">0</span>.<span class="hljs-number">5</span>)<br><span class="hljs-attribute">fig</span> = ax.figure<br><span class="hljs-attribute">fig</span>.set_size_inches(<span class="hljs-number">25</span>,<span class="hljs-number">20</span>)                  # 可调节图片尺寸和紧密程度<br><span class="hljs-attribute">plt</span>.show()<br></code></pre></td></tr></table></figure><h5 id="6-根据Importance进行特征筛选"><a href="#6-根据Importance进行特征筛选" class="headerlink" title="(6) 根据Importance进行特征筛选"></a><strong>(6) 根据Importance进行特征筛选</strong></h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># sorted(list(selection_model.booster().get_score(importance_type=&#x27;weight&#x27;).values()),reverse = True)</span><br><br>importance_plot = pd.DataFrame(&#123;<span class="hljs-string">&#x27;feature&#x27;</span>:list(X_train.columns),<span class="hljs-string">&#x27;importance&#x27;</span>:md_2.feature_importances_&#125;)<br>importance_plot = importance_plot.sort_values(<span class="hljs-attribute">by</span>=<span class="hljs-string">&#x27;importance&#x27;</span>)<br>importance_plot = importance_plot.reset.index(<span class="hljs-attribute">drop</span>=<span class="hljs-literal">True</span>)<br>thresholds = importance_plot.importance<br>thresholds_valid = np.unique(thresholds[thresholds != 0])<br><br><br><span class="hljs-keyword">for</span> thresh <span class="hljs-keyword">in</span> thresholds_valid:<br><br># select features using threshold<br>selection = SelectFromModel(md_2, <span class="hljs-attribute">threshold</span>=thresh, <span class="hljs-attribute">prefit</span>=<span class="hljs-literal">True</span>)<br>select_X_train = selection.transform(X_train)<br># train model<br>selection_model = XGBClassifier(*<span class="hljs-number">*be</span>st_param)<br>selection_model.fit(select_X_train, y_train)<br># eval model<br>select_X_test = selection.transform(X_test)<br>y_pred = selection_model.predict(select_X_test)<br>predictions = [round(value) <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> y_pred]<br>accuracy = accuracy_score(y_test, predictions)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Thresh=%.4f, n=%d, Accuracy: %.2f%%&quot;</span> % (thresh, select_X_train.shape[1], accuracy<span class="hljs-number">*100</span>.0))<br><br><br>thresh = 0.034<br>selected_features = list(importance_plot[importance_plot.importance &gt; thresh][<span class="hljs-string">&#x27;feature&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;selected features are :\n %s&#x27;</span>%selected_features)<br>select_X_train = X_train[selected_features]                        # 筛选Importance符合阈值的特征集<br><br>n_features = selected_X_train.shape[1]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;total: %d features are selected&#x27;</span> %n_features)<br><br>selection_model = XGBClassifier(*<span class="hljs-number">*be</span>st_param)                                   <br>selection_model.fit(select_X_train, y_train)<br><br>select_X_test = X_test[selected_features]<br>y_pred = selection_model.predict(select_X_test)<br>predictions = [round(value) <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> y_pred]<br>accuracy = accuracy_score(y_test, predictions)<br>f1_score = f1_score(y_test, predictions)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Accuracy: %.2f%%&quot;</span> % (accuracy * 100.0))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;F1 Score: %.2f%%&quot;</span> % (f1_score * 100.0))<br></code></pre></td></tr></table></figure><p>至于是先调参，再做变量筛选，还是先筛选后调参，或是反复调参反复筛选，纯凭个人喜号。</p><h5 id="7-绘制决策树"><a href="#7-绘制决策树" class="headerlink" title="(7)绘制决策树"></a><strong>(7)绘制决策树</strong></h5><p>参考:<a href="http://codewithzhangyi.com/2018/06/01/XGBOOST%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/">codewithzhangyi.com</a><br>这里我没有绘制决策树，参考一个很棒的小姐姐个人网站，她的这篇文章中有写。</p><hr><p>参考：<br><a href="https://xgboost.readthedocs.io/en/latest/">官方使用手册</a><br><a href="http://codewithzhangyi.com/">codewithzhangyi.com</a><br><a href="https://www.cnblogs.com/wj-1314/p/9402324.html">Python机器学习笔记：XgBoost算法</a></p><hr><iframe src="https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html " style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>]]></content>
    
    
    <categories>
      
      <category>Machine Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Machine Learning-实战 Titanic生存预测</title>
    <link href="/2019/03/23/Machine-Learning-%E5%AE%9E%E6%88%98-Titanic%E7%94%9F%E5%AD%98%E9%A2%84%E6%B5%8B/"/>
    <url>/2019/03/23/Machine-Learning-%E5%AE%9E%E6%88%98-Titanic%E7%94%9F%E5%AD%98%E9%A2%84%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<p>本文是机器学习实战片,例子是kaggle上老经典的例子了，Titanic生存预测<br>目的是了解机器学习的大体流程。文末百度网盘链接中包含本文用到的数据集和代码。</p><p><strong>环境</strong><br>win8, python3,jupyter notebook</p><p><strong>目录</strong></p><ul><li>项目背景</li><li>数据概览</li><li>数据预处理</li><li>特征分析</li><li>特征工程</li><li>构建模型</li></ul><h3 id="1-项目背景"><a href="#1-项目背景" class="headerlink" title="1.项目背景"></a>1.项目背景</h3><p>泰坦尼克号是当时世界上体积最庞大内部设施最豪华的客运轮船，当时泰坦尼克号的乘船事件可谓轰动全球，相信大家都看过那部经典电影。泰坦尼克号将乘客分为三个等级: 三等舱位于船身较下层也最便宜，一等舱是整艘船最为昂贵奢华的部分，二等舱在其中间。在这次灾难中能否幸存下来难免会有些运气成分, 但是有些人比其他人更可能生存下来, 比如妇女, 儿童和上层阶级。在电影中出现过让”女人和孩子先走“的台词。</p><h3 id="2-数据概览"><a href="#2-数据概览" class="headerlink" title="2.数据概览"></a>2.数据概览</h3><p>项目共提供了两份数据，train.csv文件作为训练集构建与生存相关的模型；另一份test.csv文件则用作测试集, 用我们构建出来的模型预测生存情况.</p><table><thead><tr><th>字段</th><th>字段含义</th></tr></thead><tbody><tr><td>PassengerId</td><td>乘客编号</td></tr><tr><td>Survived</td><td>是否生还，0表示未生还，1表示生还</td></tr><tr><td>Pclass</td><td>船票种类，折射处乘客的社会地位，1表示上层阶级，2表示中层阶级，3表示底层阶级</td></tr><tr><td>Sex</td><td>性别，男性为male，女性为female</td></tr><tr><td>Age</td><td>年龄，不满1岁的年龄为小数</td></tr><tr><td>SibSp</td><td>该乘客同船的兄弟姐妹及配偶的数量</td></tr><tr><td>Parch</td><td>该乘客同船的父母以及儿女的数量</td></tr><tr><td>Ticket</td><td>船票编号</td></tr><tr><td>Fare</td><td>买票的费用</td></tr><tr><td>Cabin</td><td>船舱编号</td></tr><tr><td>Embarked</td><td>代表在哪里上的船</td></tr></tbody></table><h5 id="2-1读取数据："><a href="#2-1读取数据：" class="headerlink" title="2.1读取数据："></a>2.1读取数据：</h5><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">import pandas as pd<br>train = pd.read_csv(&#x27;..\train.csv&#x27;)<br><span class="hljs-keyword">test </span>= pd.read_csv(&#x27;..\test.csv&#x27;)<br></code></pre></td></tr></table></figure><h5 id="2-2查看前五行数据"><a href="#2-2查看前五行数据" class="headerlink" title="2.2查看前五行数据"></a>2.2查看前五行数据</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">train<span class="hljs-selector-class">.head</span>()<br></code></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/5y42.3hfvuBqT3H9fdp*wG2wuqDV0eXAxUYHTvF*igc!/b/dL8AAAAAAAAA&bo=0wOxAAAAAAADF1M!&rf=viewer_4&t=5"></p><h5 id="2-3查看数据表整体信息"><a href="#2-3查看数据表整体信息" class="headerlink" title="2.3查看数据表整体信息"></a>2.3查看数据表整体信息</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">train.<span class="hljs-built_in">info</span>()<br>test.<span class="hljs-built_in">info</span>()<br></code></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/nLZfras9IrjU4mJwrqA.zvkgTJ5MjqhlIWq4CcHL28A!/b/dLkAAAAAAAAA&bo=kAH.AQAAAAADF1w!&rf=viewer_4&t=5"></p><h3 id="3-数据预处理"><a href="#3-数据预处理" class="headerlink" title="3.数据预处理"></a>3.数据预处理</h3><p>训练集中 Age Embarked  Cabin有缺省值<br>测试集中 Age Fare Cabin有缺省值 但根据经验常识Cabin船舱编号排除在特征外</p><pre><code class="hljs">train[&#39;Embarked&#39;].value_counts()</code></pre><h4 id="3-1对缺失值进行填充"><a href="#3-1对缺失值进行填充" class="headerlink" title="3.1对缺失值进行填充"></a>3.1对缺失值进行填充</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">train<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;Embarked&#x27;</span>]</span><span class="hljs-selector-class">.fillna</span>(<span class="hljs-string">&#x27;S&#x27;</span>,inplace=True)<br>train<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;Age&#x27;</span>]</span><span class="hljs-selector-class">.fillna</span>(train<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;Age&#x27;</span>]</span><span class="hljs-selector-class">.mean</span>(),inplace=True)<br>test<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;Age&#x27;</span>]</span><span class="hljs-selector-class">.fillna</span>(test<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;Age&#x27;</span>]</span><span class="hljs-selector-class">.mean</span>(),inplace=True)<br>test<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;Fare&#x27;</span>]</span><span class="hljs-selector-class">.fillna</span>(test<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;Fare&#x27;</span>]</span><span class="hljs-selector-class">.mean</span>(),inplace=True)<br></code></pre></td></tr></table></figure><h4 id="3-2类型转换"><a href="#3-2类型转换" class="headerlink" title="3.2类型转换"></a>3.2类型转换</h4><p>数据类型转换格式如下：运用函数astype()</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">train<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;Age&#x27;</span>]</span>  = train<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;Age&#x27;</span>]</span><span class="hljs-selector-class">.astype</span>(int)<br></code></pre></td></tr></table></figure><h4 id="4-特征分析"><a href="#4-特征分析" class="headerlink" title="4.特征分析"></a>4.特征分析</h4><p>在11个特征中, 哪些是和幸存相关的呢?</p><ul><li>Sex<br>在泰坦尼克号的电影中，有句台词是让女人和小孩先走，这里的性别肯定相关性高了，我们看看数据</li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> pylab <span class="hljs-keyword">import</span> mpl<br>mpl.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;SimHei&#x27;</span>]  #解决seaborn中文字体显示问题<br>plt.rcParams[<span class="hljs-string">&quot;figure.dpi&quot;</span>] =mpl.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span> # 解决保存图像是负号<span class="hljs-string">&#x27;-&#x27;</span>显示为方块的问题<br>%matplotlib <span class="hljs-keyword">inline</span><br>train[train[<span class="hljs-string">&#x27;Survived&#x27;</span>]==<span class="hljs-number">1</span>].groupby(<span class="hljs-string">&#x27;Sex&#x27;</span>)[<span class="hljs-string">&#x27;Survived&#x27;</span>].value_counts()<br><br>sns.barplot(x=<span class="hljs-string">&#x27;Sex&#x27;</span>,y=<span class="hljs-string">&#x27;Survived&#x27;</span>,data=train)<br></code></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/kVo0VoSsmHJzFU*SF572VUMNDvlUSNkOImvlrc*Joqc!/b/dL8AAAAAAAAA&bo=ewHfAAAAAAADF5c!&rf=viewer_4&t=5"><br>可以从柱状图中看出男女的生成比例很明显的不一样。所以Sex是一个强特征。</p><ul><li>Pclass 对于船舱等级, 一等舱是整个船最昂贵奢华的地方, 有钱人才能享受, 想必一等舱的有钱人比三等舱的穷人更容易幸存, 到底是不是呢? 用数据说话</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sns<span class="hljs-selector-class">.pointplot</span>(x=<span class="hljs-string">&#x27;Pclass&#x27;</span>,y=<span class="hljs-string">&#x27;Survived&#x27;</span>,hue=<span class="hljs-string">&#x27;Sex&#x27;</span>,data=train<br>              ,palette=&#123;<span class="hljs-string">&#x27;male&#x27;</span>:<span class="hljs-string">&#x27;blue&#x27;</span>,<span class="hljs-string">&#x27;female&#x27;</span>:<span class="hljs-string">&#x27;pink&#x27;</span>&#125;,markers=<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;*&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>]</span>,linestyles=<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&#x27;--&#x27;</span>]</span>)<br></code></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/ATQPPmZoeVRZ16JcGmjyBXPZ5OtYtLqjCgWWj6P*BlY!/b/dC8BAAAAAAAA&bo=awHjAAAAAAADF7s!&rf=viewer_4&t=5"><br>可以看到一等舱人员的幸存机会远大于三等舱, 果然和船舱等级相关.</p><ul><li><p>Age<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/O8Bvm6BCCjAFqnEfpKKyP5nODQ0JFDsPgEdDA4HnMSQ!/b/dLYAAAAAAAAA&bo=WAHmAAAAAAADF40!&rf=viewer_4&t=5"><br>可以看到女人普遍存活率都很高，男性在0-10岁之间存活率高，显然年龄是有影响的。</p></li><li><p>SibSp 从之前的描述性统计了解到, 兄弟姐妹与配偶的人数最多为8, 最少为0, 哪个更容易生存呢?<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/nwU24IyRk5CFZqTzKQLk*sv2Kx5Pblpabo86QfuzizA!/b/dL8AAAAAAAAA&bo=TgHjAAAAAAADF54!&rf=viewer_4&t=5"><br>可以看出关键时候，有兄弟姐妹和配偶的会提高存活几率，1到2个为宜，多了容易全部die</p></li><li><p>Parch 该乘客同船的父母以及儿女的数量,看看船上有父母孩子的存活率会不会更高呢？<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/2cyYwyi.A1J1OF0xnM014uLhb3hl8EeQVQifaBNbIYI!/b/dL8AAAAAAAAA&bo=egHkAAAAAAADF60!&rf=viewer_4&t=5"><br>由上图可以看吹1-3个存活率会更高，毕竟人多力量大。但这个力量也不能太大，太大容易翻船哈哈哈。</p></li></ul><h4 id="5-特征工程"><a href="#5-特征工程" class="headerlink" title="5.特征工程"></a>5.特征工程</h4><p>对分类特征进行向量化</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#采用DictVectorizer对特征向量化</span><br><span class="hljs-comment"># DictVectorizer为分类（也称为标称，离散）特征实现所谓的one-of-K或“one-hot（独热）”编码</span><br><span class="hljs-keyword">from</span> sklearn.feature_extraction import DictVectorizer<br>dict_vec = DictVectorizer(<span class="hljs-attribute">sparse</span>=<span class="hljs-literal">False</span>)<br>X_train = dict_vec.fit_transform(X_train.to_dict(<span class="hljs-attribute">orient</span>=<span class="hljs-string">&#x27;record&#x27;</span>))<br>X_test = dict_vec.fit_transform(X_test.to_dict(<span class="hljs-attribute">orient</span>=<span class="hljs-string">&#x27;record&#x27;</span>))<br><br><span class="hljs-comment"># 查看特征：dict_vec.feature_names_</span><br></code></pre></td></tr></table></figure><h4 id="6-构建模型"><a href="#6-构建模型" class="headerlink" title="6.构建模型"></a>6.构建模型</h4><p>使用随机森林和Xgboost分别进行模型训练</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#从sklearn.ensemble中导入RandomForestClassifier<br>from sklearn<span class="hljs-selector-class">.ensemble</span> import RandomForestClassifier<br>#使用默认配置初始化RandomForestClassifier<br>rfc = <span class="hljs-built_in">RandomForestClassifier</span>()<br><br>#使用默认配置的RandomForestClassifier进行预测操作<br>rfc<span class="hljs-selector-class">.fit</span>(X_train,y_train)<br>rfc_y_predict = rfc<span class="hljs-selector-class">.predict</span>(X_test)<br>rfc_submission = pd<span class="hljs-selector-class">.DataFrame</span>(&#123;<span class="hljs-string">&#x27;PassengerId&#x27;</span>:test<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;PassengerId&#x27;</span>]</span>,<span class="hljs-string">&#x27;Survived&#x27;</span>:rfc_y_predict&#125;)<br>rfc_submission<span class="hljs-selector-class">.to_csv</span>(<span class="hljs-string">&#x27;D:\\Pywork\\Titanic\\rfc_submission.csv&#x27;</span>,index=False)<br><br>from sklearn<span class="hljs-selector-class">.cross_validation</span> import cross_val_score<br>#使用<span class="hljs-number">5</span>折交叉验证的方法在训练集上分别对默认配置的RandomForestClassifier以及XGBClassifier进行性能评估，并获得平均分类准确性的得分<br><span class="hljs-function"><span class="hljs-title">cross_val_score</span><span class="hljs-params">(rfc,X_train,y_train,cv=<span class="hljs-number">5</span>)</span></span><span class="hljs-selector-class">.mean</span>()<br><br>#从流行包xgboost中导入XGBClassifier进行交叉验证<br>from xgboost import XGBClassifier<br>xgbc = <span class="hljs-built_in">XGBClassifier</span>()<br><span class="hljs-function"><span class="hljs-title">cross_val_score</span><span class="hljs-params">(xgbc,X_train,y_train,cv=<span class="hljs-number">5</span>)</span></span><span class="hljs-selector-class">.mean</span>()<br></code></pre></td></tr></table></figure><p>使用并行网络的方式寻找更好的超参数组合，以期待进一步提高XGBClassifier的预测性能</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from sklearn<span class="hljs-selector-class">.grid_search</span> import GridSearchCV<br>params = &#123;<span class="hljs-string">&#x27;max_depth&#x27;</span>:<span class="hljs-selector-attr">[i for i in range(2,7)]</span>,<span class="hljs-string">&#x27;n_estimators&#x27;</span>:<span class="hljs-selector-attr">[j for j in range(100,1100,200)]</span>,<span class="hljs-string">&#x27;learning_rate&#x27;</span>:<span class="hljs-selector-attr">[0.05,0.1,0.25,0.5,0.1]</span><br>         &#125;<br>xgbc_best = <span class="hljs-built_in">XGBClassifier</span>()<br>gs = <span class="hljs-built_in">GridSearchCV</span>(xgbc_best,params,n_jobs=-<span class="hljs-number">1</span>,cv=<span class="hljs-number">5</span>,verbose=<span class="hljs-number">1</span>)<br>gs<span class="hljs-selector-class">.fit</span>(X_train,y_train)<br></code></pre></td></tr></table></figure><p>检查优化完成后的超参数配置<br>print(gs.best_score_)<br>print(gs.best_params_)</p><p>最后进行模型预测</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#使用经过超参数配置的XGBClassfier对测试数据的预测结果存储在文件xgbc_best_submission中</span><br>xgbc_best_y_predict = gs.predict(X_test)<br>xgbc_best_submission = pd.DataFrame(&#123;<span class="hljs-string">&#x27;PassengerId&#x27;</span>:test[<span class="hljs-string">&#x27;PassengerId&#x27;</span>],<span class="hljs-string">&#x27;Survived&#x27;</span>:xgbc_best_y_predict&#125;)<br><span class="hljs-comment">#将默认配置的RandomForestClassifier对测试数据的预测结果存储在文件rfc_submission.csv中。</span><br>xgbc_best_submission.to_csv(<span class="hljs-string">&#x27;D:\\Pywork\\Titanic\\xgbc_best_submission.csv&#x27;</span>,<span class="hljs-attribute">index</span>=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>想要以上涉及到的源代码可以联系我<br>邮箱:<a href="mailto:&#121;&#117;&#x74;&#x69;&#x6e;&#103;&#57;&#53;&#57;&#55;&#x40;&#49;&#54;&#51;&#46;&#x63;&#111;&#x6d;">&#121;&#117;&#x74;&#x69;&#x6e;&#103;&#57;&#53;&#57;&#55;&#x40;&#49;&#54;&#51;&#46;&#x63;&#111;&#x6d;</a><br>百度网盘：<a href="https://pan.baidu.com/s/1vGq4Et2gReM58Dr_1O-v3Q">https://pan.baidu.com/s/1vGq4Et2gReM58Dr_1O-v3Q</a> 密码：uoqv</p><p>参考文章：</p><hr><iframe src="https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html " style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>]]></content>
    
    
    <categories>
      
      <category>Machine Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>北上广深租房信息的爬取和分析</title>
    <link href="/2019/03/23/%E5%8C%97%E4%B8%8A%E5%B9%BF%E6%B7%B1%E7%A7%9F%E6%88%BF%E4%BF%A1%E6%81%AF%E7%9A%84%E7%88%AC%E5%8F%96%E5%92%8C%E5%88%86%E6%9E%90/"/>
    <url>/2019/03/23/%E5%8C%97%E4%B8%8A%E5%B9%BF%E6%B7%B1%E7%A7%9F%E6%88%BF%E4%BF%A1%E6%81%AF%E7%9A%84%E7%88%AC%E5%8F%96%E5%92%8C%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>本文通过爬取链家租房网站的租房信息，对北上广深一线城市的租房信息进行分析。</p><p>以下是本篇的思维导图<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/CINppwwjU78GvqcZ*S*yH7xxzLe5RuJHujdorHtoH.k!/b/dLYAAAAAAAAA&bo=7wUDBAAAAAADJ.8!&rf=viewer_4&t=5"></p><h3 id="数据爬取"><a href="#数据爬取" class="headerlink" title="数据爬取"></a>数据爬取</h3><p>准备工作：安装mongdb数据库，爬取到的数据将保存在mongdb数据库</p><h4 id="1-首先找到爬取数据的路口"><a href="#1-首先找到爬取数据的路口" class="headerlink" title="1.首先找到爬取数据的路口"></a>1.首先找到爬取数据的路口</h4><p>进入链家网的租房网站可以发现规律提取传参<br><a href="https://m.lianjia.com/chuzu/sh/zufang/xujiahui">https://m.lianjia.com/chuzu/sh/zufang/xujiahui</a><br>规律提取如下：<br><a href="https://m.lianjia.com/chuzu/%7B%7D/zufang/%7B%7D">https://m.lianjia.com/chuzu/{}/zufang/{}</a> 其中第一个花括号里面是传入城市的缩写如：上海-sh，广州-gz，北京-bj，深圳-sz,第二个括号里面传入区域例如上海的徐汇区-xuhui</p><p>后面发现如果按照区域爬取每区最多只能获得2000条数据，后来解决的办法是先爬取各区的商圈，最终以各区商圈来爬数据，那么商圈怎么爬取</p><p>可以在网页中查看代码信息发现商圈被写在data-key后面，这样用正则表达式re.findall()就可以获取商圈<br>“data-type&#x3D;&quot;bizcircle&quot; data-key&#x3D;&quot;(.*)&quot; class&#x3D;&quot;oneline &quot;&gt;”</p><h4 id="2-找到api数据接口"><a href="#2-找到api数据接口" class="headerlink" title="2.找到api数据接口"></a>2.找到api数据接口</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">url = <span class="hljs-string">&#x27;https://app.api.lianjia.com/Rentplat/v1/house/list?city_id=&#123;&#125;&amp;condition=&#123;&#125;/rt&#123;&#125;&amp;limit=30&amp;offset=&#123;&#125;&amp;request_ts=&#123;&#125;&amp;scene=list&#x27;</span>.format(<span class="hljs-keyword">info</span>[<span class="hljs-number">0</span>], bc_name,type_code, idx*<span class="hljs-number">30</span>, <span class="hljs-type">int</span>(<span class="hljs-type">time</span>.time()))<br></code></pre></td></tr></table></figure><p>通过分析网页可以找到上面的api数据接口，其中<br>info[0]：110000(北京),310000(上海),440100(广州),440300(深圳)<br>bc_name：上面爬下来的商圈<br>type_code：（整租）200600000001、（合租）200600000002<br>idx:爬取的页数<br>time.time():当前时间戳</p><p>爬取到什么时候停止？当一页返回的条数小于30时，我们判断爬取完成。返回的条数在上面爬取上面链接中的数据里会有一个total，对应存的就是当页的条数</p><p>后面会用到经纬度制作租房地点的热力图，所以还需爬取经纬度信息。经纬度信息包含在上面返回的m_url网页中，还需要再爬取m_url一层，到这里数据爬取的分析工作基本完成</p><h3 id="3-数据保存"><a href="#3-数据保存" class="headerlink" title="3.数据保存"></a>3.数据保存</h3><p>将上面爬取到的数据保存在mongodb中,拿到mongodb连接对象，新建一个表，伪代码如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"> host = os.environ.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;MONGODB_HOST&#x27;</span>, <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>)  # 本地数据库<br><span class="hljs-built_in"> port </span>= os.environ.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;MONGODB_PORT&#x27;</span>, <span class="hljs-string">&#x27;27017&#x27;</span>)  # 数据库端口<br>mongo_url = <span class="hljs-string">&#x27;mongodb://&#123;&#125;:&#123;&#125;&#x27;</span>.format(host, port)<br>mongo_db = os.environ.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;MONGODB_DATABASE&#x27;</span>, <span class="hljs-string">&#x27;Lianjia&#x27;</span>)<span class="hljs-built_in"></span><br><span class="hljs-built_in">client </span>= MongoClient(mongo_url)<br>self.db = client[mongo_db]<br>self.db[<span class="hljs-string">&#x27;zufang&#x27;</span>].create_index(<span class="hljs-string">&#x27;m_url&#x27;</span>, <span class="hljs-attribute">unique</span>=<span class="hljs-literal">True</span>)  # 以m端链接为主键进行去重<br></code></pre></td></tr></table></figure><p>将需要存储的字段封装在item这个字典里，以upsert的方式更新在表里即可。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">self<span class="hljs-selector-class">.db</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;zufang&#x27;</span>]</span><span class="hljs-selector-class">.update_one</span>(&#123;<span class="hljs-string">&#x27;m_url&#x27;</span>: item<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;m_url&#x27;</span>]</span>&#125;, &#123;<span class="hljs-string">&#x27;$set&#x27;</span>: item&#125;, upsert=True)<br></code></pre></td></tr></table></figure><h3 id="数据清理"><a href="#数据清理" class="headerlink" title="数据清理"></a>数据清理</h3><p>数据清理的步骤一般包括</p><ul><li>去除不需要的数据</li><li>去除&#x2F;补全缺失数据</li><li>去除&#x2F;修改格式和内容错误的数据</li><li>去除&#x2F;修改逻辑错误的数据</li></ul><p><strong>去除不需要的数据</strong>：删除_id</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 数据清洗</span><br><span class="hljs-comment"># 1. 去掉“_id”列</span><br><span class="hljs-built_in">del</span> <span class="hljs-keyword">data</span>[<span class="hljs-string">&#x27;_id&#x27;</span>]<br></code></pre></td></tr></table></figure><p>一般DataFrame会自动生成_id作为唯一标识，里面是随机生成的一串字符串<br><strong>去除&#x2F;补全缺失数据</strong>：将None值用numpy.nan填充</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"># <span class="hljs-string">&#x27;distance&#x27;</span>, <span class="hljs-string">&#x27;latitude&#x27;</span>, <span class="hljs-string">&#x27;longitude&#x27;</span>因为有None，需另外处理<br>def None_distance(<span class="hljs-keyword">data</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">data</span> <span class="hljs-keyword">is</span> None:<br>        <span class="hljs-keyword">return</span> np.nan<br>    <span class="hljs-keyword">else</span>:int(<span class="hljs-keyword">data</span>)<br><br>def None_latlon(<span class="hljs-keyword">data</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">data</span> <span class="hljs-keyword">is</span> None or <span class="hljs-keyword">data</span>==<span class="hljs-string">&#x27;&#x27;</span>:<br>        <span class="hljs-keyword">return</span> np.nan<br>    <span class="hljs-keyword">else</span>:<span class="hljs-keyword">return</span> float(<span class="hljs-keyword">data</span>)<br><span class="hljs-keyword">data</span>[<span class="hljs-string">&#x27;distance&#x27;</span>] = <span class="hljs-keyword">data</span>[<span class="hljs-string">&#x27;distance&#x27;</span>].apply(None_distance)<br><span class="hljs-keyword">data</span>[<span class="hljs-string">&#x27;latitude&#x27;</span>] = <span class="hljs-keyword">data</span>[<span class="hljs-string">&#x27;latitude&#x27;</span>].apply(None_latlon)<br><span class="hljs-keyword">data</span>[<span class="hljs-string">&#x27;longitude&#x27;</span>] = <span class="hljs-keyword">data</span>[<span class="hljs-string">&#x27;longitude&#x27;</span>].apply(None_latlon)<br></code></pre></td></tr></table></figure><p><strong>去除&#x2F;修改格式和内容错误的数据</strong>：</p><ul><li>在房屋大小的一列中，包含-，一个范围区间，同样的租金范围那一列里也有，这里将取左边右边两值得平均值.<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-meta"># 5. rent_area观察excel里的样例数据发现 有的是个范围带有&#x27;-‘</span><br><span class="hljs-title">def</span> get_aver(<span class="hljs-class"><span class="hljs-keyword">data</span>):</span><br>    <span class="hljs-keyword">if</span> isinstance(<span class="hljs-class"><span class="hljs-keyword">data</span>,str) and &#x27;-&#x27; in <span class="hljs-keyword">data</span>:</span><br>        low,high = <span class="hljs-class"><span class="hljs-keyword">data</span>.split(&#x27;-&#x27;)</span><br>        return (int(low)+int(high))/<span class="hljs-number">2</span><br>    <span class="hljs-keyword">else</span>:<br>        return int(<span class="hljs-class"><span class="hljs-keyword">data</span>)</span><br><br><span class="hljs-class"><span class="hljs-keyword">data</span>[&#x27;rent_area&#x27;] = <span class="hljs-keyword">data</span>[&#x27;rent_area&#x27;].apply(<span class="hljs-title">get_aver</span>)</span><br></code></pre></td></tr></table></figure></li><li>数据类型转换<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"># 数据类型转换<br>for <span class="hljs-selector-tag">i</span> in <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;bathroom_num&#x27;</span>,<span class="hljs-string">&#x27;bedroom_num&#x27;</span>,<span class="hljs-string">&#x27;hall_num&#x27;</span>,<span class="hljs-string">&#x27;rent_price_listing&#x27;</span>]</span>:<br>    data[i] = data[i].<span class="hljs-built_in">astype</span>(int)<br></code></pre></td></tr></table></figure><strong>去除&#x2F;修改逻辑错误的数据</strong>:<br>房间小于5平<br>卫生间异常多的数据<br>卧室异常多的数据</li></ul><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><h4 id="1-各城市的租房分布怎么样？"><a href="#1-各城市的租房分布怎么样？" class="headerlink" title="1.各城市的租房分布怎么样？"></a>1.各城市的租房分布怎么样？</h4><p>看看北上广深房源都在哪个区域分布多，哪个区域少,首先来看看北京<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/GMDN4VjvYjZaZwcfnZxhPhjvA.hKs375oIDgXoyNoCA!/b/dMIAAAAAAAAA&bo=8gMUAgAAAAADN*U!&rf=viewer_4&t=5"><br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/N17NpFmhtNQeYlB2ZPgzg9d7VE9mhnLkluLBJ5.I1.k!/b/dDcBAAAAAAAA&bo=nwYJBAAAAAADF6Y!&rf=viewer_4&t=5"><br>北京的租房房源一共有19068条，可以看到北京的房源主要集中在2环到四环内，其中朝阳区的房源最多，几乎占到北京所有房源的1&#x2F;3，丰台、海淀次之。</p><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/u6dXz3a7Rc38QFi3.iilLnLm2yam*ryEfoqC0.dcO2g!/b/dL8AAAAAAAAA&bo=*AMUAgAAAAADN*s!&rf=viewer_4&t=5"><br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/Tyb*OkGycyZoa01js2At1JJ5Xk4hxAhObm78Jr2G*10!/b/dFMBAAAAAAAA&bo=NgYJBAAAAAADFw8!&rf=viewer_4&t=5"><br>上海房源数据一共有26115条，浦东占到快7000条，比例接近1&#x2F;4，在偏远地区金山崇明基本看不到房源。</p><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/*cYulEBdxoe7qDj1nIezaBH5zPxv0wx1NWBnYhPZPcg!/b/dDcBAAAAAAAA&bo=AQRAAgAAAAADN1U!&rf=viewer_4&t=5"><br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/OwnbF0sPPq2VGAxPSIIS9RdqSI4XkUVuAdwXkX.VVcs!/b/dMAAAAAAAAAA&bo=IgYJBAAAAAADFxs!&rf=viewer_4&t=5"><br>广州的房源在四个城市中是最多的，一共有40022条。主要集中在天河、白云、番禺、增城以及珠海地区。其中天河、白云、番禺均超过7000条。<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/DZb6Jn4M.Wee3Cnt8P9ynH8PqikNrJQbofhykaG.KyE!/b/dLkAAAAAAAAA&bo=dgYJBAAAAAADF08!&rf=viewer_4&t=5"><br>深圳的房源共21638条，主要还是分布在南山区、龙岗区、宝安区以及福田区，龙华区。</p><h4 id="2-城市各区域的租金分布怎么样"><a href="#2-城市各区域的租金分布怎么样" class="headerlink" title="2.城市各区域的租金分布怎么样"></a>2.城市各区域的租金分布怎么样</h4><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/IOTmJbo1ouIDk*uRqQhf7pCU*uNIDqWcS1GPC57aCCk!/b/dMAAAAAAAAAA&bo=WAKQAQAAAAADF*k!&rf=viewer_4&t=5"><br>由图，北京每平方米租金top10的商圈，平均在200元左右，最贵的商圈在东单，每平方米要237元，也就是说要在东单住一个20平的房子，一个月需要4770元，组一个70平的房子，需要16590元.<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/L6U2bjCbvJGW6*qCRBIfD9yvKu4pHmXRXXZDPgrJdAw!/b/dLYAAAAAAAAA&bo=WAKQAQAAAAADF*k!&rf=viewer_4&t=5_"><br>上海每平方米平均租金top10的商区租金要比北京低一点，平均在170左右，其中租金最高的是新天地，租60平的房子需要10610元。</p><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/EtfpprPfUAn76SDpcuo9ZQT*ZLNIBj9C4*T66XAg*gk!/b/dLYAAAAAAAAA&bo=WAKQAQAAAAADF*k!&rf=viewer_4&t=5"><br>相比较北京和上海而言广州的每平方米租金的top10就更平易近人一点，除了二沙岛、人民北的房租贵一点，其他均在1500以下。<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/c6ci3ypvMrqS0JNYoZPSP.aZUxxlOJA9NcuDruTtiws!/b/dL8AAAAAAAAA&bo=WAKQAQAAAAADF*k!&rf=viewer_4&t=5"><br>深圳前10的商圈，深圳湾以193元每平方米领先，其次是香蜜湖和福田中心，大体上比上海每平方米少10元左右。</p><h4 id="3-房间大小对每平方米租金的影响"><a href="#3-房间大小对每平方米租金的影响" class="headerlink" title="3.房间大小对每平方米租金的影响"></a>3.房间大小对每平方米租金的影响</h4><p>北京<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/OG6kfRxwy2bGO1sV9Jcq4AeeW0Q3.8JJs7AAlePgoJA!/b/dMMAAAAAAAAA&bo=HAJvAQAAAAADF0I!&rf=viewer_4&t=5" alt="北京"><br>上海<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/GFde9NUrcISX3FCr*coiDFLrieKjKXVJqL*2uSOPUKw!/b/dLkAAAAAAAAA&bo=HAJvAQAAAAADF0I!&rf=viewer_4&t=5"><br>广州<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/jR3GLleCUyBlYnwkwwpncpu6PcrgSNp65jXZdY5uVCU!/b/dL8AAAAAAAAA&bo=HAJvAQAAAAADF0I!&rf=viewer_4&t=5"><br>深圳<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/cTalbuRWBs1YzeyImh3xlmyUXNkIr3rszDx6YT98ios!/b/dL8AAAAAAAAA&bo=HAJvAQAAAAADF0I!&rf=viewer_4&t=5"><br>由上面4张图可以知道不管在哪个城市，出租面积在10-20之间的房子每平方米的租金是最贵的。所以最划算的租房方式是找几个认识的小伙伴一起租大一点的房子。</p><h4 id="4-北上广深租房时房客更看重什么？"><a href="#4-北上广深租房时房客更看重什么？" class="headerlink" title="4.北上广深租房时房客更看重什么？"></a>4.北上广深租房时房客更看重什么？</h4><p>以下是北上广深四大城市房源最多的3种户型<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/S6KSz8Q5oZvvsTPEcHY*J6YzWkiYOHJU7ktlMbWZEtU!/b/dLgAAAAAAAAA&bo=WAKQAQAAAAADF*k!&rf=viewer_4&t=5"><br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/OQFaF0tIYMFX3vv*O3zV35NG8xq8t9F6E1G6GIFdvA8!/b/dLYAAAAAAAAA&bo=WAKQAQAAAAADF*k!&rf=viewer_4&t=5"><br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/spKDaHx2gWRWkm3XWBTeaGp8dnlwcaG.Wc4KwUEcK14!/b/dMMAAAAAAAAA&bo=WAKQAQAAAAADF*k!&rf=viewer_4&t=5"><br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/OzlBub6076*dDI5Y71EtgCz4mZ1AS227jKIPIGA6Mpg!/b/dL4AAAAAAAAA&bo=WAKQAQAAAAADF*k!&rf=viewer_4&t=5"><br>可见北上广都偏爱2室1厅1卫的房子，而深圳一枝独秀，一室一卫的出租房比较多。整体来看四个城市都是小户型多。<br>最后根据房屋的标签进行统计，绘制了词云图。</p><p>北京租房词云图<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/16XgV.RpRZJf.FeZruq6aeVR3XegzICXmUhbNSNqUQA!/b/dFMBAAAAAAAA&bo=6ANsAgAAAAADF7c!&rf=viewer_4&t=5"><br>上海租房词云图<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/sLW7BFrXPXrGkgB1XQnQqjbpOp1YJxa0C6FcS.2CgEE!/b/dLkAAAAAAAAA&bo=6ANsAgAAAAADF7c!&rf=viewer_4&t=5"><br>广州租房词云图<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/CaadOj9Z*JRYYqdISpyoCifbYNlE.hWp6Y*BvAK7l2k!/b/dLYAAAAAAAAA&bo=6ANsAgAAAAADF7c!&rf=viewer_4&t=5"><br>深圳租房词云图<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/ynkJmSqSxlHwWQPnQhLC300HQxY.JgwnEnwvbV4E8gI!/b/dFQBAAAAAAAA&bo=6ANsAgAAAAADF7c!&rf=viewer_4&t=5"><br>可见北京不集中供暖可能会活不下去，hhhhhhh；<br>北上广深都看中离地铁近；<br>广州租房流行独栋公寓；<br>深圳、广州对租客性别有限制。</p><p>想要以上涉及到的源代码可以联系我<br>邮箱:<a href="mailto:&#121;&#x75;&#116;&#105;&#110;&#103;&#x39;&#53;&#57;&#55;&#x40;&#49;&#54;&#51;&#46;&#x63;&#x6f;&#109;">&#121;&#x75;&#116;&#105;&#110;&#103;&#x39;&#53;&#57;&#55;&#x40;&#49;&#54;&#51;&#46;&#x63;&#x6f;&#109;</a></p><p>参考文章：<br>公众号：Alfred数据室<br><a href="http://mp.weixin.qq.com/s?__biz=MzIyMDExNjE0Mg==&mid=2247483899&idx=1&sn=65252ed83b6040849ff35e4d7894f178&chksm=97d1a43aa0a62d2cdfea824ffe1a6dd0c8ac4e63b6a0e9646e5f5d8cb874f42c32cbd22ec165&mpshare=1&scene=23&srcid=0323DJGmpLoSbKuF1Ijqec46#rd">北上广深租房图鉴</a></p><hr><iframe src="https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html " style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>]]></content>
    
    
    
    <tags>
      
      <tag>Data Analysis</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建自己的投资理财体系(1.了解各种投资品)</title>
    <link href="/2019/03/17/%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2%E4%BD%93%E7%B3%BB-1.%E4%BA%86%E8%A7%A3%E5%90%84%E7%A7%8D%E6%8A%95%E8%B5%84/"/>
    <url>/2019/03/17/%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2%E4%BD%93%E7%B3%BB-1.%E4%BA%86%E8%A7%A3%E5%90%84%E7%A7%8D%E6%8A%95%E8%B5%84/</url>
    
    <content type="html"><![CDATA[<h3 id="一-培养理财意识"><a href="#一-培养理财意识" class="headerlink" title="一.培养理财意识"></a>一.培养理财意识</h3><p>   如果你问有什么技能是越早开始学习越好的，那投资理财一定算一项。因为越早开始享受复利的魔力越大。投资理财是在大学里面学不到的一门学问，但却又是越早学习越好的技能。</p><p> 下面给大家看一张图，体会一下复利的魔力。<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/grdO*7KalE3kSDIqutCBRnfrtQXbxC7v3j3OewWKlow!/b/dFYBAAAAAAAA&bo=9AGJAQAAAAARF10!&rf=viewer_4&t=5"><br>50年后，从图中可以看到单利和复利在财富上的巨大分野。巴菲特老爷爷曾经说过复利是世界第八大奇迹。<br><strong>That compound interest was the 8th Wonder of the World or something like that.</strong></p><p>所以理财是越早开始越好的，接下来看看复利的公式</p><ul><li>最终收益&#x3D; 本金* （1+ 收益率）^ 时间</li></ul><p>如果你还是大学生，或者刚毕业本金不够多，没关系我们开始时间早啊，赢在了时间上。然后再想办法让自己的本金变多，怎么让自己本金变多，积累第一笔资金的方法就是<strong>开源节流</strong>。在节流上：分清必要，需要，想要，在需要和想要上做减法。在开源上：可以去做做兼职，大学生嘛什么都不多就是时间多，但是在找兼职上也尽量找一些能提升自己能力的兼职。</p><p>看到这里大家应该都是有学习投资理财的意识的，很好这是开始学习的很重要的一步，在我去年刚开始学习投资理财的时候，有一个小伙伴说了这么一句话，**“在别人眼里看来改变旧观念就像传销一样，而我心甘情愿被理财传销”**。我最开始想要学习投资理财是因为，感觉每年过年回家然后再回上海，虽然新年伊始，但是你都几乎可以把年底你能赚的钱算死。这种感觉很可怕，不想生活就这么一眼可以看到头，这是我学习理财的初衷。</p><h4 id="时间的量化思维"><a href="#时间的量化思维" class="headerlink" title="时间的量化思维"></a>时间的量化思维</h4><p><strong>理财不仅是投资这么狭隘，更多的还有思维的建立。</strong><br>我们在日常生活中，对于开销的理解，多以金钱来量化，很少有人会把时间也计算在内，大多数人在工作和生活中，更多地注意金钱，而很少注意“时间”。有一则小故事讲的是，某位富翁不小心掉了几百美元，路人见状后告知，谁知他头也不回的走了，因为他心里在盘算，在弯腰把几百美元捡起来的这几秒钟时间里，他能赚到更多的钱。富人的财产可以高出普通人数千万倍，但其拥有的时间却无法高出普通人一倍。我们应该下意识的培养时间的量化思维，尽量花时间去武装大脑，而不是为了节约开支而浪费大把时间。</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="分清资产和负债"><a href="#分清资产和负债" class="headerlink" title="分清资产和负债"></a>分清资产和负债</h4><p>穷人为什么穷？因为他们不断地买入负债或没有可持续利用价值的东西.<br>富人的第一个秘密：资产品种丰富，给自己带来更多收入，不用单一依靠工资！相对应的穷人的死穴：就是毫无任何资产可言！生活的唯一的经济支柱就是工资！什么是资产，什么是负债。《富爸爸和穷爸爸》里说过<br>资产就是能把钱放进你口袋里的东西，它能给你不断带来收入，而负债则是把钱从你口袋里取走的东西。我们应该尽量增加资产，减少负债。</p><h3 id="二-了解各种投资品及其风险"><a href="#二-了解各种投资品及其风险" class="headerlink" title="二.了解各种投资品及其风险"></a>二.了解各种投资品及其风险</h3><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/RdN7zRIpuSCik.TyJmhg0oLxsYl*qNBgwl8Ze8*iujs!/b/dL4AAAAAAAAA&bo=jASfAgAAAAARFzU!&rf=viewer_4&t=5"><br>这张投资金字塔图我觉得蛮经典的，列举了市面上常见的各种投资品，从金字塔的底部到金字塔顶部，越往上走风险越高。我们存在银行里的活期存款其实也算是一种投资方式，只是回报率很少而已。</p><p>下面来详细说明一下常见的投资品以及它们的特点：<br>首先从风险低的<strong>货币基金</strong>说起，说到货币基金可能大家很陌生，但是说到余额宝大家肯定都知道。余额宝就是货币基金的一种，它的运作方式是由基金公司把散户的钱集中起来，拿去做无风险的投资，买银行的大额存单或者定期存款什么的。但这厮因为拿到的钱多，就可以和银行叫板，自行商定利率，拿到更高的利息。这也是为什么比活期存款利息高的原因。除了大部分用来投资银行存款外，基金公司也会投资债券，票据之类的，投资方向都是很安全的。</p><p><strong>国债逆回购</strong><br>其实说白了就是借钱给别人，是一种短期贷款。个人把自己的资金借出去，获得固定的利息收益。借款人（一般都是大企业）用自己的国债（或达到一定评级的债券）作为抵押获得这笔借款，到期后还本付息。当市场缺钱（银行系统冲业绩、企业公司短期拆借）的时候，企业就会在各种渠道通过高额利息来借钱，国债逆回购就是其中一个渠道。年末季末月末，国债逆回购利率都会比较高。因为在你和借款人之间，既有债券的抵押，中间还有中国证券登记结算有限公司在监督管理，如果借款人还不出来钱，中登公司会帮你把钱要回来；<br><strong>所以它的特点是:安全，永不亏本.</strong><br>国债逆回购的品种一共有 18 种，沪、深两市各 9 种,沪市为国债逆回购，深市为企业债逆回购,上交所购买的品种，10w元起买，只有少量资金的就不适合沪市啦，深交所回购产品1000元起购。券商app里都可购买，参与国债逆回购的前提必须要开户。</p><p><strong>债券</strong>根据借款主体的不同可以分为国债、地方政府债、企业债。也就是国家、地方政府和企业向人民群众借钱，约定一个日期还本付息，自然而然风险也就低了，风险低，利息也就相应低一些了。一般债券收益率在5%-7%之间</p><p><strong>基金</strong>稍微有了解一点的就知道，基金分为货币基金，债券基金，混合基金和股票基金。其中<strong>货币基金</strong>和<strong>债券基金</strong>的篮子里面都是装的国债、地方政府债、公司债等，只不过不同点在于债券基金除了投资债券还可以投资股票，但是债券的占比必须要在80%以上。除了投资债券的比例不同，年限也不同，货币基金投资的一般是1年以内的短期债券，而债券基金则一般是1年以上的债券。<strong>股票基金</strong>因为投资股票的占比在80%以上，所以风险也是最高的。其中股票基金又包含被动投资的指数基金和主动性的主动股票基金，相当于是一篮子股票，有专业人士基金经理帮忙打理。<strong>指数基金</strong>是指追踪特定的指数，并按照这个指数成分股的比例买入同样的股票组合。在A股市场一共有5只主要的指数，</p><ul><li>上证50(由沪市规模大、流动性好的最具代表性的50只股票组成），</li><li>沪深300(由上海和深圳两个交易所所挑选出来的市值排名前300的上市公司组成)</li><li>中证500(沪深两市前800的上市公司中，前500入了沪深300，剩下的500家就组成了中证500指数）</li><li>创业板指数(专门在创业板上市的小型创业公司组成)</li><li>红利指数(由高分红的企业组成的指数)</li></ul><p><strong>股票</strong>这里举一个非常简化的例子帮助理解股票的本质，假设小明开了一家饼干店需要30万，但是钱不够还差10万，于是他来找你借钱，但是把这钱你说不用还，但是以后饼干店赚了钱三分之一的利润是我的。买了一家公司的股票你就成了这家公司的股东，能不能赚到钱，取决于这家公司的经营状况。</p><p><strong>P2P</strong> 就是民间借贷，银行借款的标准较高，所以催生出了个人借钱给个人的P2P。P2P平台就是小额资金直接融资的交易场所，但是由于目前征信系统不完善，去年就听到很多P2P公司跑路的新闻。所以对于这类产品能不碰就不碰。</p><p><strong>外汇 、期货 、贵金属 、实物收藏品</strong>这些都是风险极其高的产品，不懂行的人就不要轻易碰啦。</p><h3 id="三-培养自己的投资理财体系"><a href="#三-培养自己的投资理财体系" class="headerlink" title="三.培养自己的投资理财体系"></a>三.培养自己的投资理财体系</h3><h5 id="资产配置"><a href="#资产配置" class="headerlink" title="资产配置"></a>资产配置</h5><p>了解常见的投资品后，后期还需要在学习和实践中提炼一套适合自己的投资理财体系，首先涉及到资产配置。在这方面有一个著名的资产配置的方法就是标准普尔家庭配置象限图.<img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/qCXfz*iH4jtvXT.o9QphIOcOL7o1t5tovAqkabAbiW0!/b/dLkAAAAAAAAA&bo=8gHRAAAAAAADFxA!&rf=viewer_4&t=5"><br>在这张图上，把钱的用途分成了四份</p><ul><li>1.短期消费<br>这一部分钱用来作为短期消费，平时吃饭逛街买衣服看电影，偶尔出去旅行一次，买书学习等等，钱都从这里出，一般占家庭资产的 <strong>10%</strong>,它最大的要点：满足我们的短期消费。另外预留 3-6 个月的生活费作为应急金、梦想相册基金、短期内需要用到的钱</li><li>2.意外重疾保障<br>这个账户保障突发大额开销，一定要专款专用，保障在家庭成员出现意外事故、重大疾病时，有足够的钱来保命,一般占家庭资产的 **20%**，为的是以小博大</li><li>3.保本升值<br>也是长期收益账户。一般占家庭资产的 **40%**，为保障家庭成员的养老金、子女教育金、留给子女的钱等。这个账户重点是保本升值，一定要保证本金不能有损失，并要抵御通货膨胀的侵蚀，所以收益不一定很高，但却是长期稳定的。第四个账户其实很适合基金定投之类的投资，这就是一个很好的储蓄方式</li><li>4.重在收益<br>这个账户为家庭创造高收益，往往是通过你的智慧，用你最擅长的方式为家庭赚钱，包括你投资的股票、主动型基金、房产等,一般占家庭资产的 **30%**。通过投资来为家庭创造收益，用有风险的投资创造高回报。</li></ul><h5 id="股票投资流派"><a href="#股票投资流派" class="headerlink" title="股票投资流派"></a>股票投资流派</h5><p>做好了资产配置，你就需要找到自己的投资流派，你很多时候会听到周围人说我是投机者，股市行情好的时候，投机者跟着股市上涨的势头，炒一波短线，赚一波块钱，但这很容易踏空，因为股市不可预测，一不小心就买在了山顶。<br>我更倾向于价值投资，股市说到底是<strong>什么时候买，什么时候卖，买什么</strong>三件事情。买在相对低点，卖在相对高点。而价值投资对于资产的估值让我更清楚在低估的时候买，在高估的时候卖。短期来看，股价是由供求决定的。但长期来看，是由它的内在价值决定的。<br>那么<strong>价值投资赚的是谁的钱</strong>,这里有一个公式：<br>资产的收益 &#x3D; 胀 通货膨胀 + 出 自身产出 +  价格的波动<br>价值投资者赚的就是以上三部分的钱，一是央行放水的钱。二是优秀上市公司发展盈利带来的钱。三就是割韭菜的钱。</p><ul><li>央行放水。导致大量的钱涌入股市，助推股价高涨，通常发生在降息周期。同时央行放水，导致通货膨胀，最终导致资产价格的上涨。所以对抗通胀最好的办法是买入资产。</li><li>优秀上市公司发展盈利带来的钱。这个也很好理解。企业盈利之后的分红，公司净资产增加导致的股价上涨都是这部分钱。</li><li>格雷厄姆把股市比作市场先生，市场先生一会情绪高涨，一会情绪低落，反映到股价上，就是牛熊市的转换。正是因为市场的波动，给了价值投资者在低估时买入和高估时卖出的机会，从而取得超额收益。</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><strong>1.培养理财意识</strong><br>复利是世界第八大奇迹，理财越早开始，越能享受复利的魔力<br><strong>2.了解各种投资品及其风险</strong><br>货币基金、国债逆回购、债券、基金、股票、外汇、期货、贵金属风险从低到高<br><strong>3.培养自己的投资理财体系</strong><br>做好资产配置，做投资前一定想清楚其中的底层逻辑。买股票就是买入一家公司成为它的股东，搞清楚买什么？什么时候买？以及什么时候卖？</p><hr><iframe src="https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html " style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>]]></content>
    
    
    
    <tags>
      
      <tag>投资理财</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《流浪地球》电影评论的爬取和分析</title>
    <link href="/2019/03/09/%E3%80%8A%E6%B5%81%E6%B5%AA%E5%9C%B0%E7%90%83%E3%80%8B%E7%94%B5%E5%BD%B1%E8%AF%84%E8%AE%BA%E7%9A%84%E7%88%AC%E5%8F%96%E5%92%8C%E5%88%86%E6%9E%90/"/>
    <url>/2019/03/09/%E3%80%8A%E6%B5%81%E6%B5%AA%E5%9C%B0%E7%90%83%E3%80%8B%E7%94%B5%E5%BD%B1%E8%AF%84%E8%AE%BA%E7%9A%84%E7%88%AC%E5%8F%96%E5%92%8C%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>本文在猫眼电影上爬取了《流浪地球》的上万评论,并对其评论进行分析</p><h3 id="爬虫-爬取数据"><a href="#爬虫-爬取数据" class="headerlink" title="爬虫-爬取数据"></a>爬虫-爬取数据</h3><h4 id="找到评论网页地址"><a href="#找到评论网页地址" class="headerlink" title="找到评论网页地址"></a>找到评论网页地址</h4><p>先打开猫眼官网找到《流浪地球》的介绍页面：<a href="https://maoyan.com/films/248906">https://maoyan.com/films/248906</a><br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/DlzZZcnQmJlcg**2UJdVofzhw1drFquhmgZJnbTisuM!/b/dFIBAAAAAAAA&bo=ZwPdAQAAAAADJ7o!&rf=viewer_4&t=5" alt="在这里插入图片描述"></p><ul><li>打开开发者工具</li><li>转换成手机浏览(因为网页版的评论数据只显示部分短评)<br>点击红色箭头指向的位置，然后按F12键刷新，这时候我们就可以看到所有评论了<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/JRF2hjEvkSVM1lW8xlO5RUgFLHO1pGd2.PrJGm8oDog!/b/dDUBAAAAAAAA&bo=ywPFAQAAAAADFz4!&rf=viewer_4&t=5" alt="在这里插入图片描述"><h4 id="获取评论请求地址"><a href="#获取评论请求地址" class="headerlink" title="获取评论请求地址"></a>获取评论请求地址</h4>在点击打开“查看全部533685条讨论”后，屏幕上的评论往下拉，会发现浏览器的网络展示中会不断加载新页面，网络请求多出来了comments.json的请求：<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/t4bi2nk3sPPDCunbWpdBJSGco4pUaYEYjCC.RMMQjo0!/b/dL4AAAAAAAAA&bo=DQNIAgAAAAADF3Y!&rf=viewer_4&t=5"></li></ul><p>复制出几个comments.json页面的URL做比较寻找规律</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://m.maoyan.com/review/v2/comments.json?movieId=<span class="hljs-number">248906</span>&amp;userId=-<span class="hljs-number">1</span>&amp;offset=<span class="hljs-number">0</span>&amp;limit=<span class="hljs-number">15</span>&amp;ts=<span class="hljs-number">0</span>&amp;level=<span class="hljs-number">2</span>&amp;type=<span class="hljs-number">3</span><br><span class="hljs-attribute">http</span>://m.maoyan.com/review/v2/comments.json?movieId=<span class="hljs-number">248906</span>&amp;userId=-<span class="hljs-number">1</span>&amp;offset=<span class="hljs-number">15</span>&amp;limit=<span class="hljs-number">15</span>&amp;ts=<span class="hljs-number">1552143388614</span>&amp;level=<span class="hljs-number">2</span>&amp;type=<span class="hljs-number">3</span><br><span class="hljs-attribute">http</span>://m.maoyan.com/review/v2/comments.json?movieId=<span class="hljs-number">248906</span>&amp;userId=-<span class="hljs-number">1</span>&amp;offset=<span class="hljs-number">30</span>&amp;limit=<span class="hljs-number">15</span>&amp;ts=<span class="hljs-number">1552143388614</span>&amp;level=<span class="hljs-number">2</span>&amp;type=<span class="hljs-number">3</span><br><br></code></pre></td></tr></table></figure><p>可以发现规律：</p><ul><li>初始页面的ts值为0,随后会有ts值，且保持不变。这里的ts是当前的时间戳,看、可以用如下代码查看</li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#coding:UTF-8</span><br>import <span class="hljs-keyword">time</span><br><span class="hljs-comment">#毫秒转换成秒</span><br>timeStamp = <span class="hljs-keyword">int</span>(<span class="hljs-number">1552143388614</span>/<span class="hljs-number">1000</span>)<br><span class="hljs-comment">#转换成localtime</span><br>localTime = time.localtime(timeStamp)<br><span class="hljs-comment">#转换成新的时间格式(2017-09-16 11:28:54)</span><br>strTime = time.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, localTime)<br><span class="hljs-keyword">print</span>(strTime)<br></code></pre></td></tr></table></figure><ul><li>offset是请求评论开始的序号，limit为请求的条数</li></ul><p>再看返回的json结果：</p><ul><li>data.comments中是评论的具体内容</li><li>paging中通过hasMore来告诉我们是否还有更多（判断是否继续抓取）</li></ul><p><strong>构造请求url 方法一</strong></p><p>根据上面的分析，我们构造请求的url就很明确了：</p><ul><li>从offset&#x3D;0&amp;limit&#x3D;15开始</li><li>通过返回的paging.hasMore来判断是否继续抓取</li><li>下一个抓取的url中offset+&#x3D;limit</li></ul><p><strong>只能抓取1000条？！</strong></p><p>根据上述分析，在返回的json数据中是可以看到总评论数的，但是实际抓取的时候，在offset超过1000之后，返回的数据中hasMore就变成了false。</p><p>于是尝试通过浏览器一直下拉刷新，到达offset超过1000的情况，发现页面会不停的发送请求，但也无法获取数据。</p><p>那应该就是网站做了控制，不允许offset超过1000。</p><p><strong>构造请求URL 方法二</strong></p><p>那么就要考虑其他构造url的方法来抓取了。先观察下每个请求返回的信息：</p><p>发现每个comment里都包含有一个time信息，可以发现后台是按照时间顺序的，每分钟一个间隔，那么就可以考虑根据每次返回comment中的时间来更新url中的ts即可。</p><p>由于不确定每次请求返回的数据中包含了多长的时间段，且返回的第一个评论时间戳与第二个评论是不同的，所以抓取思路如下：</p><ul><li>获取请求数据</li><li>记录第一个时间戳</li><li>记录第二个时间戳</li><li>当遇到第三个时间戳时，将ts设置为第二个时间戳，重新构造url</li><li>如果单次抓取中每遇到第三个时间戳，则通过修改offset来继续抓取，直到遇到第三个时间戳</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vim">def parse_json(data):<br>    <span class="hljs-keyword">global</span> <span class="hljs-built_in">count</span><br>    <span class="hljs-keyword">global</span> offset<br>    <span class="hljs-keyword">global</span> limit<br>    <span class="hljs-keyword">global</span> <span class="hljs-keyword">ts</span><br>    ts_duration = <span class="hljs-keyword">ts</span><br>    <span class="hljs-keyword">res</span> = json.loads(data)<br>    comments = <span class="hljs-keyword">res</span>[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;comments&#x27;</span>]<br>    <span class="hljs-keyword">for</span> comment in comments:<br>        comment_time = comment[<span class="hljs-string">&#x27;time&#x27;</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">ts</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">ts</span> = comment_time<br>            ts_duration = comment_time<br>        <span class="hljs-keyword">if</span> comment_time != <span class="hljs-keyword">ts</span> <span class="hljs-built_in">and</span> <span class="hljs-keyword">ts</span> == ts_duration:<br>            ts_duration = comment_time<br>        <span class="hljs-keyword">if</span> comment_time !=ts_duration:<br>            <span class="hljs-keyword">ts</span> = ts_duration<br>            offset = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">return</span> get_url()<br>        <span class="hljs-keyword">else</span>:<br>            content = comment[<span class="hljs-string">&#x27;content&#x27;</span>].strip().replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;。&#x27;</span>)<br>            <span class="hljs-keyword">print</span>(<span class="hljs-string">&#x27;get comment &#x27;</span> + str(<span class="hljs-built_in">count</span>))<br>            <span class="hljs-built_in">count</span> += <span class="hljs-number">1</span><br>            write_txt(time.<span class="hljs-built_in">strftime</span>(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>,time.<span class="hljs-built_in">localtime</span>(comment_time/<span class="hljs-number">1000</span>)) + <span class="hljs-string">&#x27;##&#x27;</span> + content + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">res</span>[<span class="hljs-string">&#x27;paging&#x27;</span>][<span class="hljs-string">&#x27;hasMore&#x27;</span>]:<br>        offset += limit<br>        <span class="hljs-keyword">return</span> get_url()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> None<br></code></pre></td></tr></table></figure><p>这里贴出另一个思路完整代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><br><br><span class="hljs-comment"># 导入爬虫所需工具库</span><br><span class="hljs-keyword">import</span> time,  random<br><span class="hljs-keyword">import</span> datetime <span class="hljs-keyword">as</span> dt<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># 8个备用user_agents</span><br>user_agents = [<br>    &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;MQQBrowser/26 Mozilla/5.0 (Linux; U; Android 2.3.7; zh-cn; MB200 Build/GRJ22;\</span><br><span class="hljs-string">            CyanogenMod-7) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 \</span><br><span class="hljs-string">            (KHTML, like Gecko) wOSBrowser/233.70 Safari/534.6 TouchPad/1.0&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5;\</span><br><span class="hljs-string">            Trident/5.0; IEMobile/9.0; HTC; Titan)&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019;\</span><br><span class="hljs-string">            Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Linux; U; Android 3.0; en-us; Xoom Build/HRI39) \</span><br><span class="hljs-string">            AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us)\</span><br><span class="hljs-string">            AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) \</span><br><span class="hljs-string">            AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; Nexus One Build/FRF91)\</span><br><span class="hljs-string">            AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1&#x27;</span>&#125;,<br>]<br><span class="hljs-comment"># 创建爬虫类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MovieSpider</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, filename</span>):<br>        self.headers = user_agents<br>        self.filename = filename<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>(<span class="hljs-params">self, header, url</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        功能：访问url的网址，获取网页内容并返回</span><br><span class="hljs-string">        参数：url,目标网页的url</span><br><span class="hljs-string">        返回：目标网页的html内容</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">try</span>:<br>            r = requests.get(url, headers=header)<br>            r.raise_for_status()<br>            <span class="hljs-keyword">return</span> r.text<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_data</span>(<span class="hljs-params">self, html</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        功能：提取 html 页面信息中的关键信息，并整合一个数组并返回</span><br><span class="hljs-string">        参数：html 根据 url 获取到的网页内容</span><br><span class="hljs-string">        返回：存储有 html 中提取出的关键信息的数组</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        json_data = json.loads(html)[<span class="hljs-string">&#x27;cmts&#x27;</span>]<br>        comments = []<br><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> json_data:<br>                comment = []<br>                <span class="hljs-comment"># 提取影评中的6条数据：nickName(昵称),cityName(城市),content(评语)，</span><br>                <span class="hljs-comment"># score(评分),startTime(评价时间),gender(性别)</span><br>                comment.append(item[<span class="hljs-string">&#x27;nickName&#x27;</span>])<br>                comment.append(item[<span class="hljs-string">&#x27;cityName&#x27;</span>] <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;cityName&#x27;</span> <span class="hljs-keyword">in</span> item <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;&#x27;</span>)<br>                comment.append(item[<span class="hljs-string">&#x27;content&#x27;</span>].strip().replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>))<br>                comment.append(item[<span class="hljs-string">&#x27;score&#x27;</span>])<br>                comment.append(item[<span class="hljs-string">&#x27;startTime&#x27;</span>])<br>                comment.append(item[<span class="hljs-string">&#x27;gender&#x27;</span>] <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;gender&#x27;</span> <span class="hljs-keyword">in</span> item <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;&#x27;</span>)<br>                comment.append(item[<span class="hljs-string">&#x27;userLevel&#x27;</span>] <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;userLevel&#x27;</span> <span class="hljs-keyword">in</span> item <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;&#x27;</span>)<br>                comment.append(item[<span class="hljs-string">&#x27;userId&#x27;</span>] <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;userId&#x27;</span> <span class="hljs-keyword">in</span> item <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;&#x27;</span>)<br><br>                comments.append(comment)<br><br>            <span class="hljs-keyword">return</span> comments<br><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(comment)<br>            <span class="hljs-built_in">print</span>(e)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">save_data</span>(<span class="hljs-params">self, comments</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        功能：将comments中的信息输出到文件中/或数据库中。</span><br><span class="hljs-string">        参数：comments 将要保存的数据</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        df = pd.DataFrame(comments)<br>        df.to_csv(self.filename, mode=<span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf_8_sig&#x27;</span>,<br>                  index=<span class="hljs-literal">False</span>, sep=<span class="hljs-string">&#x27;,&#x27;</span>, header=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self, time_lists</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        功能：爬虫调度器，根据规则每次生成一个新的请求 url，爬取其内容，并保存到本地。</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-comment">#         start_time = dt.datetime.now().strftime(&#x27;%Y-%m-%d  %H:%M:%S&#x27;)</span><br>        start_time = time_lists[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 电影上映时间，评论爬取到此截至</span><br>        end_time = time_lists[-<span class="hljs-number">1</span>]  <span class="hljs-comment"># 电影上映时间，评论爬取到此截至</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*******************&#x27;</span>)<br><br>        <span class="hljs-comment"># 抓取评论信息</span><br>        i = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> start_time &gt; end_time:<br>            i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> i % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;已爬取%s页评论&#x27;</span> % i)<br>            url = <span class="hljs-string">&#x27;http://m.maoyan.com/mmdb/comments/movie/248906.json?_v_=            yes&amp;offset=0&amp;startTime=&#x27;</span> + start_time.replace(<br>                <span class="hljs-string">&#x27;  &#x27;</span>, <span class="hljs-string">&#x27;%20&#x27;</span>)<br>            header = random.choice(self.headers)<br>            time.sleep(<span class="hljs-number">0.05</span>)<br>            html = <span class="hljs-literal">None</span><br><br>            <span class="hljs-keyword">try</span>:<br>                html = self.get_data(header, url)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*************************&#x27;</span>)<br>                time.sleep(<span class="hljs-number">0.83</span>)<br>                html = self.get_data(url)<br>                <span class="hljs-built_in">print</span>(e)<br><br>            <span class="hljs-keyword">else</span>:<br>                time.sleep(<span class="hljs-number">0.3</span>)<br><br>            <span class="hljs-comment"># 解析评论信息</span><br>            comments = self.parse_data(html)<br>            start_time = comments[<span class="hljs-number">14</span>][<span class="hljs-number">4</span>]<br><br>            start_time = dt.datetime.strptime(<br>                start_time, <span class="hljs-string">&#x27;%Y-%m-%d  %H:%M:%S&#x27;</span>) + dt.timedelta(seconds=-<span class="hljs-number">1</span>)<br>            start_time = dt.datetime.strftime(start_time, <span class="hljs-string">&#x27;%Y-%m-%d  %H:%M:%S&#x27;</span>)<br><br>            self.save_data(comments)<br><br><span class="hljs-comment"># 通过改变时间点，选择爬取信息所处的时间段</span><br>t1 = [<span class="hljs-string">&#x27;2019-02-12  18:59:59&#x27;</span>, <span class="hljs-string">&#x27;2019-02-05  00:00:00&#x27;</span>]<br>time_lists = t1<br>filename = <span class="hljs-string">&#x27;流浪地球%s_comments.csv&#x27;</span> % time_lists[<span class="hljs-number">1</span>].split()[<span class="hljs-number">0</span>]<br>spider = MovieSpider(filename)<br>spider.run(time_lists)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;爬取信息结束&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><ul><li>读取数据<br>前面已经将评论的时间和内容通过<code>csv</code>的格式保存下来，并使用<code>;</code>分割。这里我们将使用<code>pandas</code>读取<code>csv</code>并进行统计处理</li></ul><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-class"><span class="hljs-keyword">data</span> = pd.read_csv(&#x27;./<span class="hljs-title">data</span>.<span class="hljs-title">csv&#x27;</span>)</span><br><span class="hljs-class"><span class="hljs-keyword">data</span>.info()</span><br></code></pre></td></tr></table></figure><ul><li><p>数据详情<br>共有102580条数据；<br>包含字段：<br>评论内容、性别、评论ID、评论者昵称、回复数量、评分、时间、点赞数量、评论者ID、评论者等级</p></li><li><p>清理数据</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 删除无用数据</span><br><span class="hljs-keyword">data</span> = data.dropna(axis = <span class="hljs-number">0</span>, how = <span class="hljs-string">&quot;any&quot;</span>)<br><span class="hljs-comment"># 删除重复评论</span><br><span class="hljs-keyword">data</span> = data.drop_duplicates(subset=<span class="hljs-string">&#x27;content&#x27;</span>)<br><span class="hljs-comment"># 将本来是object类型的time，转换成时间类型</span><br><span class="hljs-keyword">data</span>[<span class="hljs-string">&#x27;time&#x27;</span>] = pd.to_datetime(<span class="hljs-keyword">data</span>[<span class="hljs-string">&#x27;time&#x27;</span>],format=<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)<br><span class="hljs-comment"># 日期筛选为上映后的日期</span><br><span class="hljs-keyword">data</span> = <span class="hljs-keyword">data</span>[<span class="hljs-type">data</span>[<span class="hljs-string">&#x27;time&#x27;</span>]&gt;=<span class="hljs-type">pd.to_datetime</span>(<span class="hljs-string">&#x27;2019-02-05 00:00:00&#x27;</span>)]<br><span class="hljs-comment"># 将时间设置为index</span><br>data.set_index(<span class="hljs-keyword">data</span>[<span class="hljs-string">&#x27;time&#x27;</span>],inplace=True)<br></code></pre></td></tr></table></figure></li><li><p>分析问题<br>1.总体评价如何？<br>2.总体评价的时间走向如何？<br>3.高分的评价理由是什么？<br>4.低分的评价理由是什么？<br>5.低分的人群有哪些特征？（性别、等级）<br>6.低分跟哪位演员有关？</p></li></ul><p> <strong>总体评价如何？</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pyecharts import Bar<br><span class="hljs-keyword">from</span> pyecharts import Overlap<br><span class="hljs-keyword">from</span> pyecharts import Line<br><br>score_total = data[<span class="hljs-string">&#x27;score&#x27;</span>].value_counts().sort_index()<br>bar = Bar(<span class="hljs-string">&#x27;《流浪地球》各评分数量&#x27;</span>,<span class="hljs-attribute">width</span>=700)<br>overlap = Overlap(<span class="hljs-attribute">width</span>=700)<br>bar.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;&quot;</span>, score_total.index, score_total.values, <span class="hljs-attribute">is_label_show</span>=<span class="hljs-literal">True</span>,<br>       <span class="hljs-attribute">bar_category_gap</span>=<span class="hljs-string">&#x27;40%&#x27;</span>, label_color = [<span class="hljs-string">&#x27;#130f40&#x27;</span>],<br>       <span class="hljs-attribute">legend_text_size</span>=18,xaxis_label_textsize=18,yaxis_label_textsize=18)<br>line = Line(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-attribute">width</span>=700)<br>line.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;&quot;</span>,score_total.index, score_total.values+500,<span class="hljs-attribute">is_smooth</span>=<span class="hljs-literal">True</span>)<br>overlap.<span class="hljs-built_in">add</span>(bar)<br>overlap.<span class="hljs-built_in">add</span>(line)<br>overlap<br></code></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/cpKS154bQyeLY02bQ96*Ib6SRAy1z1xyKt0XBlHR6Zg!/b/dFMBAAAAAAAA&bo=vAKQAQAAAAADFx0!&rf=viewer_4&t=5" alt="在这里插入图片描述"><br> 低分占比</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 低分占比 &lt;5</span><br><span class="hljs-attribute">score_total</span>[:<span class="hljs-number">5</span>].sum()/score_total.sum()*<span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>高分占比 8</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 高分占比 8</span><br><span class="hljs-attribute">score_total</span>[<span class="hljs-number">8</span>:].sum()/score_total.sum()*<span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>满分占比</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 满分占比</span><br><span class="hljs-attribute">score_total</span>[<span class="hljs-number">10</span>:].sum()/score_total.sum()*<span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>通过上述分析计算，高分占比达到90%以上，满分占比也高达70%以上，可以看出《流浪地球》整体评分很高</p><p><strong>高分的评价理由是什么？</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import jieba<br><span class="hljs-keyword">from</span> collections import Counter<br><span class="hljs-keyword">from</span> pyecharts import WordCloud<br><br><span class="hljs-comment"># 比较偏的就不可以被正确分词了 add_word函数提供了解决方法</span><br>jieba.add_word(<span class="hljs-string">&#x27;屈楚萧&#x27;</span>)<br>jieba.add_word(<span class="hljs-string">&#x27;刘启&#x27;</span>)<br>jieba.add_word(<span class="hljs-string">&#x27;吴京&#x27;</span>)<br>jieba.add_word(<span class="hljs-string">&#x27;刘培强&#x27;</span>)<br>jieba.add_word(<span class="hljs-string">&#x27;李光洁&#x27;</span>)<br>jieba.add_word(<span class="hljs-string">&#x27;王磊&#x27;</span>)<br>jieba.add_word(<span class="hljs-string">&#x27;吴孟达&#x27;</span>)<br>jieba.add_word(<span class="hljs-string">&#x27;达叔&#x27;</span>)<br>jieba.add_word(<span class="hljs-string">&#x27;韩子昂&#x27;</span>)<br>jieba.add_word(<span class="hljs-string">&#x27;赵今麦&#x27;</span>)<br>jieba.add_word(<span class="hljs-string">&#x27;韩朵朵&#x27;</span>)<br><br>swords = [x.strip() <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> open (<span class="hljs-string">&#x27;stopwords.txt&#x27;</span>,<span class="hljs-attribute">encoding</span>=<span class="hljs-string">&#x27;utf-8&#x27;</span>)]<br><br>def plot_word_cloud(data, swords):<br>    text = <span class="hljs-string">&#x27;&#x27;</span>.join(data[<span class="hljs-string">&#x27;content&#x27;</span>])<br>    words = list(jieba.cut(text))<br>    ex_sw_words = []<br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:<br>        <span class="hljs-keyword">if</span> len(word)&gt;1 <span class="hljs-keyword">and</span> (word <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> swords):<br>            ex_sw_words.append(word)<br>    c = Counter()<br>    c = Counter(ex_sw_words)<br>    wc_data = pd.DataFrame(&#123;<span class="hljs-string">&#x27;word&#x27;</span>:list(c.keys()), <span class="hljs-string">&#x27;counts&#x27;</span>:list(c.values())&#125;).sort_values(<span class="hljs-attribute">by</span>=<span class="hljs-string">&#x27;counts&#x27;</span>, <span class="hljs-attribute">ascending</span>=<span class="hljs-literal">False</span>).head(100)<br>    wordcloud = WordCloud(<span class="hljs-attribute">width</span>=1300, <span class="hljs-attribute">height</span>=620)<br>    wordcloud.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;&quot;</span>, wc_data[<span class="hljs-string">&#x27;word&#x27;</span>], wc_data[<span class="hljs-string">&#x27;counts&#x27;</span>], word_size_range=[20, 100])<br>    return wordcloud<br><span class="hljs-comment"># 高分的评价</span><br>plot_word_cloud(<span class="hljs-attribute">data</span>=data[data[<span class="hljs-string">&#x27;score&#x27;</span>]&gt;6], <span class="hljs-attribute">swords</span>=swords)<br></code></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/Suvm.I8ESBV9Fkc3Bn5PHLMX4QQBcl3X9.4tLRCicRQ!/b/dL8AAAAAAAAA&bo=FAVsAgAAAAADN20!&rf=viewer_4&t=5" alt="在这里插入图片描述"></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"># <span class="hljs-selector-tag">nlargest</span>函数不需要排序直接看最大的<br><span class="hljs-selector-tag">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">data</span><span class="hljs-selector-attr">[data[<span class="hljs-string">&#x27;score&#x27;</span>]</span>&gt;<span class="hljs-number">6</span>]<span class="hljs-selector-class">.nlargest</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;upCount&#x27;</span>)<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;content&#x27;</span>]</span>:<br>    <span class="hljs-selector-tag">print</span>(i+<span class="hljs-string">&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure><p>通过热度词云可以看出，《流浪地球》评分高的原因是因为中国国产的科幻片，特效的制作精良。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"># 低分的评价<br>plot<span class="hljs-constructor">_word_cloud(<span class="hljs-params">data</span>=<span class="hljs-params">data</span>[<span class="hljs-params">data</span>[&#x27;<span class="hljs-params">score</span>&#x27;]&lt;5], <span class="hljs-params">swords</span>=<span class="hljs-params">swords</span>)</span><br></code></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/c1TmBZ57ca1AEW4KqsGBt4tYqpisemfDnSInFfkEjto!/b/dC0BAAAAAAAA&bo=FAVsAgAAAAADN20!&rf=viewer_4&t=5" alt="在这里插入图片描述"><br>通过上图低分词云可以看出，网友评论低分的原因是因为剧情，虽然在中国科幻片上特效制作精良，算是中国国产科幻片里程碑作品，但剧情欠佳。</p><p><strong>低分的人群有哪些特征？（性别、等级）</strong></p><p>观众总体的性别占比</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 总体的性别比例</span><br>gender_total = data[<span class="hljs-string">&#x27;gender&#x27;</span>].value_counts()<br>bar = Bar(<span class="hljs-string">&quot;《流浪地球》观众性别&quot;</span>, <span class="hljs-attribute">width</span>=700)<br>bar.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;&quot;</span>,[<span class="hljs-string">&#x27;未知&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>],gender_total.values, <span class="hljs-attribute">is_stack</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">is_label_show</span>=<span class="hljs-literal">True</span>,<br>               <span class="hljs-attribute">bar_category_gap</span>=<span class="hljs-string">&#x27;60%&#x27;</span>, label_color = [<span class="hljs-string">&#x27;#130f40&#x27;</span>],<br>       <span class="hljs-attribute">legend_text_size</span>=18,xaxis_label_textsize=18,yaxis_label_textsize=18)<br>bar<br></code></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/1esG2QMjcqJC1.mYkRqhwpW9AksjehmcW2LJxEQfpTg!/b/dD4BAAAAAAAA&bo=vAKQAQAAAAADFx0!&rf=viewer_4&t=5" alt="在这里插入图片描述"><br>低分观众的性别占比</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">gender_low = data[data[<span class="hljs-string">&#x27;score&#x27;</span>]&lt;5][<span class="hljs-string">&#x27;gender&#x27;</span>].value_counts()<br><br>bar = Bar(<span class="hljs-string">&quot;《流浪地球》低分评论观众性别&quot;</span>, <span class="hljs-attribute">width</span>=700)<br>bar.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;&quot;</span>,[<span class="hljs-string">&#x27;未知&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>],gender_low.values, <span class="hljs-attribute">is_stack</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">is_label_show</span>=<span class="hljs-literal">True</span>,<br>        <span class="hljs-attribute">bar_category_gap</span>=<span class="hljs-string">&#x27;60%&#x27;</span>, label_color = [<span class="hljs-string">&#x27;#130f40&#x27;</span>],<br>       <span class="hljs-attribute">legend_text_size</span>=18,xaxis_label_textsize=18,yaxis_label_textsize=18)<br>bar<br></code></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/R7Q0V7LQMy*UacK3XIfKxxNisOP7KhjRJ3epJzoU2OM!/b/dDMBAAAAAAAA&bo=vAKQAQAAAAADFx0!&rf=viewer_4&t=5" alt="在这里插入图片描述"><br>可以看出低分观众在男女比例上跟总体的男女比例基本一致</p><p><strong>高低分跟哪位演员有关？</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mapping = &#123;<span class="hljs-string">&#x27;liucixin&#x27;</span>:<span class="hljs-string">&#x27;刘慈欣|大刘&#x27;</span>, <span class="hljs-string">&#x27;guofan&#x27;</span>:<span class="hljs-string">&#x27;郭帆&#x27;</span>, <span class="hljs-string">&#x27;quchuxiao&#x27;</span>:<span class="hljs-string">&#x27;屈楚萧|刘启|户口&#x27;</span>, <span class="hljs-string">&#x27;wujing&#x27;</span>:<span class="hljs-string">&#x27;吴京|刘培强&#x27;</span>, <br>           <span class="hljs-string">&#x27;liguangjie&#x27;</span>:<span class="hljs-string">&#x27;李光洁|王磊&#x27;</span>, <span class="hljs-string">&#x27;wumengda&#x27;</span>:<span class="hljs-string">&#x27;吴孟达|达叔|韩子昂&#x27;</span>, <span class="hljs-string">&#x27;zhaojinmai&#x27;</span>:<span class="hljs-string">&#x27;赵今麦|韩朵朵&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> key,values <span class="hljs-keyword">in</span> mapping<span class="hljs-selector-class">.items</span>():<br>    data<span class="hljs-selector-attr">[key]</span> = data<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;content&#x27;</span>]</span><span class="hljs-selector-class">.str</span><span class="hljs-selector-class">.contains</span>(values)<br><br>staff_count = pd<span class="hljs-selector-class">.Series</span>(&#123;key: data<span class="hljs-selector-class">.loc</span><span class="hljs-selector-attr">[data[key]</span>,<span class="hljs-string">&#x27;score&#x27;</span>]<span class="hljs-selector-class">.count</span>() <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> mapping<span class="hljs-selector-class">.keys</span>()&#125;)<span class="hljs-selector-class">.sort_values</span>()<br>staff_count<br><br>bar = <span class="hljs-built_in">Bar</span>(<span class="hljs-string">&quot;《流浪地球》演职员总体提及次数&quot;</span>, <span class="hljs-attribute">width</span>=<span class="hljs-number">700</span>)<br>bar<span class="hljs-selector-class">.add</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;李光洁&#x27;</span>,<span class="hljs-string">&#x27;郭帆&#x27;</span>,<span class="hljs-string">&#x27;赵今麦&#x27;</span>,<span class="hljs-string">&#x27;吴孟达&#x27;</span>,<span class="hljs-string">&#x27;屈楚萧&#x27;</span>,<span class="hljs-string">&#x27;刘慈欣&#x27;</span>,<span class="hljs-string">&#x27;吴京&#x27;</span>]</span>,staff_count<span class="hljs-selector-class">.values</span>,is_stack=True, is_label_show=True<br>       ,bar_category_gap=<span class="hljs-string">&#x27;60%&#x27;</span>,label_color = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;#130f40&#x27;</span>]</span><br>        ,legend_text_size=<span class="hljs-number">18</span>,xaxis_label_textsize=<span class="hljs-number">18</span>,yaxis_label_textsize=<span class="hljs-number">18</span>)<br>bar<br></code></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/rnGVOTZd7zmRNS1tc4g0i8rfqLGHXuj8YMkHRGFC6NI!/b/dLgAAAAAAAAA&bo=vAKQAQAAAAADFx0!&rf=viewer_4&t=5" alt="在这里插入图片描述"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">staff_low = pd<span class="hljs-selector-class">.Series</span>(&#123;key: data<span class="hljs-selector-class">.loc</span><span class="hljs-selector-attr">[data[key]</span>&amp;(data<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;score&#x27;</span>]</span>&lt;<span class="hljs-number">5</span>),<span class="hljs-string">&#x27;score&#x27;</span>]<span class="hljs-selector-class">.count</span>() <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> mapping<span class="hljs-selector-class">.keys</span>()&#125;)<span class="hljs-selector-class">.sort_values</span>()<br><br>staff_count_pct = np<span class="hljs-selector-class">.round</span>(staff_low/staff_count*<span class="hljs-number">100</span>, <span class="hljs-number">2</span>)<span class="hljs-selector-class">.sort_values</span>()<br><br>bar = <span class="hljs-built_in">Bar</span>(<span class="hljs-string">&quot;《流浪地球》演职员低分评论提及百分比&quot;</span>, <span class="hljs-attribute">width</span>=<span class="hljs-number">700</span>)<br>bar<span class="hljs-selector-class">.add</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;郭帆&#x27;</span>,<span class="hljs-string">&#x27;刘慈欣&#x27;</span>,<span class="hljs-string">&#x27;李光洁&#x27;</span>,<span class="hljs-string">&#x27;屈楚萧&#x27;</span>,<span class="hljs-string">&#x27;赵今麦&#x27;</span>,<span class="hljs-string">&#x27;吴京&#x27;</span>,<span class="hljs-string">&#x27;吴孟达&#x27;</span>]</span>,staff_count_pct<span class="hljs-selector-class">.values</span>,is_stack=True,is_label_show=True,bar_category_gap=<span class="hljs-string">&#x27;60%&#x27;</span>,label_color = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;#130f40&#x27;</span>]</span><br>       ,legend_text_size=<span class="hljs-number">18</span>,xaxis_label_textsize=<span class="hljs-number">18</span>,yaxis_label_textsize=<span class="hljs-number">18</span>)<br>bar<br></code></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/aOLybbDPCMTpLrTYK3d.SNPKptH3AFEWdqp0fGHRf2o!/b/dD4BAAAAAAAA&bo=vAKQAQAAAAADFx0!&rf=viewer_4&t=5" alt="在这里插入图片描述"></p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a><strong>参考：</strong></h3><p><a href="https://segmentfault.com/a/1190000018242134">https://segmentfault.com/a/1190000018242134</a></p><hr><iframe src="https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html " style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Analysis</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Machine-Learning-笔记 -Bagging&amp;Boosting</title>
    <link href="/2019/01/28/Machine-Learning-%E7%AC%94%E8%AE%B0%20-Bagging&amp;Boosting/"/>
    <url>/2019/01/28/Machine-Learning-%E7%AC%94%E8%AE%B0%20-Bagging&amp;Boosting/</url>
    
    <content type="html"><![CDATA[<p>本文介绍Bagging和Boosting的概念以及运用它们的集成学习算法Adaboost。</p><h3 id="Bagging-amp-Boosting"><a href="#Bagging-amp-Boosting" class="headerlink" title="Bagging &amp; Boosting"></a><strong>Bagging &amp; Boosting</strong></h3><p>Bagging和Boosting都是将多个弱分类器集成起来形成一个强分类器，俗话说三个臭皮匠顶个诸葛亮。<br>首先介绍Bagging</p><h4 id="Bagging"><a href="#Bagging" class="headerlink" title="Bagging"></a><strong>Bagging</strong></h4><p>Bagging(bootstrap aggregating) ,采用一种有放回的抽样方式，每轮从原始样本集中使用Bootstraping的方法抽取n个训练样本，而bootstrap是一种有放回的抽样方法。</p><p>Bagging的算法过程如下：</p><ol><li>从原始样本中抽取训练集，每一轮从中抽取N个样本。共进行K轮抽取，得到K个训练集。</li><li>每个训练集用来训练一个模型，K个训练集共得到K个模型</li><li>对于分类问题：将上面得到的K个模型采用投票的方式得到分类结果；对于回归问题：计算上述模型的均值作为最后的结果。</li></ol><p>注：这里的投票方式，可以采用每个模型不同的投票数的方式，可以给某个模型权重比大。也可以每个模型一样的权重。打个比方说，这就像你在买股票的时候，你有来自各方面的消息，有一个来自这家公司的高层，你跟他是朋友，他告诉你现在公司经营良好，市场份额逐年攀升，那么这时候这位高管朋友的消息一定给的权重大，因为这个是比其他更重要的信息。<br>运用Bagging的典型集成模型为随机森林。</p><h4 id="Boosting"><a href="#Boosting" class="headerlink" title="Boosting"></a><strong>Boosting</strong></h4><p>Bagging是通过有放回的抽样方式来构建强分类器，那么Boosting呢？Boosting则是通过在上一个弱分类器的基础上，通过提高那些在前一轮被弱分类器分错样例的权值，减小前一轮分对样例的权值，来使得分类器对误分的数据有较好的效果</p><p>运用Boosting的集成模型有Adaboost、GBDT、Xgboost。限于篇幅大小，这篇文章只介绍Adaboost，后续文章中再介绍另外两种算法。</p><h3 id="Adaboost"><a href="#Adaboost" class="headerlink" title="Adaboost"></a><strong>Adaboost</strong></h3><p>Adaboost该算法先通过对N个训练样本的学习得到第一个弱分类器。然后增大犯错样本的权重，进行下一轮弱分类器的训练，最终得到一个强分类器。</p><p>Adaboost算法的大体描述为以下三步：<br>首先初始化训练数据，假设有N个训练样本数据，每个样本数据的权重为1&#x2F;N，可以表示为<br>D1(i) &#x3D; (W1,W2,W3,W4,…Wn)&#x3D;[1&#x2F;N,1&#x2F;N,1&#x2F;N…1&#x2F;N]</p><p>第二步，训练弱分类器Ht,如果某个训练样本被错误分类，那么在构造下一个训练集中，它对应的权重要增大；相反，如果某个训练样本被正确分类，那么它的权重就减小。</p><p>   a.选取一个当前误差率最低的弱分类器h,作为第t个基本分类器Ht,并计算该分类器在Dt分布上的误差et。<br>   b.计算该弱分类器在最终分类器所占的权重(弱分类器用at表示)：<br>$$a_t &#x3D;\ln(\sqrt{\frac{1-e_t}{e_t}})$$<br>   c.更新训练样本的权值分布Dt+1:<br>$$D_{t+1} &#x3D; \frac{D_t(i)exp(-a_iy_iH_t(x_i))}{Z_t} $$<br>其中：$$归一化常数Z_t&#x3D;2\sqrt{e_t(1-e_t)}$$</p><p><strong>说明：</strong><br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/QR*Fk74acZJgXDxWzEgd*DQT2vpOU5cSP10Zu6P5gnk!/b/dL8AAAAAAAAA&bo=OATLAQAAAAARF9Y!&rf=viewer_4&t=5"><br>从上面推导可得<br>错误分类样本，权重更新：<br>$$D_{t+1}(i) &#x3D; \frac{D_t(i)}{2e_i}$$<br>正确分类样本，权重更新：<br>$$D_{t+1}(i) &#x3D; \frac{D_t(i)}{2(1-e_i)}$$</p><p>第三步，将各个训练得到的弱分类器组合成一个强分类器，各个弱分类器的训练过程结束后，加大分类误差率小的弱分类器的权重，使其在最终的分类函数中起着较大的决定作用。而降低分类误差率大的弱分类器的权重，使其在最终的分类函数中起着较小的决定作用。<br>$$H_{final}&#x3D;sign(f(x))&#x3D;sign(\sum_{t&#x3D;1}^T a_tH_t(x))$$</p><h3 id="Adaboost算法实例："><a href="#Adaboost算法实例：" class="headerlink" title="Adaboost算法实例："></a><strong>Adaboost算法实例：</strong></h3><p>将这10个样本作为训练数据，根据X和Y的对应关系，把这10个数据分为两类，其中用“+”表示类别1，用“O”表示类别-1.如图所示训练样本，弱分类器采用平行于坐标轴的直线。<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/N0Rkanv6x1NzMozPz0IuBIXknW4yxVGqe6Sis.xOCNE!/b/dLkAAAAAAAAA&bo=OAS6AwAAAAARF6U!&rf=viewer_4&t=5"><br><strong>初始化</strong>：令每个权值w1i &#x3D; 1&#x2F;N &#x3D; 0.1，其中，N &#x3D; 10，i &#x3D; 1,2, …, 10，然后分别对于t&#x3D; 1,2,3, …等值进行迭代（t表示迭代次数，表示第t轮）</p><p><strong>第一次迭代t&#x3D;1：</strong><br>初始的权值分布D1为1&#x2F;N（10个数据，每个数据的权值皆初始化为0.1），D1&#x3D;[0.1,  0.1, 0.1, 0.1, 0.1, 0.1,0.1, 0.1, 0.1, 0.1]</p><p>在权值分布D1的情况下，取已知的三个弱分类器h1、h2和h3中误差率最小的分类器作为第1个基本分类器H1(x)（三个误差率都是0.3，那就取第一个吧）</p><p>在分类器H1(x)&#x3D;h1情况下，样本点“5 7 8”被错分，因此基本分类器H1(x)的误差率为：e1&#x3D;0.3<br>根据误差率e1计算Ht的权重:<br>$$a_1&#x3D;\frac{1}{2}ln(\frac{1-0.3}{0.3})&#x3D;0.4236$$<br>然后更新训练样本数据的权值分布，用于下一轮迭代，对于正确分类的训练样本“1 2 3 4 6 9 10”（共七个）的权值更新：<br> $$D_2(i) &#x3D; \frac{D_1(i)}{2(1-e_1)}&#x3D;\frac{1}{10}*\frac{1}{2(1-0.3)}&#x3D;\frac1{14}$$<br>对于错误分类的训练样本“5 7 8”（共三个）的权值更新：<br>$$D_2(i) &#x3D; \frac{D_1(i)}{2e_1}&#x3D;\frac{1}{10}<em>\frac{1}{2</em>0.3}&#x3D;\frac1{6}$$</p><p>这样在第一轮结束后，最后得到的各个样本数据新的权值分布为：D2&#x3D;[1&#x2F;14,1&#x2F;14,1&#x2F;14,1&#x2F;14,1&#x2F;6,1&#x2F;14,1&#x2F;6,1&#x2F;6,1&#x2F;14,1&#x2F;14]</p><p>可得分类函数f1(x)&#x3D;a1H1(x)&#x3D;0.4236H1(x)，这时，强分类器的训练错误为0.3</p><p><strong>第二次迭代t&#x3D;2：</strong></p><pre><code class="hljs">在权值分布D2的情况下，再取三个弱分类器h1、h2和h3中误差率最小的分类器作为第2个基本分类器H2(x)：1)　当取弱分类器h1=X1=2.5时，此时被错分的样本点为“5 7 8”：误差率e=1/6+1/6+1/6=3/6=1/2；2)　当取弱分类器h2=X1=8.5时，此时被错分的样本点为“3 4 6”：误差率e=1/14+1/14+1/14=3/14；3)　当取弱分类器h3=X2=6.5时，此时被错分的样本点为“1 2 9”:误差率e=1/14+1/14+1/14=3/14；</code></pre><p>因此选取当前最小的分类器h2作为第2个基本分类器H2(x),显然H2(x)把样本“3 4 6”分错了，根据D2可以得知他们的权值D2(3)&#x3D;1&#x2F;14,D2(4)&#x3D;1&#x2F;14,D2(6)&#x3D;1&#x2F;14,所以H2(x)在训练集上的误差率：e2&#x3D;3 * 1&#x2F;14 &#x3D; 3&#x2F;14</p><p>根据误差率e2计算Ht的权重:<br>$$a_2&#x3D;\frac{1}{2}ln(\frac{1-3&#x2F;14}{3&#x2F;14})&#x3D;0.6496$$<br>对于正确分类的训练样本的权值更新：<br>$$D_3(i) &#x3D; \frac{D_2(i)}{2(1-e_2)}&#x3D;\frac{7}{11}D_2(i)$$<br>对于错误分类的训练样本的权值更新：<br>$$D_3(i) &#x3D; \frac{D_2(i)}{2e_2}&#x3D;\frac{7}{3}D_2(i)$$</p><p>经过第2轮后，最后得到各个样本数据新的权值分布：<br>D3&#x3D;[1&#x2F;22,1&#x2F;22,1&#x2F;6,1&#x2F;6,7&#x2F;66,1&#x2F;6,7&#x2F;66,7&#x2F;66,1&#x2F;22,1&#x2F;22]<br>分类函数f2(x) &#x3D; 0.4236H1(x)+0.6496H2(x),此时组合两个基本的分类函数错分类点为”3 4 6”</p><p><strong>第三次迭代t&#x3D;3：</strong></p><pre><code class="hljs">在权值分布D3的情况下，再取三个弱分类器h1、h2和h3中误差率最小的分类器作为第3个基本分类器H3(x)：1)当取弱分类器h1=X1=2.5时，此时被错分的样本点为“5 7 8”：误差率e=7/66+7/66+7/66=7/22；2)当取弱分类器h2=X1=8.5时，此时被错分的样本点为“3 4 6”：误差率e=1/6+1/6+1/6=1/2=0.5；3)当取弱分类器h3=X2=6.5时，此时被错分的样本点为“1 2 9”：误差率e=1/22+1/22+1/22=3/22；</code></pre><p>选取当前最小的分类器h3作为第3个基本分类器H3(x),显然H3(x)把样本“1 2 9”分错了，根据D3可以得知他们的权值D3(1)&#x3D;1&#x2F;22,D3(2)&#x3D;1&#x2F;22,D3(9)&#x3D;1&#x2F;22,所以H3(x)在训练集上的误差率：e3&#x3D;3 * 1&#x2F;22 &#x3D; 3&#x2F;22</p><p>根据误差率e3计算Ht的权重:<br>$$a_3&#x3D;\frac{1}{2}ln(\frac{1-3&#x2F;22}{3&#x2F;22})&#x3D;0.9229$$<br>对于正确分类的训练样本的权值更新：<br>$$D_4(i) &#x3D; \frac{D_3(i)}{2(1-e_3)}&#x3D;\frac{11}{19}D_3(i)$$<br>对于错误分类的训练样本的权值更新：<br>$$D_4(i) &#x3D; \frac{D_3(i)}{2e_3}&#x3D;\frac{11}{3}D_3(i)$$</p><p>经过第3轮后，最后得到各个样本数据新的权值分布：<br>D4&#x3D;[1&#x2F;6,1&#x2F;6,11&#x2F;114,11&#x2F;114,7&#x2F;114,11&#x2F;114,7&#x2F;114,7&#x2F;114,1&#x2F;6,1&#x2F;38]<br>分类函数f3(x) &#x3D; 0.4236H1(x)+0.6496H2(x)+0.9229H3(x),此时组合三个基本的强分类函数在数据集上有0个误分类点。至此，结束整个训练过程。<br>最终得到的强分类器为：<br>$$H_{final}&#x3D;sign(\sum_{t&#x3D;1}^T a_tH_t(x))&#x3D;sign(0.4236H_1(x)+0.6496H_2(x)+0.9229H_3(x)$$</p><p>以上是Adaboost的全过程</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a><strong>参考：</strong></h3><p>pan_jinquan博客：<a href="https://blog.csdn.net/guyuealian/article/details/70995333">https://blog.csdn.net/guyuealian/article/details/70995333</a><br>林轩田 机器学习技法</p><hr><iframe src="https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html " style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>]]></content>
    
    
    <categories>
      
      <category>Machine Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Machine Learning-笔记 -决策树</title>
    <link href="/2019/01/20/Machine-Learning-%E7%AC%94%E8%AE%B0%20-%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    <url>/2019/01/20/Machine-Learning-%E7%AC%94%E8%AE%B0%20-%E5%86%B3%E7%AD%96%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h3 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a><strong>决策树</strong></h3><p>本文介绍的是决策树算法原理</p><p>决策树是一种基本的回归与分类算法，是一种模仿人类做决定的思维方式构建的算法，在分类问题中，是基于特征对实例进行分类的过程，决策树本质上是从训练数据集中归纳出一组分类规则。</p><p>例如下面这个例子。对下班时间、约会情况、提交截止时间这些条件进行判断，从而决定是否要进行在线课程测试。我们模拟一下今天晚上要不要上课决定的过程。这可能取决于下班时间，如果18：30之前就下班了，那有充足的时间，可以去上课。但可能还取决于今天有没有约会，要是有约会，这个课怕是也上不成了。另一种情况，今天要加班到21：30，这时可能要看看今天是不是里交作业的期限，或者离交作业的期限还早。</p><p>把上面的决策过程画成图如下：<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/zhC4zsM5.r55QvKFGVPHpe7KZF3Ok1V2xAXvtsIkzV8!/b/dL8AAAAAAAAA&bo=4AE2AQAAAAARF*Y!&rf=viewer_4&t=5"><br>决策树学习算法包含<strong>特征选择</strong>、<strong>决策树生成</strong>与<strong>决策树的剪枝</strong>过程。</p><p>决策树学习常用的算法有ID3，C4.5,与CART，下面结合这些算法分别叙述决策树学习的特征选择、决策树的生成和剪枝过程。</p><h3 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a><strong>特征选择</strong></h3><p>决策树的第一步是选择属性判断结点，那么通过什么来决定选择哪一个属性呢？<br>这就需要引入熵的概念和信息增益的概念，1948年，香农提出了 ”<strong>信息熵</strong>(entropy)“的概念，一条信息的信息量大小和它的不确定性有直接的关系，要搞清楚一件非常非常不确定的事情，或者是我们一无所知的事情，需要了解大量信息&#x3D;&#x3D;&gt;信息量的度量就等于不确定性的多少。<br>例子：猜世界杯冠军，假如一无所知，猜多少次？每个队夺冠的几率不是相等的，比特(bit)来衡量信息的多少。<br>采用如下方式求信息熵：<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/M3xhIVYF2YDeNDrsfZ9N*nxzIPhen1dBIT9uDyKfgP4!/b/dL8AAAAAAAAA&bo=tAFKAAAAAAADF80!&rf=viewer_4&t=5"><br>当每个球队夺冠概率相等时候，由上面的式子可以求得<br>H &#x3D; -(1&#x2F;32<em>log1&#x2F;32+ 1&#x2F;32</em>log1&#x2F;32+…+1&#x2F;32<em>log1&#x2F;32)<br>&#x3D;-[1&#x2F;32</em>(-5)*32] &#x3D; 5<br>32支参加世界杯夺冠球队的信息熵是5，也就是你5次可以猜对那支球队夺冠。<br><strong>变量的不确定性越大，熵也越大。</strong></p><p><strong>信息增益</strong><br>特征A对训练集D的信息增益g(D,A),定义为集合D的经验熵H(D)与特征A在给定条件下D的经验条件熵H(D|A)之差。<br>                    g(D,A)&#x3D;H(D)-H(D|A)</p><p> 例：有如下数据集,分别有年龄、有工作、有自己的房子、信贷情况4个特征，根据这些特征判断是否批准借贷申请。<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/PMaYRc4iFbzStp4l3TvsITRsKFTYN4oQx7AB76qTxHk!/b/dL8AAAAAAAAA&bo=eQY4BAAAAAARF2M!&rf=viewer_4&t=5"></p><p>每个特征的信息增益的计算过程如下：<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/yNeCh1UYjpEgClSMkbBPdrnXZTk2OBVNl.I2cBJg4y8!/b/dL4AAAAAAAAA&bo=OAS0BQAAAAARF60!&rf=viewer_4&t=5"><br>ID3算法的核心是在决策树上应用信息增益准则选择特征，递归地构建决策树。但以信息增益作为划分训练数据集的特征，存在偏向于选择取值较多的特征的问题。这里使用<strong>信息增益比</strong>可以对这一问题进行校正。</p><p>信息增益比定义为其信息增益g(D,A)与训练数据集D关于特征A的值的熵HA(D)之比。<br>C4.5算法与ID3算法类似，只是C4.5对ID3的算法进行了改进，C4.5在生成树的过程中，用信息增益比来筛选特征。</p><h3 id="决策树的生成"><a href="#决策树的生成" class="headerlink" title="决策树的生成"></a><strong>决策树的生成</strong></h3><p>决策树的基本思想是递归的过程：</p><ul><li><strong>1) 开始构建根结点，选择一个最优特征，按照这一特征将数据集分割成子集，使得各个子集有一个在当前条件下最好的分类。</strong></li><li><strong>2) 如果样本都在同一类，则该结点成树叶</strong></li><li><strong>3) 否则选择最有分类能力的属性作为决策树的当前结点</strong></li><li><strong>4) 根据当前决策结点属性取值的不同，将训练样本数据集分成若干子集，每个取值形成一个分支，有几个取值形成几个分支。重复进行先前的步骤</strong></li></ul><h3 id="决策树的剪枝"><a href="#决策树的剪枝" class="headerlink" title="决策树的剪枝"></a><strong>决策树的剪枝</strong></h3><p><strong>决策树什么时候停下来</strong><br>1.一种最直观的方式是当每个子节点只有一种类型的记录时停止，但是这样往往会使得树的节点过多，导致过拟合问题（Overfitting）。<br>2.另一种是人工设置最小的阀值，当前节点中的记录数低于一个最小的阀值，那么就停止分割，将max(P(i))对应的分类作为当前叶节点的分类。</p><p>决策树生成算法递归地产生决策树，直到不能继续下去为止。这样产生的树往往对训练数据的分类很准确，但对未知的数据分类却没有那么准确。解决这个问题的办法是考虑决策树的复杂度，对已经生成的决策树进行简化。<br>决策树通过极小化误差函数Ca(T) &#x3D; C(T)+a|T|来实现剪枝，|T|表示模型复杂度，C(T)表示模型对训练数据的预测误差。在对训练数据的预测误差和决策树复杂度之间做一个平衡。</p><h3 id="CART算法"><a href="#CART算法" class="headerlink" title="CART算法"></a><strong>CART算法</strong></h3><p>CART算法是通过基尼指数Gini筛选特征，然后递归的构建二叉树，再进行剪枝的过程。基尼指数其表征了特征的不纯度，以下为计算 GINI 公式<br>$$GINI(D)&#x3D;1-\sum_{i&#x3D;1}^n p(i)^2$$<br>我们取一个极端情况，如果数据集合中的类别只有一类，那么<br>GINI(D）&#x3D;0，当集合中有两类，概率分别是1&#x2F;2，那么Gini(D)&#x3D;1&#x2F;2, 说明Gini(D)越小，则数据集D的纯度越高。</p><p>现在很多python集成模型，比如sklearn，决策树里都默认是CART算法，采用基尼指数划分数据，因为基尼指数和熵计算在误差率上几乎没有差异，而基尼指数又规避了计算log的过程，这样当数据量很大时，就会节约大量的时间。</p><p><strong>参考资料：</strong><br>台大林轩田的机器学习技法—第九课<br>《统计学习方法》李航</p><hr><iframe src="https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html " style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>]]></content>
    
    
    <categories>
      
      <category>Machine Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>熟读《影响力》,把销售小哥看得更透</title>
    <link href="/2019/01/19/%E7%86%9F%E8%AF%BB%E3%80%8A%E5%BD%B1%E5%93%8D%E5%8A%9B%E3%80%8B,%E6%8A%8A%E9%94%80%E5%94%AE%E5%B0%8F%E5%93%A5%E7%9C%8B%E5%BE%97%E6%9B%B4%E9%80%8F/"/>
    <url>/2019/01/19/%E7%86%9F%E8%AF%BB%E3%80%8A%E5%BD%B1%E5%93%8D%E5%8A%9B%E3%80%8B,%E6%8A%8A%E9%94%80%E5%94%AE%E5%B0%8F%E5%93%A5%E7%9C%8B%E5%BE%97%E6%9B%B4%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<p>   深谙心理学的销售人员可以说是一种很恐怖的存在，房产中介销售商可以利用<strong>稀缺性</strong>，让本来犹豫不决的你，立马支付了定金。他可能会编造出一个假想的客户，告诉你说，等会我还有一个客户，他很喜欢这套房子，您要是犹豫不决的话，我不敢保证下午这套房子还没卖出去哦。汽车销售员可以利用<strong>对比心理</strong>让你额外买了一套车险，因为在相比刚刚支付的车的价格，后面随之销售的车险的价格就显得有点微不足道了，这时候的成功率就会更高。大街上推销课程的销售员可以利用<strong>互惠原理</strong>,先给你送一个精美的小礼物，拼命强调小礼物是免费的。人们听说是免费的就很容易接受这份小礼物。当接受礼物了之后，他接下来会要求你进他们的站点去了解一下他们推销的产品，这时你因为拿到了小礼物，觉得拒绝他的这个要求好像有点不近人情，所以就跟着去了。</p><p>有一些顺从业者给我们虚假信号，利用人的心理，试图刺激我们的捷径反应，达到让自己盈利的目的。而我们却浑然不知。《影响力》为了避免有人谋求私利误导规则，列举了以下心理原则，它们影响了人们顺从一个要求的倾向性。</p><h3 id="对比原理"><a href="#对比原理" class="headerlink" title="对比原理"></a><strong>对比原理</strong></h3><p>假设有人走进一家时尚男装店，说自己想要买三件套的西服和一件毛衣。如果你是售货员，你该先给他看哪样东西，好让他花最多的钱呢？服装店指点销售人员，要先给顾客看贵的东西。依照人们的常识，顺序应该反过来才对：要是人们买西服时就花了大把的钱，他恐怕不愿再多花钱买毛衣了。但服装商们心知肚明的。他们依照对比原理来设计销售策略：先卖西服，因为顾客接下来买毛衣的时候，哪怕它再贵，价格跟西服比起来，也显得没那么高了。</p><h3 id="互惠原理"><a href="#互惠原理" class="headerlink" title="互惠原理"></a><strong>互惠原理</strong></h3><p>机场的一个行人，正匆匆穿过一个人群拥挤的区域。红十字协会的募捐员走到他的面前，递给他一朵花。这个人吃了一惊，把花接住了。但他马上反应过来，想把花还回去，说自己并不需要花。募捐员说，这是协会的一份礼物，他可以保留的。不过要是，他能够捐一些钱，帮助协会做更多的善举，协会将不胜感激。此时，内心的矛盾从脸上阔散到了全身。他的身体从募捐者的身上移开，似乎要走，但随即又被互惠原理的力量拉回来。他从口袋里摸出几美元，对方礼貌的接下了。</p><p>很明显，在上面的例子中，互惠原理迫使对方接受小馈赠，使得下一步的行动进行的更加容易。人们在互惠原理的压力下往往会更容易做出自己本不愿意做的举动。</p><p>互惠原理还有另一个特点，也容易遭人利用。尽管它确立起来是为了促进伙伴之间的平等交流，但却也可以用来实现完全不平等的结果。它比直接给人恩惠再索取回报的方式更加微妙。</p><p>罗伯特走在大街上，碰到了一个十一二岁的男孩子。他做了自我介绍，并说童子军一年一度的马戏表演就要在本周六晚上举行了，他正在卖门票。他问罗伯特是否愿意购买5美元的门票。罗伯特可不想把大好的周末时光耗在看童子军马戏表演上，于是拒绝了。“好吧”。他说，“要是比不想买门票，买几根巧克力棒如何？才一块钱”罗伯特买了两根，但立刻意识到发生了点怪事，因为：a.罗伯特对巧克力棒没什么兴趣。b.罗伯特喜欢钞票c.罗伯特手里拿着巧克力棒傻傻的站在那儿。d.小孩拿着罗伯特的钞票走了</p><p>这种技巧被叫做“<strong>拒绝-后撤</strong>”术，指的是你想让我答应你的某个要求，为了提高获胜的概率，你可以先向我提出一个大一些的要求，你再提一个稍微小的要求，这个要求才是你真正的目的。倘若你的要求设置的巧妙，我会把你的第二个要求看成是一种对我的让步，并感到自己这边也应该让让步。于是就顺从了第二个要求。</p><p><strong>互惠原理之所以能够屡试不爽的原因是：亏欠感让人很不舒服；违背互惠原理，接受而不是试图回报他人善举的人，是不受社会群体欢迎的。</strong></p><p>如何破功：<br>要怎么样才能抵消互惠这种社会原理的影响呢？一旦激活，它的力量就会铺天盖地压下来，强大得让我们根本无法抵挡。这样看来，不让它激活似乎是个好办法。我们应该抢先出手，拒绝请求者的善意或者让步，大概可以让我们避免跟互惠原理发生冲突。理论上听起来好像很不错。但是，我们需要时刻处于备战状态吗？他靠近我是要干嘛？我们总是戒备森严，看起来像只斗鸡。很显然这不是理想的解决方案。另一种有效的解决方案是<strong>倘若别人的提议我们确实赞同，那就不妨接受它</strong>；<strong>倘若这一提议别有所图，那我们就置之不理</strong>。具体来说就是，有人给了我们一个恩惠，我们大可以接受下来，同时认识到将来有回报他的义务。跟别人达成这样的协议，并不意味着这个人能通过互惠原理利用我们。相反，要是最初的善意其实是专门设计为了刺激我们回报以更大恩惠的圈套、机关或者诡计，那情况就完全不一样了。一旦我们确定最初的恩惠并非出于善意，而是一个顺从的伎俩，那我们就不必受它影响了，该怎么做就怎么做。</p><h3 id="承偌和一致"><a href="#承偌和一致" class="headerlink" title="承偌和一致"></a><strong>承偌和一致</strong></h3><p>在美国，一些玩具商在面临季节性波动的时候，总很难有好的方法改善这种情况，销售最好的时候当然是在圣诞节了，但是在接下来几个月里销售额往往会一落千丈，因为父母们在圣诞节给孩子买了礼物，一段时间他们的玩具预算已经花掉了，他们坚决拒绝在圣诞节后在为孩子买礼物。商家就会面临一个进退两难的问题，怎么样在接下来的几个月了保持消费者对玩具的需求呢？</p><p>如何让刚刚在圣诞节已经花钱的父母，心甘情愿的再花钱为他们已经有太多玩具的孩子再买一件玩具呢？他们是这样做的：在圣诞节前几周就开始为一些特别的玩具做一些吸引人的广告。孩子看到了他们就会央求父母送她这个玩具当做圣诞礼物。这时这些玩具公司就开始执行他们的天才计划了：他们故意不充分的供应这些玩具。大部分家长会发现玩具卖完了，所以只好买一些价值差不多的玩具来代替。这些代替品的供应是足足的。圣诞节过后，这些商家又会把广告拿出来从新播放。这一下，小家伙们就会跑去父母那里哭着说“你答应过我要买的，你答应过的”，家长们只好履行他们的诺言，因为如果不履行承偌，无疑在孩子面前做了一个坏榜样。他们是完完全全被自己之前做出的承诺打败。</p><p>承偌和一致的原理其实很简单，人人都有一种言行一致的愿望，一旦我们作出了一个选择，或者采取了某种立场，我们就会立刻碰到来自内心或者外部的压力，迫使我们按照承诺说的那样去做。在这样的压力下，我们会想方设法地以行动证明之前的决定是正确的。</p><p>如何破功：<br>心理学证据表明，面对一样东西，我们总是先体验到感觉，过上短暂的一瞬间后，才能将之理性化。如果我们多注意训练自己，应该可以在感觉十分轻微还来不及给自己找各种借口时，发现自己是不是在为言行一致找借口。打个比方说：停在加油站的自助加油站跟前，在这里汽油的广告要比本地区其他加油站每加仑低两分钱时，但等把加油泵拿起来，才发现泵上的标价要比广告价要高两分。服务员说价格几天前刚刚调整过了，还来不及把招牌的价格改过来。这时你脑海里可能跳出好些留下来加油的理由——“我必须得加油了”，“我好像记得我的车子用这个牌子的汽油开起来更顺畅”。这时，你需要判断这些理由到底是真的还是自己找的借口。</p><h3 id="社会认同"><a href="#社会认同" class="headerlink" title="社会认同"></a><strong>社会认同</strong></h3><p>在基尤加登斯，一个凶手跟踪一位妇女，并对其施以三次攻击，而皇后区38位尊敬的、遵纪守法的公民们却漠然视之。有两次他们的声音、他们卧室突然亮起的灯光打断了凶手的攻击，把他吓跑了。可他两次都回来了，重新跟上他，用刀子捅她，悲剧发生期间没有一个人打电话报警，知道妇女死后，才有一个目击者报了警。</p><p>出现这样的冷漠社会事件，社会心理学提出了一种最让人难以置信的解释：目击者都没有报警，恰恰是因为当时有38个人在场。没人帮忙，正是因为有那么多的旁观者。因为周围有其他可以帮忙的人，单个人要承担的责任就减少了。再者因为，多元无知效应，很多时候是目击者不知道到底发生什么事情了，碰到这种不确定的情况，人很自然地会根据周围其他人的行动来加以判断。尤其是在我们觉得这些人跟自己相似的时候，这种效率发挥的作用更大。</p><p>如何破功：<br>人们很容易认为当很多人在做相同的事情，他们必然知道一些我们不知道的事情。尤其在我们并不确定的时候，我们很乐意对这种集体智慧投入极大的信任。其次，人群很多时候都是错的，因为群体的成员并不是根据优势信息才采取行动，而只是基于社会认同原理在做反应。《乌合之众》在群体意识上描述得很详尽。所以我们需要确认自己不是在被社会证据误导，这时可以用该环境下的客观事实、先前的经验、我们自己的判断与之进行对比。确保它没有出乱子。</p><h3 id="喜好"><a href="#喜好" class="headerlink" title="喜好"></a><strong>喜好</strong></h3><p>我们大多数人总是更容易答应自己认识和喜欢的人所提出的要求。顺从专业人士会采用喜好原则来达到自己的目的，比如人们会对长得好看的人更宽容，除了好看的长相，还有相似性同样能让人产生好感，现在好多销售培训项目现在都敦促学员“模仿和迎合”顾客的身体姿态、语气和口头表达风格，因为这些方面的相似之处都能够带来积极的效果。</p><p>如何破功：<br>在跟顺从专业人士接触的时候，我们只需关注跟好感有关的一件事就行：我们是不是觉得自己超乎寻常、迅速、热烈地喜欢上对方？只要发现这种感觉，我们就要保持警惕了，他可能采取了某种手法，而这时我们就可以采用必要的反击对策，在我们做出顺从决定时，把提出请求的人和请求本身从感性上分开，只根据生意的好坏做决定。我们用顺从专业人士自己最青睐的社交柔道之术，不去压抑好感因素产生的影响力，听凭这些因数发挥力量，然后用这股力量反过来对付那些想从中获利的人。这股力量越大，其发作用力也越强。</p><h3 id="权威"><a href="#权威" class="headerlink" title="权威"></a><strong>权威</strong></h3><p>在国外，有一些餐厅的服务员因为底薪太低，要靠客人给的小费补足收入。在一家高档餐厅里，有一个厉害人物，他叫文森特，经过他手点的菜单总是价目比较高，他收到的小费也总是很丰富。他有一大堆方法，会根据不同的情有针对性的使用。面对8-12个人的大聚餐，文森特会在第一个人点餐的时候，不管她点什么，总是会做出同样的反应，眉头紧锁，手在点餐单上打转，之后飞快地扭头过去瞅一眼经理那儿。他稍稍朝餐桌倾过身子说：“今晚这道菜恐怕不够好，我可以向您推荐这个吗（推荐菜单上比顾客刚刚点的稍微便宜一点）?”他把自己打扮得像这家店里的权威人物，清楚今晚哪样菜好，哪样不好。他像顾客证明他并非是只顾着自己兜里的钱，而是把顾客的最大利益放在心上。这时候，他等到众人点餐完毕，“你们愿意让我帮你们选一些红酒来搭配吗？”经过之前的铺垫，顾客们都会微笑的点头表示同意。这样便通过优雅的态度既提高了顾客的消费总额，又提高了自己的消费。</p><h3 id="稀缺"><a href="#稀缺" class="headerlink" title="稀缺"></a><strong>稀缺</strong></h3><p>倘若瑕疵把一件东西变得稀缺了，垃圾也能化身成为值钱的宝贝。参与竞争稀缺资源的感觉，对人有着强大的刺激性。<br>它的力量主要来自两个方面：</p><p>第一，<strong>和其他影响力武器一样，稀缺性原理钻了我们思维捷径上的空子</strong>。我们都知道，难以得到的东西往往比容易得到的东西要好，因此，我们倾向于根据获得一样的东西的难易程度来判断它的质量。也就是说，稀缺原理成立的一个重要原因在于，根据它做出判断，大部分时候是正确的。</p><p>第二，机会越来越少的话，我们的选择自由也会随之丧失，而我们本身又都痛恨失去本该拥有的自由。保住既得利益的愿望，是心理逆反理论的核心。</p><p>根据心理逆反理论，只要选择的自由受到限制或者威胁，保护自由的需求就会使我们得到它们的愿望愈发强烈。因此，一旦短缺或者其他因素妨碍我们获取某物，我们就会比以前更想得到它，更想占有它，跟这种妨碍对着干。两岁的孩子和十几岁的少年是逆反心理最旺盛的，这是一个成长的必经阶段。</p><p>每当有东西获取起来比以前更难，我们拥有他的自由受了限制，我们就越发想要得到它。不过我们很少意识到是逆反心理带来了这种迫切感，而只知道是自己想要。为了解释这种莫名的渴望，我们开始给它安上各种积极的品质，比如探索欲，好奇心，与众不同。</p><p>如何破功：<br>在这种情况下，要知道稀缺的东西并不因为难以弄到手，就变得更好吃、更好听、更好听、更好玩。</p><hr><iframe src="https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html " style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>]]></content>
    
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Machine Learning-笔记 -SVM</title>
    <link href="/2019/01/12/Machine-Learning-%E7%AC%94%E8%AE%B0%20-SVM/"/>
    <url>/2019/01/12/Machine-Learning-%E7%AC%94%E8%AE%B0%20-SVM/</url>
    
    <content type="html"><![CDATA[<p>本文介绍的是SVM算法原理(NG的ML课程笔记)</p><p>适应人群：想了解SVM原理的</p><p>为了好好理解SVM算法的原理，我们先从逻辑回归开始。</p><p>逻辑函数的假设函数(Hypothesis)如下图：<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/HVBY*luEKsAWFVFT6oee4DGr*VkgUwIb*0y4kuaN.x0!/b/dDcBAAAAAAAA&bo=nAJlAQAAAAADF8g!&rf=viewer_4&t=5"><br>下面将用Z代替等号右边</p><p>$$Z&#x3D;Θ^TX $$</p><h3 id="逻辑回归用来做什么"><a href="#逻辑回归用来做什么" class="headerlink" title="逻辑回归用来做什么"></a><strong>逻辑回归用来做什么</strong></h3><p>很显然逻辑回归用来分类，如果有一个y&#x3D;1的样本，我们希望h(x)趋近1，因为我们想正确地将此样本分类，这就意味着当h(x) 趋近于 1 时，Z应当远大于0，用数学符号表示Z&gt;&gt;0,从上图可以看出当Z&gt;&gt;0是对应的函数输出是1；相反，如果我们有另外一个样本，即y&#x3D;0。我们希望假设函数的输出值将趋近于 0，对应的Z要远远小于0，Z&lt;&lt;0</p><p>进一步观察逻辑回归的代价函数,每一个样本都会为代价函数做贡献。现在，考虑两种情况，一种是 y 等于 1 的情况；另一种是 y 等于 0 的情况。</p><p>在第一种情况中，假设y&#x3D;1，此时在目标函数中只需有第一项起作用，因为 y 等于 1 时，(1-y) 项将等于0。画出关于 z 的函数，你会看到左下角的这条曲线，当z增大时，z 对应的值会变的非常小。对整个代价函数而言，影响也非常小。这也就解释了，为什么逻辑回归在观察到正样本 y&#x3D;1 时，试图将z设置得非常大。因为，在代价函数中的这一项会变的非常小。<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/hzVtQJF*zGgUxoMzif6lIwh6gZhiubtZXOURit1R63I!/b/dL4AAAAAAAAA&bo=nAKLAQAAAAADJxY!&rf=viewer_4&t=5"></p><h3 id="建立SVM-支持向量机"><a href="#建立SVM-支持向量机" class="headerlink" title="建立SVM(支持向量机)"></a><strong>建立SVM(支持向量机)</strong></h3><p>现在开始建立支持SVM(向量机)，首先从这个代价函数开始,一点点修改<br>$$ \log(1- \frac{1} {1+e^{-Z}})$$<br>红线画出的函数表示将要用的代价函数<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/m3oxpA4dmsJjWc6kPaVuGmOsbXDehBKpNIXSYUbNQn4!/b/dL8AAAAAAAAA&bo=hwFfAQAAAAADF.o!&rf=viewer_4&t=5"><br>新的代价函数将会水平的从这里到右边 (图外),到了这里已经非常接近逻辑回归中使用的代价函数了。只是这里是由两条线段组成，即位于右边的水平部分和位于左边的直线部分，先别过多的考虑左边直线部分的斜率，这并不是很重要.</p><p>我们用一个新的代价函数来代替逻辑函数，即这条从 0 点开始的水平直线，然后是一条斜线。左边的函数，我称之为 Cos t1(z)，同时，右边函数我称它为 Cos t0(z)。这里的下标是指在代价函数中，对应的 y&#x3D;1 和 y&#x3D;0 的情况.<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/LDxD6g7vF5Hv24*xtYGVTg06PeeIpgIDKrm9cLfhbBU!/b/dMIAAAAAAAAA&bo=fQFCAQAAAAADFw0!&rf=viewer_4&t=5"></p><h3 id="开始构建SVM-支持向量机"><a href="#开始构建SVM-支持向量机" class="headerlink" title="开始构建SVM(支持向量机)"></a><strong>开始构建SVM(支持向量机)</strong></h3><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/LqBf*CXhMKdG*f1P6CuvCfdDJkrhCX0wvSLeUtKBrgs!/b/dL8AAAAAAAAA&bo=pQJxAQAAAAADJ9U!&rf=viewer_4&t=5"><br>上面是逻辑回归当中使用的代价函数J(Θ),SVM在这里稍微做个转变,把括号里的log函数分别用上面提到的 Cos t1(z)和Cos t0(z)替换，然后再加上正则项。</p><p>这里我们有两项：第一是训练样本的代价，第二个是我们的正则化项，我们不得不去用这一项来平衡.这就相当于我们想要最小化 A 加上正则化参数λ，然后乘以其他项 B 对吧？这里的 A 表示这里的第一项，同时我用 B 表示第二项，但不包括λ，我们不是优化这里的 A+λ×B.</p><p>我们依照惯例使用一个不同的参数称为 C，那么，我现在删掉这里的λ，并且用常数 C 来代替。同时改为优化目标，C×A+B 因此SVM hypothesis可以表示为<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/aePvUWA*0mJ4xkJvYnELd*mxTc37Ax22ztT*MEFwv3U!/b/dDcBAAAAAAAA&bo=gAJGAQAAAAADJ8c!&rf=viewer_4&t=5"></p><p>现在让我们考虑一下，最小化这些代价函数的必要条件是什么.如果你有一个正样本，y 等于 1.则只有在 z 大于等于 1 时,代价函数 cost 1 (z)才等于 0.换句话说，如果你有一个正样本，我们会希望Θ^TX  &gt;&#x3D;1，反之，如果 y 是等于 0 的，我们观察一下，函数 cost 0 (z)，它只有在 z&lt;&#x3D;1的区间里函数值为 0，这是支持向量机的一个有趣性质。</p><p>我接下来会考虑一个特例，将这个常数 C 设置成一个非常大,比如我们假设 C 的值为 100000 或者其它非常大的数，然后来观察支持向量机会给出什么结果？如果 C 非常大，则最小化代价函数的时候，我们将会很希望找到一个使第一项为 0 的最优解。因此，让我们尝试在代价项的第一项为 0 的情形下理解该优化题。</p><p>第一项为0，必须是c乘以0，所以这将遵循以下约束，y  (i )是等于 1,Z &gt;&#x3D;1,如果 y  (i )是等于 0的,Z&lt;&#x3D;-1.当你最小化这个关于变量 θ 的函数的时候，你会得到一个非常有趣的决策边界。那么就只剩下第二项，这个优化目标函数可以被写成等于<br>$$  \frac{1}{2}||Θ^2||<br>$$<br>具体而言，如果你考察这样一个数据集，其中有正样本，也有负样本，可以看到这个数据集是线性可分的。我的意思是，存在一条直线把正负样本分开。当然有多条不同的直线，可以把正样本和负样本完全分开。<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/TaY.XOPn8wB6ywygqVKTVfGr1bWGA03qtFNZygBkxL8!/b/dL8AAAAAAAAA&bo=GQIyAQAAAAADFxo!&rf=viewer_4&t=5"><br>比如，这就是一个决策边界可以把正样本和负样本分开。但是多多少少这个看起来并不是非常自然是么?</p><p>或者我们可以画一条更差的决策界，这是另一条决策边界，可以将正样本和负样本分开，但仅仅是勉强分开，这些决策边界看起来都不是特别好的选择，支持向量机将会选择这个黑色的决策边界，相较于之前我用粉色或者绿色画的决策界。这条黑色的看起来好得多.在分离正样本和负样本上它显得的更好。数学上来讲，这是什么意思呢？这条黑线有更大的距离，这个距离叫做间距 (margin).因此支持向量机有时被称为 大间距分类器，而这其实是求解上面优化问题的结果。</p><h3 id="大间隔分类背后的数学原理"><a href="#大间隔分类背后的数学原理" class="headerlink" title="大间隔分类背后的数学原理"></a><strong>大间隔分类背后的数学原理</strong></h3><p>首先复习一下关于向量内积的知识,假设我有两个向量，u 和 v 。uT<em>v 叫做向量 u 和 v 之间的内积。向量的内积在几何上的表示为将 v 投影到 u上，p 是 v 投影到向量 u 上的长度, uT</em>v &#x3D;p * ||u||。<br>顺便说一句，uT<em>v&#x3D;vT</em>u。最后一点，需要注意的就是 p 值，p 事实上是有符号的。如果 u 和 v 之间的夹角小于 90 度，那么那条红线的长度 p 是正值。然而如果这个夹角大于 90 度，则 p 将会是负的。</p><p>我们接下来将会使用这些关于向量内积的性质试图来理解支持向量机中的目标函数。<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/eQeKytLiAttggAuvBaWBxt.eF2wx2e6O0u4R5MpKHRo!/b/dDQBAAAAAAAA&bo=tAKQAQAAAAADJyU!&rf=viewer_4&t=5"><br>接下来忽略掉截距，令 θ 0  &#x3D; 0,这样更容易画示意图。我将特征数 n 置为 2，因此我们仅有两个特征 x 1 和 x 2 ，现在 我们来看一下目标函数，支持向量机的优化目标函数。当我们仅有两个特征，即n&#x3D;2时，这个式子可以写作：<br>$$  \frac{1}{2}(Θ^2_1+Θ^2_2) &#x3D; \frac{1}{2}(\sqrt{Θ^2_1+Θ^2_2})^2&#x3D;  \frac{1}{2}||Θ||^2<br>$$<br>因此支持向量机做的全部事情，就是 极小化参数向量 θ  范数的平方 ， 或者说长度的平方.</p><p>现在我将要看看这些项：<br>我们考察一个单一的训练样本，我有一个正样本在这里，用一个叉来表示这个样本x(i),意思是在水平轴上取值为x1(i),在竖直轴上取值为x2(i).，我们有一个参数向量我会将它也画成向量。我将 θ 1 画在横轴这里，将 θ 2  画在纵轴这里，那么内积θT*X(i)将会是什么呢？</p><p>使用我们之前的方法，我们计算的方式就是我将训练样本投影到参数向量 θ,θT*X(i)&#x3D;P*||θ||&#x3D;θ1*X1+θ2*X2</p><p>转换一下约束：Z&gt;&#x3D;1或者Z&lt;&#x3D;-1时，约束是被P(i)*θ&gt;&#x3D;1,或者&lt;&#x3D;-1代替，因为θT*X(i)&#x3D;P*||θ||.</p><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/.pPSCQwwf7DkZ3F1.kOrwXPVq*kiV7CQQjCCS6ngkYQ!/b/dLgAAAAAAAAA&bo=bgJ1AQAAAAADFyo!&rf=viewer_4&t=5"></p><p>前面提到的代价函数可以被写成等于<br>$$  \frac{1}{2}||Θ^2||$$<br>现在，继续使用之前的简化，即 θ 0 &#x3D;0。(θ 过原点)<br>要想最小化代价函数，必须使得θ的范式尽可能小。但是不要忘了一个前提当为正样本时，P(i)*||Θ||&gt;&#x3D;1,所以必须满足P尽可能的大。而P是特征向量X在参数向量Θ的投影。这个投影长度越大，说明产生间距越大。这就是支持向量机如何能有效地产生大间距分类的原因。</p><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/*Z4h0eBDl68ALF9H4Avsr.rLJUSRgWtkD7MEI1etaI8!/b/dDYBAAAAAAAA&bo=rgELAQAAAAADF5c!&rf=viewer_4&t=5"><br>看这条绿线，这个绿色的决策界。我们希望正样本和负样本投影到 θ 的值大。要做到这一点的唯一方式就是选择这条绿线做决策界。这是大间距决策界来区分开正样本和负样本这个间距的值。这个间距的值就是 p (1) p (2) p (3) 等等的值。通过让间距变大，支持向量机最终可以找到一个较小的 θ 范数。这正是支持向量机中最小化目标函数的目的。</p><h3 id="核函数"><a href="#核函数" class="headerlink" title="核函数"></a><strong>核函数</strong></h3><p>以上介绍的一条直线就可以划分边界的情况，是线性核函数，但很多情况是不能简单的用一条直线就能够划分边界出来的。这时就需要换用更复杂的核函数。这里仅仅列举一下常用的核函数。</p><ul><li>高斯核函数（Gaussian Kernel）</li><li>sigmoid核函数</li><li>线性核函数 </li><li>多项式核函数</li></ul><h3 id="一些规则"><a href="#一些规则" class="headerlink" title="一些规则"></a><strong>一些规则</strong></h3><p>下面是一些普遍使用的准则：<br>n 为特征数，m 为训练样本数。</p><ul><li>如果相较于 m 而言，n 要大许多，即训练集数据量不够支持我们训练一个复杂的非线性模型，我们选用逻辑回归模型或者不带核函数的支持向量机。</li><li>如果 n 较小，而且 m 大小中等，例如 n 在 1-1000 之间，而 m 在 10-10000 之间，使用高斯核函数的支持向量机。</li><li>如果 n 较小，而 m 较大，例如 n 在 1-1000 之间，而 m 大于 50000，则使用支持向量机会非常慢，解决方案是创造、增加更多的特征，然后使用逻辑回归或不带核函数的支持向量机。</li></ul><p>SVM优点：主要在于它的代价函数是凸函数，不存在局部最小值</p><hr><iframe src="https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html " style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>]]></content>
    
    
    <categories>
      
      <category>Machine Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>做计划，不是一份愿望清单...</title>
    <link href="/2018/12/31/%E5%81%9A%E8%AE%A1%E5%88%92,%E4%B8%8D%E6%98%AF%E4%B8%80%E4%BB%BD%E6%84%BF%E6%9C%9B%E6%B8%85%E5%8D%95/"/>
    <url>/2018/12/31/%E5%81%9A%E8%AE%A1%E5%88%92,%E4%B8%8D%E6%98%AF%E4%B8%80%E4%BB%BD%E6%84%BF%E6%9C%9B%E6%B8%85%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<p>做计划，不是一份愿望清单……</p><p>2018年最后一天了，你的愿望是不是改一改时间2019还能继续用，为什么新年愿望总实现不了？就真的只是愿望放在那儿一年又一年。当看到别人纤细苗条的身材，穿漂亮的衣服，而自己眼看漂亮的裙子不合身，急了眼，于是在愿望清单上加上一条，减肥瘦身，每天去健身房。事后坚持一个星期都坚持不下来。对于自己定下来的看书计划，一个星期看一本书，晚上捧着书就开始呼呼大睡。一个月过去了才看到第一章。从明天开始我要早起背单词，第二天你摆好pose发朋友圈，配上文字，今天有早起背单词，早晨的空气是真的新鲜。第三天，你因为下雨，计划又延后。</p><h3 id="为什么定下的目标总是实现不了？"><a href="#为什么定下的目标总是实现不了？" class="headerlink" title="为什么定下的目标总是实现不了？"></a>为什么定下的目标总是实现不了？</h3><p>我们总说，工作一年学到的东西比大学四年学到的都要多，为什么？因为大学里的东西很多都没有实操性，有的课本几十年没有更新换代，案例也是一些老掉牙的案例。拿理科生，工科生必学的基础课“线性代数”举例来说，从1997年以后，美国新出版的线性代数教材几乎全部采用了计算机算题，而我国教材中找不到一本用计算机的，全靠手算。我在念这门课的时候，完全被这繁琐的演算，搞得一点兴趣没有。你说这门课难吗，其实并不难，只是在学的时候你根本不知道它可以做什么用。毕业后我慢慢开始接触到机器学习(Machine Learning)，深度学习(Deep-Learning),数据挖掘(Data-Mining)这些后，我发现线性代数学好了是多么有用，因为上述领域中要求数学基础知识中，有一项就是线性代数，矩阵的运算只要一步就可以解决的问题，而for需要套很多层，速度还慢。而这些用处我在大学课堂上根本体会不到，就像又不会拿线性代数去买菜一样，大学里很多课程形同虚设。学了也没有学到精髓。<strong>因为它不是你的刚需。</strong>我现在就特别想爬进机器学习领域，我想去发觉那些类似于亚马逊发现超市将啤酒和尿布摆在一起卖，会莫名的销量好一样，去发现一些潜在的规律，我觉得那将会是很有意义的工作。</p><p>再来看为什么定下的目标总是实现不了，<strong>是因为没那么想实现,是因为那不是你的刚需，你看每天早起背英语的过程太痛苦了，改变实在太难了，现状好像也没有那么糟糕，于是“愿望”就被搁置了。等到年终的时候，就只是愿望了。</strong> 当愿望是刚需时，都不用逼迫自己，你都会每天努力去实现它。与其在新年伊始，开始列愿望清单，不如多想想自己想要什么样的生活？用结果作导向。</p><p>我记得罗胖在一次直播中，描绘得到的宏伟蓝图的时候说过，当你不知道你现在做的事会不会成功时，你不妨设想一下，你希望它十年后是什么样子。以结果为导向，你就知道你现在要做什么了，而且更加清楚你现在做的事的意义。</p><h3 id="制定合理且具体的计划"><a href="#制定合理且具体的计划" class="headerlink" title="制定合理且具体的计划"></a>制定合理且具体的计划</h3><p>我曾在知乎上看到过一个概念，[<strong>NLP理解层次</strong>]。它是这么说的，对于一件事的理解，我们可以分为6个不同的层次。理解层次越高的人，解决问题的能力也越强。举一个事例，帮助理解 。</p><p>“我现在对这个工作不满意”</p><h4 id="第5流人才"><a href="#第5流人才" class="headerlink" title="第5流人才"></a>第5流人才</h4><ul><li><strong>又名:怨妇</strong></li><li><strong>所处理解层次：环境</strong></li><li><strong>典型思考模式：不怪我，都是你们的错！</strong><br>处在理解层次最底层第六层次的人,遇到问题时，他会首先把问题归结为「<strong>因为环境的不好</strong>」而产生的问题， 把一些都归结于环境，就是除自己以外的一切。我对这个工作不满意，是因为领导无能，公司办公室政治严重。</li></ul><p><strong>而他在寻找解决办法的路径上，也会从改变环境的角度思考。比如：</strong><br>我不喜欢这个工作，我换一个就是，此处不留爷自有留爷处。</p><p>这一类人总是不停的在抱怨，好像就只有他们的生活命运多舛，在《这个杀手不太冷》中，小女孩问里昂，生活总是这样还是只有小时候是这样，里昂回答always。谁不是一面不想活了又拼命活着。<br>她们似乎好像也知道抱怨不好？但为什么他们还是在不断抱怨呢？那就是因为他们的理解层次处在了最低的「环境层」，并不是他们想抱怨，而是在他眼里，除了看到环境之外，再也无法看到其他的了。因此，他们能想到的最好办法，也就只能是换个更好的环境了。</p><h4 id="第4流人才"><a href="#第4流人才" class="headerlink" title="第4流人才"></a>第4流人才</h4><ul><li><strong>又名:行动派</strong></li><li><strong>所处理解层次：行动</strong></li><li><strong>典型思考模式：我还不够努力！</strong><br>这里我们往上走了一层，来到第二个层次「行为」。处在这一层次的人，当问题发生的时候，他首先会把问题归结成「因为我的努力还不够」而产生的问题。比如：<br>我对这个工作不满意。是因为我的能力还不够，没有看到这个工作给你带来的潜在意义。<br>收入太低？因为我还不够努力…<br>总之，发生了问题，先从自身找原因，看看是不是因为自己偷懒了？是不是努力程度还不够？</li></ul><p>你会发现，处在这一层次，环境问题并不是什么问题了，变得没那么重要了，你发现没有越往上走，看到的点越不一样，换句话说，当你处在环境层次时，你觉得可能跨不去的坎，在行动层次的人来说根本就不是什么问题。</p><p><strong>而他在寻找解决办法的路径上，也会从行为的层面思考。比如：</strong><br>几年没涨工资了，今天开始多加班。<br>业绩不好，我多联系一下别的客户</p><p>但是，是不是努力了，所有问题都解决了呢。学生时代有些学生就是很努力，一天学到晚，但成绩就是上不去。努力的确是成功的一个必要条件，但远远不是充分条件。现在网上到处充斥着鸡汤，今天又是元气满满的一天哟。这种鸡汤喝所谓的成功学。它们只告诉了你要努力，却没有给你方法，它们只是帮助你脱离了最低的「环境」层，来到了第二低的「行为」层！以为给你打一针鸡血，你就开始奋斗了，就一定能成功了！只靠努力却在目标的道路上背道而驰，感动地只有你自己。</p><h4 id="第3流人才"><a href="#第3流人才" class="headerlink" title="第3流人才"></a>第3流人才</h4><ul><li><strong>又名:战术家</strong></li><li><strong>所处理解层次：能力</strong></li><li><strong>典型思考模式：方法总比问题多！</strong><br>理解层次处在「能力」层次的人，当问题发生的时候，首先会把问题归结成是「因为我的能力不足」而产生的。所以，他们也会在「能力」这个层次里去寻找更好的「方法」来解决问题。比如：<br>开的火锅店生意不太好，是因为我的经营模式太陈旧，我需要学习新的方法…比如，可以通过社群经济的方式来降低我的获客成本。<br><strong>这类人有非常强大的学习能力和应用能力，能把学习到的知识，转化为可操作的方法，进而改善效率，解决问题</strong></li></ul><p>他们清楚的知道太阳底下没有新鲜事，你现在遇到的问题，前人一定都遇到过，说不定还已经编成书了。如果你能走到这个层次，既有「行为层」的勤奋努力，又有「能力层」的方法套路，普通的问题已经难不倒你了，你总能找到办法来解决它们。这里说的每提高一个层次，并不是说就不要下一个层次了，而是在原来的基础上，上升了一个思考层次。</p><p>到这里已经是我们人的意识能想到的最高层次了。那肯定有人问了，还有什么问题是你有能力解决不了的事呢？答案是，你没抓住问题是什么，病急乱投医。什么意思，你在着手解决问题之前，你得先清楚，你要解决的问题是什么？比如一个门店人烟稀少，导致现状的原因看上去有很多，哪个才是最重要的问题？</p><ul><li>是团队管理的问题？营销方式的问题？还是商业模式的问题？</li><li>是应该打折清库存减少损失，准备关门？还是战略转型，坚持到底？<br>每一个选择都意味着不同的问题，一旦选择出了问题，没有抓住主要矛盾，你那优秀的「能力」和「行动力」只会让你越走越远。提高做选择题的能力，接下来需要进入下一层。</li></ul><h4 id="第2流人才"><a href="#第2流人才" class="headerlink" title="第2流人才"></a>第2流人才</h4><ul><li><strong>又名:战略家</strong></li><li><strong>所处理解层次：BVR（信念&#x2F;价值观&#x2F;规条）</strong></li><li><strong>典型思考模式：什么才是更重要的？</strong></li></ul><p>什么是BVR？</p><ul><li><strong>B（Believe）：信念</strong>，你相信什么是对的？</li><li><strong>V（Value）：价值观</strong>，你认为A和B哪个更重要？<br>我们说三观不合，不能做朋友，我向往海洋，而你却说那里淹死过很多人。我们每个人都会有一个价值衡量尺度，有的人觉得享乐重要，就优先享乐，把赚到的钱去换不同的体验，比如去国外旅游。有些人觉得挣钱重要，就把省着钱留下来。</li><li><strong>R（Rule）：规条</strong>,做人做事的原则。每个人有自己做事的原则，这些原则就来自于信念和价值。我有一条自己的原则是：答应别人的事，一定做到。而背后的信念其实是说到做到。诚信大于一切，就是觉得诚信最重要。</li></ul><p>处在「BVR层」的人，当问题发生的时候，首先会先思考「哪个是最重要的问题？」、「除了我看到的这些问题，还有什么更重要的问题是我没有看到的？」</p><p>BVR更多的是在有一个客观的价值标准时，你选择那个对你来说更有价值的问题去解决。BVR的缺陷，当遇到主观选择题的时候，我们不知道该怎么办。这时我们再往上走一个层次。</p><h4 id="第1流人才"><a href="#第1流人才" class="headerlink" title="第1流人才"></a>第1流人才</h4><ul><li><strong>又名:觉醒者</strong></li><li><strong>所处理解层次：身份</strong></li><li><strong>典型思考模式：因为我是XXX，所以我会XXX</strong><br>广大的股民朋友们都知道股神巴菲特，但是在自己选股择时的时候，有没有想过如果我是巴菲特，我此时会怎么做到。除了巴菲特，利弗莫尔同样在股票界享有声明。当你想想自己是利弗莫尔时，又会有怎样的不一样。这最后让你做决定的是你想成为谁，<strong>当你想清楚自己的「身份」定位后，就应该围绕它配套相应的BVR，再构建你的能力圈，并做出相应的计划与行动，你就会成为第一流的人才！</strong><br>第一流人才再往上走一层，是顶级的人才。</li></ul><h4 id="顶级人才"><a href="#顶级人才" class="headerlink" title="顶级人才"></a>顶级人才</h4><ul><li><strong>又名:领袖&#x2F;伟人</strong></li><li><strong>所处理解层次：精神&#x2F;使命</strong></li><li><strong>典型思考模式：人活着就是为了改变世界！</strong><br>理解层次的最高层次「精神」,精神是什么？就是你与世界的关系。也就是我们经常听到的「人生使命」，你来到这个世界是为了什么？这个层次所有的思考都是利他主义，现在全球气候越来越暖，我要做什么来改变这个现状。我要怎样才能推动时代的进步。像马丁路德金，解放黑人奴隶制度。乔布斯，活着就是为了改变世界。</li></ul><h4 id="根据NLP理解层次我们再来制定自己明确的目标。"><a href="#根据NLP理解层次我们再来制定自己明确的目标。" class="headerlink" title="根据NLP理解层次我们再来制定自己明确的目标。"></a>根据<strong>NLP理解层次</strong>我们再来制定自己明确的目标。</h4><p>这里还有一个很好用的制定目标的原则“<strong>SMART原则</strong>”<br><strong>即目标应当是具体的(Specific)、可以衡量的(Measurable)、可以达到的(Attainable)、与其他目标具有一定的相关性的(Relevant)、具有明确的截止期限的(Time-bound)。</strong></p><p><strong>比如我2019的愿望清单是：</strong></p><ul><li>想爬进数据挖掘领域</li><li>继续完成EF的课程</li><li>投资理财</li><li>读书</li></ul><p>对于第一个愿望，想爬进数据挖掘领域，我在文章前面说过了，我想去发觉那些类似于亚马逊发现超市将啤酒和尿布摆在一起卖，会莫名的销量好一样，去发现一些潜在的规律，我觉得那将会是很有意义的工作。所以我想成为这个专业领域的人，好了，有了这个目标，我该向下培养什么能力呢？我去查了招聘网站的任职要求。</p><ul><li><strong>1.熟悉常用算法</strong></li></ul><ul><li>决策树</li><li>逻辑回归</li><li>SVM</li><li>k-means</li><li>GBDT</li><li>XGBOOST</li><li>PCA<br>对于这个要求，我再把目标打散，一个一个算法攻克</li></ul><ul><li><strong>2.熟练使用SQL</strong><br>因为我现在的工作日常就是写SQL，所以不太需要额外训练。</li><li><strong>3.至少一门统计分析工具python&#x2F;R&#x2F;spss</strong><br>人生苦短我用python，再具体化一点，每天leecode上刷一道题，两个星期做一次总结。</li><li><strong>4.参加kaggle比赛</strong><br>我准备先复现2018CCF BDCI《供应链需求预测》和《基金间的相关性预测》一等奖的开源思路，上半年参加两次比赛。</li></ul><p>对于第二个愿望，继续完成EF的课程。具体可衡量一点就是在20190126前，完成level9的练习，每个星期2-3次online-group lesson，offline F2F twice a week, offline workshop twice a week。20190126后花一个月复习level4到level9的课程内容。20190630之前完成中高级(level10-12)课程。年底完成高级课程。</p><p>对于第三个愿望，复习香帅的北大金融学课，一课一课重新做复习笔记。每天一篇。一个月对一个上市公司进行研究，并写研究报告。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>首先介绍了为什么定下的目标总是实现不了？是因为定下的目标都不是的刚需。</li><li>然后引入NLP理解层次，分为6个层次，精神、身份、BVR(信念&#x2F;价值观&#x2F;规条)、能力、行为、环境。</li><li>制定自己明确的目标(SMART原则)</li></ul><hr><iframe src="https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html " style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>]]></content>
    
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Machine Learning-实战 电信行业智能套餐个性化匹配</title>
    <link href="/2018/12/30/Machine-Learning-%E5%AE%9E%E6%88%98%20%E7%94%B5%E4%BF%A1%E8%A1%8C%E4%B8%9A%E6%99%BA%E8%83%BD%E5%A5%97%E9%A4%90%E4%B8%AA%E6%80%A7%E5%8C%96%E5%8C%B9%E9%85%8D/"/>
    <url>/2018/12/30/Machine-Learning-%E5%AE%9E%E6%88%98%20%E7%94%B5%E4%BF%A1%E8%A1%8C%E4%B8%9A%E6%99%BA%E8%83%BD%E5%A5%97%E9%A4%90%E4%B8%AA%E6%80%A7%E5%8C%96%E5%8C%B9%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<p>本文是关于BDCI 2018-面向电信行业存量用户的智能套餐个性化匹配模型大赛 TOP1开源代码的实现</p><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><ul><li><strong>windows</strong></li><li><strong>python3.6</strong></li><li><strong>pandas sklearn xgboost</strong> <h2 id="赛事说明"><a href="#赛事说明" class="headerlink" title="赛事说明"></a>赛事说明</h2></li></ul><p>赛事链接<a href="https://www.datafountain.cn/competitions/311/details/data-evaluation">面向电信行业存量用户的智能套餐个性化匹配模型</a></p><p>可以参看链接，里面有详细的训练集数据说明，里面包含了如下信息：<br>数据说明<br>作品要求<br>评分方式</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>我复现了top1的解决方案，以下是top1的解决方案：</p><h3 id="1-数据探查"><a href="#1-数据探查" class="headerlink" title="1.数据探查"></a><strong>1.数据探查</strong></h3><h5 id="分类label"><a href="#分类label" class="headerlink" title="分类label"></a><strong>分类label</strong></h5><p>根据赛事说明，该比赛是一个多分类的问题，对应着有11种套餐，首先看看这11种套餐的分布情况，可以看出它们的分布较为不均。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#导入数据</span><br>path = <span class="hljs-string">&#x27;D:/Pywork/2018_CCF_BDCI_CHINA_TOP1/project/preliminary_training_set/train_all.csv&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">import_data</span>(<span class="hljs-params">path</span>):<br>    train_data = pd.read_csv(path, low_memory=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">return</span> train_data<br><br>train_data = import_data(path)<br><br><span class="hljs-comment"># current_service 条形图</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">service_view</span>(<span class="hljs-params">train_data,categories</span>):<br>    data_by_service = train_data.groupby(categories).size().reset_index(name=<span class="hljs-string">&#x27;counts&#x27;</span>)<br>    data_by_service[categories] = data_by_service[categories].astype(<span class="hljs-built_in">str</span>)<br>    <span class="hljs-built_in">print</span>(data_by_service)<br>    <span class="hljs-comment"># 随机生成几种颜色，reshape第二个参数-1指随着N变化，第一维度填满有剩就来填第二维</span><br>    <span class="hljs-comment"># 生成的是随机的N组三通道(r,g,b)的颜色</span><br>    N = <span class="hljs-number">7</span><br>    colors = np.random.rand(N * <span class="hljs-number">3</span>).reshape(N, -<span class="hljs-number">1</span>)<br>    fig, ax = plt.subplots()<br><br>    ax.bar(data_by_service[categories], data_by_service[<span class="hljs-string">&#x27;counts&#x27;</span>], color=colors)<br>    plt.xticks(rotation=<span class="hljs-number">270</span>)<br>    plt.xlabel(categories)<br>    plt.ylabel(<span class="hljs-string">&#x27;counts&#x27;</span>)<br>    plt.show()<br><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;current_service&#x27;</span><br>service_view(train_data,<span class="hljs-built_in">str</span>)<br></code></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/E.Y6SXlAuAZdQj0B0gLQ01oNeJ6d9fTl6fpWJMuVF5U!/b/dLYAAAAAAAAA&bo=gALgAQAAAAADF1E!&rf=viewer_4&t=5"></p><p>多分类问题，典型的评价指标为<strong>macro-f1</strong>：首先针对每个套餐类别，统计分别统计TP（预测答案正确），FP（错将其他类预测为本类），FN（本类标签预测为其他类标）。计算<strong>Precision</strong>(精确率)和<strong>Recall</strong>(召回率)</p><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/2CgTAjY8XgkPczB78E3PLBNvufN45qQ.lN*Y3ZNflc8!/b/dL4AAAAAAAAA&bo=vQHsAAAAAAADF2I!&rf=viewer_4&t=5"></p><p>举个具体场景的例子：</p><p>假如某个班级有男生80人,女生20人,共计100人.<br>目标是找出所有女生.<br>现在某人挑选出50个人,其中20人是女生,另外还错误的把30个男生也当作女生挑选出来了.<br>作为评估者的你需要来评估(evaluation)下他的工作<br><img src="http://pjqhk6p7v.bkt.clouddn.com/tp_fp.png"><br>通过表格可以得出：<br>TP:20<br>FP:30<br>FN:0<br>TN:50</p><p>精确率(precision)$$P &#x3D; \frac{TP}{TP+FP}$$<br>召回率(recall)的公式是：$$R&#x3D;\frac{TP}{TP+NP}$$,</p><p>首先我们可以计算<strong>精确率(precision)</strong>:很容易，我们可以得到,他把其中70(20女+50男)人判定正确了,而总人数是100人，所以它的accuracy就是70%(70 &#x2F; 100).</p><p><strong>召回率(recall)</strong>:它计算的是所有”正确被检索的item(TP)”占所有”应该检索到的item(TP+FN)”的比例,所以它的recall为100%.<br>如果单看某一个指标，预测结果是不会被正确衡量的。比如在以上例子中，如果我全部判断为女生，则召回率可以达到100%，单看召回率它是一个非常准确的预测，但此时你能说该模型的预测效果好吗，很显然不能。所以必须结合P,R一起看。结合起来最常见的方法应该就是F-Measure了，有些地方也叫做F-Score：<br>$$F&#x3D;\frac{(a^2+1)P*R} {a^2(P+R)}$$<br>当参数a&#x3D;1时，就是最常见的F1了：<br>$$F1 &#x3D; \frac{2PR} {P+R} $$</p><p>回到赛题，在得到每个类别下的F1-score后，对各个类别的F1-score求均值，得到最后的评测结果，计算方式如下：<br>$$score&#x3D;\frac 1n\sum{f1_k}$$</p><h5 id="原始特征与标签相关性"><a href="#原始特征与标签相关性" class="headerlink" title="原始特征与标签相关性"></a>原始特征与标签相关性</h5><p>以下是关于原始特征<strong>service_type和label相关性的观察图表</strong>：<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/KY5lH8e4LrLIXcvf7VHrq708jx51ArS2kVKuYJVXiGM!/b/dLkAAAAAAAAA&bo=sARtAgAAAAADF.k!&rf=viewer_4&t=5"><br>可以明显的看出一个规律，service_type可以将套餐分为两个部分，这两个部分是没有交叉的，其中一类有8个，另外一类有3个。这给我们比赛带来一个思路是，可以分模型预测。</p><p><strong>关于age和label相关性的观察图表：</strong><br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/X5b5TqayXddoVT.HM*t6M24cdgZGjZxdJrepRtMBaoc!/b/dL4AAAAAAAAA&bo=gALgAQAAAAADF1E!&rf=viewer_4&t=5"></p><p>我们可以看到对于年龄来讲，基本上符合电信用户群体的分布,但是有很多0岁的异常值，对于异常值,可以先不做处理，或填充-1.</p><p><strong>关于gender和label相关性的观察图表：</strong><br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/AQZ*DQ*mGsh*7Wi53H.sJja7P16s76WXyP5mfYD8SOM!/b/dL8AAAAAAAAA&bo=gALgAQAAAAADF1E!&rf=viewer_4&t=5"><br>我们观察到性别中有0 的缺省值，对于这部分，我们使用了两种方法处理，一种是填充service_type对应字段的众数，和原始值。最终选取了原始值.</p><h3 id="2-数据预处理"><a href="#2-数据预处理" class="headerlink" title="2.数据预处理"></a><strong>2.数据预处理</strong></h3><p>首先将分类的label映射到0-11数字当中便于处理</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">train<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;label&#x27;</span>]</span> = train<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;current_service&#x27;</span>]</span><span class="hljs-selector-class">.map</span>(p)<br></code></pre></td></tr></table></figure><p>为了避免利用pandas.read_csv()导入的类型不统一。可以传入dtype&#x3D;set_str，pandas.read_csv(dtype&#x3D;set_str),来指定类型，set_str是自己创建的字典，每个字段指向的类型，均可自己设定。</p><p>对于年龄，话费不合理的值，用nan值替换。</p><h3 id="3-特征工程"><a href="#3-特征工程" class="headerlink" title="3.特征工程"></a><strong>3.特征工程</strong></h3><p>(1)关联规则<br>受max-encoding的方法的启发，对有关联关系的话费字段，1_total_fee, 2_total_fee, 3_total_fee, 4_total_fee四个字段的构建关联规则，这样可以利用整体信息，对话费字段这个强特征进行降维编码。使得其数据更加具有代表性<br>(2) 业务特征<br>业务特征的部分，我们深入研究了联通的套餐消费场景，从比赛的一开始，首先就通过联通官网以及消费论坛认真的开始调研工作，深入了解了联通的各种套餐特点和用户群差别。通过熟悉套餐的特性，我们可以为各种特定用户群推荐适宜他们的套餐，比如腾讯天王卡玩腾讯游戏看腾讯视频不花钱是深度腾讯用户的福音，蚂蚁大宝卡则可以赠送2g无差别流量给高流量消费者。联通传统套餐的各种优惠活动，比如预充值冲100返流量和话费，适合平时那些流量和话费不够用的用户，充值返话费则适合那些薅羊毛的用户。对此我们针对用户的流量和通话做了一系列特征，比例、差值，求和等，力求尽可能的描绘出一幅用户画像。</p><p>提出了以下几种针对业务的特征：</p><ol><li>话费减去16元是否是整数</li><li>流量的有效数字是否是27的整数倍</li><li>话费的有效数字能否被15乘除</li><li>话费是否是整数（用户可能未超套餐）</li><li>连续两个月套餐的差值能否被5,10,15,27,30等计费单元整除</li><li>四个月话费的最小值</li><li>计算流量的平均单价</li><li>计算通话时间的平均单价</li><li>等等…</li></ol><p> 伪代码如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 平均值 按照行 axis=1</span><br>data[month_fee[:4]].mean(<span class="hljs-attribute">axis</span>=1)<br>data[month_fee[:3]].mean(<span class="hljs-attribute">axis</span>=1)<br>data[month_fee[:2]].mean(<span class="hljs-attribute">axis</span>=1)<br>data[month_fee[:4]].std(<span class="hljs-attribute">axis</span>=1)<br><br><span class="hljs-comment"># CV 变异系数 = 标准差/平均数 </span><br><span class="hljs-comment"># 反映数据离散程度的绝对值，可以认为变异系数和极差、标准差和方差一样，可以消除测量尺度和量纲的影响</span><br>data[<span class="hljs-string">&#x27;total_fee_std4&#x27;</span>] / (data[<span class="hljs-string">&#x27;total_fee_mean4&#x27;</span>] + 0.1)<br><br><span class="hljs-comment"># 四个月最大，最小话费</span><br>data[month_fee[:4]].max(<span class="hljs-attribute">axis</span>=1)<br>data[month_fee[:4]].min(<span class="hljs-attribute">axis</span>=1)<br><br><span class="hljs-comment"># 电话时间 差，和，最小，最大</span><br>data[<span class="hljs-string">&#x27;service2_caller_time&#x27;</span>]-data[<span class="hljs-string">&#x27;service1_caller_time&#x27;</span>]<br>data[<span class="hljs-string">&#x27;service2_caller_time&#x27;</span>]+data[<span class="hljs-string">&#x27;service1_caller_time&#x27;</span>]<br>data[[<span class="hljs-string">&#x27;service2_caller_time&#x27;</span>, <span class="hljs-string">&#x27;service1_caller_time&#x27;</span>]].min(<span class="hljs-attribute">axis</span>=1)<br>data[[<span class="hljs-string">&#x27;service2_caller_time&#x27;</span>, <span class="hljs-string">&#x27;service1_caller_time&#x27;</span>]].max(<span class="hljs-attribute">axis</span>=1)<br><br><span class="hljs-comment">#  话费是否是整数</span><br>data[<span class="hljs-string">&#x27;&#123;&#125;_1&#x27;</span>.format(fee)] = ((data[fee] % 1 == 0) &amp; (data[fee] != 0))<br>data[<span class="hljs-string">&#x27;&#123;&#125;_01&#x27;</span>.format(fee)] = ((data[fee] % 0.1 == 0) &amp; (data[fee] != 0))<br><br><span class="hljs-comment"># 分组标准化</span><br>def grp_standard(data,keys,names,<span class="hljs-attribute">drop</span>=<span class="hljs-literal">False</span>):<br>    <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> names:<br>        new_name = name <span class="hljs-keyword">if</span> drop <span class="hljs-keyword">else</span> name + <span class="hljs-string">&#x27;_&#x27;</span> + keys + <span class="hljs-string">&#x27;_&#x27;</span> + <span class="hljs-string">&#x27;standardize&#x27;</span><br>        mean_std = data.groupby(keys, <span class="hljs-attribute">as_index</span>=<span class="hljs-literal">False</span>)[name].agg(&#123;<span class="hljs-string">&#x27;mean&#x27;</span>: <span class="hljs-string">&#x27;mean&#x27;</span>, <span class="hljs-string">&#x27;std&#x27;</span>: <span class="hljs-string">&#x27;std&#x27;</span>&#125;)<br>        data = data.merge(mean_std, <span class="hljs-attribute">on</span>=keys, <span class="hljs-attribute">how</span>=<span class="hljs-string">&#x27;left&#x27;</span>)<br>        data[new_name] = ((data[name]-data[<span class="hljs-string">&#x27;mean&#x27;</span>])/data[<span class="hljs-string">&#x27;std&#x27;</span>]).fillna(0).astype(np.float32)<br>        # 防止除0报错<br>        data[new_name] = data[new_name].replace(-np.inf, 0).fillna(0)<br>        data.drop([<span class="hljs-string">&#x27;mean&#x27;</span>, <span class="hljs-string">&#x27;std&#x27;</span>], <span class="hljs-attribute">axis</span>=1, <span class="hljs-attribute">inplace</span>=<span class="hljs-literal">True</span>)<br>        return data<br><br><span class="hljs-comment"># 按照 合约类型 标准化</span><br> data = grp_standard(data, <span class="hljs-string">&#x27;contract_type&#x27;</span>, [<span class="hljs-string">&#x27;1_total_fee_log&#x27;</span>], <span class="hljs-attribute">drop</span>=<span class="hljs-literal">False</span>)<br> <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><br> #  年龄分组<br>data[<span class="hljs-string">&#x27;age_scatter&#x27;</span>] = pd.qcut(data[<span class="hljs-string">&#x27;age&#x27;</span>], 5)<br>data = grp_standard(data, <span class="hljs-string">&#x27;age_scatter&#x27;</span>, [<span class="hljs-string">&#x27;1_total_fee_log&#x27;</span>], <span class="hljs-attribute">drop</span>=<span class="hljs-literal">False</span>) <br><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><br><span class="hljs-comment"># online_time 分组</span><br>data[<span class="hljs-string">&#x27;online_time_scatter&#x27;</span>] = pd.qcut(data[<span class="hljs-string">&#x27;online_time&#x27;</span>], 5)<br>data = grp_standard(data, <span class="hljs-string">&#x27;online_time_scatter&#x27;</span>, [<span class="hljs-string">&#x27;1_total_fee_log&#x27;</span>], <span class="hljs-attribute">drop</span>=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><br><span class="hljs-comment"># 热编码</span><br>data = pd.get_dummies(data, columns=[<span class="hljs-string">&#x27;contract_type&#x27;</span>], <span class="hljs-attribute">dummy_na</span>=-1)<br>data = pd.get_dummies(data, columns=[<span class="hljs-string">&#x27;net_service&#x27;</span>], <span class="hljs-attribute">dummy_na</span>=-1)<br>data = pd.get_dummies(data, columns=[<span class="hljs-string">&#x27;complaint_level&#x27;</span>], <span class="hljs-attribute">dummy_na</span>=-1)<br>    <br></code></pre></td></tr></table></figure><h3 id="3-构建模型"><a href="#3-构建模型" class="headerlink" title="3.构建模型"></a><strong>3.构建模型</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python">params = &#123;<span class="hljs-string">&#x27;objective&#x27;</span>: <span class="hljs-string">&#x27;multi:softprob&#x27;</span>,<br>         <span class="hljs-string">&#x27;eta&#x27;</span>: <span class="hljs-number">0.5</span>,<br>         <span class="hljs-string">&#x27;max_depth&#x27;</span>: <span class="hljs-number">6</span>,<br>         <span class="hljs-string">&#x27;silent&#x27;</span>: <span class="hljs-number">1</span>,<br>         <span class="hljs-string">&#x27;num_class&#x27;</span>: <span class="hljs-number">3</span>,<br>         <span class="hljs-string">&#x27;eval_metric&#x27;</span>: <span class="hljs-string">&quot;mlogloss&quot;</span>,<br>         <span class="hljs-string">&#x27;min_child_weight&#x27;</span>: <span class="hljs-number">3</span>,<br>         <span class="hljs-string">&#x27;subsample&#x27;</span>: <span class="hljs-number">0.7</span>,<br>         <span class="hljs-string">&#x27;colsample_bytree&#x27;</span>: <span class="hljs-number">0.7</span>,<br>         <span class="hljs-string">&#x27;seed&#x27;</span>: <span class="hljs-number">66</span><br>         &#125;<br><span class="hljs-comment"># 单独拿 service_type=1出来训练 train_feat1</span><br>train_preds1, test_preds1 = xgb_cv(params, train_feat1, test_feat1, predictors1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;xgb_cv函数返回的test_preds1的类&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">type</span>(test_preds1)))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xgb_cv</span>(<span class="hljs-params">params, train_feat, test_feat, predictors, label=<span class="hljs-string">&#x27;label&#x27;</span>,groups=<span class="hljs-literal">None</span>,cv=<span class="hljs-number">5</span>,stratified=<span class="hljs-literal">True</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始CV 5折训练...&#x27;</span>)<br>    t0 = time.time()<br>    <span class="hljs-comment"># train_feat[label].nunique() 不同label的个数</span><br>    train_preds = np.zeros((<span class="hljs-built_in">len</span>(train_feat), train_feat[label].nunique()))<br>    test_preds = np.zeros((<span class="hljs-built_in">len</span>(test_feat), train_feat[label].nunique()))<br>    xgb_test = xgb.DMatrix(test_feat[predictors])<br>    models = []<br>    <span class="hljs-comment"># len(train_feat)个样本分成 5个样本集</span><br>    kf = KFold(<span class="hljs-built_in">len</span>(train_feat), n_folds=<span class="hljs-number">5</span>, shuffle=<span class="hljs-literal">True</span>, random_state=<span class="hljs-number">520</span>)<br>    <span class="hljs-keyword">for</span> i, (train_index, test_index) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(kf):<br>        <span class="hljs-comment"># 将测试集均分 取一份当测试集</span><br>        xgb_train = xgb.DMatrix(train_feat[predictors].iloc[train_index], train_feat[label].iloc[train_index])<br>        xgb_eval = xgb.DMatrix(train_feat[predictors].iloc[test_index], train_feat[label].iloc[test_index])<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;..........开始第&#123;&#125;轮训练&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>        params = &#123;<span class="hljs-string">&#x27;objective&#x27;</span>: <span class="hljs-string">&#x27;multi:softprob&#x27;</span>, <span class="hljs-comment"># 多分类的问题</span><br>                  <span class="hljs-string">&#x27;eta&#x27;</span>: <span class="hljs-number">0.1</span>,                    <span class="hljs-comment"># 如同学习率</span><br>                  <span class="hljs-string">&#x27;max_depth&#x27;</span>: <span class="hljs-number">6</span>,                <span class="hljs-comment"># 构建树的深度，越大越容易过拟合</span><br>                  <span class="hljs-string">&#x27;silent&#x27;</span>: <span class="hljs-number">1</span>,      <span class="hljs-comment"># 取0时表示打印出运行时信息，取1时表示以缄默方式运行，不打印运行时信息。缺省值为0</span><br>                  <span class="hljs-string">&#x27;num_class&#x27;</span>: <span class="hljs-number">11</span>,  <span class="hljs-comment"># 类别数，与 multisoftmax 并用</span><br>                  <span class="hljs-string">&#x27;eval_metric&#x27;</span>: <span class="hljs-string">&quot;mlogloss&quot;</span>,  <span class="hljs-comment"># 评价指标 negative log-likelihood</span><br>                  <span class="hljs-string">&#x27;min_child_weight&#x27;</span>: <span class="hljs-number">3</span>,<br>                  <span class="hljs-string">&#x27;subsample&#x27;</span>: <span class="hljs-number">0.7</span>,   <span class="hljs-comment"># 随机采样训练样本</span><br>                  <span class="hljs-string">&#x27;colsample_bytree&#x27;</span>: <span class="hljs-number">0.7</span>,  <span class="hljs-comment"># 生成树时进行的列采样</span><br>                  <span class="hljs-string">&#x27;seed&#x27;</span>: <span class="hljs-number">66</span><br>                  &#125; <span class="hljs-keyword">if</span> params <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> params<br>        watchlist = [(xgb_train, <span class="hljs-string">&#x27;train&#x27;</span>), (xgb_eval, <span class="hljs-string">&#x27;val&#x27;</span>)]<br>        clf = xgb.train(params,<br>                        xgb_train,<br>                        num_boost_round=<span class="hljs-number">3000</span>,<br>                        evals=watchlist,<br>                        verbose_eval=<span class="hljs-number">50</span>,<br>                        early_stopping_rounds=<span class="hljs-number">50</span>)<br>        <span class="hljs-comment"># 每次更新的是从训练集中划出来的一部分测试集</span><br>        train_preds[test_index] += clf.predict(xgb_eval)<br>        <span class="hljs-comment"># xgb_test 是 xgb.DMatrix(test_feat) 的返回值</span><br>        test_preds += clf.predict(xgb_test)<br>        models.append(clf)<br>        pickle.dump(models, <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;xgb_&#123;&#125;.model&#x27;</span>.<span class="hljs-built_in">format</span>(datetime.datetime.now().strftime(<span class="hljs-string">&#x27;%Y%m%d_%H%M%S&#x27;</span>)), <span class="hljs-string">&#x27;+wb&#x27;</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;用时&#123;&#125;秒&#x27;</span>.<span class="hljs-built_in">format</span>(time.time()-t0))<br>        <span class="hljs-keyword">return</span> train_preds, test_preds/<span class="hljs-number">5</span><br><br></code></pre></td></tr></table></figure><p>xgb_cv函数解读：划分数据集的方法采用K折交叉验证，K折交叉验证具体实现是</p><ul><li>将数据集平均分割成K个等份<br><strong>sklearn.cross_validation.KFold</strong>(len(train_feat), n_folds&#x3D;5, shuffle&#x3D;True, random_state&#x3D;520)<br><strong>n_folds&#x3D;5</strong>，K折验证的K值；默认3，最小为2<br><strong>shuffle</strong>默认False;shuffle会对数据产生随机搅动(洗牌)<br><strong>random_state</strong>默认None，随机种子</li><li>使用1份数据作为测试数据，其余作为训练数据</li><li>计算测试准确率</li><li>使用不同的测试集，重复2、3步骤</li><li>对测试准确率做平均，作为对未知数据预测准确率的估计</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">params</span> = &#123;<span class="hljs-string">&#x27;objective&#x27;</span>: <span class="hljs-string">&#x27;multi:softprob&#x27;</span>, <span class="hljs-meta"># 多分类的问题</span><br>          <span class="hljs-string">&#x27;eta&#x27;</span>: <span class="hljs-number">0.1</span>,                    <span class="hljs-meta"># 如同学习率</span><br>          <span class="hljs-string">&#x27;max_depth&#x27;</span>: <span class="hljs-number">6</span>,                <span class="hljs-meta"># 构建树的深度，越大越容易过拟合</span><br>          <span class="hljs-string">&#x27;silent&#x27;</span>: <span class="hljs-number">1</span>,      <span class="hljs-meta"># 取0时表示打印出运行时信息，取1时表示以缄默方式运行，不打印运行时信息。缺省值为0</span><br>          <span class="hljs-string">&#x27;num_class&#x27;</span>: <span class="hljs-number">11</span>,  <span class="hljs-meta"># 类别数，与 multisoftmax 并用</span><br>          <span class="hljs-string">&#x27;eval_metric&#x27;</span>: <span class="hljs-string">&quot;mlogloss&quot;</span>,  <span class="hljs-meta"># 评价指标 negative log-likelihood</span><br>          <span class="hljs-string">&#x27;min_child_weight&#x27;</span>: <span class="hljs-number">3</span>,<br>          <span class="hljs-string">&#x27;subsample&#x27;</span>: <span class="hljs-number">0.7</span>,   <span class="hljs-meta"># 随机采样训练样本</span><br>          <span class="hljs-string">&#x27;colsample_bytree&#x27;</span>: <span class="hljs-number">0.7</span>,  <span class="hljs-meta"># 生成树时进行的列采样</span><br>          <span class="hljs-string">&#x27;seed&#x27;</span>: <span class="hljs-number">66</span><br>          &#125; <span class="hljs-keyword">if</span> <span class="hljs-keyword">params</span> <span class="hljs-keyword">is</span> None <span class="hljs-keyword">else</span> <span class="hljs-keyword">params</span><br></code></pre></td></tr></table></figure><p><strong>xgb.train(params, xgb_train,num_boost_round&#x3D;3000,<br>evals&#x3D;watchlist, verbose_eval&#x3D;50, early_stopping_rounds&#x3D;50)</strong><br>**params:**训练的参数，上面代码块中有详细的解释<br>**xgb_train:**训练的数据</p><p>测试集的预测结果取5次的平均。</p><p>代码链接：<a href="https://pan.baidu.com/s/1VcY_BWTLPcONr2WGgr7bZA">https://pan.baidu.com/s/1VcY_BWTLPcONr2WGgr7bZA</a><br>密码：idgg</p><p>参考：</p><ul><li><a href="https://mp.weixin.qq.com/s/hOjLTNEBAt3DNiT6F-yHCw">机器学习初学者</a></li><li><a href="https://blog.csdn.net/iyuanshuo/article/details/80142730">Xgboost参数</a></li></ul><hr><iframe src="https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html " style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>]]></content>
    
    
    <categories>
      
      <category>Machine Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你对一万小时定律有什么误解?</title>
    <link href="/2018/12/28/%E4%BD%A0%E5%AF%B9%E4%B8%80%E4%B8%87%E5%B0%8F%E6%97%B6%E5%AE%9A%E5%BE%8B%E6%9C%89%E4%BB%80%E4%B9%88%E8%AF%AF%E8%A7%A3/"/>
    <url>/2018/12/28/%E4%BD%A0%E5%AF%B9%E4%B8%80%E4%B8%87%E5%B0%8F%E6%97%B6%E5%AE%9A%E5%BE%8B%E6%9C%89%E4%BB%80%E4%B9%88%E8%AF%AF%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="认识刻意练习"><a href="#认识刻意练习" class="headerlink" title="认识刻意练习"></a>认识刻意练习</h3><p>   有没有那么一本书里的内容让你觉得相见恨晚？《刻意练习》是我觉得相见恨晚的一本书，里面的学习方法对我的触动很大。</p><p>   我们都听过一万小时定律，意思是说要成为一个领域的专家，需要一万个小时，这被很多人误解我只要花够一万个小时在某个领域，我就可以成为那个领域的专家。其实这种为了完成任务式的一万个小时根本没有用。我想格拉德威尔先生在《异类》一书中提出一万小时定律的本意并不是为了强调那一万个小时。</p><p>   接下来看看一万个小时究竟有什么问题，驳斥1万小时定律可以玩一个巧妙的思想游戏，这就是古希腊哲学家欧布里德<br>（Eubulides）提出的沙堆悖论（Sorites paradox）：<br>1粒沙子不是堆。如果1粒沙子不是堆，那么2粒沙子也不是堆；如果2粒沙子不是堆，那么3粒沙子也不是堆；以此类推，9999粒沙子也不是堆；因此，1万粒沙子还不是堆。<strong>“破解”沙堆悖论时，我们经常不得不设定一个固定的边界</strong>。如果我们说“1万粒沙粒是一堆沙”，那么少于1万粒沙粒组成的就不能称之为一堆沙。那么这样区分9999粒沙和10001粒沙就有点不合理。这样不得不设定一个可变的边界，但是这个边界是多少呢？我们现在并不知道。那么最初设定的“1万粒沙粒是一堆沙”作为知识的价值就被削减了。<strong>练习的成果并不与时间呈正相关，这一点，也取决于练习方法</strong>。<strong>刻意练习是成为某一个领域专家的正确练习方式，而并不是时间量的达标</strong>。</p><h3 id="刻意练习的必要条件-—有目的的练习"><a href="#刻意练习的必要条件-—有目的的练习" class="headerlink" title="刻意练习的必要条件 —有目的的练习"></a>刻意练习的必要条件 —有目的的练习</h3><p><strong>有目的的练习</strong>是我们迈向<strong>刻意练习</strong>的第一步，有目的的练习具有以下四个特征：</p><p> <strong>1. 有目的的练习具有定义明确的特定目标</strong><br> 假想一个音乐学生，给自己设定了一个目标“连续三次，不犯任何错误，以适当的速度弹奏完曲子”，和一个完整的弹奏完一首曲子没有设置明确的目标的学生相比，谁的进步更快，明显是后者，因为如果不制定这样的目标，根本没办法判断练习是否是正确了。</p><p><strong>2.有目的的练习是专注的</strong><br>在进行练习时，必须把全部集中力放在你的任务上。</p><p><strong>3.有目的的练习包含反馈</strong><br>不论你在努力做什么事情，都需要反馈来准确辨别你在哪些方面还有不足，以及怎么会存在这些不足。如果没有反馈（要么是你自己给自己提出的，要么是局外人给你提出的），你不可能搞清楚你在哪些方面还需提高，或者你现在离实现你的目标有多远。</p><p><strong>4.有目的的练习需要走出舒适区</strong><br>走出舒适区，意味着要试着做一些你以前没做过的事情。有时候，你也许发现，做一些没做过的事情，相对较为容易，然后你会继续逼迫自己。但有时候，你偶然碰到了那些让你感到很难做好的事情，似乎你永远也做不了。想办法去逾越这些障碍，是通向有目的的练习的隐藏钥匙。试着做不同的事情，而非更难的事情。</p><p><strong>总结一下有目的的练习:</strong><br>走出你的舒适区，但要以专注的方式制订明确的目标，为达到那些目标制订一个计划，并且想出监测你的进步的方法。哦，还要想办法保持你的动机。</p><p>  有目的的练习只能保证人体短时间的记忆，当有目的练习达到瓶颈时，我们需要另找办法。这时我们就需要在有目的的练习上再建立心理表征，心理表征是什么呢? </p><h3 id="创建心理表征"><a href="#创建心理表征" class="headerlink" title="创建心理表征"></a>创建心理表征</h3><p>  心理表征是一种与我们大脑正在思考的某个物体、某个观点、某些信息或者其他任何事物相对应的心理结构，或具体或抽象。一个简单的例子是视觉形象。例如，一提到蒙娜丽莎，很多人马上便会在脑海中“看到”那幅著名油画的形象；那个形象就是蒙娜丽莎在他们脑海中的心理表征。由于各个行业或领域之间心理表征的细节具有极大差异，我们难以给出一个十分清晰的顶层定义，但基本上，这些表征是信息预先存在的模式（比如事实、图片、规则、关系，等等），这些模式保存在长时记忆之中，可以用于有效且快速地顺应某些类型的局面。对于所有的心理表征，有一点是相同的：尽管短时记忆存在局限，但它们使得人们可以迅速地处理大量信息。</p><p>而创建心理表征是《刻意练习》中的重要环节，艾利克森在《刻意练习》之中提出了刻意练习的指向与本质，它就是长时记忆。核心观点就是，那些处于中上水平的人们，拥有一种较强的记忆能力：长时记忆。长时记忆正是区分卓越者与一般人的一个重要能力。</p><p>长时记忆的培养要点主要有以下几个：<br>◆<strong>赋予意义，精细编码：</strong><br>（准）专家们能非常快地明白自己领域的单词与术语，在存<br>储信息的时候，可以有意识地采取元认知的各项加工策略。</p><p>◆<strong>提取结构或模式：</strong><br>往往需要将专业领域的知识、提取结构或者模式以更好的方式存储。比如，专家级的开发者善用设计模式。</p><p>◆<strong>加快速度、增加连接：</strong><br>通过大量重复的刻意练习，专家在编码与提取过程方面比新<br>手都快很多，增加了长时记忆与工作记忆之间的各种通路。</p><p>所以，刻意练习的本质是去买SSD硬盘，而不是纯粹卖苦力，更不是帮畅销书作者们营销，喊喊热血口号：1万小时，今天，你坚持了吗？</p><h3 id="如何实践刻意练习"><a href="#如何实践刻意练习" class="headerlink" title="如何实践刻意练习"></a>如何实践刻意练习</h3><p>  首先，它需要一个已经得到合理发展的行业或领域，也就是说，在那一行业或领域之中，最杰出的从业者已达到一定程度的表现水平，使他们与其他刚刚进入该行业或领域的人们明显地区分开来。<strong>找出杰出人物和其他人的差别</strong>。一旦你已经辨认出某个行业或领域中的杰出人物，下一步就是<strong>有针对性地思考他们都做了些什么</strong>，使自己从同一个行业或领域中那些成就不太卓著的人之中脱颖而出，同时<strong>还要思考哪些训练方法帮助他们实现了卓越</strong>。问题的一部分出在心理表征发挥的关键作用。在许多行业或领域之中，心理表征质量的高低将最杰出人物和其他人区分开来。</p><p><strong>其次，自己设计练习方法，设定明确的目标与计划</strong>。</p><p><strong>最后用“三个F”创建有效的心理表征</strong>。这三个F，其实是以字母F开头三个单词，即：<strong>专注</strong>（focus）、<strong>反馈</strong>（feedback）以及<strong>纠正</strong>（fix it）。将技能分解成一些组成部分，以便反复地练习，并且有效地分析、确定你的不足之处，然后想出各种办法来解决它们。</p><p>小tips：富兰克林如何提高写作技巧</p><p>  富兰克林首先偶然看到了一期英国杂志《观察者》,被里面高质量的文章深深吸引，他立下目标决定也要写出这样高质量的文章。于是他开始观察，一旦他忘记了文章中的一些句子的措辞，可以怎样以最为接近的方式重写那些句子。所以他选择了自己喜欢的几篇文章，然后写下对每个内容的简短描述，只要能够让他回想起来句子是什么意思就行。</p><p>  不久，他开始厌倦从一开始自己写下的线索中重写文章。他的目的不是复写这些文章，他的目的是要让自己写的文章和它们一样用词精炼，描写细致入微。所以他写完后，开始对比文章，在必要时纠正自己的版本，这教会了富兰克林如何明确且中肯地表达观点。</p><p>  后来他发现自己的词汇积累量并不像《观察者》的投稿者那样丰富，并不是说他不认识，而是无法在写作时“文思泉涌，信手拈来”。为了这一目标，他想出了前一种练习的变体，他确定，写诗将迫使他想出不同的词语。因此他找到《观察者》杂志的一些文章，并将他们改写成诗句。再接下来，等待了足够多的时间之后，再把这些诗句改写成散文。这使他形成了一个习惯，就是找到正确的词汇，并且增加对词汇的积累量，以至于他可以迅速从记忆中调用这些词汇。</p><p>  最后，富兰克林再来完善文章的总体结构和逻辑。他找来《观察者》的文章，为每一个句子都写下一些提示的线索，并把顺序打乱，使词汇处于完全无序的状态。然后等到足够长的时间，它忘记那些文章如何措辞，再一次复写文章。他找来从某一篇文章中摘抄下来的、没有按顺序排列的提示线索，并按他认为最符合逻辑的顺序来排列，根据每条线索写出一些句子，并将自己写的结果与最初的文章进行对比。这样的练习，迫使他小心翼翼地思考怎样在文章中理清思路。如果他发现，在文章中的某些地方，他整理的思路与原文作者的思路不一致，他会纠正自己，并试着从这些错误中学习。</p><p>我们可以类比富兰克林提高写作技巧的方法来制定自己的刻意练习方法。</p><iframe src="https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html " style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>]]></content>
    
    
    
    <tags>
      
      <tag>life</tag>
      
      <tag>study skills</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建自己的个人网站(彩蛋)</title>
    <link href="/2018/12/26/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99-%E5%BD%A9%E8%9B%8B/"/>
    <url>/2018/12/26/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99-%E5%BD%A9%E8%9B%8B/</url>
    
    <content type="html"><![CDATA[<p>本篇彩蛋是基于上两篇个人网站搭建系列博文增加新的功能（评论、打赏）<br>以Anisina主题为例</p><p>难度指数：♥♥<br>系统环境：win8</p><h2 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h2><p>本文采用的是valine评论系统，首先你需要注册一个<a href="https://leancloud.cn/">leancloud</a>账户,然后创建一个应用来存储管理评论内容,注册和创建新应用完了之后，就完成了准备工作。</p><p><strong>1.准备工作就绪后，然后修改 Anisina主题配置文件 _config.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Valine comment system https://valine.js.org</span><br><span class="hljs-attr">valine:</span> <br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">appid:</span>  <span class="hljs-string">KPXIfOuMVwWIv2Skprm5gYB</span><br>  <span class="hljs-attr">appkey:</span> <span class="hljs-string">f92SiTdYRrLO0zwfdQ</span><br>  <span class="hljs-attr">verify:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#验证码</span><br>  <span class="hljs-attr">notify:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#评论回复提醒</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">mm</span> <span class="hljs-comment">#评论列表默认头像样式</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">Just</span> <span class="hljs-string">go</span> <span class="hljs-string">go</span> <span class="hljs-comment">#评论框占位符</span><br>  <br><span class="hljs-attr">CDN:</span><br>  <span class="hljs-attr">valine:</span> <span class="hljs-string">http://unpkg.com/valine@1.2.0-beta1/dist/Valine.min.js</span><br></code></pre></td></tr></table></figure><p>这里的appid，appkey可在创建的新应用的设置里面查看<br>新应用名称&gt;设置&gt;应用Key<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/TzCVOAq*UEKUbBlUDelxgRYGM3KQVijH5xouYp4MJB4!/b/dL4AAAAAAAAA&bo=IgLrAQAAAAADF*g!&rf=viewer_4&t=5"></p><p><strong>2.修改 Anisina&#x2F;layout&#x2F;_partial&#x2F;article.ejs</strong></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&lt;<span class="hljs-meta">%</span> <span class="hljs-keyword">if</span> <span class="hljs-comment">(!index &amp;&amp; post.comments)</span>&#123; <span class="hljs-meta">%</span>&gt;<br>    &lt;<span class="hljs-meta">%</span> <span class="hljs-keyword">if</span> <span class="hljs-comment">(theme.duoshuo.on)</span> &#123; <span class="hljs-meta">%</span>&gt;<br>      &lt;<span class="hljs-meta">%</span>- partial<span class="hljs-comment">(&#x27;comments/duoshuo&#x27;, &#123;</span><br><span class="hljs-comment">          key: post.path,</span><br><span class="hljs-comment">          title: post.title,</span><br><span class="hljs-comment">          url: config.url+url_for(post.path)</span>,<br>          &#125;) <span class="hljs-meta">%</span>&gt;<br>    &lt;<span class="hljs-meta">%</span> &#125; else <span class="hljs-keyword">if</span> <span class="hljs-comment">(theme.youyan.on)</span> &#123; <span class="hljs-meta">%</span>&gt;<br>        &lt;<span class="hljs-meta">%</span>- partial<span class="hljs-comment">(&#x27;comments/youyan&#x27;)</span> <span class="hljs-meta">%</span>&gt;<br>    &lt;<span class="hljs-meta">%</span> &#125; else <span class="hljs-keyword">if</span> <span class="hljs-comment">(theme.disqus.on)</span> &#123; <span class="hljs-meta">%</span>&gt;<br>        &lt;<span class="hljs-meta">%</span>- partial<span class="hljs-comment">(&#x27;comments/disqus&#x27;, &#123;</span><br><span class="hljs-comment">            shortname: theme.disqus.shortname</span><br><span class="hljs-comment">          &#125;)</span> <span class="hljs-meta">%</span>&gt;<br>    &lt;<span class="hljs-meta">%</span> &#125; else <span class="hljs-keyword">if</span> <span class="hljs-comment">(config.disqus_shortname)</span> &#123; <span class="hljs-meta">%</span>&gt;<br>        &lt;<span class="hljs-meta">%</span>- partial<span class="hljs-comment">(&#x27;comments/disqus&#x27;, &#123;</span><br><span class="hljs-comment">            shortname: config.disqus_shortname</span><br><span class="hljs-comment">          &#125;)</span> <span class="hljs-meta">%</span>&gt;<br>   &lt;<span class="hljs-meta">%</span> &#125; else <span class="hljs-keyword">if</span> <span class="hljs-comment">(theme.valine.on)</span>&#123; <span class="hljs-meta">%</span>&gt;<br>       &lt;<span class="hljs-meta">%</span>- partial<span class="hljs-comment">(&#x27;comments/valine&#x27;, &#123;</span><br><span class="hljs-comment">           key: post.slug,</span><br><span class="hljs-comment">           title: post.title,</span><br><span class="hljs-comment">           url: config.url+url_for(post.path)</span><br>       &#125;) <span class="hljs-meta">%</span>&gt;<br>    &lt;<span class="hljs-meta">%</span> &#125; <span class="hljs-meta">%</span>&gt;<br>&lt;<span class="hljs-meta">%</span> &#125; <span class="hljs-meta">%</span>&gt;<br><br></code></pre></td></tr></table></figure><p><strong>3.创建 layout&#x2F;_partial&#x2F;comments&#x2F;valine.ejs 文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;comments&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin: 2em; padding: 2em; background: rgba(255, 255, 255, 0.5)&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vcomment&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;comment&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&lt;%- theme.CDN.valine %&gt;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Valine</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#vcomment&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">notify</span>: <span class="hljs-string">&#x27;&lt;%= theme.valine.notify %&gt;&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">verify</span>: <span class="hljs-string">&#x27;&lt;%= theme.valine.verify %&gt;&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">app_id</span>: <span class="hljs-string">&quot;&lt;%= theme.valine.appid %&gt;&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">app_key</span>: <span class="hljs-string">&quot;&lt;%= theme.valine.appkey %&gt;&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">placeholder</span>: <span class="hljs-string">&quot;&lt;%= theme.valine.placeholder %&gt;&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">avatar</span>: <span class="hljs-string">&quot;&lt;%= theme.valine.avatar %&gt;&quot;</span></span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br></code></pre></td></tr></table></figure><p>完成，部署hexo后就可以看到评论功能新增上去了</p><h2 id="打赏功能"><a href="#打赏功能" class="headerlink" title="打赏功能"></a>打赏功能</h2><p>效果可以先预览一下</p><iframe src="https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html " style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe><p><strong>1.首先到我的github页去Fork 一下这个项目donate-page-yu</strong><br><a href="https://github.com/YUTING0907">https://github.com/YUTING0907</a><br>这个我是Fork 了TinyJay的repositories </p><p><strong>2.然后在donate-page-yu&#x2F;simple&#x2F;images&#x2F;下</strong> 修改你的支付宝，微信收款等其他收款码，当然你也可以不修改, 扫我的收款码就可以了~</p><p><strong>3.进入这个路径：donate-page&#x2F;simple&#x2F;index.html,复制该路径，然后进入</strong><a href="http://raw.githack.com/">http://raw.githack.com/</a> <strong>生成对应的访问链接。</strong><br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/XTbfuH3ETb1NM2DJo.MKvH9ByYiaV4R0R0mUsWgD8EI!/b/dL8AAAAAAAAA&bo=zwQMAgAAAAADF*c!&rf=viewer_4&t=5"></p><p><strong>4.修改iframe</strong></p><p>将下面的代码中src对应的网页指向改为刚刚生成的网页，之后将下面的iframe代码块放到文章中就可以了</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;iframe <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html </span><br><span class="hljs-string">&quot;</span> <span class="hljs-attribute">style</span>=<span class="hljs-string">&quot;overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;&quot;</span>  <br><span class="hljs-attribute">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">scrolling</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure><iframe src="https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html " style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个人越过越年轻是喜还是悲</title>
    <link href="/2018/12/23/%E4%B8%80%E4%B8%AA%E4%BA%BA%E8%B6%8A%E8%BF%87%E8%B6%8A%E5%B9%B4%E8%BD%BB%E6%98%AF%E5%96%9C%E8%BF%98%E6%98%AF%E6%82%B2/"/>
    <url>/2018/12/23/%E4%B8%80%E4%B8%AA%E4%BA%BA%E8%B6%8A%E8%BF%87%E8%B6%8A%E5%B9%B4%E8%BD%BB%E6%98%AF%E5%96%9C%E8%BF%98%E6%98%AF%E6%82%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="一个人越过越年轻是喜还是悲"><a href="#一个人越过越年轻是喜还是悲" class="headerlink" title="一个人越过越年轻是喜还是悲"></a><strong>一个人越过越年轻是喜还是悲</strong></h2><p>故事发生一战结束初期，一位名叫Gateau的知名钟表匠受邀为火车站制作一个大钟，他儿子在战争中失去了生命，他希望时间可以倒转，战争没有发生，世界和平，儿子重返家园。所以把大钟做成了倒转的模样。</p><p>就在这时，一个新生儿降临在一个有着124年做纽扣生意历史的家族中，虽是新生儿却没有那般吹弹可破的皮肤，生下来就是充满褶皱的脸，各方面都很糟糕，像极了八十岁的老人。</p><p>它一出生，她妈妈就难产死了，爸爸也因为他奇丑无比而抛弃了他，把他扔在老人院门口，襁褓里只夹带了18美分。</p><p>本杰明被好心的Queenie收养，巧的是跟一群老人生活在一起，他跟周围老人一样坐轮椅，但却像孩子一样对这个世界一无所知。他听着老人们讲述自己的一生。</p><p>等到他五岁的时候，他慢慢学会了走路。他在老人公寓遇到了后来带他开始航海之旅的船长，当船长问本杰明一生碰过几个女人时，他说一个也没有，那时的本杰明虽然长得老，但也才十几岁。船长带他去妓院爽了一把。那一夜他异常的兴奋</p><p>本杰明在老人公寓还遇到了一个眼眸无比清澈的女孩子黛西，他们在很小的就认识了。那时候本杰明外貌还是很老，但是黛西却说我觉得你跟别人不一样。</p><p>本杰明感觉自己的身体一天比一天年轻，在18岁的时候，离开了家乡，他答应黛西无论到哪里，都会给她寄明信片。本杰明随着船长去远航，期间遭遇了日本偷袭珍珠港，船长的船要做军用，而船上的水手自然而然的变成了海军，包括本杰明。有一天夜里，他们遇上了日军军船，那天晚上死了很多人。船长死了，还有一个前天夜里把自己所有积蓄拿出来托付给本杰明，叫他寄给她的妻儿，说他一直在想他们。可能由于在老人院，经历了太多周围的人的生生死死，本杰明很平静但很惋惜。<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/TpYccEQe4Sdm37iY82dXvgz94s8pNTQYwAMg48vbs88!/b/dLkAAAAAAAAA&bo=OATUAgAAAAARF8o!&rf=viewer_4&t=5"></p><p>同时黛西也在慢慢长大，成了有名的芭蕾舞舞者，也与别的男孩谈过恋爱，但即使晚上睡在别人旁边，黛西也总会在睡觉前说，晚安，本杰明。直到一次意外车祸，她再也不能跳舞。本杰明千里迢迢赶过来照顾她，但黛西却赶他走，因为她看着本杰明越来越年轻英俊，而自己这般窘态。本杰明一直在暗中关心她，直到她的腿能再次下床走路。</p><p>他们在一次次错过与过错中，终于在两个人生命的中点遇见，在一切都刚刚好的时间，他们疯狂醉入爱河。两人有了小baby，是个女孩，在女孩儿满一周岁，他给她办了周岁生日party后，本杰明选择离开她们，在女儿还对他没有印象的时候。他对黛西说，我不想你到时候养两个孩子，你应该给卡洛琳找一个成熟的爸爸，而不是玩伴。他从他亲身父亲那里得到了一笔遗产，他什么都没带走，走的时候只穿走了一件夹克。就像他一出生那样，他的一生必定写满不平凡，爱而不能陪在挚爱的人身边，有着比别人多的孤独。<strong>在不顺心的时候，你可以像疯狗那样发狂，你可以破口大骂，诅咒命运，但到头来，还是得放手。</strong><br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/QgIQbqM8q0EQQSt*PMqKEY4YAt*EEjc3Sh8d1YJ8xsc!/b/dLkAAAAAAAAA&bo=OASiAwAAAAARF70!&rf=viewer_4&t=5"><br>本杰明慢慢变小，慢慢地很多事都不记得了，只是一直念着黛西。他后来回到那个老人公寓，变小的本杰明变得很难管，他们后来找来黛西，黛西那时也已人入黄昏，看着小本杰明感慨万千，最后他变成婴儿，死在了黛西的怀里。本杰明给女儿写过很多信一封都没有寄出去。<br>他说：“我希望 可以领着你 上第一天学”，“我希望你伤心的时候有我安慰”，“我希望可以在你睡前吻你”，“我希望 可以在你身边 教你钢琴”，“我希望可以告诉你 别去追那邦楞头小子”，“我希望我可以当你的爸爸”。<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/MnQQ.H..FNfcP3mztTF5OzkjBoWfl4r0JtIrz0aZp4Y!/b/dL8AAAAAAAAA&bo=OAQJBAAAAAARFxE!&rf=viewer_4&t=5"><br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/.X9*xY8iy0HnUi9zw1NZDQo5Krdn4ujHDgobnTh6eDQ!/b/dDYBAAAAAAAA&bo=OASiAwAAAAARF70!&rf=viewer_4&t=5"></p><p>整个电影在黛西和本杰明的女儿的叙述中娓娓道来的，在她妈妈黛西即将老死的病房里，在本杰明记录自己一生的日记本里，女孩在妈妈将死的一刻才知道这个凄美的故事。看完电影，好像走完了一生。</p><iframe src="https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html " style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>]]></content>
    
    
    
    <tags>
      
      <tag>life</tag>
      
      <tag>movies</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建自己的个人网站(下)</title>
    <link href="/2018/12/16/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99-%E4%B8%8B/"/>
    <url>/2018/12/16/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99-%E4%B8%8B/</url>
    
    <content type="html"><![CDATA[<p>本篇个人网站搭建系列博文是基于:GitHub+Hexo。<br>难度指数：♥♥<br>系统环境：win8</p><p>修饰上篇搭建的个人网站框架(包括theme主题设置、头像的设置、以及图片的显示、链接上自己的RSS)</p><h2 id="Hexo克隆主题"><a href="#Hexo克隆主题" class="headerlink" title="Hexo克隆主题"></a>Hexo克隆主题</h2><p>在初始化hexo后，也就是执行hexo init 命令后会给一个默认的主题：landscape。里面还有一篇写好的示例文章：Hello World</p><h4 id="选择喜欢的主题"><a href="#选择喜欢的主题" class="headerlink" title="选择喜欢的主题"></a>选择喜欢的主题</h4><p>觉得不喜欢可以换主题，以下链接可以供你挑选自己喜欢的主题<br><a href="https://hexo.io/themes">Themes</a></p><p>我选择的是Aisina，这里就以Aisina为例，讲主题的配置</p><h4 id="通过git命令下载"><a href="#通过git命令下载" class="headerlink" title="通过git命令下载"></a>通过git命令下载</h4><p>找到之后通过git命令下载<br>界面右侧，在主题的repository点击clone 复制一下那个地址<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/O*u6Zb9euiuiSSnDUbQKGeA0FADpHFfcQT6RASgQNwg!/b/dDQBAAAAAAAA&bo=yQRWAgAAAAADF6s!&rf=viewer_4&t=5"></p><h4 id="在你计算机本地文件夹-YUTING0907-github-io-x2F-themes-x2F-下新建一个文件夹Anisina"><a href="#在你计算机本地文件夹-YUTING0907-github-io-x2F-themes-x2F-下新建一个文件夹Anisina" class="headerlink" title="在你计算机本地文件夹 YUTING0907.github.io&#x2F;themes&#x2F; 下新建一个文件夹Anisina"></a>在你计算机本地文件夹 YUTING0907.github.io&#x2F;themes&#x2F; 下新建一个文件夹Anisina</h4><p>执行复制代码</p><pre><code class="hljs">$ git clone 复制的地址  themes/Anisina</code></pre><p>后面还可以将自己博客个性化装饰~</p><h4 id="修改整站配置文件"><a href="#修改整站配置文件" class="headerlink" title="修改整站配置文件"></a>修改整站配置文件</h4><p>配置文件是 _config.yml，在YUTING0907.github.io目录下，可以用记事本打开，但推荐用Nodepad++或者UE打开。</p><p>修订清单如下，文档内有详细注释，可按注释逐个修订</p><pre><code class="hljs"># Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: YUTINGsubtitle: 2019 TO BE YOUR YEARdescription: &quot;YUTING在 Github 上的个人博客&quot;keywords: MLauthor: Echo Yulanguage: zh-CNtimezone: Asia/Shanghai</code></pre><p>​<br>    # custom Site settings<br>    # more detail check out docs<br>    SEOTitle: YUTING’s blog<br>    header-img: &#x2F;&#x2F;o7bkkhiex.bkt.clouddn.com&#x2F;lion-blur-bg.jpg<br>    email: <a href="mailto:&#x59;&#x55;&#x54;&#x49;&#x4e;&#71;&#57;&#x35;&#x39;&#55;&#x40;&#x31;&#x36;&#51;&#x2e;&#99;&#x6f;&#x6d;">&#x59;&#x55;&#x54;&#x49;&#x4e;&#71;&#57;&#x35;&#x39;&#55;&#x40;&#x31;&#x36;&#51;&#x2e;&#99;&#x6f;&#x6d;</a></p><pre><code class="hljs">favicon: # your favicon png# custom end</code></pre><p>​<br>    # URL<br>    ## If your site is put in a subdirectory, set url as ‘<a href="http://yoursite.com/child&#39;">http://yoursite.com/child&#39;</a> and root as ‘&#x2F;child&#x2F;‘<br>    url: <a href="http://yuting0907.github.io/">http://YUTING0907.github.io</a><br>    root: &#x2F;<br>    permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;<br>    permalink_defaults:</p><p>​<br>​<br>    # SNS settings<br>    # RSS:<br>    weibo_username: ytfantastic<br>    zhihu_username: yu-ting-66-78<br>    github_username: YUTING0907<br>    twitter_username: YUTING<br>    facebook_username: YUTING<br>    linkedin_username:  </p><pre><code class="hljs"># Build settingsanchorjs: false          # if you want to customize anchor. check out line:181 of `post.html`</code></pre><p>​<br>    # Disqus settings<br>    disqus_username: </p><pre><code class="hljs"># Duoshuo settingsduoshuo_username:  # 你的多说帐号# Share component is depend on Comment so we can NOT use share only.duoshuo_share: true    # set to false if you want to use Comment without Sharing# Use livereuse_livere:# Valine comment system https://valine.js.orgvaline:   enable: false  appid:  #Leancloud应用的appId  appkey:  #Leancloud应用的appKey  verify: false #验证码  notify: false #评论回复提醒  avatar: mm #评论列表默认头像样式  placeholder: Just go go #评论框占位符# Analytics settings# Baidu Analyticsba_track_id:# Google Analyticsga_track_id:             # Format: UA-xxxxxx-xxga_domain:# Featured Tagsfeatured-tags: true                     # whether or not using Feature-Tagsfeatured-condition-size: 1              # A tag will be featured if the size of it is more than this condition value# friendsfriends:  # 友链</code></pre><p>​<br>​<br>    # Directory<br>    source_dir: source<br>    public_dir: public<br>    tag_dir: tags<br>    archive_dir: archives<br>    category_dir: categories<br>    code_dir: downloads&#x2F;code<br>    i18n_dir: :lang<br>    skip_render:</p><pre><code class="hljs"># Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: truerelative_link: falsefuture: truehighlight:  enable: true  line_number: true  auto_detect: false  tab_replace:</code></pre><p>​<br>    # Home page setting<br>    # path: Root path for your blogs index page. (default &#x3D; ‘’)<br>    # per_page: Posts displayed per page. (0 &#x3D; disable pagination)<br>    # order_by: Posts order. (Order by date descending by default)<br>    index_generator:<br>      path: ‘’<br>      per_page: 10<br>      order_by: -date</p><pre><code class="hljs"># Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: Anisinamarkdown:  plugins:    - markdown-it-abbr    - markdown-it-footnote    - markdown-it-ins    - markdown-it-sub    - markdown-it-sup    - markdown-it-emoji# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repository: git@github.com:YUTING0907/YUTING0907.github.io.git  branch: master</code></pre><p>​<br>    # Qiniu imageView2 API<br>    # More info <a href="http://developer.qiniu.com/code/v6/api/kodo-api/image/imageview2.html">http://developer.qiniu.com/code/v6/api/kodo-api/image/imageview2.html</a><br>    clip-content: “?imageView2&#x2F;1&#x2F;w&#x2F;1400&#x2F;h&#x2F;400&#x2F;interlace&#x2F;1&#x2F;q&#x2F;90”<br>    clip-avatar: “?imageView2&#x2F;2&#x2F;w&#x2F;300&#x2F;h&#x2F;300&#x2F;interlace&#x2F;1&#x2F;q&#x2F;90”<br>    clip-home-post-bg: “?imageView2&#x2F;1&#x2F;w&#x2F;800&#x2F;h&#x2F;300&#x2F;interlace&#x2F;1&#x2F;q&#x2F;70”</p><pre><code class="hljs"># post default imagespost-default-img: &quot;5.gif&quot; #博文默认的图片post-default-img-mobile: #移动端显示的图片# search api , set your custom keyswiftype_key: </code></pre><p>​<br>    # archive page title<br>    archive:<br>        title: archives<br>        description: 可以根据归档日期检索所有文件</p><pre><code class="hljs"># Sidebar settingssidebar: truesidebar-about-description: &quot;看看你的时间都花在哪了&quot;sidebar-avatar: /image/20181215001153.jpg    # img CDN pathcdn-url: &quot;http://pjqhk6p7v.bkt.clouddn.com/&quot;reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！wechatpay: /image/WeChatQR.jpgalipay: /image/aipay.jpg  post_copyright:  enable: true   author: yuting   copyright_text: 作者拥有版权，请注明出处转载。</code></pre><p>​<br>    # create by yuting</p><pre><code class="hljs">#gitmentgitment:  #id：  owner: YUTING0907  repo: YUTING0907.github.io  client:     id: d9972ee4a19b27a1c952     secret: 717a42cc6c5bb05dbf6b53180def49e7e4e42501</code></pre><h4 id="在Github上设置OAuth-Apps"><a href="#在Github上设置OAuth-Apps" class="headerlink" title="在Github上设置OAuth Apps"></a>在Github上设置OAuth Apps</h4><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/rHYddItm.czImPrq4LkOLNBA6a4sI3MOcBU1oT*pxLc!/b/dL8AAAAAAAAA&bo=FQU5AgAAAAADFxk!&rf=viewer_4&t=5"></p><p>生成一个OAuth Apps<br>然后在 _config.yml里设置上id，secret,如下图</p><pre><code class="hljs">#gitmentgitment:  #id：  owner: YUTING0907  repo: YUTING0907.github.io  client:     id: d9972ee4a1     secret: 717a42cc6c5bb05dbf6b5318</code></pre><h4 id="启用新下载的主题"><a href="#启用新下载的主题" class="headerlink" title="启用新下载的主题"></a>启用新下载的主题</h4><p>在刚打开的的_config.yml 文件中，找到“# Extensions”，把默认主题 landscape 修改为刚刚下载下来的主题名：Aisina。</p><h4 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h4><p>git bash 里执行</p><pre><code class="hljs">$ cd themes/主题名$ git pull</code></pre><p>每次修改都要hexo g 生成一下<br>再hexo d部署一下</p><h3 id="头像设置（侧边栏的个人简介）"><a href="#头像设置（侧边栏的个人简介）" class="headerlink" title="头像设置（侧边栏的个人简介）"></a>头像设置（侧边栏的个人简介）</h3><pre><code class="hljs">Sidebar settingssidebar: truesidebar-about-description: &quot;看看你的时间都花在哪了&quot;sidebar-avatar: /image/20181215001153.jpg   </code></pre><p>sidebar-avatar后面跟的就是你想设置的头像，事先你需要把照片放在image目录下。<br>sidebar-about-description就是描述</p><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/SbJ1ZOnLnpvS1gm8OhOJrR7zbl5ryDTGti7fLcy7iQw!/b/dL8AAAAAAAAA&bo=6gBGAQAAAAADF58!&rf=viewer_4&t=5"></p><p>这是我设置成功后的效果。</p><h3 id="图片的显示"><a href="#图片的显示" class="headerlink" title="图片的显示"></a>图片的显示</h3><h5 id="1-1设置站点配置-config-yml"><a href="#1-1设置站点配置-config-yml" class="headerlink" title="1.1设置站点配置_config.yml"></a>1.1设置站点配置_config.yml</h5><p>post_asset_folder: true</p><h5 id="1-2-cdn-url"><a href="#1-2-cdn-url" class="headerlink" title="1.2 cdn-url"></a>1.2 cdn-url</h5><p>   注册一个你自己的七牛CDN ，然后拷贝你自己的CDN URL</p><p>在七牛里上传图片</p><p><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/mHc17tcJoHv8gOszj14QM.oRNhvP7NU8MgFoM2CTYOE!/b/dDIBAAAAAAAA&bo=DwVFAgAAAAADF38!&rf=viewer_4&t=5"></p><p>复制外链</p><p>这里可以不选择运用七牛<br>还可以安装插件</p><pre><code class="hljs">npm install https://github.com/CodeFalling/hexo-asset-image --save</code></pre><p> 这个插件在运行hexo n “xxxx”来生成新md博文时，&#x2F;source&#x2F;_posts文件夹内除了xxxx.md文件还有一个同名的文件夹，你可以讲要引用的照片放在此目录下。然后只需要在xxxx.md中按照markdown的格式引入图片：</p><pre><code class="hljs">! [ 这里输入图片描述] ( xxxx/图片名.jpg )</code></pre><p>这里我没有尝试成功，我看网上有很多引用成功的都是在hexo g生成页面后，进入public文件中查看相关字段，可以发现，html标签内的语句是&lt; img src&#x3D;”…xxxx&#x2F;图片名.jpg”&gt;，而不是&lt; img src&#x3D;”xxxx&#x2F;图片名.jpg&gt;，而我生成的是&lt; img src&#x3D;”xxxx&#x2F;图片名.jpg&gt;，不知道什么原因。大家可以尝试造作一下。</p><h5 id="1-3-运用-复制过来的连接"><a href="#1-3-运用-复制过来的连接" class="headerlink" title="1.3 运用![](复制过来的连接)"></a>1.3 运用<code>![](复制过来的连接)</code></h5><p><code>![](复制过来的连接)</code>格式即可在文章中显示照片。</p><p>博文标题背景图片</p><pre><code class="hljs">header-img: &quot;http://sometest.png&quot;</code></pre><p>如果你没有设置的话，会默认使用 _config.yml 下 post-default-img指定的背景图像</p><p>使用 cdn 标签，切换单页面背景图片的URL</p><pre><code class="hljs">cdn: &#39;header-off&#39; header-img: &quot;http://www.imagestest.com/god.png&quot;</code></pre><h3 id="链接weibo，知乎，github"><a href="#链接weibo，知乎，github" class="headerlink" title="链接weibo，知乎，github"></a>链接weibo，知乎，github</h3><pre><code class="hljs"># RSS:weibo_username: ytfantasticzhihu_username: yu-ting-66-78github_username: YUTING0907twitter_username: YUTINGfacebook_username: YUTINGlinkedin_username: </code></pre><p>上述配置可以在你的网站上链接上你的weibo，知乎，github等平台页面。前提是你要设置weibo域名，知乎域名等平台域名，不懂如何设置域名可以自行百度啦<del>操作很简单的</del></p><iframe src="https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html " style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建自己的个人网站(上)</title>
    <link href="/2018/12/15/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99-%E4%B8%8A/"/>
    <url>/2018/12/15/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99-%E4%B8%8A/</url>
    
    <content type="html"><![CDATA[<p>本篇个人网站搭建系列博文是基于:GitHub+Hexo。<br>难度指数：♥♥<br>系统环境：win8</p><p><strong>前言：</strong>真正搭建这个网站框架的时间也就花了两个晚上，不需要你有多么深厚的编程基础，可能会遇到一些坑，就需要你遇到问题解决问题的能力了，还有搜功，因为很多你遇到的问题很多人都遇到了，太阳底下没有新鲜事儿，会搜索基本解决了大多数问题。</p><h3 id="第一步：准备必要的软件"><a href="#第一步：准备必要的软件" class="headerlink" title="第一步：准备必要的软件"></a>第一步：准备必要的软件</h3><p><strong>1.Git下载</strong><br>     <a href="https://git-scm.com/downloads">Git</a>,选择适合自己电脑的环境，一路Next下来就行了。</p><p><strong>2、安装node.js</strong><br>    <a href="http://nodejs.cn/">node.js</a>,也是基于自己的电脑环境选择下载，下载最新版本，在Windows安装时务必选择全部组件，包括勾选<code>Add to Path</code>。安装完成后，在Windows环境下，打开命令行提示符，输入<code>node -v</code>，看到版本号正常输出，则安装完成。<br>           <img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/rm7.QvW1mxRhb6sdXnYhiskAulDc0JF9F0bBkPmX50s!/b/dFYBAAAAAAAA&bo=4AAqAAAAAAADF*g!&rf=viewer_4&t=5" alt="在这里插入图片描述"></p><h3 id="第二步：Github注册与配置"><a href="#第二步：Github注册与配置" class="headerlink" title="第二步：Github注册与配置"></a>第二步：Github注册与配置</h3><h4 id="1-注册Github"><a href="#1-注册Github" class="headerlink" title="1.注册Github"></a>1.注册Github</h4><p>点击→<a href="https://github.com/">https://github.com</a>右上角sign up<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/5x0MOWtEd4jqwAH5TXRe1qhXefHiOiLCsLpl0vLFZ04!/b/dFQBAAAAAAAA&bo=eQRqAgAAAAADFyc!&rf=viewer_4&t=5" alt="在这里插入图片描述"><br>注册完成后，记住自己的用户名，因为后续个人网站的网址格式为：username.github.io<br>这个username就是你的github用户名。<br>这里我的GitHub账号是：YUTING0907<br>个人网站：YUTING0907.github.io<br>你后续也可以自己绑定域名，叫个更炫酷的名字XXX.com</p><h4 id="2-创建Repository"><a href="#2-创建Repository" class="headerlink" title="2.创建Repository"></a>2.创建Repository</h4><p>登陆GitHub，点击右上角的+，会出现New repository创建一个与你博客相关你的Repository进行管理，之后你的博客都会在GitHub的这个Repository里同步更新。<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/*bhCJMsQQlH5*0hTH7p1in230nG62njUjBHVSaqhKn0!/b/dD4BAAAAAAAA&bo=DQVSAgAAAAADF2o!&rf=viewer_4&t=5" alt="在这里插入图片描述"></p><p>Repository的名字是username.github.io，比如我的YUTING0907.github.io。其余可以先不填，点击Create repository</p><h4 id="3-配置SSH-Keys"><a href="#3-配置SSH-Keys" class="headerlink" title="3.配置SSH Keys"></a>3.配置SSH Keys</h4><p>SSH Keys用来使本地git项目与GitHub联系，这样能在GitHub上的博客项目是最新更新的。</p><p>检查SSH Keys的设置<br><strong>I. 开始–所有应用–找到git bash</strong></p><p><strong>II. 检查你电脑里现有的SSH Key</strong><br>   $ cd ~&#x2F;.ssh<br>如果显示 No such file or directory，说明这是你第一次用git<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/3KDk1iRk5gEdR1LEgUg.TqHLInCwu2ZEY7D9QyUCZ*4!/b/dAgBAAAAAAAA&bo=NAE5AAAAAAADFz4!&rf=viewer_4&t=5" alt="在这里插入图片描述"></p><p><strong>III. 接下来生成新的SSH Key:</strong><br>$ ssh-keygen -t rsa -C “邮件地址”<br>Generating public&#x2F;private rsa key pair.<br>Enter file in which to save the key (&#x2F;Users&#x2F;your_user_directory&#x2F;.ssh&#x2F;id_rsa):&lt;回车就好&gt;</p><p>这里的邮箱地址，输入注册 Github 的邮箱地址</p><p> 然后系统会要你输入密码：<br>Enter passphrase (empty for no passphrase):&lt;设置密码&gt;<br>Enter same passphrase again:&lt;再次输入密码&gt;</p><p>再回车，这里会提示你输入一个密码，作为你提交项目时使用</p><p><strong>注意：</strong>输入密码的时候没有输入痕迹的，不要以为什么也没有输入。<br>最后看到这样的界面，就成功设置ssh key了：<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/mYRnwZ8YFWIqmMRyqUbc5ob0slTpOiDo96NSAVjeo08!/b/dLwAAAAAAAAA&bo=5gEpAQAAAAADF*0!&rf=viewer_4&t=5" alt="在这里插入图片描述"></p><h4 id="IV-添加SSH-Key到GitHub上"><a href="#IV-添加SSH-Key到GitHub上" class="headerlink" title="IV. 添加SSH Key到GitHub上"></a>IV. 添加SSH Key到GitHub上</h4><p>在本地文件夹找到id_rsa.pub文件，看上面的图片第四行的位置告诉你存在哪里了，没有的话可能是隐藏了，勾选一下文件扩展名 隐藏的项目。</p><p>回到你的GitHub主页，右上角点击头像选中Setting</p><p>继续选中左边菜单栏的SSH and GPG keys</p><p>Title最好写，随便写。否则可能出现各种各样的二逼问题<br>Key部分就是放刚才复制的内容了，点击Add SSH key</p><h4 id="V-测试"><a href="#V-测试" class="headerlink" title="V.测试"></a>V.测试</h4><p>git bash里输入代码：<code>$ ssh -T git@github.com</code> </p><pre><code class="hljs">The authenticity of host &#39;GitHub.com (52.74.227.119)&#39; can&#39;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)</code></pre><p>输入yes，回车<br>按照提示输入刚才设置的密码，回车<br>You’ve successfully authenticated…<br>设置成功！</p><h4 id="VI-设置用户信息"><a href="#VI-设置用户信息" class="headerlink" title="VI.设置用户信息"></a>VI.设置用户信息</h4><pre><code class="hljs">$ git config --global user.name &quot;YUTING0907&quot; </code></pre><p>&#x2F;&#x2F;输入注册时的username</p><pre><code class="hljs">$ git config --global user.email  &quot;YUTING9597@163.COM&quot; </code></pre><p>&#x2F;&#x2F;填写注册邮箱<br>把名称和邮箱替换成你自己的,SSH Key就配置成功啦！<br>本机已成功连接到 github。</p><h3 id="第三步：搭建Hexo博客"><a href="#第三步：搭建Hexo博客" class="headerlink" title="第三步：搭建Hexo博客"></a>第三步：搭建Hexo博客</h3><p><strong>利用npm命令安装hexo</strong><br>npm Node Package Manager是随同NodeJS一起安装的包管理工具，想了解更多可以自行去百度。</p><pre><code class="hljs">$ npm install -g hexo</code></pre><p>安装完成后，在本地创建一个与 Repository中博客项目同名的文件夹username.github.io(如D:&#x2F;YUTING0907.github.io)在文件夹上点击鼠标右键,选择 Git bash here（可以代替命令行指示符的存在~）,【这一步的作用是因为以后博客部署和更新都要在此文件夹下】</p><p><strong>hexo初始化</strong></p><pre><code class="hljs">hexo init</code></pre><p><strong>安装依赖包</strong></p><pre><code class="hljs">$ npm install</code></pre><p>这里我踩坑了，<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/95hREaV7iXFGebAzGGu01Ayke2nVXhftPOPm1vntWyg!/b/dL8AAAAAAAAA&bo=rQFfAQAAAAADF8A!&rf=viewer_4&t=5" alt="在这里插入图片描述"></p><p>然后上百度、google各种找解决办法，后来发现是因为<br>Your versions of node and npm are years old and no longer supported。版本太低了，后来更新node.js版本就好了.<br><a href="https://github.com/npm/npm/issues/8488">npm install 报错解决办法</a><br>这里放上更新node.js的方法<br>方法一：执行下列代码</p><pre><code class="hljs">npm install npm@latest -g</code></pre><p>但我的电脑出现了如下报错，如有朋友出现更新错误，课移步方法二。<br>C:\Users\lenovo\AppData\Roaming\npm\node_modules\npm\bin\npm-cli.js:79<br>      let notifier &#x3D; require(‘update-notifier’)({pkg})<br>      ^^^<br>方法二:<br>1.到node官网（<a href="https://nodejs.org/en/%EF%BC%89">https://nodejs.org/en/）</a><br>下载最新版或者官网推荐版本，我下载的是10.14.1。</p><p>2.将下载的文件安装到之前安装node.js的地方<br>通过where node命令查看node路径<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/IPFuuHtZ8RT5DD1PnwVAUJeaBY3smLyDDB3Yvka.x4g!/b/dL4AAAAAAAAA&bo=AQEoAAAAAAADFxo!&rf=viewer_4&t=5" alt="在这里插入图片描述"></p><p>将刚刚下载的文件放到上面查到的路径中<br>双击刚刚下载的文件,点击next 具体安装方法和之前第一次安装一样，但是【<strong>注意在选择路径的时候要选成上面查到的node路径中</strong>】</p><p>3.安装完成。通过npm -v和node -v查看当前版本号</p><p><strong>确保git部署</strong></p><pre><code class="hljs">$ npm install hexo-deployer-git --save</code></pre><p><strong>本地查看</strong><br>做到这里恭喜你😀，现在已经搭建好本地的 Hexo 博客了，执行完下面的命令就可以到浏览器输入 localhost:4000 查看到啦！<br>$ hexo g   &#x2F;&#x2F;生成更新网站<br>$ hexo s   &#x2F;&#x2F;这一步是让你可以在本地localhost:4000可以浏览网站，一个服务预览的作用，退出服务按ctrl+c<br>$ hexo d &#x2F;&#x2F;部署网站</p><p>【小提醒】如果在配置 SSH key 时设置了密码，执行 hexo d 命令上传文件时需要输入密码进行确认，会出现一个小框框，让你输入密码，你输入密码即可部署更新。</p><p>执行完 hexo init 命令后会给一个默认的主题：landscape</p><h3 id="最后一步：将博客部署到username-github-io"><a href="#最后一步：将博客部署到username-github-io" class="headerlink" title="最后一步：将博客部署到username.github.io"></a>最后一步：将博客部署到username.github.io</h3><p><strong>复制SSH码</strong></p><p>进入 Github 个人主页中的 Repository，复制新建的独立博客项目username.github.io的 SSH码<br><img src="http://m.qpic.cn/psb?/V10c1VbY1Y4Fvm/3S8S4ph4RLihnpcoxSNWWtYoCcwUhNHDmmzmJVypCeQ!/b/dLgAAAAAAAAA&bo=cgQpAgAAAAADF28!&rf=viewer_4&t=5" alt="在这里插入图片描述"></p><p><strong>编辑整站配置文件</strong><br>打开 D:&#x2F;username.github.io&#x2F;_config.yml,把刚刚复制的 SSH码粘贴到repository：后面</p><pre><code class="hljs">deploy:  type: git  repository: git@github.com:username/username.github.io.git  branch: master</code></pre><p>冒号后一定要空一格。否则会报FATAL can not read a block mapping entry的错。</p><p>当当当当~~到这里你已经拥有一个属于自己的网站，可能有点简陋，但是整个框架已经搭起来了。期待下一篇把网站拾掇得更好吧。</p><p>搭建参考：<br><a href="http://codewithzhangyi.com/archives/">如何搭建自己的个人网站</a></p><p><a href="https://blog.csdn.net/H_duolalu/article/details/80215580">更新node</a></p><p><a href="https://github.com/npm/npm/issues/8488">npm install错误</a></p><iframe src="https://rawcdn.githack.com/YUTING0907/donate-page-yu/df1732a5993401f9d372918c3f7680ca0e1c2ca3/simple/index.html " style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019 do better</title>
    <link href="/2018/12/12/article/"/>
    <url>/2018/12/12/article/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="95928444fa95aed4bf3c426c499129adbe5cadb790d90394a1241473023b07e9">0a7e00277d1118ebcbb3ab2eced6aaa3d4cebee9e9aba680b39c2710d7492cca220f54b15bbaf9f97338a039234502ecc3b044985600c1920d175ed752a16d9fee21e1fe08db803512409cadf7a3dedf2b782d26f77412fc631397e0df5bab425f7ec801885dba34bacc497d8fa50befc214dcd16891c953b908f738b9c4de3e2df0457670f8c3f741fb23c1edfbdd8538b51e0ceb54e6bdc3e0708bb59515383f20440d658ebaee9f1096e366727a2fae0c42c4e84a1dd324909307c4477825f8a64126048c9c83243cb31ca5c9ab4ed8d4d2d78aa3ace4bd625a882aac967041bcaa173a50b122bc0278d50d30b1e6c3d6e19be0afa1ce6ede58afcd4b6aebc9658a954af7bee8a1037b16c5584fbb3aa5418edee8af8788fc555ae4b3eb25fad0cccf8dab02ac1eb6a20988f56b05f0ab2a99d93c6e6b9c527f3f65811cadc7772e54d5c3bac9ac6b02ca80f7483e4b24698209accbd792b9d8b72780995d37a91059d36b8f3ad4c87d72de7c45f44271db198ce5af89b06c093ac57d37d463e61ee47abb41e6191b8f5c356a462c88196424851f794a79d33a901d6a0d1722337fac1e07b8128b3ad26f1c4fa461ccec07dcfa0c713a628fcf484599cf5cd75e744ab1e075646821585227ce9aa86588c61b1310f5fa08ff72e8e345f772ff5da634ce560ee81cc245e7c0ff55cf4b16d0be61add8dddcf131859f7413f392fa326c4d2759d5bfbf7d2a430532c011255c8f98054693c0e4a0848c184dfc2d02d499f86122b32c98602b3824b9835a96e4be62a481069bb31f7c748178b5c35d30b660418a6053ab9a674aae2bba9b5b1118b1c10d0fa4db566998602530e0ab2281c4d7256c718f8dd8313a05226c011a9887901d71d14191d11461f184f55d3592929cfe748c3db92b4833b18381280a67745a26113bc5f5d3de6f8829d8a6a7acf99ca7cf1da4b6e7144b008916d4efd621b669a8e0aecd0afffcbd4910a3ad9c49f600509d0bb4a40a18a46e2041909b27ea8e7562836b434be04d2f33622bb829967db99727b50bd09155163aef07dcea543c581d2372057770c9da479723f8f8ac2de28932ab709c6c755bb0faa95a6e1c6e86331075838d6d705d9be19a3c3fd711dc30c0521fa9dafac708d7453eaa0a5f57d4a676cebfa8085e14931a87b78bf8977dd50e46c5ccd83c93ec02283ff07a7fc4e31fd77985872acf2070bfb42096681309867e996471da2a4fa4ef79bd21e14365e19c6776d38b00a5d54690df5e2d009b0cddc367aa2a9e6a58acc9f263ca8270dbd3095a0ab99fd8c2b45d318846f5b176cdb5103bec3b2311b26df1603eb6f9c6eeb357ccbda2f4246597594dbef03f06430dc8fd77028277e2b3a98a33b6a0388d7c21b00f767d49a56fe74ca6a6bbe1ed912944fb21319c104626e2a9eba991e33e06172473a658f18aafa1843f6c3f56ed305d6a452eb045fd8ee07f3b60c80b540727a5ad0ba7b61b0e3eec413d278f92df6f55c77a87a41cb519c27a13b2d37f95a187e1261e15a8123f2e94b5c900a2f535a30917eee61d523afe1648536a6a8a66c9773f9fff890b7210515b419c8eaa5b3fc2b68d1ec0b3e811a79880e0d519b1dee62d6bc9f4a2bd495a8eb6273562d738</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
